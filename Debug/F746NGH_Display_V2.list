
F746NGH_Display_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020cc  0801fbdc  0801fbdc  0002fbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002162  08021ca8  08021ca8  00031ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  08023e0c  08023e0c  00033e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00017700  08023fc4  08023fc4  00033fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000020  0803b6c4  0803b6c4  0004b6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0803b6e4  0803b6e4  00050100  2**0
                  CONTENTS
  8 .ARM          00000008  0803b6e4  0803b6e4  0004b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0803b6ec  0803b6ec  00050100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0803b6ec  0803b6ec  0004b6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0803b700  0803b700  0004b700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  0803b708  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00011a9c  20000100  0803b808  00050100  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20011b9c  0803b808  00051b9c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00050100  2**0
                  CONTENTS, READONLY
 16 .debug_info   00094a94  00000000  00000000  00050130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001171b  00000000  00000000  000e4bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000039c8  00000000  00000000  000f62e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003570  00000000  00000000  000f9ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000347a6  00000000  00000000  000fd218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00041825  00000000  00000000  001319be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00120b48  00000000  00000000  001731e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00293d2b  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fce0  00000000  00000000  00293dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fbc4 	.word	0x0801fbc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	0801fbc4 	.word	0x0801fbc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005be:	f000 f9b5 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f2:	2300      	movs	r3, #0
 80005f4:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f6:	f000 f999 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
 80005fe:	e010      	b.n	8000622 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	21a8      	movs	r1, #168	; 0xa8
 8000606:	4618      	mov	r0, r3
 8000608:	f009 fe2e 	bl	800a268 <TS_IO_Read>
 800060c:	4603      	mov	r3, r0
 800060e:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b51      	cmp	r3, #81	; 0x51
 8000616:	d101      	bne.n	800061c <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	3301      	adds	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d802      	bhi.n	800062e <ft5336_ReadID+0x4e>
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0e8      	beq.n	8000600 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	b29b      	uxth	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f97d 	bl	8000948 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f933 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f009 fdf7 	bl	800a268 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000011c 	.word	0x2000011c

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fd44 	bl	800a268 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 fd36 	bl	800a268 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f009 fd1b 	bl	800a268 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f009 fd0d 	bl	800a268 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000011c 	.word	0x2000011c
 8000890:	20000120 	.word	0x20000120

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f009 fcc0 	bl	800a234 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 fcac 	bl	800a234 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2000011c 	.word	0x2000011c

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093a:	4b02      	ldr	r3, [pc, #8]	; (8000944 <ft5336_I2C_InitializeIfRequired+0x18>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
  }
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000011c 	.word	0x2000011c

08000948 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <PollingInit>:
uint8_t uartMsgData[2];
uint8_t msgIndex = 0;
uint8_t msgRdyFlag = 0;


void PollingInit(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart6, uartMsgData, 1);
 8000968:	2201      	movs	r2, #1
 800096a:	4903      	ldr	r1, [pc, #12]	; (8000978 <PollingInit+0x14>)
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <PollingInit+0x18>)
 800096e:	f005 fcd9 	bl	8006324 <HAL_UART_Receive_IT>

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000134 	.word	0x20000134
 800097c:	2000036c 	.word	0x2000036c

08000980 <PollingRoutine>:

void PollingRoutine(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

	if(msgRdyFlag)
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <PollingRoutine+0x24>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d009      	beq.n	80009a0 <PollingRoutine+0x20>
	{
		xSemaphoreGive(binarySemUartMsgHandle);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <PollingRoutine+0x28>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	f007 fa97 	bl	8007ec8 <xQueueGenericSend>
       msgRdyFlag = 0;
 800099a:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <PollingRoutine+0x24>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
	}
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000137 	.word	0x20000137
 80009a8:	20000498 	.word	0x20000498

080009ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	if(msgIndex == 0){
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0x1a>
		memset(&uartMsgBuf, 0 , sizeof(uartMsgBuf));
 80009bc:	2210      	movs	r2, #16
 80009be:	2100      	movs	r1, #0
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009c2:	f01e f969 	bl	801ec98 <memset>
	}
	if (uartMsgData[0] != 13) {
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b0d      	cmp	r3, #13
 80009cc:	d00b      	beq.n	80009e6 <HAL_UART_RxCpltCallback+0x3a>
		uartMsgBuf[msgIndex++] = uartMsgData[0];
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	b2d1      	uxtb	r1, r2
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009d8:	7011      	strb	r1, [r2, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009e2:	5499      	strb	r1, [r3, r2]
 80009e4:	e00c      	b.n	8000a00 <HAL_UART_RxCpltCallback+0x54>
	}
	else
	{
		uartMsgBuf[msgIndex] = uartMsgData[0];
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_UART_RxCpltCallback+0x6c>)
 80009f2:	5499      	strb	r1, [r3, r2]
		msgIndex=0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]

		msgRdyFlag = 1;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_UART_RxCpltCallback+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(huart, uartMsgData, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	4906      	ldr	r1, [pc, #24]	; (8000a1c <HAL_UART_RxCpltCallback+0x70>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f005 fc8d 	bl	8006324 <HAL_UART_Receive_IT>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000136 	.word	0x20000136
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	20000137 	.word	0x20000137

08000a24 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
}
 8000a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a62:	f3bf 8f6f 	isb	sy
}
 8000a66:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <SCB_EnableICache+0x48>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a88:	f3bf 8f4f 	dsb	sy
}
 8000a8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8e:	f3bf 8f6f 	isb	sy
}
 8000a92:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
}
 8000ab6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000abe:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0b5b      	lsrs	r3, r3, #13
 8000ac4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ad2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	015a      	lsls	r2, r3, #5
 8000ad8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000adc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ae2:	4911      	ldr	r1, [pc, #68]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1ef      	bne.n	8000ad4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	1e5a      	subs	r2, r3, #1
 8000af8:	60fa      	str	r2, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1e5      	bne.n	8000aca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000afe:	f3bf 8f4f 	dsb	sy
}
 8000b02:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SCB_EnableDCache+0x84>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b10:	f3bf 8f4f 	dsb	sy
}
 8000b14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b16:	f3bf 8f6f 	isb	sy
}
 8000b1a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b096      	sub	sp, #88	; 0x58
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b32:	f7ff ff91 	bl	8000a58 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b36:	f7ff ffb5 	bl	8000aa4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f001 fa4b 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 f87b 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f000 fb53 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000b46:	f000 fa87 	bl	8001058 <MX_DMA_Init>
  MX_FMC_Init();
 8000b4a:	f000 faa3 	bl	8001094 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8000b4e:	f000 f9f7 	bl	8000f40 <MX_QUADSPI_Init>
  MX_CRC_Init();
 8000b52:	f000 f8df 	bl	8000d14 <MX_CRC_Init>
  MX_LTDC_Init();
 8000b56:	f000 f971 	bl	8000e3c <MX_LTDC_Init>
  MX_USART6_UART_Init();
 8000b5a:	f000 fa4d 	bl	8000ff8 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 8000b5e:	f000 f92d 	bl	8000dbc <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000b62:	f000 fa19 	bl	8000f98 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000b66:	f000 f8f7 	bl	8000d58 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 8000b6a:	f009 fba2 	bl	800a2b2 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000b6e:	f009 fb99 	bl	800a2a4 <MX_TouchGFX_PreOSInit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemUartMsg */
  osSemaphoreDef(binarySemUartMsg);
 8000b72:	2300      	movs	r3, #0
 8000b74:	657b      	str	r3, [r7, #84]	; 0x54
  binarySemUartMsgHandle = osSemaphoreCreate(osSemaphore(binarySemUartMsg), 1);
 8000b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 ff49 	bl	8007a14 <osSemaphoreCreate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <main+0xe8>)
 8000b86:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <main+0xec>)
 8000b8a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b8e:	461d      	mov	r5, r3
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 fefd 	bl	800799e <osThreadCreate>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <main+0xf0>)
 8000ba8:	6013      	str	r3, [r2, #0]

  /* definition and creation of hardwareTask */
  osThreadDef(hardwareTask, StartHardwareTask, osPriorityNormal, 0, 512);
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <main+0xf4>)
 8000bac:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	6023      	str	r3, [r4, #0]
  hardwareTaskHandle = osThreadCreate(osThread(hardwareTask), NULL);
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 feec 	bl	800799e <osThreadCreate>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <main+0xf8>)
 8000bca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myGFXtask */
  osThreadDef(myGFXtask, StartGFXTask, osPriorityNormal, 0, 8192);
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <main+0xfc>)
 8000bce:	f107 0418 	add.w	r4, r7, #24
 8000bd2:	461d      	mov	r5, r3
 8000bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd8:	682b      	ldr	r3, [r5, #0]
 8000bda:	6023      	str	r3, [r4, #0]
  myGFXtaskHandle = osThreadCreate(osThread(myGFXtask), NULL);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 fedb 	bl	800799e <osThreadCreate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <main+0x100>)
 8000bec:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskUartMsg */
  osThreadDef(taskUartMsg, StartTaskUartMsg, osPriorityIdle, 0, 128);
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <main+0x104>)
 8000bf0:	1d3c      	adds	r4, r7, #4
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	6023      	str	r3, [r4, #0]
  taskUartMsgHandle = osThreadCreate(osThread(taskUartMsg), NULL);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 fecc 	bl	800799e <osThreadCreate>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <main+0x108>)
 8000c0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c0c:	f006 fec0 	bl	8007990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <main+0xe4>
 8000c12:	bf00      	nop
 8000c14:	20000498 	.word	0x20000498
 8000c18:	0801fc10 	.word	0x0801fc10
 8000c1c:	20000488 	.word	0x20000488
 8000c20:	0801fc24 	.word	0x0801fc24
 8000c24:	2000048c 	.word	0x2000048c
 8000c28:	0801fc38 	.word	0x0801fc38
 8000c2c:	20000490 	.word	0x20000490
 8000c30:	0801fc4c 	.word	0x0801fc4c
 8000c34:	20000494 	.word	0x20000494

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f01e f826 	bl	801ec98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <SystemClock_Config+0xd8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <SystemClock_Config+0xd8>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <SystemClock_Config+0xd8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca0:	2319      	movs	r3, #25
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ca4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 feca 	bl	8004a50 <HAL_RCC_OscConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cc2:	f000 fb8d 	bl	80013e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cc6:	f003 fdb1 	bl	800482c <HAL_PWREx_EnableOverDrive>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 fb86 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2106      	movs	r1, #6
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 f950 	bl	8004f98 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cfe:	f000 fb6f 	bl	80013e0 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	; 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <MX_CRC_Init+0x40>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_CRC_Init+0x3c>)
 8000d3e:	f001 fa8b 	bl	8002258 <HAL_CRC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d48:	f000 fb4a 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000138 	.word	0x20000138
 8000d54:	40023000 	.word	0x40023000

08000d58 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <MX_DMA2D_Init+0x60>)
 8000d60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000d8e:	f001 fec9 	bl	8002b24 <HAL_DMA2D_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d98:	f000 fb22 	bl	80013e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_DMA2D_Init+0x5c>)
 8000da0:	f002 f81a 	bl	8002dd8 <HAL_DMA2D_ConfigLayer>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000daa:	f000 fb19 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000015c 	.word	0x2000015c
 8000db8:	4002b000 	.word	0x4002b000

08000dbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <MX_I2C3_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <MX_I2C3_Init+0x7c>)
 8000dca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000df8:	f002 fb52 	bl	80034a0 <HAL_I2C_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e02:	f000 faed 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000e0a:	f003 f8df 	bl	8003fcc <HAL_I2CEx_ConfigAnalogFilter>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e14:	f000 fae4 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_I2C3_Init+0x74>)
 8000e1c:	f003 f921 	bl	8004062 <HAL_I2CEx_ConfigDigitalFilter>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 fadb 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000019c 	.word	0x2000019c
 8000e34:	40005c00 	.word	0x40005c00
 8000e38:	00c0eaff 	.word	0x00c0eaff

08000e3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2234      	movs	r2, #52	; 0x34
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f01d ff25 	bl	801ec98 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e50:	4a3a      	ldr	r2, [pc, #232]	; (8000f3c <MX_LTDC_Init+0x100>)
 8000e52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e74:	2209      	movs	r2, #9
 8000e76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e7a:	2235      	movs	r2, #53	; 0x35
 8000e7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e80:	220b      	movs	r2, #11
 8000e82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e86:	f240 2215 	movw	r2, #533	; 0x215
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e8e:	f240 121b 	movw	r2, #283	; 0x11b
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e96:	f240 2235 	movw	r2, #565	; 0x235
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000e9e:	f240 121d 	movw	r2, #285	; 0x11d
 8000ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ebc:	481e      	ldr	r0, [pc, #120]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000ebe:	f003 f91d 	bl	80040fc <HAL_LTDC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f000 fa8a 	bl	80013e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ed0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ed4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000eda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ede:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ee4:	23ff      	movs	r3, #255	; 0xff
 8000ee6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ef6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000efc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_LTDC_Init+0xfc>)
 8000f22:	f003 fa73 	bl	800440c <HAL_LTDC_ConfigLayer>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f2c:	f000 fa58 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	; 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	40016800 	.word	0x40016800

08000f40 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <MX_QUADSPI_Init+0x54>)
 8000f48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f5e:	2218      	movs	r2, #24
 8000f60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f64:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f68:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_QUADSPI_Init+0x50>)
 8000f7e:	f003 fca5 	bl	80048cc <HAL_QSPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000f88:	f000 fa2a 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000298 	.word	0x20000298
 8000f94:	a0001000 	.word	0xa0001000

08000f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_USART1_UART_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x58>)
 8000fdc:	f005 f954 	bl	8006288 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f9fb 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002e4 	.word	0x200002e4
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <MX_USART6_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001008:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART6_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART6_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART6_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART6_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART6_UART_Init+0x58>)
 800103c:	f005 f924 	bl	8006288 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f000 f9cb 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000036c 	.word	0x2000036c
 8001054:	40011400 	.word	0x40011400

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_DMA_Init+0x38>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <MX_DMA_Init+0x38>)
 8001064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_DMA_Init+0x38>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2039      	movs	r0, #57	; 0x39
 800107c:	f001 f8c2 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001080:	2039      	movs	r0, #57	; 0x39
 8001082:	f001 f8db 	bl	800223c <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010ae:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <MX_FMC_Init+0x150>)
 80010b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010b8:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010cc:	2240      	movs	r2, #64	; 0x40
 80010ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80010d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010de:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <MX_FMC_Init+0x14c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010f8:	2307      	movs	r3, #7
 80010fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001100:	2307      	movs	r3, #7
 8001102:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001104:	2303      	movs	r3, #3
 8001106:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_FMC_Init+0x14c>)
 8001116:	f004 fd47 	bl	8005ba8 <HAL_SDRAM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001120:	f000 f95e 	bl	80013e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */


  __IO uint32_t tmpmrd = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_FMC_Init+0x154>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <MX_FMC_Init+0x154>)
 8001130:	2210      	movs	r2, #16
 8001132:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_FMC_Init+0x154>)
 8001136:	2201      	movs	r2, #1
 8001138:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <MX_FMC_Init+0x154>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	4928      	ldr	r1, [pc, #160]	; (80011e8 <MX_FMC_Init+0x154>)
 8001146:	4826      	ldr	r0, [pc, #152]	; (80011e0 <MX_FMC_Init+0x14c>)
 8001148:	f004 fd62 	bl	8005c10 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 ff7d 	bl	800204c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_FMC_Init+0x154>)
 8001154:	2202      	movs	r2, #2
 8001156:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_FMC_Init+0x154>)
 800115a:	2210      	movs	r2, #16
 800115c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_FMC_Init+0x154>)
 8001160:	2201      	movs	r2, #1
 8001162:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_FMC_Init+0x154>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116e:	491e      	ldr	r1, [pc, #120]	; (80011e8 <MX_FMC_Init+0x154>)
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_FMC_Init+0x14c>)
 8001172:	f004 fd4d 	bl	8005c10 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_FMC_Init+0x154>)
 8001178:	2203      	movs	r2, #3
 800117a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_FMC_Init+0x154>)
 800117e:	2210      	movs	r2, #16
 8001180:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_FMC_Init+0x154>)
 8001184:	2208      	movs	r2, #8
 8001186:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_FMC_Init+0x154>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800118e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001192:	4915      	ldr	r1, [pc, #84]	; (80011e8 <MX_FMC_Init+0x154>)
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <MX_FMC_Init+0x14c>)
 8001196:	f004 fd3b 	bl	8005c10 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800119a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800119e:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_FMC_Init+0x154>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_FMC_Init+0x154>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_FMC_Init+0x154>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <MX_FMC_Init+0x154>)
 80011b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011bc:	490a      	ldr	r1, [pc, #40]	; (80011e8 <MX_FMC_Init+0x154>)
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_FMC_Init+0x14c>)
 80011c0:	f004 fd26 	bl	8005c10 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011c4:	f240 712b 	movw	r1, #1835	; 0x72b
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_FMC_Init+0x14c>)
 80011ca:	f004 fd56 	bl	8005c7a <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80011ce:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011d2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011d6:	601a      	str	r2, [r3, #0]



  /* USER CODE END FMC_Init 2 */
}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000454 	.word	0x20000454
 80011e4:	a0000140 	.word	0xa0000140
 80011e8:	2000049c 	.word	0x2000049c

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b58      	ldr	r3, [pc, #352]	; (8001364 <MX_GPIO_Init+0x178>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a57      	ldr	r2, [pc, #348]	; (8001364 <MX_GPIO_Init+0x178>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b55      	ldr	r3, [pc, #340]	; (8001364 <MX_GPIO_Init+0x178>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b52      	ldr	r3, [pc, #328]	; (8001364 <MX_GPIO_Init+0x178>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a51      	ldr	r2, [pc, #324]	; (8001364 <MX_GPIO_Init+0x178>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <MX_GPIO_Init+0x178>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <MX_GPIO_Init+0x178>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <MX_GPIO_Init+0x178>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <MX_GPIO_Init+0x178>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <MX_GPIO_Init+0x178>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a45      	ldr	r2, [pc, #276]	; (8001364 <MX_GPIO_Init+0x178>)
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b43      	ldr	r3, [pc, #268]	; (8001364 <MX_GPIO_Init+0x178>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <MX_GPIO_Init+0x178>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3f      	ldr	r2, [pc, #252]	; (8001364 <MX_GPIO_Init+0x178>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <MX_GPIO_Init+0x178>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <MX_GPIO_Init+0x178>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a39      	ldr	r2, [pc, #228]	; (8001364 <MX_GPIO_Init+0x178>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <MX_GPIO_Init+0x178>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <MX_GPIO_Init+0x178>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a33      	ldr	r2, [pc, #204]	; (8001364 <MX_GPIO_Init+0x178>)
 8001298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <MX_GPIO_Init+0x178>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <MX_GPIO_Init+0x178>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <MX_GPIO_Init+0x178>)
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_GPIO_Init+0x178>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_GPIO_Init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a27      	ldr	r2, [pc, #156]	; (8001364 <MX_GPIO_Init+0x178>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_GPIO_Init+0x178>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_GPIO_Init+0x178>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <MX_GPIO_Init+0x178>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_GPIO_Init+0x178>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_GPIO_Init+0x178>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <MX_GPIO_Init+0x178>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_GPIO_Init+0x178>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2108      	movs	r1, #8
 800130e:	4816      	ldr	r0, [pc, #88]	; (8001368 <MX_GPIO_Init+0x17c>)
 8001310:	f002 f8ac 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <MX_GPIO_Init+0x180>)
 800131c:	f002 f8a6 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001320:	2308      	movs	r3, #8
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001334:	4619      	mov	r1, r3
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0x17c>)
 8001338:	f001 fde0 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_GPIO_Init+0x180>)
 8001356:	f001 fdd1 	bl	8002efc <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3740      	adds	r7, #64	; 0x40
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40022800 	.word	0x40022800
 800136c:	40022000 	.word	0x40022000

08001370 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f006 fb37 	bl	80079ec <osDelay>
 800137e:	e7fb      	b.n	8001378 <StartDefaultTask+0x8>

08001380 <StartHardwareTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void const * argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f006 fb2f 	bl	80079ec <osDelay>
 800138e:	e7fb      	b.n	8001388 <StartHardwareTask+0x8>

08001390 <StartGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGFXTask */
void StartGFXTask(void const * argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGFXTask */

	MX_TouchGFX_Process();
 8001398:	f008 ff93 	bl	800a2c2 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f006 fb25 	bl	80079ec <osDelay>
 80013a2:	e7fb      	b.n	800139c <StartGFXTask+0xc>

080013a4 <StartTaskUartMsg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartMsg */
void StartTaskUartMsg(void const * argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartMsg */
	PollingInit();
 80013ac:	f7ff fada 	bl	8000964 <PollingInit>

  /* Infinite loop */
  for(;;)
  {
	  PollingRoutine();
 80013b0:	f7ff fae6 	bl	8000980 <PollingRoutine>

    osDelay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f006 fb19 	bl	80079ec <osDelay>
	  PollingRoutine();
 80013ba:	e7f9      	b.n	80013b0 <StartTaskUartMsg+0xc>

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f000 fe1d 	bl	800200c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40001000 	.word	0x40001000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	210f      	movs	r1, #15
 8001426:	f06f 0001 	mvn.w	r0, #1
 800142a:	f000 feeb 	bl	8002204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_CRC_MspInit+0x38>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d10b      	bne.n	8001466 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_CRC_MspInit+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_CRC_MspInit+0x3c>)
 8001454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_CRC_MspInit+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023000 	.word	0x40023000
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_DMA2D_MspInit+0x44>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d113      	bne.n	80014b6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_DMA2D_MspInit+0x48>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_DMA2D_MspInit+0x48>)
 8001494:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_DMA2D_MspInit+0x48>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	205a      	movs	r0, #90	; 0x5a
 80014ac:	f000 feaa 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014b0:	205a      	movs	r0, #90	; 0x5a
 80014b2:	f000 fec3 	bl	800223c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	4002b000 	.word	0x4002b000
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0aa      	sub	sp, #168	; 0xa8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	2284      	movs	r2, #132	; 0x84
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f01d fbd5 	bl	801ec98 <memset>
  if(hi2c->Instance==I2C3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_I2C_MspInit+0xb4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13c      	bne.n	8001572 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014fe:	2300      	movs	r3, #0
 8001500:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4618      	mov	r0, r3
 8001508:	f003 ff5e 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001512:	f7ff ff65 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800152e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001536:	2312      	movs	r3, #18
 8001538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001548:	2304      	movs	r3, #4
 800154a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800154e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_I2C_MspInit+0xbc>)
 8001556:	f001 fcd1 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 8001560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	37a8      	adds	r7, #168	; 0xa8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005c00 	.word	0x40005c00
 8001580:	40023800 	.word	0x40023800
 8001584:	40021c00 	.word	0x40021c00

08001588 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_I2C_MspDeInit+0x38>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10e      	bne.n	80015b8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_I2C_MspDeInit+0x3c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_I2C_MspDeInit+0x3c>)
 80015a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <HAL_I2C_MspDeInit+0x40>)
 80015aa:	f001 fe53 	bl	8003254 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_I2C_MspDeInit+0x40>)
 80015b4:	f001 fe4e 	bl	8003254 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40005c00 	.word	0x40005c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021c00 	.word	0x40021c00

080015cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0ae      	sub	sp, #184	; 0xb8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	2284      	movs	r2, #132	; 0x84
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f01d fb53 	bl	801ec98 <memset>
  if(hltdc->Instance==LTDC)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6f      	ldr	r2, [pc, #444]	; (80017b4 <HAL_LTDC_MspInit+0x1e8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	f040 80d6 	bne.w	80017aa <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015fe:	2308      	movs	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001602:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001608:	2305      	movs	r3, #5
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001610:	2300      	movs	r3, #0
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001614:	2301      	movs	r3, #1
 8001616:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fed0 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800162e:	f7ff fed7 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800167a:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a42      	ldr	r2, [pc, #264]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_LTDC_MspInit+0x1ec>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c2:	2310      	movs	r3, #16
 80016c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016da:	230e      	movs	r3, #14
 80016dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <HAL_LTDC_MspInit+0x1f0>)
 80016e8:	f001 fc08 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80016ec:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001706:	230e      	movs	r3, #14
 8001708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800170c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001710:	4619      	mov	r1, r3
 8001712:	482b      	ldr	r0, [pc, #172]	; (80017c0 <HAL_LTDC_MspInit+0x1f4>)
 8001714:	f001 fbf2 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001718:	23f7      	movs	r3, #247	; 0xf7
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001730:	230e      	movs	r3, #14
 8001732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001736:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800173a:	4619      	mov	r1, r3
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <HAL_LTDC_MspInit+0x1f8>)
 800173e:	f001 fbdd 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800175c:	2309      	movs	r3, #9
 800175e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001762:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001766:	4619      	mov	r1, r3
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <HAL_LTDC_MspInit+0x1fc>)
 800176a:	f001 fbc7 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800176e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001788:	230e      	movs	r3, #14
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800178e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001792:	4619      	mov	r1, r3
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <HAL_LTDC_MspInit+0x200>)
 8001796:	f001 fbb1 	bl	8002efc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	2058      	movs	r0, #88	; 0x58
 80017a0:	f000 fd30 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017a4:	2058      	movs	r0, #88	; 0x58
 80017a6:	f000 fd49 	bl	800223c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	37b8      	adds	r7, #184	; 0xb8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40016800 	.word	0x40016800
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40022400 	.word	0x40022400
 80017c4:	40022800 	.word	0x40022800
 80017c8:	40021800 	.word	0x40021800
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a3b      	ldr	r2, [pc, #236]	; (80018dc <HAL_QSPI_MspInit+0x10c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d170      	bne.n	80018d4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	4a3a      	ldr	r2, [pc, #232]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6393      	str	r3, [r2, #56]	; 0x38
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_QSPI_MspInit+0x110>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001852:	2304      	movs	r3, #4
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001862:	2309      	movs	r3, #9
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	481d      	ldr	r0, [pc, #116]	; (80018e4 <HAL_QSPI_MspInit+0x114>)
 800186e:	f001 fb45 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001882:	230a      	movs	r3, #10
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <HAL_QSPI_MspInit+0x118>)
 800188e:	f001 fb35 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001892:	2304      	movs	r3, #4
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018a2:	2309      	movs	r3, #9
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <HAL_QSPI_MspInit+0x118>)
 80018ae:	f001 fb25 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80018b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018c4:	2309      	movs	r3, #9
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <HAL_QSPI_MspInit+0x11c>)
 80018d0:	f001 fb14 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	a0001000 	.word	0xa0001000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020c00 	.word	0x40020c00

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0ae      	sub	sp, #184	; 0xb8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	2284      	movs	r2, #132	; 0x84
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f01d f9c1 	bl	801ec98 <memset>
  if(huart->Instance==USART1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_UART_MspInit+0x1f4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d165      	bne.n	80019ec <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001920:	2340      	movs	r3, #64	; 0x40
 8001922:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001924:	2300      	movs	r3, #0
 8001926:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4618      	mov	r0, r3
 800192e:	f003 fd4b 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001938:	f7ff fd52 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6453      	str	r3, [r2, #68]	; 0x44
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a6:	4619      	mov	r1, r3
 80019a8:	4850      	ldr	r0, [pc, #320]	; (8001aec <HAL_UART_MspInit+0x1fc>)
 80019aa:	f001 faa7 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c8:	2307      	movs	r3, #7
 80019ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4846      	ldr	r0, [pc, #280]	; (8001af0 <HAL_UART_MspInit+0x200>)
 80019d6:	f001 fa91 	bl	8002efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	2025      	movs	r0, #37	; 0x25
 80019e0:	f000 fc10 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e4:	2025      	movs	r0, #37	; 0x25
 80019e6:	f000 fc29 	bl	800223c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019ea:	e076      	b.n	8001ada <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART6)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_UART_MspInit+0x204>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d171      	bne.n	8001ada <HAL_UART_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80019f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80019fc:	2300      	movs	r3, #0
 80019fe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fcdf 	bl	80053c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8001a10:	f7ff fce6 	bl	80013e0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	4a33      	ldr	r2, [pc, #204]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a2d      	ldr	r2, [pc, #180]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_UART_MspInit+0x1f8>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4823      	ldr	r0, [pc, #140]	; (8001af8 <HAL_UART_MspInit+0x208>)
 8001a6a:	f001 fa47 	bl	8002efc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a70:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_UART_MspInit+0x210>)
 8001a72:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a76:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001a7a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001ab0:	f000 fcbc 	bl	800242c <HAL_DMA_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8001aba:	f7ff fc91 	bl	80013e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001ac2:	675a      	str	r2, [r3, #116]	; 0x74
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_UART_MspInit+0x20c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2047      	movs	r0, #71	; 0x47
 8001ad0:	f000 fb98 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ad4:	2047      	movs	r0, #71	; 0x47
 8001ad6:	f000 fbb1 	bl	800223c <HAL_NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	37b8      	adds	r7, #184	; 0xb8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	200003f4 	.word	0x200003f4
 8001b00:	40026428 	.word	0x40026428

08001b04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_FMC_MspInit+0x100>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d16d      	bne.n	8001bfc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_FMC_MspInit+0x100>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_FMC_MspInit+0x104>)
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <HAL_FMC_MspInit+0x104>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6393      	str	r3, [r2, #56]	; 0x38
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_FMC_MspInit+0x104>)
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001b3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b50:	230c      	movs	r3, #12
 8001b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	482c      	ldr	r0, [pc, #176]	; (8001c0c <HAL_FMC_MspInit+0x108>)
 8001b5a:	f001 f9cf 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001b5e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b70:	230c      	movs	r3, #12
 8001b72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4825      	ldr	r0, [pc, #148]	; (8001c10 <HAL_FMC_MspInit+0x10c>)
 8001b7a:	f001 f9bf 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001b7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b90:	230c      	movs	r3, #12
 8001b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	481e      	ldr	r0, [pc, #120]	; (8001c14 <HAL_FMC_MspInit+0x110>)
 8001b9a:	f001 f9af 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ba2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4817      	ldr	r0, [pc, #92]	; (8001c18 <HAL_FMC_MspInit+0x114>)
 8001bba:	f001 f99f 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001bbe:	2328      	movs	r3, #40	; 0x28
 8001bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bce:	230c      	movs	r3, #12
 8001bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <HAL_FMC_MspInit+0x118>)
 8001bd8:	f001 f990 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bec:	230c      	movs	r3, #12
 8001bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <HAL_FMC_MspInit+0x11c>)
 8001bf6:	f001 f981 	bl	8002efc <HAL_GPIO_Init>
 8001bfa:	e000      	b.n	8001bfe <HAL_FMC_MspInit+0xfa>
    return;
 8001bfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200004ac 	.word	0x200004ac
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021c00 	.word	0x40021c00
 8001c20:	40020800 	.word	0x40020800

08001c24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c2c:	f7ff ff6a 	bl	8001b04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c48:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <HAL_InitTick+0xe0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_InitTick+0xe0>)
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_InitTick+0xe0>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c60:	f107 0210 	add.w	r2, r7, #16
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fb7a 	bl	8005364 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c7a:	f003 fb4b 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8001c7e:	6378      	str	r0, [r7, #52]	; 0x34
 8001c80:	e004      	b.n	8001c8c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c82:	f003 fb47 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_InitTick+0xe4>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	3b01      	subs	r3, #1
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_InitTick+0xe8>)
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_InitTick+0xec>)
 8001c9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_InitTick+0xe8>)
 8001ca2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_InitTick+0xe8>)
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_InitTick+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_InitTick+0xe8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_InitTick+0xe8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <HAL_InitTick+0xe8>)
 8001cc2:	f004 f802 	bl	8005cca <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11b      	bne.n	8001d0c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001cd4:	4812      	ldr	r0, [pc, #72]	; (8001d20 <HAL_InitTick+0xe8>)
 8001cd6:	f004 f859 	bl	8005d8c <HAL_TIM_Base_Start_IT>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d111      	bne.n	8001d0c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ce8:	2036      	movs	r0, #54	; 0x36
 8001cea:	f000 faa7 	bl	800223c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d808      	bhi.n	8001d06 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2036      	movs	r0, #54	; 0x36
 8001cfa:	f000 fa83 	bl	8002204 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_InitTick+0xf0>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e002      	b.n	8001d0c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3738      	adds	r7, #56	; 0x38
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	200004b0 	.word	0x200004b0
 8001d24:	40001000 	.word	0x40001000
 8001d28:	20000030 	.word	0x20000030

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART1_IRQHandler+0x10>)
 8001d5e:	f004 fb25 	bl	80063ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002e4 	.word	0x200002e4

08001d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM6_DAC_IRQHandler+0x10>)
 8001d72:	f004 f883 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200004b0 	.word	0x200004b0

08001d80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <DMA2_Stream1_IRQHandler+0x10>)
 8001d86:	f000 fc91 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200003f4 	.word	0x200003f4

08001d94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART6_IRQHandler+0x10>)
 8001d9a:	f004 fb07 	bl	80063ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000036c 	.word	0x2000036c

08001da8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <LTDC_IRQHandler+0x10>)
 8001dae:	f002 fa75 	bl	800429c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200001f0 	.word	0x200001f0

08001dbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <DMA2D_IRQHandler+0x10>)
 8001dc2:	f000 fef9 	bl	8002bb8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000015c 	.word	0x2000015c

08001dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_kill>:

int _kill(int pid, int sig)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dea:	f01c fe01 	bl	801e9f0 <__errno>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2216      	movs	r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
  return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_exit>:

void _exit (int status)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ffe7 	bl	8001de0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e12:	e7fe      	b.n	8001e12 <_exit+0x12>

08001e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e00a      	b.n	8001e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e26:	f3af 8000 	nop.w
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf0      	blt.n	8001e26 <_read+0x12>
  }

  return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e009      	b.n	8001e74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf1      	blt.n	8001e60 <_write+0x12>
  }
  return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_close>:

int _close(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eae:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_isatty>:

int _isatty(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f01c fd66 	bl	801e9f0 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20050000 	.word	0x20050000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	200004fc 	.word	0x200004fc
 8001f58:	20011ba0 	.word	0x20011ba0

08001f5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001faa:	f7ff ffd7 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f01c fe2d 	bl	801ec0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fdbb 	bl	8000b2c <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001fc4:	0803b708 	.word	0x0803b708
  ldr r2, =_sbss
 8001fc8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001fcc:	20011b9c 	.word	0x20011b9c

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x34>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x34>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f8fc 	bl	80021ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f7ff fe1e 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff f9f6 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000034 	.word	0x20000034
 8002030:	20000500 	.word	0x20000500

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000500 	.word	0x20000500

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000034 	.word	0x20000034

08002094 <__NVIC_SetPriorityGrouping>:
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	05fa0000 	.word	0x05fa0000

080020dc <__NVIC_GetPriorityGrouping>:
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff4c 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002216:	f7ff ff61 	bl	80020dc <__NVIC_GetPriorityGrouping>
 800221a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7ff ffb1 	bl	8002188 <NVIC_EncodePriority>
 8002226:	4602      	mov	r2, r0
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff80 	bl	8002134 <__NVIC_SetPriority>
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff54 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e054      	b.n	8002314 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7f5b      	ldrb	r3, [r3, #29]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff f8de 	bl	800143c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	791b      	ldrb	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_CRC_Init+0xc4>)
 8002294:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0218 	bic.w	r2, r2, #24
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	e00c      	b.n	80022c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f834 	bl	8002320 <HAL_CRCEx_Polynomial_Set>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e028      	b.n	8002314 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	795b      	ldrb	r3, [r3, #5]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f04f 32ff 	mov.w	r2, #4294967295
 80022d2:	611a      	str	r2, [r3, #16]
 80022d4:	e004      	b.n	80022e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6912      	ldr	r2, [r2, #16]
 80022de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	04c11db7 	.word	0x04c11db7

08002320 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002330:	231f      	movs	r3, #31
 8002332:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002334:	bf00      	nop
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	613a      	str	r2, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <HAL_CRCEx_Polynomial_Set+0x34>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b18      	cmp	r3, #24
 8002358:	d846      	bhi.n	80023e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <HAL_CRCEx_Polynomial_Set+0x40>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023e9 	.word	0x080023e9
 8002368:	080023e9 	.word	0x080023e9
 800236c:	080023e9 	.word	0x080023e9
 8002370:	080023e9 	.word	0x080023e9
 8002374:	080023e9 	.word	0x080023e9
 8002378:	080023e9 	.word	0x080023e9
 800237c:	080023e9 	.word	0x080023e9
 8002380:	080023dd 	.word	0x080023dd
 8002384:	080023e9 	.word	0x080023e9
 8002388:	080023e9 	.word	0x080023e9
 800238c:	080023e9 	.word	0x080023e9
 8002390:	080023e9 	.word	0x080023e9
 8002394:	080023e9 	.word	0x080023e9
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080023e9 	.word	0x080023e9
 80023a0:	080023d1 	.word	0x080023d1
 80023a4:	080023e9 	.word	0x080023e9
 80023a8:	080023e9 	.word	0x080023e9
 80023ac:	080023e9 	.word	0x080023e9
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	080023e9 	.word	0x080023e9
 80023bc:	080023e9 	.word	0x080023e9
 80023c0:	080023c5 	.word	0x080023c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d913      	bls.n	80023f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023ce:	e010      	b.n	80023f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b07      	cmp	r3, #7
 80023d4:	d90f      	bls.n	80023f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023da:	e00c      	b.n	80023f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	d90b      	bls.n	80023fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80023e6:	e008      	b.n	80023fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
      break;
 80023ec:	e006      	b.n	80023fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023ee:	bf00      	nop
 80023f0:	e004      	b.n	80023fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023f2:	bf00      	nop
 80023f4:	e002      	b.n	80023fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80023fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 0118 	bic.w	r1, r3, #24
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fdfc 	bl	8002034 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e099      	b.n	800257c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e00f      	b.n	800248a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff fde3 	bl	8002034 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d908      	bls.n	800248a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e078      	b.n	800257c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e8      	bne.n	800246a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_DMA_Init+0x158>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4313      	orrs	r3, r2
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b04      	cmp	r3, #4
 800251c:	d117      	bne.n	800254e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa7b 	bl	8002a2c <DMA_CheckFifoParam>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254a:	2301      	movs	r3, #1
 800254c:	e016      	b.n	800257c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa32 	bl	80029c0 <DMA_CalcBaseAndBitshift>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	223f      	movs	r2, #63	; 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	f010803f 	.word	0xf010803f

08002588 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002596:	f7ff fd4d 	bl	8002034 <HAL_GetTick>
 800259a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e052      	b.n	8002660 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0216 	bic.w	r2, r2, #22
 80025c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_DMA_Abort+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260a:	e013      	b.n	8002634 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260c:	f7ff fd12 	bl	8002034 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d90c      	bls.n	8002634 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e015      	b.n	8002660 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e4      	bne.n	800260c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00c      	b.n	80026a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_DMA_IRQHandler+0x248>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8e      	ldr	r2, [pc, #568]	; (80028f8 <HAL_DMA_IRQHandler+0x24c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2208      	movs	r2, #8
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01a      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2208      	movs	r2, #8
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2204      	movs	r2, #4
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2204      	movs	r2, #4
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2210      	movs	r2, #16
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d043      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03c      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2210      	movs	r2, #16
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d024      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e01f      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e016      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0208 	bic.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2220      	movs	r2, #32
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808f 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8087 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d136      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_IRQHandler+0x1da>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07e      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
        }
        return;
 80028c2:	e079      	b.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01d      	beq.n	800290e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d031      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e02c      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
 80028f2:	bf00      	nop
 80028f4:	2000002c 	.word	0x2000002c
 80028f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
 800290c:	e01e      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0210 	bic.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	2b00      	cmp	r3, #0
 8002952:	d032      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2205      	movs	r2, #5
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3301      	adds	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d307      	bcc.n	8002994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f2      	bne.n	8002978 <HAL_DMA_IRQHandler+0x2cc>
 8002992:	e000      	b.n	8002996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e000      	b.n	80029ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80029b8:	bf00      	nop
    }
  }
}
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3b10      	subs	r3, #16
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <DMA_CalcBaseAndBitshift+0x60>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <DMA_CalcBaseAndBitshift+0x64>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d908      	bls.n	8002a00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <DMA_CalcBaseAndBitshift+0x68>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58
 80029fe:	e006      	b.n	8002a0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <DMA_CalcBaseAndBitshift+0x68>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	aaaaaaab 	.word	0xaaaaaaab
 8002a24:	08020988 	.word	0x08020988
 8002a28:	fffffc00 	.word	0xfffffc00

08002a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11f      	bne.n	8002a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d856      	bhi.n	8002afa <DMA_CheckFifoParam+0xce>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <DMA_CheckFifoParam+0x28>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a77 	.word	0x08002a77
 8002a5c:	08002a65 	.word	0x08002a65
 8002a60:	08002afb 	.word	0x08002afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d046      	beq.n	8002afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e043      	b.n	8002afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a7e:	d140      	bne.n	8002b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e03d      	b.n	8002b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8e:	d121      	bne.n	8002ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d837      	bhi.n	8002b06 <DMA_CheckFifoParam+0xda>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <DMA_CheckFifoParam+0x70>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ab3 	.word	0x08002ab3
 8002aa4:	08002aad 	.word	0x08002aad
 8002aa8:	08002ac5 	.word	0x08002ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e030      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d025      	beq.n	8002b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac2:	e022      	b.n	8002b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002acc:	d11f      	bne.n	8002b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad2:	e01c      	b.n	8002b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d903      	bls.n	8002ae2 <DMA_CheckFifoParam+0xb6>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d003      	beq.n	8002ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae0:	e018      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae6:	e015      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00e      	beq.n	8002b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      break;
 8002af8:	e00b      	b.n	8002b12 <DMA_CheckFifoParam+0xe6>
      break;
 8002afa:	bf00      	nop
 8002afc:	e00a      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e008      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e006      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e004      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
    }
  } 
  
  return status; 
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e039      	b.n	8002baa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fc96 	bl	800147c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	f023 0107 	bic.w	r1, r3, #7
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_DMA2D_Init+0x90>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d1      	ldr	r1, [r2, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	ffffc000 	.word	0xffffc000

08002bb8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d026      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d021      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d026      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d021      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2220      	movs	r2, #32
 8002c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	f043 0202 	orr.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d026      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d021      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d013      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2204      	movs	r2, #4
 8002d02:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f853 	bl	8002db0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d024      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2202      	movs	r2, #2
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01f      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01a      	beq.n	8002da8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f80e 	bl	8002dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_DMA2D_ConfigLayer+0x20>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e079      	b.n	8002eec <HAL_DMA2D_ConfigLayer+0x114>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e24:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b0a      	cmp	r3, #10
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA2D_ConfigLayer+0x5e>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d107      	bne.n	8002e46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e005      	b.n	8002e52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d120      	bne.n	8002e9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	ea02 0103 	and.w	r1, r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d003      	beq.n	8002e8a <HAL_DMA2D_ConfigLayer+0xb2>
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	d127      	bne.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
 8002e98:	e01f      	b.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	ea02 0103 	and.w	r1, r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0a      	cmp	r3, #10
 8002ec2:	d003      	beq.n	8002ecc <HAL_DMA2D_ConfigLayer+0xf4>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d106      	bne.n	8002eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ed8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	ff03000f 	.word	0xff03000f

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e175      	b.n	8003208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8164 	bne.w	8003202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x56>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80be 	beq.w	8003202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_GPIO_Init+0x324>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800309e:	4a61      	ldr	r2, [pc, #388]	; (8003224 <HAL_GPIO_Init+0x328>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_GPIO_Init+0x32c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d037      	beq.n	800313a <HAL_GPIO_Init+0x23e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_GPIO_Init+0x330>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x23a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_GPIO_Init+0x334>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x236>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x232>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x22e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a53      	ldr	r2, [pc, #332]	; (800323c <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x22a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_GPIO_Init+0x350>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x21a>
 8003112:	2309      	movs	r3, #9
 8003114:	e012      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003116:	230a      	movs	r3, #10
 8003118:	e010      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311a:	2308      	movs	r3, #8
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311e:	2307      	movs	r3, #7
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x240>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_GPIO_Init+0x328>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_GPIO_Init+0x354>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae86 	bls.w	8002f1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40022000 	.word	0x40022000
 800324c:	40022400 	.word	0x40022400
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e0d9      	b.n	8003424 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003270:	2201      	movs	r2, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	f040 80c9 	bne.w	800341e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800328c:	4a6b      	ldr	r2, [pc, #428]	; (800343c <HAL_GPIO_DeInit+0x1e8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <HAL_GPIO_DeInit+0x1ec>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d037      	beq.n	8003326 <HAL_GPIO_DeInit+0xd2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a62      	ldr	r2, [pc, #392]	; (8003444 <HAL_GPIO_DeInit+0x1f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_GPIO_DeInit+0xce>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a61      	ldr	r2, [pc, #388]	; (8003448 <HAL_GPIO_DeInit+0x1f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_DeInit+0xca>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a60      	ldr	r2, [pc, #384]	; (800344c <HAL_GPIO_DeInit+0x1f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_DeInit+0xc6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a5f      	ldr	r2, [pc, #380]	; (8003450 <HAL_GPIO_DeInit+0x1fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_DeInit+0xc2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_GPIO_DeInit+0x200>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_DeInit+0xbe>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_GPIO_DeInit+0x204>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_DeInit+0xba>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_GPIO_DeInit+0x208>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_DeInit+0xb6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_GPIO_DeInit+0x20c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_DeInit+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a5a      	ldr	r2, [pc, #360]	; (8003464 <HAL_GPIO_DeInit+0x210>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_DeInit+0xae>
 80032fe:	2309      	movs	r3, #9
 8003300:	e012      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003302:	230a      	movs	r3, #10
 8003304:	e010      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003306:	2308      	movs	r3, #8
 8003308:	e00e      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800330a:	2307      	movs	r3, #7
 800330c:	e00c      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800330e:	2306      	movs	r3, #6
 8003310:	e00a      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003312:	2305      	movs	r3, #5
 8003314:	e008      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003316:	2304      	movs	r3, #4
 8003318:	e006      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_DeInit+0xd4>
 8003326:	2300      	movs	r3, #0
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d132      	bne.n	800339e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	4949      	ldr	r1, [pc, #292]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 8003342:	4013      	ands	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003346:	4b48      	ldr	r3, [pc, #288]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	4946      	ldr	r1, [pc, #280]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 8003350:	4013      	ands	r3, r2
 8003352:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003354:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	4942      	ldr	r1, [pc, #264]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 800335e:	4013      	ands	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	493f      	ldr	r1, [pc, #252]	; (8003468 <HAL_GPIO_DeInit+0x214>)
 800336c:	4013      	ands	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003380:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_GPIO_DeInit+0x1e8>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	43da      	mvns	r2, r3
 8003390:	482a      	ldr	r0, [pc, #168]	; (800343c <HAL_GPIO_DeInit+0x1e8>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	400a      	ands	r2, r1
 8003398:	3302      	adds	r3, #2
 800339a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2103      	movs	r1, #3
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	08d2      	lsrs	r2, r2, #3
 80033d4:	4019      	ands	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2103      	movs	r1, #3
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	2101      	movs	r1, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2103      	movs	r1, #3
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	f67f af22 	bls.w	8003270 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40013800 	.word	0x40013800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40021400 	.word	0x40021400
 8003458:	40021800 	.word	0x40021800
 800345c:	40021c00 	.word	0x40021c00
 8003460:	40022000 	.word	0x40022000
 8003464:	40022400 	.word	0x40022400
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003488:	e003      	b.n	8003492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07f      	b.n	80035b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fffe 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e006      	b.n	8003528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d104      	bne.n	800353a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_I2C_Init+0x11c>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	02008000 	.word	0x02008000

080035c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e021      	b.n	8003616 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2224      	movs	r2, #36	; 0x24
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0201 	bic.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd ffcc 	bl	8001588 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 80f9 	bne.w	800383a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_I2C_Mem_Write+0x34>
 800364e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0ed      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2C_Mem_Write+0x4e>
 800366a:	2302      	movs	r3, #2
 800366c:	e0e6      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003676:	f7fe fcdd 	bl	8002034 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fad1 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0d1      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	; 0x21
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c0:	88f8      	ldrh	r0, [r7, #6]
 80036c2:	893a      	ldrh	r2, [r7, #8]
 80036c4:	8979      	ldrh	r1, [r7, #10]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4603      	mov	r3, r0
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f9e1 	bl	8003a98 <I2C_RequestMemoryWrite>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0a9      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2bff      	cmp	r3, #255	; 0xff
 80036f0:	d90e      	bls.n	8003710 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	2300      	movs	r3, #0
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fc2d 	bl	8003f68 <I2C_TransferConfig>
 800370e:	e00f      	b.n	8003730 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	b2da      	uxtb	r2, r3
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fc1c 	bl	8003f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fabb 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e07b      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d034      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x1c8>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d130      	bne.n	80037e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fa4d 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04d      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2bff      	cmp	r3, #255	; 0xff
 80037a8:	d90e      	bls.n	80037c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fbd1 	bl	8003f68 <I2C_TransferConfig>
 80037c6:	e00f      	b.n	80037e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	8979      	ldrh	r1, [r7, #10]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fbc0 	bl	8003f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d19e      	bne.n	8003730 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fa9a 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e01a      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2220      	movs	r2, #32
 800380c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_I2C_Mem_Write+0x224>)
 800381a:	400b      	ands	r3, r1
 800381c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	f040 80fd 	bne.w	8003a6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_I2C_Mem_Read+0x34>
 8003876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0f1      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Mem_Read+0x4e>
 8003892:	2302      	movs	r3, #2
 8003894:	e0ea      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800389e:	f7fe fbc9 	bl	8002034 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2319      	movs	r3, #25
 80038aa:	2201      	movs	r2, #1
 80038ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f9bd 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0d5      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2222      	movs	r2, #34	; 0x22
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e8:	88f8      	ldrh	r0, [r7, #6]
 80038ea:	893a      	ldrh	r2, [r7, #8]
 80038ec:	8979      	ldrh	r1, [r7, #10]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4603      	mov	r3, r0
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f921 	bl	8003b40 <I2C_RequestMemoryRead>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0ad      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2bff      	cmp	r3, #255	; 0xff
 8003918:	d90e      	bls.n	8003938 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	b2da      	uxtb	r2, r3
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	4b52      	ldr	r3, [pc, #328]	; (8003a74 <HAL_I2C_Mem_Read+0x22c>)
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb19 	bl	8003f68 <I2C_TransferConfig>
 8003936:	e00f      	b.n	8003958 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	b2da      	uxtb	r2, r3
 8003948:	8979      	ldrh	r1, [r7, #10]
 800394a:	4b4a      	ldr	r3, [pc, #296]	; (8003a74 <HAL_I2C_Mem_Read+0x22c>)
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fb08 	bl	8003f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	2200      	movs	r2, #0
 8003960:	2104      	movs	r1, #4
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f964 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07c      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d034      	beq.n	8003a18 <HAL_I2C_Mem_Read+0x1d0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d130      	bne.n	8003a18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	2200      	movs	r2, #0
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f935 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e04d      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2bff      	cmp	r3, #255	; 0xff
 80039d8:	d90e      	bls.n	80039f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	22ff      	movs	r2, #255	; 0xff
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8979      	ldrh	r1, [r7, #10]
 80039e8:	2300      	movs	r3, #0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fab9 	bl	8003f68 <I2C_TransferConfig>
 80039f6:	e00f      	b.n	8003a18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 faa8 	bl	8003f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d19a      	bne.n	8003958 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f982 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e01a      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_I2C_Mem_Read+0x230>)
 8003a4a:	400b      	ands	r3, r1
 8003a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	80002400 	.word	0x80002400
 8003a78:	fe00e800 	.word	0xfe00e800

08003a7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <I2C_RequestMemoryWrite+0xa4>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fa51 	bl	8003f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f8f0 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e02c      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8003aea:	e015      	b.n	8003b18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8d6 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f884 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	80002000 	.word	0x80002000

08003b40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <I2C_RequestMemoryRead+0xa4>)
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f9fe 	bl	8003f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	69b9      	ldr	r1, [r7, #24]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f89d 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e02c      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b86:	893b      	ldrh	r3, [r7, #8]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b90:	e015      	b.n	8003bbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b92:	893b      	ldrh	r3, [r7, #8]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f883 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e012      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f831 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	80002000 	.word	0x80002000

08003be8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d007      	beq.n	8003c24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	619a      	str	r2, [r3, #24]
  }
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c40:	e022      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d01e      	beq.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe f9f3 	bl	8002034 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e00f      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d0cd      	beq.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cbc:	e02c      	b.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f870 	bl	8003da8 <I2C_IsErrorOccurred>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02a      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d01e      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fe f9ab 	bl	8002034 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d1cb      	bne.n	8003cbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e028      	b.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f830 	bl	8003da8 <I2C_IsErrorOccurred>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e026      	b.n	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fe f96f 	bl	8002034 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d113      	bne.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e007      	b.n	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d1cf      	bne.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d068      	beq.n	8003ea6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ddc:	e049      	b.n	8003e72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d045      	beq.n	8003e72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe f925 	bl	8002034 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_IsErrorOccurred+0x54>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d13a      	bne.n	8003e72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d121      	bne.n	8003e64 <I2C_IsErrorOccurred+0xbc>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e26:	d01d      	beq.n	8003e64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d01a      	beq.n	8003e64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e3e:	f7fe f8f9 	bl	8002034 <HAL_GetTick>
 8003e42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e44:	e00e      	b.n	8003e64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e46:	f7fe f8f5 	bl	8002034 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b19      	cmp	r3, #25
 8003e52:	d907      	bls.n	8003e64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f043 0320 	orr.w	r3, r3, #32
 8003e5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003e62:	e006      	b.n	8003e72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d1e9      	bne.n	8003e46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d003      	beq.n	8003e88 <I2C_IsErrorOccurred+0xe0>
 8003e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0aa      	beq.n	8003dde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2220      	movs	r2, #32
 8003e96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00b      	beq.n	8003ed0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01c      	beq.n	8003f56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fe63 	bl	8003be8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <I2C_IsErrorOccurred+0x1bc>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	fe00e800 	.word	0xfe00e800

08003f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	4613      	mov	r3, r2
 8003f78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f80:	7a7b      	ldrb	r3, [r7, #9]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	0d5b      	lsrs	r3, r3, #21
 8003fa2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <I2C_TransferConfig+0x60>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	43db      	mvns	r3, r3
 8003fac:	ea02 0103 	and.w	r1, r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	03ff63ff 	.word	0x03ff63ff

08003fcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d138      	bne.n	8004054 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e032      	b.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800401e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	d139      	bne.n	80040ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004082:	2302      	movs	r3, #2
 8004084:	e033      	b.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2224      	movs	r2, #36	; 0x24
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0bf      	b.n	800428e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fa52 	bl	80015cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800413e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004154:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <HAL_LTDC_Init+0x19c>)
 8004170:	400b      	ands	r3, r1
 8004172:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6899      	ldr	r1, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68d9      	ldr	r1, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_LTDC_Init+0x19c>)
 800419e:	400b      	ands	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68d9      	ldr	r1, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b33      	ldr	r3, [pc, #204]	; (8004298 <HAL_LTDC_Init+0x19c>)
 80041cc:	400b      	ands	r3, r1
 80041ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6919      	ldr	r1, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6959      	ldr	r1, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_LTDC_Init+0x19c>)
 80041fa:	400b      	ands	r3, r1
 80041fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6959      	ldr	r1, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0206 	orr.w	r2, r2, #6
 800426a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	f000f800 	.word	0xf000f800

0800429c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d023      	beq.n	8004306 <HAL_LTDC_IRQHandler+0x6a>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01e      	beq.n	8004306 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f86f 	bl	80043e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_LTDC_IRQHandler+0xbc>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01e      	beq.n	8004358 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0202 	bic.w	r2, r2, #2
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2202      	movs	r2, #2
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2204      	movs	r2, #4
 8004346:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f846 	bl	80043e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01b      	beq.n	800439a <HAL_LTDC_IRQHandler+0xfe>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2201      	movs	r2, #1
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f00b fc6f 	bl	800fc78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_LTDC_IRQHandler+0x140>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2208      	movs	r2, #8
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f80e 	bl	80043f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_LTDC_ConfigLayer+0x1a>
 8004422:	2302      	movs	r3, #2
 8004424:	e02c      	b.n	8004480 <HAL_LTDC_ConfigLayer+0x74>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2134      	movs	r1, #52	; 0x34
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f849 	bl	80044f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bdb0      	pop	{r4, r5, r7, pc}

08004488 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_LTDC_ProgramLineEvent+0x18>
 800449c:	2302      	movs	r3, #2
 800449e:	e023      	b.n	80044e8 <HAL_LTDC_ProgramLineEvent+0x60>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80044c0:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40016800 	.word	0x40016800

080044f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	4413      	add	r3, r2
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	01db      	lsls	r3, r3, #7
 8004524:	4413      	add	r3, r2
 8004526:	3384      	adds	r3, #132	; 0x84
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	4611      	mov	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	01d2      	lsls	r2, r2, #7
 8004534:	440a      	add	r2, r1
 8004536:	3284      	adds	r2, #132	; 0x84
 8004538:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800453c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800454e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004550:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4619      	mov	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	01db      	lsls	r3, r3, #7
 800455c:	440b      	add	r3, r1
 800455e:	3384      	adds	r3, #132	; 0x84
 8004560:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004566:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004576:	4413      	add	r3, r2
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	01db      	lsls	r3, r3, #7
 8004586:	4413      	add	r3, r2
 8004588:	3384      	adds	r3, #132	; 0x84
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	4611      	mov	r1, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	01d2      	lsls	r2, r2, #7
 8004596:	440a      	add	r2, r1
 8004598:	3284      	adds	r2, #132	; 0x84
 800459a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800459e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ae:	4413      	add	r3, r2
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	01db      	lsls	r3, r3, #7
 80045bc:	440b      	add	r3, r1
 80045be:	3384      	adds	r3, #132	; 0x84
 80045c0:	4619      	mov	r1, r3
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	01db      	lsls	r3, r3, #7
 80045d2:	4413      	add	r3, r2
 80045d4:	3384      	adds	r3, #132	; 0x84
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	4611      	mov	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	01d2      	lsls	r2, r2, #7
 80045e2:	440a      	add	r2, r1
 80045e4:	3284      	adds	r2, #132	; 0x84
 80045e6:	f023 0307 	bic.w	r3, r3, #7
 80045ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	01db      	lsls	r3, r3, #7
 80045f6:	4413      	add	r3, r2
 80045f8:	3384      	adds	r3, #132	; 0x84
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	01db      	lsls	r3, r3, #7
 8004628:	4413      	add	r3, r2
 800462a:	3384      	adds	r3, #132	; 0x84
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	01db      	lsls	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	3384      	adds	r3, #132	; 0x84
 800463c:	461a      	mov	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004648:	461a      	mov	r2, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	431a      	orrs	r2, r3
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	01db      	lsls	r3, r3, #7
 800465c:	440b      	add	r3, r1
 800465e:	3384      	adds	r3, #132	; 0x84
 8004660:	4619      	mov	r1, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	01db      	lsls	r3, r3, #7
 8004672:	4413      	add	r3, r2
 8004674:	3384      	adds	r3, #132	; 0x84
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4611      	mov	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	01d2      	lsls	r2, r2, #7
 8004682:	440a      	add	r2, r1
 8004684:	3284      	adds	r2, #132	; 0x84
 8004686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800468a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	4413      	add	r3, r2
 8004698:	3384      	adds	r3, #132	; 0x84
 800469a:	461a      	mov	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	01db      	lsls	r3, r3, #7
 80046ac:	4413      	add	r3, r2
 80046ae:	3384      	adds	r3, #132	; 0x84
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	01db      	lsls	r3, r3, #7
 80046bc:	440b      	add	r3, r1
 80046be:	3384      	adds	r3, #132	; 0x84
 80046c0:	4619      	mov	r1, r3
 80046c2:	4b58      	ldr	r3, [pc, #352]	; (8004824 <LTDC_SetConfig+0x32c>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	6809      	ldr	r1, [r1, #0]
 80046d4:	4608      	mov	r0, r1
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	01c9      	lsls	r1, r1, #7
 80046da:	4401      	add	r1, r0
 80046dc:	3184      	adds	r1, #132	; 0x84
 80046de:	4313      	orrs	r3, r2
 80046e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	01db      	lsls	r3, r3, #7
 80046ec:	4413      	add	r3, r2
 80046ee:	3384      	adds	r3, #132	; 0x84
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	01db      	lsls	r3, r3, #7
 80046fc:	4413      	add	r3, r2
 80046fe:	3384      	adds	r3, #132	; 0x84
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	01db      	lsls	r3, r3, #7
 8004710:	4413      	add	r3, r2
 8004712:	3384      	adds	r3, #132	; 0x84
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004724:	2304      	movs	r3, #4
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e01b      	b.n	8004762 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004732:	2303      	movs	r3, #3
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e014      	b.n	8004762 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d00b      	beq.n	8004758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004744:	2b02      	cmp	r3, #2
 8004746:	d007      	beq.n	8004758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800474c:	2b03      	cmp	r3, #3
 800474e:	d003      	beq.n	8004758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004754:	2b07      	cmp	r3, #7
 8004756:	d102      	bne.n	800475e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004758:	2302      	movs	r3, #2
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e001      	b.n	8004762 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4413      	add	r3, r2
 800476e:	3384      	adds	r3, #132	; 0x84
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	4611      	mov	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	01d2      	lsls	r2, r2, #7
 800477c:	440a      	add	r2, r1
 800477e:	3284      	adds	r2, #132	; 0x84
 8004780:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	1acb      	subs	r3, r1, r3
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	6809      	ldr	r1, [r1, #0]
 80047a8:	4608      	mov	r0, r1
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	01c9      	lsls	r1, r1, #7
 80047ae:	4401      	add	r1, r0
 80047b0:	3184      	adds	r1, #132	; 0x84
 80047b2:	4313      	orrs	r3, r2
 80047b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	01db      	lsls	r3, r3, #7
 80047c0:	4413      	add	r3, r2
 80047c2:	3384      	adds	r3, #132	; 0x84
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	01db      	lsls	r3, r3, #7
 80047d0:	440b      	add	r3, r1
 80047d2:	3384      	adds	r3, #132	; 0x84
 80047d4:	4619      	mov	r1, r3
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <LTDC_SetConfig+0x330>)
 80047d8:	4013      	ands	r3, r2
 80047da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	4413      	add	r3, r2
 80047e8:	3384      	adds	r3, #132	; 0x84
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	4611      	mov	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	01d2      	lsls	r2, r2, #7
 800480c:	440a      	add	r2, r1
 800480e:	3284      	adds	r2, #132	; 0x84
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	fffff8f8 	.word	0xfffff8f8
 8004828:	fffff800 	.word	0xfffff800

0800482c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6413      	str	r3, [r2, #64]	; 0x40
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800485a:	f7fd fbeb 	bl	8002034 <HAL_GetTick>
 800485e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004860:	e009      	b.n	8004876 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004862:	f7fd fbe7 	bl	8002034 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004870:	d901      	bls.n	8004876 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e022      	b.n	80048bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004882:	d1ee      	bne.n	8004862 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004884:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800488a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800488e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004890:	f7fd fbd0 	bl	8002034 <HAL_GetTick>
 8004894:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004896:	e009      	b.n	80048ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004898:	f7fd fbcc 	bl	8002034 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a6:	d901      	bls.n	80048ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e007      	b.n	80048bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b8:	d1ee      	bne.n	8004898 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000

080048cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7fd fbae 	bl	8002034 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e067      	b.n	80049b4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc ff69 	bl	80017d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80048fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f85e 	bl	80049c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	021a      	lsls	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	2120      	movs	r1, #32
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f856 	bl	80049e0 <QSPI_WaitFlagStateUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d135      	bne.n	80049aa <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_QSPI_Init+0xf0>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6852      	ldr	r2, [r2, #4]
 800494c:	0611      	lsls	r1, r2, #24
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	69d2      	ldr	r2, [r2, #28]
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a12      	ldr	r2, [r2, #32]
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	430b      	orrs	r3, r1
 8004966:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_QSPI_Init+0xf4>)
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6912      	ldr	r2, [r2, #16]
 8004976:	0411      	lsls	r1, r2, #16
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6952      	ldr	r2, [r2, #20]
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6992      	ldr	r2, [r2, #24]
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	430b      	orrs	r3, r1
 800498a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80049b2:	7afb      	ldrb	r3, [r7, #11]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00ffff2f 	.word	0x00ffff2f
 80049c0:	ffe0f8fe 	.word	0xffe0f8fe

080049c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049f0:	e01a      	b.n	8004a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d016      	beq.n	8004a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fd fb1b 	bl	8002034 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2204      	movs	r2, #4
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e00e      	b.n	8004a46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1d6      	bne.n	80049f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e291      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8087 	beq.w	8004b82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a74:	4b96      	ldr	r3, [pc, #600]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00c      	beq.n	8004a9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a80:	4b93      	ldr	r3, [pc, #588]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d112      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x62>
 8004a8c:	4b90      	ldr	r3, [pc, #576]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a98:	d10b      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9a:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d06c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x130>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d168      	bne.n	8004b80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e26b      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x7a>
 8004abc:	4b84      	ldr	r3, [pc, #528]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a83      	ldr	r2, [pc, #524]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	e02e      	b.n	8004b28 <HAL_RCC_OscConfig+0xd8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x9c>
 8004ad2:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7e      	ldr	r2, [pc, #504]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b7c      	ldr	r3, [pc, #496]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7b      	ldr	r2, [pc, #492]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e01d      	b.n	8004b28 <HAL_RCC_OscConfig+0xd8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004af6:	4b76      	ldr	r3, [pc, #472]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a75      	ldr	r2, [pc, #468]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b73      	ldr	r3, [pc, #460]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a72      	ldr	r2, [pc, #456]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0xd8>
 8004b10:	4b6f      	ldr	r3, [pc, #444]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a6e      	ldr	r2, [pc, #440]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b6c      	ldr	r3, [pc, #432]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6b      	ldr	r2, [pc, #428]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fd fa80 	bl	8002034 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fd fa7c 	bl	8002034 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e21f      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fa6c 	bl	8002034 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fd fa68 	bl	8002034 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e20b      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b57      	ldr	r3, [pc, #348]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x110>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d069      	beq.n	8004c62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9a:	4b4d      	ldr	r3, [pc, #308]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x190>
 8004ba6:	4b4a      	ldr	r3, [pc, #296]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCC_OscConfig+0x17a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1df      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	493d      	ldr	r1, [pc, #244]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	e040      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d023      	beq.n	8004c30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fa1e 	bl	8002034 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fd fa1a 	bl	8002034 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1bd      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4929      	ldr	r1, [pc, #164]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
 8004c2e:	e018      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a26      	ldr	r2, [pc, #152]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f9fa 	bl	8002034 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c44:	f7fd f9f6 	bl	8002034 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e199      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d038      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7a:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fd f9d7 	bl	8002034 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7fd f9d3 	bl	8002034 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e176      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x23a>
 8004ca8:	e01a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb6:	f7fd f9bd 	bl	8002034 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbe:	f7fd f9b9 	bl	8002034 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d903      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e15c      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
 8004cd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	4b91      	ldr	r3, [pc, #580]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ee      	bne.n	8004cbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a4 	beq.w	8004e36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cee:	4b8b      	ldr	r3, [pc, #556]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6413      	str	r3, [r2, #64]	; 0x40
 8004d06:	4b85      	ldr	r3, [pc, #532]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d16:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <HAL_RCC_OscConfig+0x4d0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d118      	bne.n	8004d54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d22:	4b7f      	ldr	r3, [pc, #508]	; (8004f20 <HAL_RCC_OscConfig+0x4d0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7e      	ldr	r2, [pc, #504]	; (8004f20 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2e:	f7fd f981 	bl	8002034 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fd f97d 	bl	8002034 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b64      	cmp	r3, #100	; 0x64
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e120      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d48:	4b75      	ldr	r3, [pc, #468]	; (8004f20 <HAL_RCC_OscConfig+0x4d0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCC_OscConfig+0x31a>
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
 8004d68:	e02d      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x33c>
 8004d72:	4b6a      	ldr	r3, [pc, #424]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a69      	ldr	r2, [pc, #420]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7e:	4b67      	ldr	r3, [pc, #412]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d84:	f023 0304 	bic.w	r3, r3, #4
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	e01c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x35e>
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a60      	ldr	r2, [pc, #384]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a5d      	ldr	r2, [pc, #372]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dac:	e00b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x376>
 8004dae:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a5a      	ldr	r2, [pc, #360]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	4b58      	ldr	r3, [pc, #352]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a57      	ldr	r2, [pc, #348]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fd f931 	bl	8002034 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fd f92d 	bl	8002034 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0ce      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dec:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ee      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x386>
 8004df8:	e014      	b.n	8004e24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fd f91b 	bl	8002034 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fd f917 	bl	8002034 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e18:	4b40      	ldr	r3, [pc, #256]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ee      	bne.n	8004e02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a4 	beq.w	8004f88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d06b      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d149      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a30      	ldr	r2, [pc, #192]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd f8e8 	bl	8002034 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd f8e4 	bl	8002034 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e087      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd f8b8 	bl	8002034 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fd f8b4 	bl	8002034 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e057      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x478>
 8004ee6:	e04f      	b.n	8004f88 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fd f89e 	bl	8002034 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd f89a 	bl	8002034 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e03d      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_OscConfig+0x4cc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x4ac>
 8004f1a:	e035      	b.n	8004f88 <HAL_RCC_OscConfig+0x538>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_OscConfig+0x544>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d028      	beq.n	8004f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d121      	bne.n	8004f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d11a      	bne.n	8004f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d111      	bne.n	8004f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800

08004f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0d0      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d910      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 020f 	bic.w	r2, r3, #15
 8004fc6:	4965      	ldr	r1, [pc, #404]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a52      	ldr	r2, [pc, #328]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d040      	beq.n	80050bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e073      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06b      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b39      	ldr	r3, [pc, #228]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4936      	ldr	r1, [pc, #216]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508c:	f7fc ffd2 	bl	8002034 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fc ffce 	bl	8002034 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e053      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d210      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020f 	bic.w	r2, r3, #15
 80050d2:	4922      	ldr	r1, [pc, #136]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_ClockConfig+0x1c8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	490a      	ldr	r1, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x1cc>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1d0>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1d4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc fd74 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40023c00 	.word	0x40023c00
 8005160:	40023800 	.word	0x40023800
 8005164:	08020970 	.word	0x08020970
 8005168:	2000002c 	.word	0x2000002c
 800516c:	20000030 	.word	0x20000030

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b090      	sub	sp, #64	; 0x40
 8005176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00d      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005194:	2b08      	cmp	r3, #8
 8005196:	f200 80a1 	bhi.w	80052dc <HAL_RCC_GetSysClockFreq+0x16c>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x3a>
 80051a2:	e09b      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051a8:	e09b      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051ae:	e098      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051ba:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d028      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	627a      	str	r2, [r7, #36]	; 0x24
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051d8:	2100      	movs	r1, #0
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051dc:	fb03 f201 	mul.w	r2, r3, r1
 80051e0:	2300      	movs	r3, #0
 80051e2:	fb00 f303 	mul.w	r3, r0, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ea:	fba0 1202 	umull	r1, r2, r0, r2
 80051ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f0:	460a      	mov	r2, r1
 80051f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	4413      	add	r3, r2
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fc:	2200      	movs	r2, #0
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	61fa      	str	r2, [r7, #28]
 8005202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800520a:	f7fb f851 	bl	80002b0 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4613      	mov	r3, r2
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005216:	e053      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	2200      	movs	r2, #0
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	617a      	str	r2, [r7, #20]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800522a:	f04f 0b00 	mov.w	fp, #0
 800522e:	4652      	mov	r2, sl
 8005230:	465b      	mov	r3, fp
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	0159      	lsls	r1, r3, #5
 800523c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005240:	0150      	lsls	r0, r2, #5
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	ebb2 080a 	subs.w	r8, r2, sl
 800524a:	eb63 090b 	sbc.w	r9, r3, fp
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800525a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800525e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005262:	ebb2 0408 	subs.w	r4, r2, r8
 8005266:	eb63 0509 	sbc.w	r5, r3, r9
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	00eb      	lsls	r3, r5, #3
 8005274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005278:	00e2      	lsls	r2, r4, #3
 800527a:	4614      	mov	r4, r2
 800527c:	461d      	mov	r5, r3
 800527e:	eb14 030a 	adds.w	r3, r4, sl
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	eb45 030b 	adc.w	r3, r5, fp
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005296:	4629      	mov	r1, r5
 8005298:	028b      	lsls	r3, r1, #10
 800529a:	4621      	mov	r1, r4
 800529c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052a0:	4621      	mov	r1, r4
 80052a2:	028a      	lsls	r2, r1, #10
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	2200      	movs	r2, #0
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b4:	f7fa fffc 	bl	80002b0 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4613      	mov	r3, r2
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	3301      	adds	r3, #1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80052d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052da:	e002      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3740      	adds	r7, #64	; 0x40
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	017d7840 	.word	0x017d7840

080052fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_RCC_GetHCLKFreq+0x14>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	2000002c 	.word	0x2000002c

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff0 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	08020980 	.word	0x08020980

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005340:	f7ff ffdc 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0b5b      	lsrs	r3, r3, #13
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	08020980 	.word	0x08020980

08005364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	220f      	movs	r2, #15
 8005372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005380:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_RCC_GetClockConfig+0x60>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40023c00 	.word	0x40023c00

080053c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f0:	4b69      	ldr	r3, [pc, #420]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a68      	ldr	r2, [pc, #416]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	4b66      	ldr	r3, [pc, #408]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	4964      	ldr	r1, [pc, #400]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d017      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005422:	4b5d      	ldr	r3, [pc, #372]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	4959      	ldr	r1, [pc, #356]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005440:	d101      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005442:	2301      	movs	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d017      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800545e:	4b4e      	ldr	r3, [pc, #312]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	494a      	ldr	r1, [pc, #296]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 808b 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054ac:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	4a39      	ldr	r2, [pc, #228]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6413      	str	r3, [r2, #64]	; 0x40
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054c4:	4b35      	ldr	r3, [pc, #212]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a34      	ldr	r2, [pc, #208]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc fdb0 	bl	8002034 <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d8:	f7fc fdac 	bl	8002034 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e357      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ea:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054f6:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d035      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d02e      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005514:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551e:	4b1e      	ldr	r3, [pc, #120]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005528:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005534:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d114      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fc fd74 	bl	8002034 <HAL_GetTick>
 800554c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fc fd70 	bl	8002034 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e319      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ee      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557e:	d111      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800558e:	400b      	ands	r3, r1
 8005590:	4901      	ldr	r1, [pc, #4]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
 8005596:	e00b      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005598:	40023800 	.word	0x40023800
 800559c:	40007000 	.word	0x40007000
 80055a0:	0ffffcff 	.word	0x0ffffcff
 80055a4:	4baa      	ldr	r3, [pc, #680]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4aa9      	ldr	r2, [pc, #676]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ae:	6093      	str	r3, [r2, #8]
 80055b0:	4ba7      	ldr	r3, [pc, #668]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055bc:	49a4      	ldr	r1, [pc, #656]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ce:	4ba0      	ldr	r3, [pc, #640]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d4:	4a9e      	ldr	r2, [pc, #632]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055de:	4b9c      	ldr	r3, [pc, #624]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4999      	ldr	r1, [pc, #612]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055fc:	4b94      	ldr	r3, [pc, #592]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560a:	4991      	ldr	r1, [pc, #580]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800561e:	4b8c      	ldr	r3, [pc, #560]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800562c:	4988      	ldr	r1, [pc, #544]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005640:	4b83      	ldr	r3, [pc, #524]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	4980      	ldr	r1, [pc, #512]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005662:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4977      	ldr	r1, [pc, #476]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005684:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	496f      	ldr	r1, [pc, #444]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056a6:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f023 020c 	bic.w	r2, r3, #12
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b4:	4966      	ldr	r1, [pc, #408]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056c8:	4b61      	ldr	r3, [pc, #388]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	495e      	ldr	r1, [pc, #376]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ea:	4b59      	ldr	r3, [pc, #356]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	4955      	ldr	r1, [pc, #340]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800570c:	4b50      	ldr	r3, [pc, #320]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	494d      	ldr	r1, [pc, #308]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800572e:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	4944      	ldr	r1, [pc, #272]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575e:	493c      	ldr	r1, [pc, #240]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005772:	4b37      	ldr	r3, [pc, #220]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	4933      	ldr	r1, [pc, #204]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005794:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a2:	492b      	ldr	r1, [pc, #172]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d011      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057b6:	4b26      	ldr	r3, [pc, #152]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c4:	4922      	ldr	r1, [pc, #136]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d4:	d101      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	4912      	ldr	r1, [pc, #72]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005828:	4909      	ldr	r1, [pc, #36]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d006      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80d9 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a01      	ldr	r2, [pc, #4]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800584e:	e001      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005850:	40023800 	.word	0x40023800
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fc fbed 	bl	8002034 <HAL_GetTick>
 800585a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800585e:	f7fc fbe9 	bl	8002034 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e194      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005870:	4b6c      	ldr	r3, [pc, #432]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d021      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005890:	4b64      	ldr	r3, [pc, #400]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800589e:	4b61      	ldr	r3, [pc, #388]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	019a      	lsls	r2, r3, #6
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	4957      	ldr	r1, [pc, #348]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02e      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f6:	d129      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058f8:	4b4a      	ldr	r3, [pc, #296]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005906:	4b47      	ldr	r3, [pc, #284]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590c:	0f1b      	lsrs	r3, r3, #28
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	019a      	lsls	r2, r3, #6
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	431a      	orrs	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	071b      	lsls	r3, r3, #28
 800592c:	493d      	ldr	r1, [pc, #244]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005934:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593a:	f023 021f 	bic.w	r2, r3, #31
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	3b01      	subs	r3, #1
 8005944:	4937      	ldr	r1, [pc, #220]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005958:	4b32      	ldr	r3, [pc, #200]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596c:	0f1b      	lsrs	r3, r3, #28
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	019a      	lsls	r2, r3, #6
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	431a      	orrs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	071b      	lsls	r3, r3, #28
 800598c:	4925      	ldr	r1, [pc, #148]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d011      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	019a      	lsls	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	071b      	lsls	r3, r3, #28
 80059bc:	4919      	ldr	r1, [pc, #100]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fc fb30 	bl	8002034 <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059d8:	f7fc fb2c 	bl	8002034 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0d7      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ea:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	f040 80cd 	bne.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fc fb13 	bl	8002034 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a12:	f7fc fb0f 	bl	8002034 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d903      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0ba      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a28:	4b5e      	ldr	r3, [pc, #376]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a34:	d0ed      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02e      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a5e:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	4944      	ldr	r1, [pc, #272]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a9a:	4b42      	ldr	r3, [pc, #264]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	493d      	ldr	r1, [pc, #244]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d022      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac8:	d11d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	4929      	ldr	r1, [pc, #164]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d028      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b20:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	019a      	lsls	r2, r3, #6
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	4917      	ldr	r1, [pc, #92]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b70:	f7fc fa60 	bl	8002034 <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b78:	f7fc fa5c 	bl	8002034 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e007      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b96:	d1ef      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e025      	b.n	8005c08 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fc f827 	bl	8001c24 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f001 fda5 	bl	8007738 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	f001 fdf9 	bl	80077f0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c22:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d101      	bne.n	8005c2e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e021      	b.n	8005c72 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d002      	beq.n	8005c3a <HAL_SDRAM_SendCommand+0x2a>
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d118      	bne.n	8005c6c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fe3a 	bl	80078c4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d104      	bne.n	8005c62 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2205      	movs	r2, #5
 8005c5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c60:	e006      	b.n	8005c70 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c6a:	e001      	b.n	8005c70 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d101      	bne.n	8005c94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e016      	b.n	8005cc2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fe2c 	bl	800790c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e049      	b.n	8005d70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f841 	bl	8005d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 f9ff 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e054      	b.n	8005e4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d01d      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_TIM_Base_Start_IT+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d115      	bne.n	8005e38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_TIM_Base_Start_IT+0xec>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d015      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xbe>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d011      	beq.n	8005e4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e000      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40010400 	.word	0x40010400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40001800 	.word	0x40001800
 8005e78:	00010007 	.word	0x00010007

08005e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0202 	mvn.w	r2, #2
 8005ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f905 	bl	80060ce <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f8f7 	bl	80060ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f908 	bl	80060e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0204 	mvn.w	r2, #4
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8db 	bl	80060ce <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8cd 	bl	80060ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8de 	bl	80060e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0208 	mvn.w	r2, #8
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8b1 	bl	80060ce <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8a3 	bl	80060ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8b4 	bl	80060e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b10      	cmp	r3, #16
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0210 	mvn.w	r2, #16
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f887 	bl	80060ce <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f879 	bl	80060ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f88a 	bl	80060e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0201 	mvn.w	r2, #1
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb f9de 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f91a 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603a:	d10e      	bne.n	800605a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d107      	bne.n	800605a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f90d 	bl	8006274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d10e      	bne.n	8006086 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d107      	bne.n	8006086 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f838 	bl	80060f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b20      	cmp	r3, #32
 8006092:	d10e      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0220 	mvn.w	r2, #32
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8cd 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a40      	ldr	r2, [pc, #256]	; (8006220 <TIM_Base_SetConfig+0x114>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	d00f      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3d      	ldr	r2, [pc, #244]	; (8006224 <TIM_Base_SetConfig+0x118>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00b      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3c      	ldr	r2, [pc, #240]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d007      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3b      	ldr	r2, [pc, #236]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_Base_SetConfig+0x40>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a3a      	ldr	r2, [pc, #232]	; (8006230 <TIM_Base_SetConfig+0x124>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d108      	bne.n	800615e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <TIM_Base_SetConfig+0x114>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d02b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d027      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2c      	ldr	r2, [pc, #176]	; (8006224 <TIM_Base_SetConfig+0x118>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d023      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2b      	ldr	r2, [pc, #172]	; (8006228 <TIM_Base_SetConfig+0x11c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01f      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2a      	ldr	r2, [pc, #168]	; (800622c <TIM_Base_SetConfig+0x120>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a29      	ldr	r2, [pc, #164]	; (8006230 <TIM_Base_SetConfig+0x124>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d017      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a28      	ldr	r2, [pc, #160]	; (8006234 <TIM_Base_SetConfig+0x128>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a27      	ldr	r2, [pc, #156]	; (8006238 <TIM_Base_SetConfig+0x12c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00f      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <TIM_Base_SetConfig+0x130>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00b      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a25      	ldr	r2, [pc, #148]	; (8006240 <TIM_Base_SetConfig+0x134>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a24      	ldr	r2, [pc, #144]	; (8006244 <TIM_Base_SetConfig+0x138>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <TIM_Base_SetConfig+0x13c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <TIM_Base_SetConfig+0x114>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0xf8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <TIM_Base_SetConfig+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	615a      	str	r2, [r3, #20]
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40010400 	.word	0x40010400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800
 8006240:	40001800 	.word	0x40001800
 8006244:	40001c00 	.word	0x40001c00
 8006248:	40002000 	.word	0x40002000

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e040      	b.n	800631c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fb20 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	; 0x24
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fb62 	bl	8006990 <UART_SetConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e022      	b.n	800631c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fdba 	bl	8006e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fe41 	bl	8006f9c <UART_CheckIdleState>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006338:	2b20      	cmp	r3, #32
 800633a:	d132      	bne.n	80063a2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Receive_IT+0x24>
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e02b      	b.n	80063a4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d018      	beq.n	8006392 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	613b      	str	r3, [r7, #16]
   return(result);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	69f9      	ldr	r1, [r7, #28]
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	61bb      	str	r3, [r7, #24]
   return(result);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	461a      	mov	r2, r3
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fefd 	bl	8007198 <UART_Start_Receive_IT>
 800639e:	4603      	mov	r3, r0
 80063a0:	e000      	b.n	80063a4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	; 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0ba      	sub	sp, #232	; 0xe8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80063da:	4013      	ands	r3, r2
 80063dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d115      	bne.n	8006414 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00f      	beq.n	8006414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8297 	beq.w	8006938 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
      }
      return;
 8006412:	e291      	b.n	8006938 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8117 	beq.w	800664c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800642a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800642e:	4b85      	ldr	r3, [pc, #532]	; (8006644 <HAL_UART_IRQHandler+0x298>)
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 810a 	beq.w	800664c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d011      	beq.n	8006468 <HAL_UART_IRQHandler+0xbc>
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d011      	beq.n	8006498 <HAL_UART_IRQHandler+0xec>
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d011      	beq.n	80064c8 <HAL_UART_IRQHandler+0x11c>
 80064a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2204      	movs	r2, #4
 80064b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064be:	f043 0202 	orr.w	r2, r3, #2
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d017      	beq.n	8006504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fa:	f043 0208 	orr.w	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <HAL_UART_IRQHandler+0x18a>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00c      	beq.n	8006536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 81fd 	beq.w	800693c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d005      	beq.n	800658e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800658a:	2b00      	cmp	r3, #0
 800658c:	d04f      	beq.n	800662e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fec8 	bl	8007324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d141      	bne.n	8006626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1d9      	bne.n	80065a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d013      	beq.n	800661e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fa:	4a13      	ldr	r2, [pc, #76]	; (8006648 <HAL_UART_IRQHandler+0x29c>)
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006602:	4618      	mov	r0, r3
 8006604:	f7fc f830 	bl	8002668 <HAL_DMA_Abort_IT>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e00f      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9a0 	bl	8006964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	e00b      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f99c 	bl	8006964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e007      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f998 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800663c:	e17e      	b.n	800693c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663e:	bf00      	nop
    return;
 8006640:	e17c      	b.n	800693c <HAL_UART_IRQHandler+0x590>
 8006642:	bf00      	nop
 8006644:	04000120 	.word	0x04000120
 8006648:	080073ed 	.word	0x080073ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 814c 	bne.w	80068ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8145 	beq.w	80068ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 813e 	beq.w	80068ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2210      	movs	r2, #16
 8006678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	f040 80b6 	bne.w	80067f6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8150 	beq.w	8006940 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f080 8148 	bcs.w	8006940 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	f000 8086 	beq.w	80067d4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1da      	bne.n	80066c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006736:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800673a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800673e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e1      	bne.n	8006712 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006772:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006774:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006778:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e3      	bne.n	800674e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	f023 0310 	bic.w	r3, r3, #16
 80067a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e4      	bne.n	8006794 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fb feda 	bl	8002588 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8c2 	bl	8006978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067f4:	e0a4      	b.n	8006940 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006802:	b29b      	uxth	r3, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8096 	beq.w	8006944 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8091 	beq.w	8006944 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006844:	647b      	str	r3, [r7, #68]	; 0x44
 8006846:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800684a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e4      	bne.n	8006822 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	623b      	str	r3, [r7, #32]
   return(result);
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800687c:	633a      	str	r2, [r7, #48]	; 0x30
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e3      	bne.n	8006858 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f023 0310 	bic.w	r3, r3, #16
 80068b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	69b9      	ldr	r1, [r7, #24]
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	617b      	str	r3, [r7, #20]
   return(result);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e4      	bne.n	80068a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f846 	bl	8006978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ec:	e02a      	b.n	8006944 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01c      	beq.n	8006948 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
    }
    return;
 8006916:	e017      	b.n	8006948 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d012      	beq.n	800694a <HAL_UART_IRQHandler+0x59e>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00c      	beq.n	800694a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fd71 	bl	8007418 <UART_EndTransmit_IT>
    return;
 8006936:	e008      	b.n	800694a <HAL_UART_IRQHandler+0x59e>
      return;
 8006938:	bf00      	nop
 800693a:	e006      	b.n	800694a <HAL_UART_IRQHandler+0x59e>
    return;
 800693c:	bf00      	nop
 800693e:	e004      	b.n	800694a <HAL_UART_IRQHandler+0x59e>
      return;
 8006940:	bf00      	nop
 8006942:	e002      	b.n	800694a <HAL_UART_IRQHandler+0x59e>
      return;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <HAL_UART_IRQHandler+0x59e>
    return;
 8006948:	bf00      	nop
  }

}
 800694a:	37e8      	adds	r7, #232	; 0xe8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4ba6      	ldr	r3, [pc, #664]	; (8006c54 <UART_SetConfig+0x2c4>)
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a94      	ldr	r2, [pc, #592]	; (8006c58 <UART_SetConfig+0x2c8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d120      	bne.n	8006a4e <UART_SetConfig+0xbe>
 8006a0c:	4b93      	ldr	r3, [pc, #588]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d816      	bhi.n	8006a48 <UART_SetConfig+0xb8>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0x90>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a3d 	.word	0x08006a3d
 8006a28:	08006a37 	.word	0x08006a37
 8006a2c:	08006a43 	.word	0x08006a43
 8006a30:	2301      	movs	r3, #1
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e150      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e14d      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e14a      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e147      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e144      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a83      	ldr	r2, [pc, #524]	; (8006c60 <UART_SetConfig+0x2d0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d132      	bne.n	8006abe <UART_SetConfig+0x12e>
 8006a58:	4b80      	ldr	r3, [pc, #512]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b0c      	cmp	r3, #12
 8006a64:	d828      	bhi.n	8006ab8 <UART_SetConfig+0x128>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0xdc>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006ab9 	.word	0x08006ab9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006ab9 	.word	0x08006ab9
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006aa7 	.word	0x08006aa7
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ab9 	.word	0x08006ab9
 8006a9c:	08006ab3 	.word	0x08006ab3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e118      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e115      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006aac:	2304      	movs	r3, #4
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e112      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e10f      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e10c      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a68      	ldr	r2, [pc, #416]	; (8006c64 <UART_SetConfig+0x2d4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <UART_SetConfig+0x17a>
 8006ac8:	4b64      	ldr	r3, [pc, #400]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ad2:	2b30      	cmp	r3, #48	; 0x30
 8006ad4:	d013      	beq.n	8006afe <UART_SetConfig+0x16e>
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d814      	bhi.n	8006b04 <UART_SetConfig+0x174>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d009      	beq.n	8006af2 <UART_SetConfig+0x162>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d810      	bhi.n	8006b04 <UART_SetConfig+0x174>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <UART_SetConfig+0x15c>
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d006      	beq.n	8006af8 <UART_SetConfig+0x168>
 8006aea:	e00b      	b.n	8006b04 <UART_SetConfig+0x174>
 8006aec:	2300      	movs	r3, #0
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e0f2      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e0ef      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006af8:	2304      	movs	r3, #4
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e0ec      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006afe:	2308      	movs	r3, #8
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e0e9      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b04:	2310      	movs	r3, #16
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0e6      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a56      	ldr	r2, [pc, #344]	; (8006c68 <UART_SetConfig+0x2d8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d120      	bne.n	8006b56 <UART_SetConfig+0x1c6>
 8006b14:	4b51      	ldr	r3, [pc, #324]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b20:	d013      	beq.n	8006b4a <UART_SetConfig+0x1ba>
 8006b22:	2bc0      	cmp	r3, #192	; 0xc0
 8006b24:	d814      	bhi.n	8006b50 <UART_SetConfig+0x1c0>
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d009      	beq.n	8006b3e <UART_SetConfig+0x1ae>
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d810      	bhi.n	8006b50 <UART_SetConfig+0x1c0>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <UART_SetConfig+0x1a8>
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d006      	beq.n	8006b44 <UART_SetConfig+0x1b4>
 8006b36:	e00b      	b.n	8006b50 <UART_SetConfig+0x1c0>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e0cc      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e0c9      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b44:	2304      	movs	r3, #4
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e0c6      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e0c3      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b50:	2310      	movs	r3, #16
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0c0      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a44      	ldr	r2, [pc, #272]	; (8006c6c <UART_SetConfig+0x2dc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d125      	bne.n	8006bac <UART_SetConfig+0x21c>
 8006b60:	4b3e      	ldr	r3, [pc, #248]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6e:	d017      	beq.n	8006ba0 <UART_SetConfig+0x210>
 8006b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b74:	d817      	bhi.n	8006ba6 <UART_SetConfig+0x216>
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7a:	d00b      	beq.n	8006b94 <UART_SetConfig+0x204>
 8006b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b80:	d811      	bhi.n	8006ba6 <UART_SetConfig+0x216>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <UART_SetConfig+0x1fe>
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d006      	beq.n	8006b9a <UART_SetConfig+0x20a>
 8006b8c:	e00b      	b.n	8006ba6 <UART_SetConfig+0x216>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e0a1      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b94:	2302      	movs	r3, #2
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e09e      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e09b      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e098      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e095      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <UART_SetConfig+0x2e0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d125      	bne.n	8006c02 <UART_SetConfig+0x272>
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc4:	d017      	beq.n	8006bf6 <UART_SetConfig+0x266>
 8006bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bca:	d817      	bhi.n	8006bfc <UART_SetConfig+0x26c>
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d00b      	beq.n	8006bea <UART_SetConfig+0x25a>
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d811      	bhi.n	8006bfc <UART_SetConfig+0x26c>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <UART_SetConfig+0x254>
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d006      	beq.n	8006bf0 <UART_SetConfig+0x260>
 8006be2:	e00b      	b.n	8006bfc <UART_SetConfig+0x26c>
 8006be4:	2301      	movs	r3, #1
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e076      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006bea:	2302      	movs	r3, #2
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e073      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e070      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e06d      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e06a      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1b      	ldr	r2, [pc, #108]	; (8006c74 <UART_SetConfig+0x2e4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d138      	bne.n	8006c7e <UART_SetConfig+0x2ee>
 8006c0c:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <UART_SetConfig+0x2cc>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c1a:	d017      	beq.n	8006c4c <UART_SetConfig+0x2bc>
 8006c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c20:	d82a      	bhi.n	8006c78 <UART_SetConfig+0x2e8>
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d00b      	beq.n	8006c40 <UART_SetConfig+0x2b0>
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2c:	d824      	bhi.n	8006c78 <UART_SetConfig+0x2e8>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <UART_SetConfig+0x2aa>
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c36:	d006      	beq.n	8006c46 <UART_SetConfig+0x2b6>
 8006c38:	e01e      	b.n	8006c78 <UART_SetConfig+0x2e8>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e04b      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c40:	2302      	movs	r3, #2
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e048      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c46:	2304      	movs	r3, #4
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e045      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e042      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c52:	bf00      	nop
 8006c54:	efff69f3 	.word	0xefff69f3
 8006c58:	40011000 	.word	0x40011000
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40004400 	.word	0x40004400
 8006c64:	40004800 	.word	0x40004800
 8006c68:	40004c00 	.word	0x40004c00
 8006c6c:	40005000 	.word	0x40005000
 8006c70:	40011400 	.word	0x40011400
 8006c74:	40007800 	.word	0x40007800
 8006c78:	2310      	movs	r3, #16
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e02c      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a72      	ldr	r2, [pc, #456]	; (8006e4c <UART_SetConfig+0x4bc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d125      	bne.n	8006cd4 <UART_SetConfig+0x344>
 8006c88:	4b71      	ldr	r3, [pc, #452]	; (8006e50 <UART_SetConfig+0x4c0>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c96:	d017      	beq.n	8006cc8 <UART_SetConfig+0x338>
 8006c98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c9c:	d817      	bhi.n	8006cce <UART_SetConfig+0x33e>
 8006c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca2:	d00b      	beq.n	8006cbc <UART_SetConfig+0x32c>
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	d811      	bhi.n	8006cce <UART_SetConfig+0x33e>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <UART_SetConfig+0x326>
 8006cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb2:	d006      	beq.n	8006cc2 <UART_SetConfig+0x332>
 8006cb4:	e00b      	b.n	8006cce <UART_SetConfig+0x33e>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e00d      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e00a      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e007      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e004      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006cce:	2310      	movs	r3, #16
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e001      	b.n	8006cd8 <UART_SetConfig+0x348>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	d15b      	bne.n	8006d9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d828      	bhi.n	8006d3a <UART_SetConfig+0x3aa>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0x360>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d1d 	.word	0x08006d1d
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	08006d3b 	.word	0x08006d3b
 8006d00:	08006d2b 	.word	0x08006d2b
 8006d04:	08006d3b 	.word	0x08006d3b
 8006d08:	08006d3b 	.word	0x08006d3b
 8006d0c:	08006d3b 	.word	0x08006d3b
 8006d10:	08006d33 	.word	0x08006d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fe fafe 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8006d18:	61b8      	str	r0, [r7, #24]
        break;
 8006d1a:	e013      	b.n	8006d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d1c:	f7fe fb0e 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8006d20:	61b8      	str	r0, [r7, #24]
        break;
 8006d22:	e00f      	b.n	8006d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <UART_SetConfig+0x4c4>)
 8006d26:	61bb      	str	r3, [r7, #24]
        break;
 8006d28:	e00c      	b.n	8006d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d2a:	f7fe fa21 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006d2e:	61b8      	str	r0, [r7, #24]
        break;
 8006d30:	e008      	b.n	8006d44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d36:	61bb      	str	r3, [r7, #24]
        break;
 8006d38:	e004      	b.n	8006d44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	77bb      	strb	r3, [r7, #30]
        break;
 8006d42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d074      	beq.n	8006e34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	005a      	lsls	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0f      	cmp	r3, #15
 8006d64:	d916      	bls.n	8006d94 <UART_SetConfig+0x404>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d212      	bcs.n	8006d94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f023 030f 	bic.w	r3, r3, #15
 8006d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	89fa      	ldrh	r2, [r7, #14]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	e04f      	b.n	8006e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	77bb      	strb	r3, [r7, #30]
 8006d98:	e04c      	b.n	8006e34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d828      	bhi.n	8006df2 <UART_SetConfig+0x462>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x418>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dd5 	.word	0x08006dd5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	08006df3 	.word	0x08006df3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006df3 	.word	0x08006df3
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006deb 	.word	0x08006deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fe faa2 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8006dd0:	61b8      	str	r0, [r7, #24]
        break;
 8006dd2:	e013      	b.n	8006dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd4:	f7fe fab2 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8006dd8:	61b8      	str	r0, [r7, #24]
        break;
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <UART_SetConfig+0x4c4>)
 8006dde:	61bb      	str	r3, [r7, #24]
        break;
 8006de0:	e00c      	b.n	8006dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fe f9c5 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006de6:	61b8      	str	r0, [r7, #24]
        break;
 8006de8:	e008      	b.n	8006dfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	61bb      	str	r3, [r7, #24]
        break;
 8006df0:	e004      	b.n	8006dfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	77bb      	strb	r3, [r7, #30]
        break;
 8006dfa:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d018      	beq.n	8006e34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	085a      	lsrs	r2, r3, #1
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2b0f      	cmp	r3, #15
 8006e1a:	d909      	bls.n	8006e30 <UART_SetConfig+0x4a0>
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e22:	d205      	bcs.n	8006e30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	e001      	b.n	8006e34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e40:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40007c00 	.word	0x40007c00
 8006e50:	40023800 	.word	0x40023800
 8006e54:	00f42400 	.word	0x00f42400

08006e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f56:	d10a      	bne.n	8006f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fac:	f7fb f842 	bl	8002034 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d10e      	bne.n	8006fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f81b 	bl	800700a <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e011      	b.n	8007002 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b09c      	sub	sp, #112	; 0x70
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701a:	e0a7      	b.n	800716c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007022:	f000 80a3 	beq.w	800716c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fb f805 	bl	8002034 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <UART_WaitOnFlagUntilTimeout+0x32>
 8007036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13f      	bne.n	80070bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007050:	667b      	str	r3, [r7, #100]	; 0x64
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800705c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	663b      	str	r3, [r7, #96]	; 0x60
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800708e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007090:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800709c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e068      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d050      	beq.n	800716c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d8:	d148      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
 8007104:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e6      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	66bb      	str	r3, [r7, #104]	; 0x68
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007136:	623a      	str	r2, [r7, #32]
 8007138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69f9      	ldr	r1, [r7, #28]
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	61bb      	str	r3, [r7, #24]
   return(result);
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e010      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4013      	ands	r3, r2
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	429a      	cmp	r2, r3
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	429a      	cmp	r2, r3
 8007188:	f43f af48 	beq.w	800701c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3770      	adds	r7, #112	; 0x70
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007198:	b480      	push	{r7}
 800719a:	b097      	sub	sp, #92	; 0x5c
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	88fa      	ldrh	r2, [r7, #6]
 80071b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	d10e      	bne.n	80071ea <UART_Start_Receive_IT+0x52>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <UART_Start_Receive_IT+0x48>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071de:	e02d      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	22ff      	movs	r2, #255	; 0xff
 80071e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e8:	e028      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <UART_Start_Receive_IT+0x76>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <UART_Start_Receive_IT+0x6c>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22ff      	movs	r2, #255	; 0xff
 80071fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007202:	e01b      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	227f      	movs	r2, #127	; 0x7f
 8007208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800720c:	e016      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007216:	d10d      	bne.n	8007234 <UART_Start_Receive_IT+0x9c>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <UART_Start_Receive_IT+0x92>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	227f      	movs	r2, #127	; 0x7f
 8007224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007228:	e008      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	223f      	movs	r2, #63	; 0x3f
 800722e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007232:	e003      	b.n	800723c <UART_Start_Receive_IT+0xa4>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2222      	movs	r2, #34	; 0x22
 8007248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3308      	adds	r3, #8
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	657b      	str	r3, [r7, #84]	; 0x54
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800726c:	64ba      	str	r2, [r7, #72]	; 0x48
 800726e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800727a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e5      	bne.n	800724c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007288:	d107      	bne.n	800729a <UART_Start_Receive_IT+0x102>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d103      	bne.n	800729a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <UART_Start_Receive_IT+0x184>)
 8007296:	669a      	str	r2, [r3, #104]	; 0x68
 8007298:	e002      	b.n	80072a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <UART_Start_Receive_IT+0x188>)
 800729e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d019      	beq.n	80072dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
 80072c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e6      	bne.n	80072a8 <UART_Start_Receive_IT+0x110>
 80072da:	e018      	b.n	800730e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f043 0320 	orr.w	r3, r3, #32
 80072f0:	653b      	str	r3, [r7, #80]	; 0x50
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	61bb      	str	r3, [r7, #24]
   return(result);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e6      	bne.n	80072dc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	375c      	adds	r7, #92	; 0x5c
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	080075d3 	.word	0x080075d3
 8007320:	0800746d 	.word	0x0800746d

08007324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b095      	sub	sp, #84	; 0x54
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734a:	643b      	str	r3, [r7, #64]	; 0x40
 800734c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e6      	bne.n	800732c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	61fb      	str	r3, [r7, #28]
   return(result);
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	64bb      	str	r3, [r7, #72]	; 0x48
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800737e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007396:	2b01      	cmp	r3, #1
 8007398:	d118      	bne.n	80073cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f023 0310 	bic.w	r3, r3, #16
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6979      	ldr	r1, [r7, #20]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	613b      	str	r3, [r7, #16]
   return(result);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073e0:	bf00      	nop
 80073e2:	3754      	adds	r7, #84	; 0x54
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff faaa 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60bb      	str	r3, [r7, #8]
   return(result);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6979      	ldr	r1, [r7, #20]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	613b      	str	r3, [r7, #16]
   return(result);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e6      	bne.n	8007420 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fa76 	bl	8006950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007464:	bf00      	nop
 8007466:	3720      	adds	r7, #32
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b096      	sub	sp, #88	; 0x58
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800747a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007484:	2b22      	cmp	r3, #34	; 0x22
 8007486:	f040 8098 	bne.w	80075ba <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007494:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007498:	b2d9      	uxtb	r1, r3
 800749a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a4:	400a      	ands	r2, r1
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d17b      	bne.n	80075ca <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e6:	653b      	str	r3, [r7, #80]	; 0x50
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
 80074f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	623b      	str	r3, [r7, #32]
   return(result);
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007524:	633a      	str	r2, [r7, #48]	; 0x30
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e5      	bne.n	8007504 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007550:	2b01      	cmp	r3, #1
 8007552:	d12e      	bne.n	80075b2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	617b      	str	r3, [r7, #20]
   return(result);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e6      	bne.n	800755a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b10      	cmp	r3, #16
 8007598:	d103      	bne.n	80075a2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2210      	movs	r2, #16
 80075a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff f9e4 	bl	8006978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075b0:	e00b      	b.n	80075ca <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7f9 f9fa 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 80075b8:	e007      	b.n	80075ca <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0208 	orr.w	r2, r2, #8
 80075c8:	619a      	str	r2, [r3, #24]
}
 80075ca:	bf00      	nop
 80075cc:	3758      	adds	r7, #88	; 0x58
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b096      	sub	sp, #88	; 0x58
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ea:	2b22      	cmp	r3, #34	; 0x22
 80075ec:	f040 8098 	bne.w	8007720 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007600:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007604:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007608:	4013      	ands	r3, r2
 800760a:	b29a      	uxth	r2, r3
 800760c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	1c9a      	adds	r2, r3, #2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d17b      	bne.n	8007730 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800764c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	643b      	str	r3, [r7, #64]	; 0x40
 8007658:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800765c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e6      	bne.n	8007638 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	61fb      	str	r3, [r7, #28]
   return(result);
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	64bb      	str	r3, [r7, #72]	; 0x48
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e5      	bne.n	800766a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d12e      	bne.n	8007718 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f023 0310 	bic.w	r3, r3, #16
 80076d4:	647b      	str	r3, [r7, #68]	; 0x44
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076de:	61bb      	str	r3, [r7, #24]
 80076e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6979      	ldr	r1, [r7, #20]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	613b      	str	r3, [r7, #16]
   return(result);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e6      	bne.n	80076c0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d103      	bne.n	8007708 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2210      	movs	r2, #16
 8007706:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff f931 	bl	8006978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007716:	e00b      	b.n	8007730 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7f9 f947 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 800771e:	e007      	b.n	8007730 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0208 	orr.w	r2, r2, #8
 800772e:	619a      	str	r2, [r3, #24]
}
 8007730:	bf00      	nop
 8007732:	3758      	adds	r7, #88	; 0x58
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d121      	bne.n	800778e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <FMC_SDRAM_Init+0xb4>)
 8007750:	4013      	ands	r3, r2
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	6851      	ldr	r1, [r2, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	6892      	ldr	r2, [r2, #8]
 800775a:	4311      	orrs	r1, r2
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	68d2      	ldr	r2, [r2, #12]
 8007760:	4311      	orrs	r1, r2
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	6912      	ldr	r2, [r2, #16]
 8007766:	4311      	orrs	r1, r2
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	6952      	ldr	r2, [r2, #20]
 800776c:	4311      	orrs	r1, r2
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	6992      	ldr	r2, [r2, #24]
 8007772:	4311      	orrs	r1, r2
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	69d2      	ldr	r2, [r2, #28]
 8007778:	4311      	orrs	r1, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	6a12      	ldr	r2, [r2, #32]
 800777e:	4311      	orrs	r1, r2
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007784:	430a      	orrs	r2, r1
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	e026      	b.n	80077dc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	69d9      	ldr	r1, [r3, #28]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	4319      	orrs	r1, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	430b      	orrs	r3, r1
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <FMC_SDRAM_Init+0xb4>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	6851      	ldr	r1, [r2, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	6892      	ldr	r2, [r2, #8]
 80077bc:	4311      	orrs	r1, r2
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	68d2      	ldr	r2, [r2, #12]
 80077c2:	4311      	orrs	r1, r2
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	6912      	ldr	r2, [r2, #16]
 80077c8:	4311      	orrs	r1, r2
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	6952      	ldr	r2, [r2, #20]
 80077ce:	4311      	orrs	r1, r2
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	6992      	ldr	r2, [r2, #24]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	ffff8000 	.word	0xffff8000

080077f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d128      	bne.n	8007854 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	1e59      	subs	r1, r3, #1
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4319      	orrs	r1, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	4319      	orrs	r1, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	3b01      	subs	r3, #1
 800782a:	031b      	lsls	r3, r3, #12
 800782c:	4319      	orrs	r1, r3
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	3b01      	subs	r3, #1
 8007834:	041b      	lsls	r3, r3, #16
 8007836:	4319      	orrs	r1, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	3b01      	subs	r3, #1
 800783e:	051b      	lsls	r3, r3, #20
 8007840:	4319      	orrs	r1, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	3b01      	subs	r3, #1
 8007848:	061b      	lsls	r3, r3, #24
 800784a:	430b      	orrs	r3, r1
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	609a      	str	r2, [r3, #8]
 8007852:	e02d      	b.n	80078b0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	4b19      	ldr	r3, [pc, #100]	; (80078c0 <FMC_SDRAM_Timing_Init+0xd0>)
 800785a:	4013      	ands	r3, r2
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68d2      	ldr	r2, [r2, #12]
 8007860:	3a01      	subs	r2, #1
 8007862:	0311      	lsls	r1, r2, #12
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	6952      	ldr	r2, [r2, #20]
 8007868:	3a01      	subs	r2, #1
 800786a:	0512      	lsls	r2, r2, #20
 800786c:	430a      	orrs	r2, r1
 800786e:	431a      	orrs	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	1e59      	subs	r1, r3, #1
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	3b01      	subs	r3, #1
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4319      	orrs	r1, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	3b01      	subs	r3, #1
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	4319      	orrs	r1, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	3b01      	subs	r3, #1
 800789c:	041b      	lsls	r3, r3, #16
 800789e:	4319      	orrs	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	061b      	lsls	r3, r3, #24
 80078a8:	430b      	orrs	r3, r1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	ff0f0fff 	.word	0xff0f0fff

080078c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <FMC_SDRAM_SendCommand+0x44>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	6811      	ldr	r1, [r2, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	6852      	ldr	r2, [r2, #4]
 80078e0:	4311      	orrs	r1, r2
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	6892      	ldr	r2, [r2, #8]
 80078e6:	3a01      	subs	r2, #1
 80078e8:	0152      	lsls	r2, r2, #5
 80078ea:	4311      	orrs	r1, r2
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	68d2      	ldr	r2, [r2, #12]
 80078f0:	0252      	lsls	r2, r2, #9
 80078f2:	430a      	orrs	r2, r1
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	ffc00000 	.word	0xffc00000

0800790c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695a      	ldr	r2, [r3, #20]
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800791c:	4013      	ands	r3, r2
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	0052      	lsls	r2, r2, #1
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	ffffc001 	.word	0xffffc001

0800793c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800794a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800794e:	2b84      	cmp	r3, #132	; 0x84
 8007950:	d005      	beq.n	800795e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	3303      	adds	r3, #3
 800795c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007972:	f3ef 8305 	mrs	r3, IPSR
 8007976:	607b      	str	r3, [r7, #4]
  return(result);
 8007978:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf14      	ite	ne
 800797e:	2301      	movne	r3, #1
 8007980:	2300      	moveq	r3, #0
 8007982:	b2db      	uxtb	r3, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007994:	f001 f884 	bl	8008aa0 <vTaskStartScheduler>
  
  return osOK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	bd80      	pop	{r7, pc}

0800799e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800799e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a0:	b087      	sub	sp, #28
 80079a2:	af02      	add	r7, sp, #8
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685c      	ldr	r4, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079b4:	b29e      	uxth	r6, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ffbd 	bl	800793c <makeFreeRtosPriority>
 80079c2:	4602      	mov	r2, r0
 80079c4:	f107 030c 	add.w	r3, r7, #12
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	9200      	str	r2, [sp, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	4632      	mov	r2, r6
 80079d0:	4629      	mov	r1, r5
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fed6 	bl	8008784 <xTaskCreate>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	e000      	b.n	80079e4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <osDelay+0x16>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e000      	b.n	8007a04 <osDelay+0x18>
 8007a02:	2301      	movs	r3, #1
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f815 	bl	8008a34 <vTaskDelay>
  
  return osOK;
 8007a0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d110      	bne.n	8007a46 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007a24:	2203      	movs	r2, #3
 8007a26:	2100      	movs	r1, #0
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f000 f9b9 	bl	8007da0 <xQueueGenericCreate>
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <osSemaphoreCreate+0x2e>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fa43 	bl	8007ec8 <xQueueGenericSend>
    return sema;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	e006      	b.n	8007a54 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fa04 	bl	8007e5a <xQueueCreateCountingSemaphore>
 8007a52:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	e03a      	b.n	8007aea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7e:	d103      	bne.n	8007a88 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	e009      	b.n	8007a9c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <osSemaphoreWait+0x40>
      ticks = 1;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007a9c:	f7ff ff66 	bl	800796c <inHandlerMode>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d017      	beq.n	8007ad6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007aa6:	f107 0308 	add.w	r3, r7, #8
 8007aaa:	461a      	mov	r2, r3
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fcba 	bl	8008428 <xQueueReceiveFromISR>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d001      	beq.n	8007abe <osSemaphoreWait+0x62>
      return osErrorOS;
 8007aba:	23ff      	movs	r3, #255	; 0xff
 8007abc:	e015      	b.n	8007aea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d011      	beq.n	8007ae8 <osSemaphoreWait+0x8c>
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <osSemaphoreWait+0x98>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	e008      	b.n	8007ae8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb91 	bl	8008200 <xQueueSemaphoreTake>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d001      	beq.n	8007ae8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007ae4:	23ff      	movs	r3, #255	; 0xff
 8007ae6:	e000      	b.n	8007aea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007b08:	f7ff ff30 	bl	800796c <inHandlerMode>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007b12:	f107 0308 	add.w	r3, r7, #8
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fadb 	bl	80080d4 <xQueueGiveFromISR>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d001      	beq.n	8007b28 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007b24:	23ff      	movs	r3, #255	; 0xff
 8007b26:	e017      	b.n	8007b58 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d013      	beq.n	8007b56 <osSemaphoreRelease+0x5e>
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <osSemaphoreRelease+0x68>)
 8007b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	e00a      	b.n	8007b56 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007b40:	2300      	movs	r3, #0
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f9be 	bl	8007ec8 <xQueueGenericSend>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d001      	beq.n	8007b56 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007b52:	23ff      	movs	r3, #255	; 0xff
 8007b54:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f103 0208 	add.w	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f103 0208 	add.w	r2, r3, #8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f103 0208 	add.w	r2, r3, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d103      	bne.n	8007c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e00c      	b.n	8007c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e002      	b.n	8007c34 <vListInsert+0x2e>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d2f6      	bcs.n	8007c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6892      	ldr	r2, [r2, #8]
 8007c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6852      	ldr	r2, [r2, #4]
 8007c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d103      	bne.n	8007cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10c      	bne.n	8007cfa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007cfa:	f001 fe2f 	bl	800995c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d0a:	fb01 f303 	mul.w	r3, r1, r3
 8007d0e:	441a      	add	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	22ff      	movs	r2, #255	; 0xff
 8007d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d114      	bne.n	8007d7a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01a      	beq.n	8007d8e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f909 	bl	8008f74 <xTaskRemoveFromEventList>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d012      	beq.n	8007d8e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <xQueueGenericReset+0xd0>)
 8007d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	e009      	b.n	8007d8e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3310      	adds	r3, #16
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fef0 	bl	8007b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3324      	adds	r3, #36	; 0x24
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff feeb 	bl	8007b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d8e:	f001 fe19 	bl	80099c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d92:	2301      	movs	r3, #1
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10c      	bne.n	8007dce <xQueueGenericCreate+0x2e>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	b672      	cpsid	i
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	b662      	cpsie	i
 8007dc8:	613b      	str	r3, [r7, #16]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e004      	b.n	8007de4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	3348      	adds	r3, #72	; 0x48
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 fee3 	bl	8009bb4 <pvPortMalloc>
 8007dee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00d      	beq.n	8007e12 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	3348      	adds	r3, #72	; 0x48
 8007dfe:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e00:	79fa      	ldrb	r2, [r7, #7]
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4613      	mov	r3, r2
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f805 	bl	8007e1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e12:	69bb      	ldr	r3, [r7, #24]
	}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	69b8      	ldr	r0, [r7, #24]
 8007e4e:	f7ff ff3d 	bl	8007ccc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10c      	bne.n	8007e84 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	b672      	cpsid	i
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	b662      	cpsie	i
 8007e7e:	613b      	str	r3, [r7, #16]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d90c      	bls.n	8007ea6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	b672      	cpsid	i
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	b662      	cpsie	i
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff ff78 	bl	8007da0 <xQueueGenericCreate>
 8007eb0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ebe:	697b      	ldr	r3, [r7, #20]
	}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08e      	sub	sp, #56	; 0x38
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10c      	bne.n	8007efe <xQueueGenericSend+0x36>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	b672      	cpsid	i
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	b662      	cpsie	i
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <xQueueGenericSend+0x44>
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <xQueueGenericSend+0x48>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <xQueueGenericSend+0x4a>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10c      	bne.n	8007f30 <xQueueGenericSend+0x68>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d103      	bne.n	8007f3e <xQueueGenericSend+0x76>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <xQueueGenericSend+0x7a>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <xQueueGenericSend+0x7c>
 8007f42:	2300      	movs	r3, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10c      	bne.n	8007f62 <xQueueGenericSend+0x9a>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	b672      	cpsid	i
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	b662      	cpsie	i
 8007f5c:	623b      	str	r3, [r7, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f62:	f001 f9b1 	bl	80092c8 <xTaskGetSchedulerState>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <xQueueGenericSend+0xaa>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <xQueueGenericSend+0xae>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <xQueueGenericSend+0xb0>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <xQueueGenericSend+0xce>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	61fb      	str	r3, [r7, #28]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f96:	f001 fce1 	bl	800995c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d302      	bcc.n	8007fac <xQueueGenericSend+0xe4>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d129      	bne.n	8008000 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fb2:	f000 fad7 	bl	8008564 <prvCopyDataToQueue>
 8007fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ffd5 	bl	8008f74 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d013      	beq.n	8007ff8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b3f      	ldr	r3, [pc, #252]	; (80080d0 <xQueueGenericSend+0x208>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	e00a      	b.n	8007ff8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b39      	ldr	r3, [pc, #228]	; (80080d0 <xQueueGenericSend+0x208>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ff8:	f001 fce4 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e063      	b.n	80080c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008006:	f001 fcdd 	bl	80099c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800800a:	2300      	movs	r3, #0
 800800c:	e05c      	b.n	80080c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008014:	f107 0314 	add.w	r3, r7, #20
 8008018:	4618      	mov	r0, r3
 800801a:	f001 f80f 	bl	800903c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800801e:	2301      	movs	r3, #1
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008022:	f001 fccf 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008026:	f000 fd8f 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800802a:	f001 fc97 	bl	800995c <vPortEnterCritical>
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d103      	bne.n	8008044 <xQueueGenericSend+0x17c>
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d103      	bne.n	800805a <xQueueGenericSend+0x192>
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800805a:	f001 fcb3 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800805e:	1d3a      	adds	r2, r7, #4
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fffe 	bl	8009068 <xTaskCheckForTimeOut>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d124      	bne.n	80080bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008074:	f000 fb6e 	bl	8008754 <prvIsQueueFull>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d018      	beq.n	80080b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	3310      	adds	r3, #16
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f000 ff4e 	bl	8008f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800808c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808e:	f000 faf9 	bl	8008684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008092:	f000 fd67 	bl	8008b64 <xTaskResumeAll>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f af7c 	bne.w	8007f96 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <xQueueGenericSend+0x208>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	e772      	b.n	8007f96 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b2:	f000 fae7 	bl	8008684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080b6:	f000 fd55 	bl	8008b64 <xTaskResumeAll>
 80080ba:	e76c      	b.n	8007f96 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080be:	f000 fae1 	bl	8008684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080c2:	f000 fd4f 	bl	8008b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3738      	adds	r7, #56	; 0x38
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10c      	bne.n	8008102 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	623b      	str	r3, [r7, #32]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <xQueueGiveFromISR+0x50>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	b672      	cpsid	i
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	b662      	cpsie	i
 800811e:	61fb      	str	r3, [r7, #28]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <xQueueGiveFromISR+0x60>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <xQueueGiveFromISR+0x64>
 8008134:	2301      	movs	r3, #1
 8008136:	e000      	b.n	800813a <xQueueGiveFromISR+0x66>
 8008138:	2300      	movs	r3, #0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10c      	bne.n	8008158 <xQueueGiveFromISR+0x84>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	b672      	cpsid	i
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	b662      	cpsie	i
 8008152:	61bb      	str	r3, [r7, #24]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008158:	f001 fce8 	bl	8009b2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800815c:	f3ef 8211 	mrs	r2, BASEPRI
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	b672      	cpsid	i
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	b662      	cpsie	i
 8008174:	617a      	str	r2, [r7, #20]
 8008176:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008178:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008188:	429a      	cmp	r2, r3
 800818a:	d22b      	bcs.n	80081e4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800819e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d112      	bne.n	80081ce <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d016      	beq.n	80081de <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fedd 	bl	8008f74 <xTaskRemoveFromEventList>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	e007      	b.n	80081de <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	b25a      	sxtb	r2, r3
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081de:	2301      	movs	r3, #1
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
 80081e2:	e001      	b.n	80081e8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3738      	adds	r7, #56	; 0x38
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	; 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	623b      	str	r3, [r7, #32]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00c      	beq.n	8008258 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	61fb      	str	r3, [r7, #28]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008258:	f001 f836 	bl	80092c8 <xTaskGetSchedulerState>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d102      	bne.n	8008268 <xQueueSemaphoreTake+0x68>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <xQueueSemaphoreTake+0x6c>
 8008268:	2301      	movs	r3, #1
 800826a:	e000      	b.n	800826e <xQueueSemaphoreTake+0x6e>
 800826c:	2300      	movs	r3, #0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10c      	bne.n	800828c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	b672      	cpsid	i
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	b662      	cpsie	i
 8008286:	61bb      	str	r3, [r7, #24]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800828c:	f001 fb66 	bl	800995c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	2b00      	cmp	r3, #0
 800829a:	d024      	beq.n	80082e6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	1e5a      	subs	r2, r3, #1
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082ac:	f001 f9d2 	bl	8009654 <pvTaskIncrementMutexHeldCount>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00f      	beq.n	80082de <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	3310      	adds	r3, #16
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fe56 	bl	8008f74 <xTaskRemoveFromEventList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ce:	4b55      	ldr	r3, [pc, #340]	; (8008424 <xQueueSemaphoreTake+0x224>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082de:	f001 fb71 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e099      	b.n	800841a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d113      	bne.n	8008314 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00c      	beq.n	800830c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	b672      	cpsid	i
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	b662      	cpsie	i
 8008306:	617b      	str	r3, [r7, #20]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800830c:	f001 fb5a 	bl	80099c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008310:	2300      	movs	r3, #0
 8008312:	e082      	b.n	800841a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800831a:	f107 030c 	add.w	r3, r7, #12
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fe8c 	bl	800903c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008328:	f001 fb4c 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800832c:	f000 fc0c 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008330:	f001 fb14 	bl	800995c <vPortEnterCritical>
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d103      	bne.n	800834a <xQueueSemaphoreTake+0x14a>
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008350:	b25b      	sxtb	r3, r3
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d103      	bne.n	8008360 <xQueueSemaphoreTake+0x160>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008360:	f001 fb30 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008364:	463a      	mov	r2, r7
 8008366:	f107 030c 	add.w	r3, r7, #12
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fe7b 	bl	8009068 <xTaskCheckForTimeOut>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d132      	bne.n	80083de <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800837a:	f000 f9d5 	bl	8008728 <prvIsQueueEmpty>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d026      	beq.n	80083d2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800838c:	f001 fae6 	bl	800995c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 ffb5 	bl	8009304 <xTaskPriorityInherit>
 800839a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800839c:	f001 fb12 	bl	80099c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	3324      	adds	r3, #36	; 0x24
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fdbd 	bl	8008f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b0:	f000 f968 	bl	8008684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083b4:	f000 fbd6 	bl	8008b64 <xTaskResumeAll>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f47f af66 	bne.w	800828c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80083c0:	4b18      	ldr	r3, [pc, #96]	; (8008424 <xQueueSemaphoreTake+0x224>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	e75c      	b.n	800828c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083d4:	f000 f956 	bl	8008684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083d8:	f000 fbc4 	bl	8008b64 <xTaskResumeAll>
 80083dc:	e756      	b.n	800828c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e0:	f000 f950 	bl	8008684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e4:	f000 fbbe 	bl	8008b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ea:	f000 f99d 	bl	8008728 <prvIsQueueEmpty>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f43f af4b 	beq.w	800828c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00d      	beq.n	8008418 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80083fc:	f001 faae 	bl	800995c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008402:	f000 f897 	bl	8008534 <prvGetDisinheritPriorityAfterTimeout>
 8008406:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f882 	bl	8009518 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008414:	f001 fad6 	bl	80099c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800841a:	4618      	mov	r0, r3
 800841c:	3738      	adds	r7, #56	; 0x38
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	; 0x38
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10c      	bne.n	8008458 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	b672      	cpsid	i
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	b662      	cpsie	i
 8008452:	623b      	str	r3, [r7, #32]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <xQueueReceiveFromISR+0x3e>
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <xQueueReceiveFromISR+0x42>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <xQueueReceiveFromISR+0x44>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10c      	bne.n	800848a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	b672      	cpsid	i
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	b662      	cpsie	i
 8008484:	61fb      	str	r3, [r7, #28]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800848a:	f001 fb4f 	bl	8009b2c <vPortValidateInterruptPriority>
	__asm volatile
 800848e:	f3ef 8211 	mrs	r2, BASEPRI
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	b672      	cpsid	i
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	b662      	cpsie	i
 80084a6:	61ba      	str	r2, [r7, #24]
 80084a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80084aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02f      	beq.n	800851a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c8:	f000 f8b6 	bl	8008638 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	1e5a      	subs	r2, r3, #1
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d112      	bne.n	8008504 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d016      	beq.n	8008514 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	3310      	adds	r3, #16
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fd42 	bl	8008f74 <xTaskRemoveFromEventList>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00e      	beq.n	8008514 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e007      	b.n	8008514 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008508:	3301      	adds	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	b25a      	sxtb	r2, r3
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008514:	2301      	movs	r3, #1
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	e001      	b.n	800851e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f383 8811 	msr	BASEPRI, r3
}
 8008528:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800852c:	4618      	mov	r0, r3
 800852e:	3738      	adds	r7, #56	; 0x38
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1c3 0307 	rsb	r3, r3, #7
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e001      	b.n	8008556 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008556:	68fb      	ldr	r3, [r7, #12]
	}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10d      	bne.n	800859e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d14d      	bne.n	8008626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 ff38 	bl	8009404 <xTaskPriorityDisinherit>
 8008594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	609a      	str	r2, [r3, #8]
 800859c:	e043      	b.n	8008626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d119      	bne.n	80085d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6858      	ldr	r0, [r3, #4]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	461a      	mov	r2, r3
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	f016 fb64 	bl	801ec7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d32b      	bcc.n	8008626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	e026      	b.n	8008626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68d8      	ldr	r0, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	461a      	mov	r2, r3
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	f016 fb4a 	bl	801ec7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	425b      	negs	r3, r3
 80085f2:	441a      	add	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d207      	bcs.n	8008614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	425b      	negs	r3, r3
 800860e:	441a      	add	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d105      	bne.n	8008626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3b01      	subs	r3, #1
 8008624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800862e:	697b      	ldr	r3, [r7, #20]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	2b00      	cmp	r3, #0
 8008648:	d018      	beq.n	800867c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	441a      	add	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	429a      	cmp	r2, r3
 8008662:	d303      	bcc.n	800866c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68d9      	ldr	r1, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	461a      	mov	r2, r3
 8008676:	6838      	ldr	r0, [r7, #0]
 8008678:	f016 fb00 	bl	801ec7c <memcpy>
	}
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800868c:	f001 f966 	bl	800995c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008698:	e011      	b.n	80086be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d012      	beq.n	80086c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3324      	adds	r3, #36	; 0x24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fc64 	bl	8008f74 <xTaskRemoveFromEventList>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086b2:	f000 fd3f 	bl	8009134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dce9      	bgt.n	800869a <prvUnlockQueue+0x16>
 80086c6:	e000      	b.n	80086ca <prvUnlockQueue+0x46>
					break;
 80086c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086d2:	f001 f977 	bl	80099c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086d6:	f001 f941 	bl	800995c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086e2:	e011      	b.n	8008708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d012      	beq.n	8008712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3310      	adds	r3, #16
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fc3f 	bl	8008f74 <xTaskRemoveFromEventList>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086fc:	f000 fd1a 	bl	8009134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	3b01      	subs	r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	dce9      	bgt.n	80086e4 <prvUnlockQueue+0x60>
 8008710:	e000      	b.n	8008714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	22ff      	movs	r2, #255	; 0xff
 8008718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800871c:	f001 f952 	bl	80099c4 <vPortExitCritical>
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008730:	f001 f914 	bl	800995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e001      	b.n	8008746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008746:	f001 f93d 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 800874a:	68fb      	ldr	r3, [r7, #12]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800875c:	f001 f8fe 	bl	800995c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008768:	429a      	cmp	r2, r3
 800876a:	d102      	bne.n	8008772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e001      	b.n	8008776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008776:	f001 f925 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 800877a:	68fb      	ldr	r3, [r7, #12]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08c      	sub	sp, #48	; 0x30
 8008788:	af04      	add	r7, sp, #16
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	4613      	mov	r3, r2
 8008792:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fa0b 	bl	8009bb4 <pvPortMalloc>
 800879e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00e      	beq.n	80087c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087a6:	20b8      	movs	r0, #184	; 0xb8
 80087a8:	f001 fa04 	bl	8009bb4 <pvPortMalloc>
 80087ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	631a      	str	r2, [r3, #48]	; 0x30
 80087ba:	e005      	b.n	80087c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087bc:	6978      	ldr	r0, [r7, #20]
 80087be:	f001 fac9 	bl	8009d54 <vPortFree>
 80087c2:	e001      	b.n	80087c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d013      	beq.n	80087f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9303      	str	r3, [sp, #12]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f80f 	bl	8008808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ea:	69f8      	ldr	r0, [r7, #28]
 80087ec:	f000 f8b8 	bl	8008960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087f0:	2301      	movs	r3, #1
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e002      	b.n	80087fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087f6:	f04f 33ff 	mov.w	r3, #4294967295
 80087fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087fc:	69bb      	ldr	r3, [r7, #24]
	}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	461a      	mov	r2, r3
 8008820:	21a5      	movs	r1, #165	; 0xa5
 8008822:	f016 fa39 	bl	801ec98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008830:	440b      	add	r3, r1
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00c      	beq.n	8008864 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	b672      	cpsid	i
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	b662      	cpsie	i
 800885e:	617b      	str	r3, [r7, #20]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01f      	beq.n	80088aa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	e012      	b.n	8008896 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	4413      	add	r3, r2
 8008876:	7819      	ldrb	r1, [r3, #0]
 8008878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	3334      	adds	r3, #52	; 0x34
 8008880:	460a      	mov	r2, r1
 8008882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d006      	beq.n	800889e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	3301      	adds	r3, #1
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d9e9      	bls.n	8008870 <prvInitialiseNewTask+0x68>
 800889c:	e000      	b.n	80088a0 <prvInitialiseNewTask+0x98>
			{
				break;
 800889e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a8:	e003      	b.n	80088b2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	2b06      	cmp	r3, #6
 80088b6:	d901      	bls.n	80088bc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088b8:	2306      	movs	r3, #6
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2200      	movs	r2, #0
 80088cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	3304      	adds	r3, #4
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff f966 	bl	8007ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	3318      	adds	r3, #24
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff f961 	bl	8007ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	f1c3 0207 	rsb	r2, r3, #7
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	2200      	movs	r2, #0
 80088fc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	2200      	movs	r2, #0
 800890a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	3350      	adds	r3, #80	; 0x50
 8008912:	2260      	movs	r2, #96	; 0x60
 8008914:	2100      	movs	r1, #0
 8008916:	4618      	mov	r0, r3
 8008918:	f016 f9be 	bl	801ec98 <memset>
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	4a0d      	ldr	r2, [pc, #52]	; (8008954 <prvInitialiseNewTask+0x14c>)
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <prvInitialiseNewTask+0x150>)
 8008926:	659a      	str	r2, [r3, #88]	; 0x58
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	4a0c      	ldr	r2, [pc, #48]	; (800895c <prvInitialiseNewTask+0x154>)
 800892c:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	69b8      	ldr	r0, [r7, #24]
 8008934:	f000 ff08 	bl	8009748 <pxPortInitialiseStack>
 8008938:	4602      	mov	r2, r0
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800894a:	bf00      	nop
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	08021c2c 	.word	0x08021c2c
 8008958:	08021c4c 	.word	0x08021c4c
 800895c:	08021c0c 	.word	0x08021c0c

08008960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008968:	f000 fff8 	bl	800995c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <prvAddNewTaskToReadyList+0xb8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <prvAddNewTaskToReadyList+0xb8>)
 8008974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008976:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <prvAddNewTaskToReadyList+0xbc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800897e:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <prvAddNewTaskToReadyList+0xbc>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <prvAddNewTaskToReadyList+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d110      	bne.n	80089ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800898c:	f000 fbf8 	bl	8009180 <prvInitialiseTaskLists>
 8008990:	e00d      	b.n	80089ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008992:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <prvAddNewTaskToReadyList+0xc0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d109      	bne.n	80089ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800899a:	4b20      	ldr	r3, [pc, #128]	; (8008a1c <prvAddNewTaskToReadyList+0xbc>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d802      	bhi.n	80089ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <prvAddNewTaskToReadyList+0xbc>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089ae:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <prvAddNewTaskToReadyList+0xc4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <prvAddNewTaskToReadyList+0xc4>)
 80089b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	2201      	movs	r2, #1
 80089be:	409a      	lsls	r2, r3
 80089c0:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <prvAddNewTaskToReadyList+0xc8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <prvAddNewTaskToReadyList+0xc8>)
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <prvAddNewTaskToReadyList+0xcc>)
 80089d8:	441a      	add	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f7ff f8ec 	bl	8007bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089e6:	f000 ffed 	bl	80099c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089ea:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <prvAddNewTaskToReadyList+0xc0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00e      	beq.n	8008a10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f2:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <prvAddNewTaskToReadyList+0xbc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d207      	bcs.n	8008a10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <prvAddNewTaskToReadyList+0xd0>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20000604 	.word	0x20000604
 8008a1c:	20000504 	.word	0x20000504
 8008a20:	20000610 	.word	0x20000610
 8008a24:	20000620 	.word	0x20000620
 8008a28:	2000060c 	.word	0x2000060c
 8008a2c:	20000508 	.word	0x20000508
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d019      	beq.n	8008a7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a46:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <vTaskDelay+0x64>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00c      	beq.n	8008a68 <vTaskDelay+0x34>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	b672      	cpsid	i
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	b662      	cpsie	i
 8008a62:	60bb      	str	r3, [r7, #8]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a68:	f000 f86e 	bl	8008b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fe04 	bl	800967c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a74:	f000 f876 	bl	8008b64 <xTaskResumeAll>
 8008a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <vTaskDelay+0x68>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	2000062c 	.word	0x2000062c
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <vTaskStartScheduler+0x88>)
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2280      	movs	r2, #128	; 0x80
 8008ab2:	491e      	ldr	r1, [pc, #120]	; (8008b2c <vTaskStartScheduler+0x8c>)
 8008ab4:	481e      	ldr	r0, [pc, #120]	; (8008b30 <vTaskStartScheduler+0x90>)
 8008ab6:	f7ff fe65 	bl	8008784 <xTaskCreate>
 8008aba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d11d      	bne.n	8008afe <vTaskStartScheduler+0x5e>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ada:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <vTaskStartScheduler+0x94>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3350      	adds	r3, #80	; 0x50
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <vTaskStartScheduler+0x98>)
 8008ae2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae4:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <vTaskStartScheduler+0x9c>)
 8008ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <vTaskStartScheduler+0xa0>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <vTaskStartScheduler+0xa4>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008af8:	f000 feb2 	bl	8009860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008afc:	e010      	b.n	8008b20 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d10c      	bne.n	8008b20 <vTaskStartScheduler+0x80>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	607b      	str	r3, [r7, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vTaskStartScheduler+0x7e>
}
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000628 	.word	0x20000628
 8008b2c:	0801fc60 	.word	0x0801fc60
 8008b30:	0800914d 	.word	0x0800914d
 8008b34:	20000504 	.word	0x20000504
 8008b38:	20000098 	.word	0x20000098
 8008b3c:	20000624 	.word	0x20000624
 8008b40:	20000610 	.word	0x20000610
 8008b44:	20000608 	.word	0x20000608

08008b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b56:	bf00      	nop
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	2000062c 	.word	0x2000062c

08008b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b72:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10c      	bne.n	8008b94 <xTaskResumeAll+0x30>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	b672      	cpsid	i
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	b662      	cpsie	i
 8008b8e:	603b      	str	r3, [r7, #0]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b94:	f000 fee2 	bl	800995c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b98:	4b38      	ldr	r3, [pc, #224]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4a37      	ldr	r2, [pc, #220]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba2:	4b36      	ldr	r3, [pc, #216]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d161      	bne.n	8008c6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008baa:	4b35      	ldr	r3, [pc, #212]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d05d      	beq.n	8008c6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bb2:	e02e      	b.n	8008c12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb4:	4b33      	ldr	r3, [pc, #204]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff f859 	bl	8007c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff f854 	bl	8007c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	409a      	lsls	r2, r3
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <xTaskResumeAll+0x124>)
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <xTaskResumeAll+0x128>)
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fe ffe0 	bl	8007bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c02:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c0c:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c12:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <xTaskResumeAll+0x120>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1cc      	bne.n	8008bb4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c20:	f000 fb32 	bl	8009288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c24:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c30:	f000 f836 	bl	8008ca0 <xTaskIncrementTick>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c3a:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1f1      	bne.n	8008c30 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008c4c:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c52:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <xTaskResumeAll+0x138>)
 8008c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c6e:	f000 fea9 	bl	80099c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c72:	68bb      	ldr	r3, [r7, #8]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	2000062c 	.word	0x2000062c
 8008c80:	20000604 	.word	0x20000604
 8008c84:	200005c4 	.word	0x200005c4
 8008c88:	2000060c 	.word	0x2000060c
 8008c8c:	20000508 	.word	0x20000508
 8008c90:	20000504 	.word	0x20000504
 8008c94:	20000618 	.word	0x20000618
 8008c98:	20000614 	.word	0x20000614
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b4f      	ldr	r3, [pc, #316]	; (8008de8 <xTaskIncrementTick+0x148>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 808a 	bne.w	8008dc8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb4:	4b4d      	ldr	r3, [pc, #308]	; (8008dec <xTaskIncrementTick+0x14c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cbc:	4a4b      	ldr	r2, [pc, #300]	; (8008dec <xTaskIncrementTick+0x14c>)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d122      	bne.n	8008d0e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc8:	4b49      	ldr	r3, [pc, #292]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00c      	beq.n	8008cec <xTaskIncrementTick+0x4c>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	b672      	cpsid	i
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	b662      	cpsie	i
 8008ce6:	603b      	str	r3, [r7, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <xTaskIncrementTick+0x4a>
 8008cec:	4b40      	ldr	r3, [pc, #256]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	4b40      	ldr	r3, [pc, #256]	; (8008df4 <xTaskIncrementTick+0x154>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a3e      	ldr	r2, [pc, #248]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4a3e      	ldr	r2, [pc, #248]	; (8008df4 <xTaskIncrementTick+0x154>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	4b3d      	ldr	r3, [pc, #244]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	4a3c      	ldr	r2, [pc, #240]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	f000 fabd 	bl	8009288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d0e:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <xTaskIncrementTick+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d348      	bcc.n	8008daa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d18:	4b35      	ldr	r3, [pc, #212]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d104      	bne.n	8008d2c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d22:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <xTaskIncrementTick+0x15c>)
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	601a      	str	r2, [r3, #0]
					break;
 8008d2a:	e03e      	b.n	8008daa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2c:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d203      	bcs.n	8008d4c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d44:	4a2d      	ldr	r2, [pc, #180]	; (8008dfc <xTaskIncrementTick+0x15c>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d4a:	e02e      	b.n	8008daa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe ff91 	bl	8007c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d004      	beq.n	8008d68 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	3318      	adds	r3, #24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe ff88 	bl	8007c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	409a      	lsls	r2, r3
 8008d70:	4b23      	ldr	r3, [pc, #140]	; (8008e00 <xTaskIncrementTick+0x160>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <xTaskIncrementTick+0x160>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <xTaskIncrementTick+0x164>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fe ff14 	bl	8007bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <xTaskIncrementTick+0x168>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3b9      	bcc.n	8008d18 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da8:	e7b6      	b.n	8008d18 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008daa:	4b17      	ldr	r3, [pc, #92]	; (8008e08 <xTaskIncrementTick+0x168>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4914      	ldr	r1, [pc, #80]	; (8008e04 <xTaskIncrementTick+0x164>)
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d907      	bls.n	8008dd2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e004      	b.n	8008dd2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008dc8:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <xTaskIncrementTick+0x16c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	4a0f      	ldr	r2, [pc, #60]	; (8008e0c <xTaskIncrementTick+0x16c>)
 8008dd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008dd2:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <xTaskIncrementTick+0x170>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	2000062c 	.word	0x2000062c
 8008dec:	20000608 	.word	0x20000608
 8008df0:	200005bc 	.word	0x200005bc
 8008df4:	200005c0 	.word	0x200005c0
 8008df8:	2000061c 	.word	0x2000061c
 8008dfc:	20000624 	.word	0x20000624
 8008e00:	2000060c 	.word	0x2000060c
 8008e04:	20000508 	.word	0x20000508
 8008e08:	20000504 	.word	0x20000504
 8008e0c:	20000614 	.word	0x20000614
 8008e10:	20000618 	.word	0x20000618

08008e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <vTaskSwitchContext+0xfc>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e22:	4b3c      	ldr	r3, [pc, #240]	; (8008f14 <vTaskSwitchContext+0x100>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e28:	e06d      	b.n	8008f06 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8008e2a:	4b3a      	ldr	r3, [pc, #232]	; (8008f14 <vTaskSwitchContext+0x100>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <vTaskSwitchContext+0x104>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008e3c:	61bb      	str	r3, [r7, #24]
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d111      	bne.n	8008e6c <vTaskSwitchContext+0x58>
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d10b      	bne.n	8008e6c <vTaskSwitchContext+0x58>
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3308      	adds	r3, #8
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d105      	bne.n	8008e6c <vTaskSwitchContext+0x58>
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	330c      	adds	r3, #12
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d008      	beq.n	8008e7e <vTaskSwitchContext+0x6a>
 8008e6c:	4b2a      	ldr	r3, [pc, #168]	; (8008f18 <vTaskSwitchContext+0x104>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b29      	ldr	r3, [pc, #164]	; (8008f18 <vTaskSwitchContext+0x104>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3334      	adds	r3, #52	; 0x34
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7f7 fdda 	bl	8000a32 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7e:	4b27      	ldr	r3, [pc, #156]	; (8008f1c <vTaskSwitchContext+0x108>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	fab3 f383 	clz	r3, r3
 8008e8a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	f1c3 031f 	rsb	r3, r3, #31
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	4922      	ldr	r1, [pc, #136]	; (8008f20 <vTaskSwitchContext+0x10c>)
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10c      	bne.n	8008ec2 <vTaskSwitchContext+0xae>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	b672      	cpsid	i
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	b662      	cpsie	i
 8008ebc:	607b      	str	r3, [r7, #4]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <vTaskSwitchContext+0xac>
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4a14      	ldr	r2, [pc, #80]	; (8008f20 <vTaskSwitchContext+0x10c>)
 8008ece:	4413      	add	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	605a      	str	r2, [r3, #4]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d104      	bne.n	8008ef2 <vTaskSwitchContext+0xde>
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4a07      	ldr	r2, [pc, #28]	; (8008f18 <vTaskSwitchContext+0x104>)
 8008efa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008efc:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <vTaskSwitchContext+0x104>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3350      	adds	r3, #80	; 0x50
 8008f02:	4a08      	ldr	r2, [pc, #32]	; (8008f24 <vTaskSwitchContext+0x110>)
 8008f04:	6013      	str	r3, [r2, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3720      	adds	r7, #32
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000062c 	.word	0x2000062c
 8008f14:	20000618 	.word	0x20000618
 8008f18:	20000504 	.word	0x20000504
 8008f1c:	2000060c 	.word	0x2000060c
 8008f20:	20000508 	.word	0x20000508
 8008f24:	20000098 	.word	0x20000098

08008f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10c      	bne.n	8008f52 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	b672      	cpsid	i
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	b662      	cpsie	i
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <vTaskPlaceOnEventList+0x48>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3318      	adds	r3, #24
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fe fe53 	bl	8007c06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f60:	2101      	movs	r1, #1
 8008f62:	6838      	ldr	r0, [r7, #0]
 8008f64:	f000 fb8a 	bl	800967c <prvAddCurrentTaskToDelayedList>
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000504 	.word	0x20000504

08008f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	b672      	cpsid	i
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	b662      	cpsie	i
 8008f9e:	60fb      	str	r3, [r7, #12]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3318      	adds	r3, #24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fe65 	bl	8007c78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fae:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <xTaskRemoveFromEventList+0xb0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d11c      	bne.n	8008ff0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fe5c 	bl	8007c78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <xTaskRemoveFromEventList+0xb4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	4a16      	ldr	r2, [pc, #88]	; (8009028 <xTaskRemoveFromEventList+0xb4>)
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a13      	ldr	r2, [pc, #76]	; (800902c <xTaskRemoveFromEventList+0xb8>)
 8008fe0:	441a      	add	r2, r3
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fe fde8 	bl	8007bbe <vListInsertEnd>
 8008fee:	e005      	b.n	8008ffc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	3318      	adds	r3, #24
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	480e      	ldr	r0, [pc, #56]	; (8009030 <xTaskRemoveFromEventList+0xbc>)
 8008ff8:	f7fe fde1 	bl	8007bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <xTaskRemoveFromEventList+0xc0>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	429a      	cmp	r2, r3
 8009008:	d905      	bls.n	8009016 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800900a:	2301      	movs	r3, #1
 800900c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800900e:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <xTaskRemoveFromEventList+0xc4>)
 8009010:	2201      	movs	r2, #1
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e001      	b.n	800901a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800901a:	697b      	ldr	r3, [r7, #20]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	2000062c 	.word	0x2000062c
 8009028:	2000060c 	.word	0x2000060c
 800902c:	20000508 	.word	0x20000508
 8009030:	200005c4 	.word	0x200005c4
 8009034:	20000504 	.word	0x20000504
 8009038:	20000618 	.word	0x20000618

0800903c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <vTaskInternalSetTimeOutState+0x24>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <vTaskInternalSetTimeOutState+0x28>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	605a      	str	r2, [r3, #4]
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	2000061c 	.word	0x2000061c
 8009064:	20000608 	.word	0x20000608

08009068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10c      	bne.n	8009092 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	b672      	cpsid	i
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	b662      	cpsie	i
 800908c:	613b      	str	r3, [r7, #16]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80090b2:	f000 fc53 	bl	800995c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090b6:	4b1d      	ldr	r3, [pc, #116]	; (800912c <xTaskCheckForTimeOut+0xc4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ce:	d102      	bne.n	80090d6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e023      	b.n	800911e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4b15      	ldr	r3, [pc, #84]	; (8009130 <xTaskCheckForTimeOut+0xc8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d007      	beq.n	80090f2 <xTaskCheckForTimeOut+0x8a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d302      	bcc.n	80090f2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090ec:	2301      	movs	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	e015      	b.n	800911e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d20b      	bcs.n	8009114 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	1ad2      	subs	r2, r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff ff97 	bl	800903c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	e004      	b.n	800911e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800911a:	2301      	movs	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800911e:	f000 fc51 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8009122:	69fb      	ldr	r3, [r7, #28]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3720      	adds	r7, #32
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000608 	.word	0x20000608
 8009130:	2000061c 	.word	0x2000061c

08009134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009138:	4b03      	ldr	r3, [pc, #12]	; (8009148 <vTaskMissedYield+0x14>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]
}
 800913e:	bf00      	nop
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	20000618 	.word	0x20000618

0800914c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009154:	f000 f854 	bl	8009200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009158:	4b07      	ldr	r3, [pc, #28]	; (8009178 <prvIdleTask+0x2c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d907      	bls.n	8009170 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <prvIdleTask+0x30>)
 8009162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009170:	f7f7 fc58 	bl	8000a24 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009174:	e7ee      	b.n	8009154 <prvIdleTask+0x8>
 8009176:	bf00      	nop
 8009178:	20000508 	.word	0x20000508
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	e00c      	b.n	80091a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4a12      	ldr	r2, [pc, #72]	; (80091e0 <prvInitialiseTaskLists+0x60>)
 8009198:	4413      	add	r3, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fce2 	bl	8007b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3301      	adds	r3, #1
 80091a4:	607b      	str	r3, [r7, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b06      	cmp	r3, #6
 80091aa:	d9ef      	bls.n	800918c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091ac:	480d      	ldr	r0, [pc, #52]	; (80091e4 <prvInitialiseTaskLists+0x64>)
 80091ae:	f7fe fcd9 	bl	8007b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091b2:	480d      	ldr	r0, [pc, #52]	; (80091e8 <prvInitialiseTaskLists+0x68>)
 80091b4:	f7fe fcd6 	bl	8007b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091b8:	480c      	ldr	r0, [pc, #48]	; (80091ec <prvInitialiseTaskLists+0x6c>)
 80091ba:	f7fe fcd3 	bl	8007b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091be:	480c      	ldr	r0, [pc, #48]	; (80091f0 <prvInitialiseTaskLists+0x70>)
 80091c0:	f7fe fcd0 	bl	8007b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091c4:	480b      	ldr	r0, [pc, #44]	; (80091f4 <prvInitialiseTaskLists+0x74>)
 80091c6:	f7fe fccd 	bl	8007b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091ca:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <prvInitialiseTaskLists+0x78>)
 80091cc:	4a05      	ldr	r2, [pc, #20]	; (80091e4 <prvInitialiseTaskLists+0x64>)
 80091ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <prvInitialiseTaskLists+0x7c>)
 80091d2:	4a05      	ldr	r2, [pc, #20]	; (80091e8 <prvInitialiseTaskLists+0x68>)
 80091d4:	601a      	str	r2, [r3, #0]
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000508 	.word	0x20000508
 80091e4:	20000594 	.word	0x20000594
 80091e8:	200005a8 	.word	0x200005a8
 80091ec:	200005c4 	.word	0x200005c4
 80091f0:	200005d8 	.word	0x200005d8
 80091f4:	200005f0 	.word	0x200005f0
 80091f8:	200005bc 	.word	0x200005bc
 80091fc:	200005c0 	.word	0x200005c0

08009200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009206:	e019      	b.n	800923c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009208:	f000 fba8 	bl	800995c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920c:	4b10      	ldr	r3, [pc, #64]	; (8009250 <prvCheckTasksWaitingTermination+0x50>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fd2d 	bl	8007c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800921e:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <prvCheckTasksWaitingTermination+0x54>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3b01      	subs	r3, #1
 8009224:	4a0b      	ldr	r2, [pc, #44]	; (8009254 <prvCheckTasksWaitingTermination+0x54>)
 8009226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <prvCheckTasksWaitingTermination+0x58>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3b01      	subs	r3, #1
 800922e:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <prvCheckTasksWaitingTermination+0x58>)
 8009230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009232:	f000 fbc7 	bl	80099c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f810 	bl	800925c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <prvCheckTasksWaitingTermination+0x58>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e1      	bne.n	8009208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200005d8 	.word	0x200005d8
 8009254:	20000604 	.word	0x20000604
 8009258:	200005ec 	.word	0x200005ec

0800925c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3350      	adds	r3, #80	; 0x50
 8009268:	4618      	mov	r0, r3
 800926a:	f016 f8f9 	bl	801f460 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fd6e 	bl	8009d54 <vPortFree>
			vPortFree( pxTCB );
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fd6b 	bl	8009d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <prvResetNextTaskUnblockTime+0x38>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <prvResetNextTaskUnblockTime+0x3c>)
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092a0:	e008      	b.n	80092b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a2:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <prvResetNextTaskUnblockTime+0x38>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <prvResetNextTaskUnblockTime+0x3c>)
 80092b2:	6013      	str	r3, [r2, #0]
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	200005bc 	.word	0x200005bc
 80092c4:	20000624 	.word	0x20000624

080092c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092ce:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <xTaskGetSchedulerState+0x34>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092d6:	2301      	movs	r3, #1
 80092d8:	607b      	str	r3, [r7, #4]
 80092da:	e008      	b.n	80092ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <xTaskGetSchedulerState+0x38>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092e4:	2302      	movs	r3, #2
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	e001      	b.n	80092ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092ea:	2300      	movs	r3, #0
 80092ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092ee:	687b      	ldr	r3, [r7, #4]
	}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	20000610 	.word	0x20000610
 8009300:	2000062c 	.word	0x2000062c

08009304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d069      	beq.n	80093ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	4b36      	ldr	r3, [pc, #216]	; (80093f8 <xTaskPriorityInherit+0xf4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	429a      	cmp	r2, r3
 8009326:	d259      	bcs.n	80093dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	db06      	blt.n	800933e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009330:	4b31      	ldr	r3, [pc, #196]	; (80093f8 <xTaskPriorityInherit+0xf4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	f1c3 0207 	rsb	r2, r3, #7
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6959      	ldr	r1, [r3, #20]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4a2b      	ldr	r2, [pc, #172]	; (80093fc <xTaskPriorityInherit+0xf8>)
 8009350:	4413      	add	r3, r2
 8009352:	4299      	cmp	r1, r3
 8009354:	d13a      	bne.n	80093cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	3304      	adds	r3, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe fc8c 	bl	8007c78 <uxListRemove>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d115      	bne.n	8009392 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	4924      	ldr	r1, [pc, #144]	; (80093fc <xTaskPriorityInherit+0xf8>)
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xTaskPriorityInherit+0x8e>
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	2201      	movs	r2, #1
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	43da      	mvns	r2, r3
 8009388:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <xTaskPriorityInherit+0xfc>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4013      	ands	r3, r2
 800938e:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <xTaskPriorityInherit+0xfc>)
 8009390:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009392:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <xTaskPriorityInherit+0xf4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	2201      	movs	r2, #1
 80093a2:	409a      	lsls	r2, r3
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <xTaskPriorityInherit+0xfc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	4a15      	ldr	r2, [pc, #84]	; (8009400 <xTaskPriorityInherit+0xfc>)
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4a10      	ldr	r2, [pc, #64]	; (80093fc <xTaskPriorityInherit+0xf8>)
 80093bc:	441a      	add	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe fbfa 	bl	8007bbe <vListInsertEnd>
 80093ca:	e004      	b.n	80093d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <xTaskPriorityInherit+0xf4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	e008      	b.n	80093ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <xTaskPriorityInherit+0xf4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d201      	bcs.n	80093ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093ea:	2301      	movs	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093ee:	68fb      	ldr	r3, [r7, #12]
	}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000504 	.word	0x20000504
 80093fc:	20000508 	.word	0x20000508
 8009400:	2000060c 	.word	0x2000060c

08009404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d072      	beq.n	8009500 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800941a:	4b3c      	ldr	r3, [pc, #240]	; (800950c <xTaskPriorityDisinherit+0x108>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	429a      	cmp	r2, r3
 8009422:	d00c      	beq.n	800943e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10c      	bne.n	8009460 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	b672      	cpsid	i
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	b662      	cpsie	i
 800945a:	60bb      	str	r3, [r7, #8]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009464:	1e5a      	subs	r2, r3, #1
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009472:	429a      	cmp	r2, r3
 8009474:	d044      	beq.n	8009500 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800947a:	2b00      	cmp	r3, #0
 800947c:	d140      	bne.n	8009500 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	3304      	adds	r3, #4
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fbf8 	bl	8007c78 <uxListRemove>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d115      	bne.n	80094ba <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	491f      	ldr	r1, [pc, #124]	; (8009510 <xTaskPriorityDisinherit+0x10c>)
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <xTaskPriorityDisinherit+0xb6>
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	2201      	movs	r2, #1
 80094aa:	fa02 f303 	lsl.w	r3, r2, r3
 80094ae:	43da      	mvns	r2, r3
 80094b0:	4b18      	ldr	r3, [pc, #96]	; (8009514 <xTaskPriorityDisinherit+0x110>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4013      	ands	r3, r2
 80094b6:	4a17      	ldr	r2, [pc, #92]	; (8009514 <xTaskPriorityDisinherit+0x110>)
 80094b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	f1c3 0207 	rsb	r2, r3, #7
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	2201      	movs	r2, #1
 80094d4:	409a      	lsls	r2, r3
 80094d6:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <xTaskPriorityDisinherit+0x110>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4313      	orrs	r3, r2
 80094dc:	4a0d      	ldr	r2, [pc, #52]	; (8009514 <xTaskPriorityDisinherit+0x110>)
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4a08      	ldr	r2, [pc, #32]	; (8009510 <xTaskPriorityDisinherit+0x10c>)
 80094ee:	441a      	add	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	3304      	adds	r3, #4
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	f7fe fb61 	bl	8007bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094fc:	2301      	movs	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009500:	697b      	ldr	r3, [r7, #20]
	}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000504 	.word	0x20000504
 8009510:	20000508 	.word	0x20000508
 8009514:	2000060c 	.word	0x2000060c

08009518 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8087 	beq.w	8009640 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10c      	bne.n	8009554 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	60fb      	str	r3, [r7, #12]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d902      	bls.n	8009564 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	e002      	b.n	800956a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009568:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	429a      	cmp	r2, r3
 8009572:	d065      	beq.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	429a      	cmp	r2, r3
 800957c:	d160      	bne.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800957e:	4b32      	ldr	r3, [pc, #200]	; (8009648 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	429a      	cmp	r2, r3
 8009586:	d10c      	bne.n	80095a2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	b672      	cpsid	i
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	b662      	cpsie	i
 800959c:	60bb      	str	r3, [r7, #8]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db04      	blt.n	80095c0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f1c3 0207 	rsb	r2, r3, #7
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	6959      	ldr	r1, [r3, #20]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4a1f      	ldr	r2, [pc, #124]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80095d0:	4413      	add	r3, r2
 80095d2:	4299      	cmp	r1, r3
 80095d4:	d134      	bne.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fb4c 	bl	8007c78 <uxListRemove>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d115      	bne.n	8009612 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ea:	4918      	ldr	r1, [pc, #96]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80095ec:	4613      	mov	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	2201      	movs	r2, #1
 8009602:	fa02 f303 	lsl.w	r3, r2, r3
 8009606:	43da      	mvns	r2, r3
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4013      	ands	r3, r2
 800960e:	4a10      	ldr	r2, [pc, #64]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009610:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	2201      	movs	r2, #1
 8009618:	409a      	lsls	r2, r3
 800961a:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4313      	orrs	r3, r2
 8009620:	4a0b      	ldr	r2, [pc, #44]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4a06      	ldr	r2, [pc, #24]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009632:	441a      	add	r2, r3
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fe fabf 	bl	8007bbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009640:	bf00      	nop
 8009642:	3720      	adds	r7, #32
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000504 	.word	0x20000504
 800964c:	20000508 	.word	0x20000508
 8009650:	2000060c 	.word	0x2000060c

08009654 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009666:	3201      	adds	r2, #1
 8009668:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800966a:	4b03      	ldr	r3, [pc, #12]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 800966c:	681b      	ldr	r3, [r3, #0]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	20000504 	.word	0x20000504

0800967c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009686:	4b29      	ldr	r3, [pc, #164]	; (800972c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800968c:	4b28      	ldr	r3, [pc, #160]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3304      	adds	r3, #4
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe faf0 	bl	8007c78 <uxListRemove>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10b      	bne.n	80096b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800969e:	4b24      	ldr	r3, [pc, #144]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	2201      	movs	r2, #1
 80096a6:	fa02 f303 	lsl.w	r3, r2, r3
 80096aa:	43da      	mvns	r2, r3
 80096ac:	4b21      	ldr	r3, [pc, #132]	; (8009734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4013      	ands	r3, r2
 80096b2:	4a20      	ldr	r2, [pc, #128]	; (8009734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80096b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d10a      	bne.n	80096d4 <prvAddCurrentTaskToDelayedList+0x58>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c4:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3304      	adds	r3, #4
 80096ca:	4619      	mov	r1, r3
 80096cc:	481a      	ldr	r0, [pc, #104]	; (8009738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096ce:	f7fe fa76 	bl	8007bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096d2:	e026      	b.n	8009722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4413      	add	r3, r2
 80096da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d209      	bcs.n	8009700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ec:	4b13      	ldr	r3, [pc, #76]	; (800973c <prvAddCurrentTaskToDelayedList+0xc0>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4619      	mov	r1, r3
 80096f8:	4610      	mov	r0, r2
 80096fa:	f7fe fa84 	bl	8007c06 <vListInsert>
}
 80096fe:	e010      	b.n	8009722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f7fe fa7a 	bl	8007c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	d202      	bcs.n	8009722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800971c:	4a09      	ldr	r2, [pc, #36]	; (8009744 <prvAddCurrentTaskToDelayedList+0xc8>)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	6013      	str	r3, [r2, #0]
}
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000608 	.word	0x20000608
 8009730:	20000504 	.word	0x20000504
 8009734:	2000060c 	.word	0x2000060c
 8009738:	200005f0 	.word	0x200005f0
 800973c:	200005c0 	.word	0x200005c0
 8009740:	200005bc 	.word	0x200005bc
 8009744:	20000624 	.word	0x20000624

08009748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3b04      	subs	r3, #4
 8009758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3b04      	subs	r3, #4
 8009766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3b04      	subs	r3, #4
 8009776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009778:	4a0c      	ldr	r2, [pc, #48]	; (80097ac <pxPortInitialiseStack+0x64>)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b14      	subs	r3, #20
 8009782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3b04      	subs	r3, #4
 800978e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f06f 0202 	mvn.w	r2, #2
 8009796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3b20      	subs	r3, #32
 800979c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	080097b1 	.word	0x080097b1

080097b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097ba:	4b14      	ldr	r3, [pc, #80]	; (800980c <prvTaskExitError+0x5c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d00c      	beq.n	80097de <prvTaskExitError+0x2e>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	b672      	cpsid	i
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	b662      	cpsie	i
 80097d8:	60fb      	str	r3, [r7, #12]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <prvTaskExitError+0x2c>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	b672      	cpsid	i
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	b662      	cpsie	i
 80097f2:	60bb      	str	r3, [r7, #8]
}
 80097f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097f6:	bf00      	nop
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0fc      	beq.n	80097f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	20000038 	.word	0x20000038

08009810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <pxCurrentTCBConst2>)
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	6808      	ldr	r0, [r1, #0]
 8009816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f380 8809 	msr	PSP, r0
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8811 	msr	BASEPRI, r0
 800982a:	4770      	bx	lr
 800982c:	f3af 8000 	nop.w

08009830 <pxCurrentTCBConst2>:
 8009830:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop

08009838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009838:	4808      	ldr	r0, [pc, #32]	; (800985c <prvPortStartFirstTask+0x24>)
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	6800      	ldr	r0, [r0, #0]
 800983e:	f380 8808 	msr	MSP, r0
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8814 	msr	CONTROL, r0
 800984a:	b662      	cpsie	i
 800984c:	b661      	cpsie	f
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	df00      	svc	0
 8009858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800985a:	bf00      	nop
 800985c:	e000ed08 	.word	0xe000ed08

08009860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009866:	4b37      	ldr	r3, [pc, #220]	; (8009944 <xPortStartScheduler+0xe4>)
 8009868:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	22ff      	movs	r2, #255	; 0xff
 8009876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009888:	b2da      	uxtb	r2, r3
 800988a:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <xPortStartScheduler+0xe8>)
 800988c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800988e:	4b2f      	ldr	r3, [pc, #188]	; (800994c <xPortStartScheduler+0xec>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009894:	e009      	b.n	80098aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009896:	4b2d      	ldr	r3, [pc, #180]	; (800994c <xPortStartScheduler+0xec>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	4a2b      	ldr	r2, [pc, #172]	; (800994c <xPortStartScheduler+0xec>)
 800989e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b2:	2b80      	cmp	r3, #128	; 0x80
 80098b4:	d0ef      	beq.n	8009896 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098b6:	4b25      	ldr	r3, [pc, #148]	; (800994c <xPortStartScheduler+0xec>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1c3 0307 	rsb	r3, r3, #7
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d00c      	beq.n	80098dc <xPortStartScheduler+0x7c>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	b672      	cpsid	i
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	b662      	cpsie	i
 80098d6:	60bb      	str	r3, [r7, #8]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098dc:	4b1b      	ldr	r3, [pc, #108]	; (800994c <xPortStartScheduler+0xec>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	4a1a      	ldr	r2, [pc, #104]	; (800994c <xPortStartScheduler+0xec>)
 80098e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098e6:	4b19      	ldr	r3, [pc, #100]	; (800994c <xPortStartScheduler+0xec>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ee:	4a17      	ldr	r2, [pc, #92]	; (800994c <xPortStartScheduler+0xec>)
 80098f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <xPortStartScheduler+0xf0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a14      	ldr	r2, [pc, #80]	; (8009950 <xPortStartScheduler+0xf0>)
 8009900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009904:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <xPortStartScheduler+0xf0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a11      	ldr	r2, [pc, #68]	; (8009950 <xPortStartScheduler+0xf0>)
 800990c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009910:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009912:	f000 f8dd 	bl	8009ad0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <xPortStartScheduler+0xf4>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800991c:	f000 f8fc 	bl	8009b18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <xPortStartScheduler+0xf8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a0c      	ldr	r2, [pc, #48]	; (8009958 <xPortStartScheduler+0xf8>)
 8009926:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800992a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800992c:	f7ff ff84 	bl	8009838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009930:	f7ff fa70 	bl	8008e14 <vTaskSwitchContext>
	prvTaskExitError();
 8009934:	f7ff ff3c 	bl	80097b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	e000e400 	.word	0xe000e400
 8009948:	20000630 	.word	0x20000630
 800994c:	20000634 	.word	0x20000634
 8009950:	e000ed20 	.word	0xe000ed20
 8009954:	20000038 	.word	0x20000038
 8009958:	e000ef34 	.word	0xe000ef34

0800995c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	b672      	cpsid	i
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	b662      	cpsie	i
 8009976:	607b      	str	r3, [r7, #4]
}
 8009978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800997a:	4b10      	ldr	r3, [pc, #64]	; (80099bc <vPortEnterCritical+0x60>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	4a0e      	ldr	r2, [pc, #56]	; (80099bc <vPortEnterCritical+0x60>)
 8009982:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009984:	4b0d      	ldr	r3, [pc, #52]	; (80099bc <vPortEnterCritical+0x60>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d111      	bne.n	80099b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800998c:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <vPortEnterCritical+0x64>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00c      	beq.n	80099b0 <vPortEnterCritical+0x54>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	b672      	cpsid	i
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	b662      	cpsie	i
 80099aa:	603b      	str	r3, [r7, #0]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <vPortEnterCritical+0x52>
	}
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000038 	.word	0x20000038
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <vPortExitCritical+0x54>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <vPortExitCritical+0x28>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	607b      	str	r3, [r7, #4]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <vPortExitCritical+0x54>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	4a09      	ldr	r2, [pc, #36]	; (8009a18 <vPortExitCritical+0x54>)
 80099f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099f6:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <vPortExitCritical+0x54>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <vPortExitCritical+0x46>
 80099fe:	2300      	movs	r3, #0
 8009a00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	f383 8811 	msr	BASEPRI, r3
}
 8009a08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000038 	.word	0x20000038
 8009a1c:	00000000 	.word	0x00000000

08009a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a20:	f3ef 8009 	mrs	r0, PSP
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <pxCurrentTCBConst>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f01e 0f10 	tst.w	lr, #16
 8009a30:	bf08      	it	eq
 8009a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a44:	b672      	cpsid	i
 8009a46:	f380 8811 	msr	BASEPRI, r0
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	b662      	cpsie	i
 8009a54:	f7ff f9de 	bl	8008e14 <vTaskSwitchContext>
 8009a58:	f04f 0000 	mov.w	r0, #0
 8009a5c:	f380 8811 	msr	BASEPRI, r0
 8009a60:	bc09      	pop	{r0, r3}
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	6808      	ldr	r0, [r1, #0]
 8009a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6a:	f01e 0f10 	tst.w	lr, #16
 8009a6e:	bf08      	it	eq
 8009a70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a74:	f380 8809 	msr	PSP, r0
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop

08009a80 <pxCurrentTCBConst>:
 8009a80:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	b672      	cpsid	i
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	b662      	cpsie	i
 8009aa2:	607b      	str	r3, [r7, #4]
}
 8009aa4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009aa6:	f7ff f8fb 	bl	8008ca0 <xTaskIncrementTick>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ab0:	4b06      	ldr	r3, [pc, #24]	; (8009acc <SysTick_Handler+0x44>)
 8009ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f383 8811 	msr	BASEPRI, r3
}
 8009ac2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <vPortSetupTimerInterrupt+0x34>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <vPortSetupTimerInterrupt+0x38>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <vPortSetupTimerInterrupt+0x3c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <vPortSetupTimerInterrupt+0x40>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	099b      	lsrs	r3, r3, #6
 8009aec:	4a09      	ldr	r2, [pc, #36]	; (8009b14 <vPortSetupTimerInterrupt+0x44>)
 8009aee:	3b01      	subs	r3, #1
 8009af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009af2:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <vPortSetupTimerInterrupt+0x34>)
 8009af4:	2207      	movs	r2, #7
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	e000e010 	.word	0xe000e010
 8009b08:	e000e018 	.word	0xe000e018
 8009b0c:	2000002c 	.word	0x2000002c
 8009b10:	10624dd3 	.word	0x10624dd3
 8009b14:	e000e014 	.word	0xe000e014

08009b18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b28 <vPortEnableVFP+0x10>
 8009b1c:	6801      	ldr	r1, [r0, #0]
 8009b1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b22:	6001      	str	r1, [r0, #0]
 8009b24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b26:	bf00      	nop
 8009b28:	e000ed88 	.word	0xe000ed88

08009b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b32:	f3ef 8305 	mrs	r3, IPSR
 8009b36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b0f      	cmp	r3, #15
 8009b3c:	d916      	bls.n	8009b6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b3e:	4a19      	ldr	r2, [pc, #100]	; (8009ba4 <vPortValidateInterruptPriority+0x78>)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b48:	4b17      	ldr	r3, [pc, #92]	; (8009ba8 <vPortValidateInterruptPriority+0x7c>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	7afa      	ldrb	r2, [r7, #11]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d20c      	bcs.n	8009b6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	b672      	cpsid	i
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	b662      	cpsie	i
 8009b66:	607b      	str	r3, [r7, #4]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <vPortValidateInterruptPriority+0x80>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b74:	4b0e      	ldr	r3, [pc, #56]	; (8009bb0 <vPortValidateInterruptPriority+0x84>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d90c      	bls.n	8009b96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	b672      	cpsid	i
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	b662      	cpsie	i
 8009b90:	603b      	str	r3, [r7, #0]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <vPortValidateInterruptPriority+0x68>
	}
 8009b96:	bf00      	nop
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	e000e3f0 	.word	0xe000e3f0
 8009ba8:	20000630 	.word	0x20000630
 8009bac:	e000ed0c 	.word	0xe000ed0c
 8009bb0:	20000634 	.word	0x20000634

08009bb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	; 0x28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bc0:	f7fe ffc2 	bl	8008b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bc4:	4b5e      	ldr	r3, [pc, #376]	; (8009d40 <pvPortMalloc+0x18c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bcc:	f000 f920 	bl	8009e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bd0:	4b5c      	ldr	r3, [pc, #368]	; (8009d44 <pvPortMalloc+0x190>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8092 	bne.w	8009d02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01f      	beq.n	8009c24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009be4:	2208      	movs	r2, #8
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4413      	add	r3, r2
 8009bea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f023 0307 	bic.w	r3, r3, #7
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <pvPortMalloc+0x70>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	b672      	cpsid	i
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	b662      	cpsie	i
 8009c1e:	617b      	str	r3, [r7, #20]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d06b      	beq.n	8009d02 <pvPortMalloc+0x14e>
 8009c2a:	4b47      	ldr	r3, [pc, #284]	; (8009d48 <pvPortMalloc+0x194>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d866      	bhi.n	8009d02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c34:	4b45      	ldr	r3, [pc, #276]	; (8009d4c <pvPortMalloc+0x198>)
 8009c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c38:	4b44      	ldr	r3, [pc, #272]	; (8009d4c <pvPortMalloc+0x198>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c3e:	e004      	b.n	8009c4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <pvPortMalloc+0xa8>
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1f1      	bne.n	8009c40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c5c:	4b38      	ldr	r3, [pc, #224]	; (8009d40 <pvPortMalloc+0x18c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d04d      	beq.n	8009d02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2208      	movs	r2, #8
 8009c6c:	4413      	add	r3, r2
 8009c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	2308      	movs	r3, #8
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d921      	bls.n	8009ccc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <pvPortMalloc+0x100>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	b672      	cpsid	i
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	b662      	cpsie	i
 8009cae:	613b      	str	r3, [r7, #16]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cc6:	69b8      	ldr	r0, [r7, #24]
 8009cc8:	f000 f904 	bl	8009ed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ccc:	4b1e      	ldr	r3, [pc, #120]	; (8009d48 <pvPortMalloc+0x194>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	4a1c      	ldr	r2, [pc, #112]	; (8009d48 <pvPortMalloc+0x194>)
 8009cd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cda:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <pvPortMalloc+0x194>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <pvPortMalloc+0x19c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d203      	bcs.n	8009cee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ce6:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <pvPortMalloc+0x194>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a19      	ldr	r2, [pc, #100]	; (8009d50 <pvPortMalloc+0x19c>)
 8009cec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <pvPortMalloc+0x190>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d02:	f7fe ff2f 	bl	8008b64 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009d0c:	f7f6 fe9c 	bl	8000a48 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <pvPortMalloc+0x180>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <pvPortMalloc+0x17e>
	return pvReturn;
 8009d34:	69fb      	ldr	r3, [r7, #28]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3728      	adds	r7, #40	; 0x28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20010640 	.word	0x20010640
 8009d44:	2001064c 	.word	0x2001064c
 8009d48:	20010644 	.word	0x20010644
 8009d4c:	20010638 	.word	0x20010638
 8009d50:	20010648 	.word	0x20010648

08009d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d04c      	beq.n	8009e00 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d66:	2308      	movs	r3, #8
 8009d68:	425b      	negs	r3, r3
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	4b23      	ldr	r3, [pc, #140]	; (8009e08 <vPortFree+0xb4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10c      	bne.n	8009d9c <vPortFree+0x48>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	b672      	cpsid	i
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	b662      	cpsie	i
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00c      	beq.n	8009dbe <vPortFree+0x6a>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	b672      	cpsid	i
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	b662      	cpsie	i
 8009db8:	60bb      	str	r3, [r7, #8]
}
 8009dba:	bf00      	nop
 8009dbc:	e7fe      	b.n	8009dbc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <vPortFree+0xb4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d019      	beq.n	8009e00 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d115      	bne.n	8009e00 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	4b0b      	ldr	r3, [pc, #44]	; (8009e08 <vPortFree+0xb4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	401a      	ands	r2, r3
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009de4:	f7fe feb0 	bl	8008b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <vPortFree+0xb8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4413      	add	r3, r2
 8009df2:	4a06      	ldr	r2, [pc, #24]	; (8009e0c <vPortFree+0xb8>)
 8009df4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009df6:	6938      	ldr	r0, [r7, #16]
 8009df8:	f000 f86c 	bl	8009ed4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009dfc:	f7fe feb2 	bl	8008b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	2001064c 	.word	0x2001064c
 8009e0c:	20010644 	.word	0x20010644

08009e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e1c:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <prvHeapInit+0xac>)
 8009e1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3307      	adds	r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0307 	bic.w	r3, r3, #7
 8009e36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	4a1f      	ldr	r2, [pc, #124]	; (8009ebc <prvHeapInit+0xac>)
 8009e40:	4413      	add	r3, r2
 8009e42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e48:	4a1d      	ldr	r2, [pc, #116]	; (8009ec0 <prvHeapInit+0xb0>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <prvHeapInit+0xb0>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4a15      	ldr	r2, [pc, #84]	; (8009ec4 <prvHeapInit+0xb4>)
 8009e70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <prvHeapInit+0xb4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <prvHeapInit+0xb4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	1ad2      	subs	r2, r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <prvHeapInit+0xb4>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4a0a      	ldr	r2, [pc, #40]	; (8009ec8 <prvHeapInit+0xb8>)
 8009e9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <prvHeapInit+0xbc>)
 8009ea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ea8:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <prvHeapInit+0xc0>)
 8009eaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000638 	.word	0x20000638
 8009ec0:	20010638 	.word	0x20010638
 8009ec4:	20010640 	.word	0x20010640
 8009ec8:	20010648 	.word	0x20010648
 8009ecc:	20010644 	.word	0x20010644
 8009ed0:	2001064c 	.word	0x2001064c

08009ed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009edc:	4b28      	ldr	r3, [pc, #160]	; (8009f80 <prvInsertBlockIntoFreeList+0xac>)
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e002      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x14>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d8f7      	bhi.n	8009ee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4413      	add	r3, r2
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d108      	bne.n	8009f16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	441a      	add	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	441a      	add	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d118      	bne.n	8009f5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <prvInsertBlockIntoFreeList+0xb0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d00d      	beq.n	8009f52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	441a      	add	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e008      	b.n	8009f64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f52:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <prvInsertBlockIntoFreeList+0xb0>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e003      	b.n	8009f64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d002      	beq.n	8009f72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f72:	bf00      	nop
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20010638 	.word	0x20010638
 8009f84:	20010640 	.word	0x20010640

08009f88 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a51      	ldr	r2, [pc, #324]	; (800a0d8 <I2Cx_MspInit+0x150>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d14d      	bne.n	800a034 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009f98:	4b50      	ldr	r3, [pc, #320]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	4a4f      	ldr	r2, [pc, #316]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8009fa4:	4b4d      	ldr	r3, [pc, #308]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8009fb0:	2380      	movs	r3, #128	; 0x80
 8009fb2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009fb4:	2312      	movs	r3, #18
 8009fb6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009fc4:	f107 031c 	add.w	r3, r7, #28
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4845      	ldr	r0, [pc, #276]	; (800a0e0 <I2Cx_MspInit+0x158>)
 8009fcc:	f7f8 ff96 	bl	8002efc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8009fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009fd6:	f107 031c 	add.w	r3, r7, #28
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4840      	ldr	r0, [pc, #256]	; (800a0e0 <I2Cx_MspInit+0x158>)
 8009fde:	f7f8 ff8d 	bl	8002efc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8009fe2:	4b3e      	ldr	r3, [pc, #248]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	4a3d      	ldr	r2, [pc, #244]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009fe8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fec:	6413      	str	r3, [r2, #64]	; 0x40
 8009fee:	4b3b      	ldr	r3, [pc, #236]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8009ffa:	4b38      	ldr	r3, [pc, #224]	; (800a0dc <I2Cx_MspInit+0x154>)
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	4a37      	ldr	r2, [pc, #220]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a004:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800a006:	4b35      	ldr	r3, [pc, #212]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	4a34      	ldr	r2, [pc, #208]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a00c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a010:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800a012:	2200      	movs	r2, #0
 800a014:	210f      	movs	r1, #15
 800a016:	2048      	movs	r0, #72	; 0x48
 800a018:	f7f8 f8f4 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800a01c:	2048      	movs	r0, #72	; 0x48
 800a01e:	f7f8 f90d 	bl	800223c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800a022:	2200      	movs	r2, #0
 800a024:	210f      	movs	r1, #15
 800a026:	2049      	movs	r0, #73	; 0x49
 800a028:	f7f8 f8ec 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800a02c:	2049      	movs	r0, #73	; 0x49
 800a02e:	f7f8 f905 	bl	800223c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800a032:	e04d      	b.n	800a0d0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a034:	4b29      	ldr	r3, [pc, #164]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	4a28      	ldr	r2, [pc, #160]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a03a:	f043 0302 	orr.w	r3, r3, #2
 800a03e:	6313      	str	r3, [r2, #48]	; 0x30
 800a040:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800a04c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a050:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a052:	2312      	movs	r3, #18
 800a054:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800a056:	2300      	movs	r3, #0
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800a05a:	2302      	movs	r3, #2
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800a05e:	2304      	movs	r3, #4
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a062:	f107 031c 	add.w	r3, r7, #28
 800a066:	4619      	mov	r1, r3
 800a068:	481e      	ldr	r0, [pc, #120]	; (800a0e4 <I2Cx_MspInit+0x15c>)
 800a06a:	f7f8 ff47 	bl	8002efc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800a06e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a074:	f107 031c 	add.w	r3, r7, #28
 800a078:	4619      	mov	r1, r3
 800a07a:	481a      	ldr	r0, [pc, #104]	; (800a0e4 <I2Cx_MspInit+0x15c>)
 800a07c:	f7f8 ff3e 	bl	8002efc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800a080:	4b16      	ldr	r3, [pc, #88]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a084:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a08a:	6413      	str	r3, [r2, #64]	; 0x40
 800a08c:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	4a0f      	ldr	r2, [pc, #60]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a09e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0a2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800a0a4:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <I2Cx_MspInit+0x154>)
 800a0aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0ae:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	210f      	movs	r1, #15
 800a0b4:	201f      	movs	r0, #31
 800a0b6:	f7f8 f8a5 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800a0ba:	201f      	movs	r0, #31
 800a0bc:	f7f8 f8be 	bl	800223c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	210f      	movs	r1, #15
 800a0c4:	2020      	movs	r0, #32
 800a0c6:	f7f8 f89d 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800a0ca:	2020      	movs	r0, #32
 800a0cc:	f7f8 f8b6 	bl	800223c <HAL_NVIC_EnableIRQ>
}
 800a0d0:	bf00      	nop
 800a0d2:	3730      	adds	r7, #48	; 0x30
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20010650 	.word	0x20010650
 800a0dc:	40023800 	.word	0x40023800
 800a0e0:	40021c00 	.word	0x40021c00
 800a0e4:	40020400 	.word	0x40020400

0800a0e8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7f9 fcc3 	bl	8003a7c <HAL_I2C_GetState>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d125      	bne.n	800a148 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a14      	ldr	r2, [pc, #80]	; (800a150 <I2Cx_Init+0x68>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d103      	bne.n	800a10c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a13      	ldr	r2, [pc, #76]	; (800a154 <I2Cx_Init+0x6c>)
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a12      	ldr	r2, [pc, #72]	; (800a158 <I2Cx_Init+0x70>)
 800a110:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a11      	ldr	r2, [pc, #68]	; (800a15c <I2Cx_Init+0x74>)
 800a116:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ff23 	bl	8009f88 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7f9 f9ac 	bl	80034a0 <HAL_I2C_Init>
  }
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20010650 	.word	0x20010650
 800a154:	40005c00 	.word	0x40005c00
 800a158:	40005400 	.word	0x40005400
 800a15c:	40912732 	.word	0x40912732

0800a160 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af04      	add	r7, sp, #16
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	461a      	mov	r2, r3
 800a16e:	4603      	mov	r3, r0
 800a170:	72fb      	strb	r3, [r7, #11]
 800a172:	460b      	mov	r3, r1
 800a174:	813b      	strh	r3, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	b299      	uxth	r1, r3
 800a182:	88f8      	ldrh	r0, [r7, #6]
 800a184:	893a      	ldrh	r2, [r7, #8]
 800a186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a18a:	9302      	str	r3, [sp, #8]
 800a18c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	4603      	mov	r3, r0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7f9 fb56 	bl	8003848 <HAL_I2C_Mem_Read>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f832 	bl	800a214 <I2Cx_Error>
  }
  return status;    
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08a      	sub	sp, #40	; 0x28
 800a1be:	af04      	add	r7, sp, #16
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	72fb      	strb	r3, [r7, #11]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	813b      	strh	r3, [r7, #8]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	b299      	uxth	r1, r3
 800a1dc:	88f8      	ldrh	r0, [r7, #6]
 800a1de:	893a      	ldrh	r2, [r7, #8]
 800a1e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1e4:	9302      	str	r3, [sp, #8]
 800a1e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7f9 fa15 	bl	8003620 <HAL_I2C_Mem_Write>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	4619      	mov	r1, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f805 	bl	800a214 <I2Cx_Error>
  }
  return status;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7f9 f9cd 	bl	80035c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ff5e 	bl	800a0e8 <I2Cx_Init>
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af02      	add	r7, sp, #8
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
 800a23e:	460b      	mov	r3, r1
 800a240:	71bb      	strb	r3, [r7, #6]
 800a242:	4613      	mov	r3, r2
 800a244:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a246:	79bb      	ldrb	r3, [r7, #6]
 800a248:	b29a      	uxth	r2, r3
 800a24a:	79f9      	ldrb	r1, [r7, #7]
 800a24c:	2301      	movs	r3, #1
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	1d7b      	adds	r3, r7, #5
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	2301      	movs	r3, #1
 800a256:	4803      	ldr	r0, [pc, #12]	; (800a264 <TS_IO_Write+0x30>)
 800a258:	f7ff ffaf 	bl	800a1ba <I2Cx_WriteMultiple>
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20010650 	.word	0x20010650

0800a268 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	4603      	mov	r3, r0
 800a270:	460a      	mov	r2, r1
 800a272:	71fb      	strb	r3, [r7, #7]
 800a274:	4613      	mov	r3, r2
 800a276:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a27c:	79bb      	ldrb	r3, [r7, #6]
 800a27e:	b29a      	uxth	r2, r3
 800a280:	79f9      	ldrb	r1, [r7, #7]
 800a282:	2301      	movs	r3, #1
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	f107 030f 	add.w	r3, r7, #15
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2301      	movs	r3, #1
 800a28e:	4804      	ldr	r0, [pc, #16]	; (800a2a0 <TS_IO_Read+0x38>)
 800a290:	f7ff ff66 	bl	800a160 <I2Cx_ReadMultiple>

  return read_value;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20010650 	.word	0x20010650

0800a2a4 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
}
 800a2a8:	bf00      	nop
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800a2b6:	f005 f917 	bl	800f4e8 <touchgfx_components_init>
  touchgfx_init();
 800a2ba:	f005 f8eb 	bl	800f494 <touchgfx_init>
}
 800a2be:	bf00      	nop
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800a2c6:	f005 f917 	bl	800f4f8 <touchgfx_taskEntry>
}
 800a2ca:	bf00      	nop
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
    {
 800a2d8:	4a04      	ldr	r2, [pc, #16]	; (800a2ec <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
    }
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	080209ac 	.word	0x080209ac

0800a2f0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
    }
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff ffe9 	bl	800a2d0 <_ZN8touchgfx12FontProviderD1Ev>
 800a2fe:	2104      	movs	r1, #4
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f014 fb14 	bl	801e92e <_ZdlPvj>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800a31c:	887b      	ldrh	r3, [r7, #2]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d010      	beq.n	800a344 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800a322:	2b02      	cmp	r3, #2
 800a324:	dc13      	bgt.n	800a34e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d005      	beq.n	800a33a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800a32e:	e00e      	b.n	800a34e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800a330:	f003 fb4e 	bl	800d9d0 <_ZN17TypedTextDatabase8getFontsEv>
 800a334:	4603      	mov	r3, r0
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	e00a      	b.n	800a350 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800a33a:	f003 fb49 	bl	800d9d0 <_ZN17TypedTextDatabase8getFontsEv>
 800a33e:	4603      	mov	r3, r0
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	e005      	b.n	800a350 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800a344:	f003 fb44 	bl	800d9d0 <_ZN17TypedTextDatabase8getFontsEv>
 800a348:	4603      	mov	r3, r0
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	e000      	b.n	800a350 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800a34e:	2300      	movs	r3, #0
    }
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	4a05      	ldr	r2, [pc, #20]	; (800a378 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff ffb1 	bl	800a2d0 <_ZN8touchgfx12FontProviderD1Ev>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	08020998 	.word	0x08020998

0800a37c <_ZN23ApplicationFontProviderD0Ev>:
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff ffe7 	bl	800a358 <_ZN23ApplicationFontProviderD1Ev>
 800a38a:	2104      	movs	r1, #4
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f014 face 	bl	801e92e <_ZdlPvj>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
    {
 800a3a4:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	601a      	str	r2, [r3, #0]
    }
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr
 800a3b8:	08020e50 	.word	0x08020e50

0800a3bc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
    }
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ffe9 	bl	800a39c <_ZN8touchgfx4FontD1Ev>
 800a3ca:	2114      	movs	r1, #20
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f014 faae 	bl	801e92e <_ZdlPvj>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800a3e8:	887b      	ldrh	r3, [r7, #2]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e010      	b.n	800a414 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3308      	adds	r3, #8
 800a400:	681c      	ldr	r4, [r3, #0]
 800a402:	f107 030f 	add.w	r3, r7, #15
 800a406:	f107 0210 	add.w	r2, r7, #16
 800a40a:	8879      	ldrh	r1, [r7, #2]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	47a0      	blx	r4
 800a410:	6178      	str	r0, [r7, #20]
        return glyph;
 800a412:	697b      	ldr	r3, [r7, #20]
    }
 800a414:	4618      	mov	r0, r3
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd90      	pop	{r4, r7, pc}

0800a41c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	89db      	ldrh	r3, [r3, #14]
    }
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	88db      	ldrh	r3, [r3, #6]
    }
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	889b      	ldrh	r3, [r3, #4]
    }
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7a9b      	ldrb	r3, [r3, #10]
 800a488:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a48c:	b2db      	uxtb	r3, r3
    }
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7a9b      	ldrb	r3, [r3, #10]
 800a4a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a4aa:	b2db      	uxtb	r3, r3
    }
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	4a05      	ldr	r2, [pc, #20]	; (800a4d8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff ff67 	bl	800a39c <_ZN8touchgfx4FontD1Ev>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	08021920 	.word	0x08021920

0800a4dc <_ZN8touchgfx9ConstFontD0Ev>:
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ffe7 	bl	800a4b8 <_ZN8touchgfx9ConstFontD1Ev>
 800a4ea:	211c      	movs	r1, #28
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f014 fa1e 	bl	801e92e <_ZdlPvj>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	4a05      	ldr	r2, [pc, #20]	; (800a51c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff ffd3 	bl	800a4b8 <_ZN8touchgfx9ConstFontD1Ev>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	080209d0 	.word	0x080209d0

0800a520 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff ffe7 	bl	800a4fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800a52e:	212c      	movs	r1, #44	; 0x2c
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f014 f9fc 	bl	801e92e <_ZdlPvj>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
    {
 800a548:	4a04      	ldr	r2, [pc, #16]	; (800a55c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
    }
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	080209c0 	.word	0x080209c0

0800a560 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    }
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff ffe9 	bl	800a540 <_ZN8touchgfx9TypedTextD1Ev>
 800a56e:	2108      	movs	r1, #8
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f014 f9dc 	bl	801e92e <_ZdlPvj>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800a58c:	4618      	mov	r0, r3
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08e      	sub	sp, #56	; 0x38
 800a5b4:	af0a      	add	r7, sp, #40	; 0x28
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	460b      	mov	r3, r1
 800a5c0:	80fb      	strh	r3, [r7, #6]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	88b9      	ldrh	r1, [r7, #4]
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a5d0:	9308      	str	r3, [sp, #32]
 800a5d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5d4:	9307      	str	r3, [sp, #28]
 800a5d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a5da:	9306      	str	r3, [sp, #24]
 800a5dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a5e0:	9305      	str	r3, [sp, #20]
 800a5e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5f2:	9302      	str	r3, [sp, #8]
 800a5f4:	7f3b      	ldrb	r3, [r7, #28]
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	8b3b      	ldrh	r3, [r7, #24]
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	f00a f8aa 	bl	8014758 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800a604:	4a09      	ldr	r2, [pc, #36]	; (800a62c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a60e:	61da      	str	r2, [r3, #28]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a614:	621a      	str	r2, [r3, #32]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a620:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	080209d0 	.word	0x080209d0

0800a630 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	889b      	ldrh	r3, [r3, #4]
 800a644:	0adb      	lsrs	r3, r3, #11
 800a646:	b29b      	uxth	r3, r3
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4413      	add	r3, r2
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4413      	add	r3, r2
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a662:	b480      	push	{r7}
 800a664:	b089      	sub	sp, #36	; 0x24
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	460b      	mov	r3, r1
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7b1b      	ldrb	r3, [r3, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	e030      	b.n	800a6e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a1a      	ldr	r2, [r3, #32]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	7b5b      	ldrb	r3, [r3, #13]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	b21b      	sxth	r3, r3
 800a692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a696:	b219      	sxth	r1, r3
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	7adb      	ldrb	r3, [r3, #11]
 800a69c:	b21b      	sxth	r3, r3
 800a69e:	430b      	orrs	r3, r1
 800a6a0:	b21b      	sxth	r3, r3
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	7b1b      	ldrb	r3, [r3, #12]
 800a6ae:	837b      	strh	r3, [r7, #26]
 800a6b0:	8b7b      	ldrh	r3, [r7, #26]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d015      	beq.n	800a6e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	897a      	ldrh	r2, [r7, #10]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d103      	bne.n	800a6c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a6c6:	e00d      	b.n	800a6e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	897a      	ldrh	r2, [r7, #10]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d306      	bcc.n	800a6e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800a6d2:	8b7b      	ldrh	r3, [r7, #26]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	837b      	strh	r3, [r7, #26]
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	e7e7      	b.n	800a6b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800a6e0:	bf00      	nop
        }
    }
    return 0;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3724      	adds	r7, #36	; 0x24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__tcf_0+0xc>)
 800a6f6:	f7ff ff01 	bl	800a4fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200106a4 	.word	0x200106a4

0800a700 <_Z23getFont_verdana_10_4bppv>:
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800a706:	4b21      	ldr	r3, [pc, #132]	; (800a78c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f3bf 8f5b 	dmb	ish
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	bf0c      	ite	eq
 800a718:	2301      	moveq	r3, #1
 800a71a:	2300      	movne	r3, #0
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d030      	beq.n	800a784 <_Z23getFont_verdana_10_4bppv+0x84>
 800a722:	481a      	ldr	r0, [pc, #104]	; (800a78c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a724:	f014 f905 	bl	801e932 <__cxa_guard_acquire>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bf14      	ite	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	2300      	moveq	r3, #0
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d025      	beq.n	800a784 <_Z23getFont_verdana_10_4bppv+0x84>
 800a738:	2300      	movs	r3, #0
 800a73a:	930c      	str	r3, [sp, #48]	; 0x30
 800a73c:	2300      	movs	r3, #0
 800a73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a740:	2300      	movs	r3, #0
 800a742:	930a      	str	r3, [sp, #40]	; 0x28
 800a744:	233f      	movs	r3, #63	; 0x3f
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	4b11      	ldr	r3, [pc, #68]	; (800a790 <_Z23getFont_verdana_10_4bppv+0x90>)
 800a74a:	9308      	str	r3, [sp, #32]
 800a74c:	4b11      	ldr	r3, [pc, #68]	; (800a794 <_Z23getFont_verdana_10_4bppv+0x94>)
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	2300      	movs	r3, #0
 800a752:	9306      	str	r3, [sp, #24]
 800a754:	2300      	movs	r3, #0
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	2301      	movs	r3, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	2304      	movs	r3, #4
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	2300      	movs	r3, #0
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	2300      	movs	r3, #0
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	230a      	movs	r3, #10
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	230a      	movs	r3, #10
 800a76e:	2201      	movs	r2, #1
 800a770:	4909      	ldr	r1, [pc, #36]	; (800a798 <_Z23getFont_verdana_10_4bppv+0x98>)
 800a772:	480a      	ldr	r0, [pc, #40]	; (800a79c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800a774:	f7ff ff1c 	bl	800a5b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a778:	4809      	ldr	r0, [pc, #36]	; (800a7a0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800a77a:	f014 f925 	bl	801e9c8 <atexit>
 800a77e:	4803      	ldr	r0, [pc, #12]	; (800a78c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800a780:	f014 f8e3 	bl	801e94a <__cxa_guard_release>
    return verdana_10_4bpp;
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800a786:	4618      	mov	r0, r3
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200106d0 	.word	0x200106d0
 800a790:	08023e0c 	.word	0x08023e0c
 800a794:	08023fb8 	.word	0x08023fb8
 800a798:	080238b8 	.word	0x080238b8
 800a79c:	200106a4 	.word	0x200106a4
 800a7a0:	0800a6f1 	.word	0x0800a6f1

0800a7a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__tcf_0+0xc>)
 800a7aa:	f7ff fea7 	bl	800a4fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200106d4 	.word	0x200106d4

0800a7b4 <_Z23getFont_verdana_20_4bppv>:
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08e      	sub	sp, #56	; 0x38
 800a7b8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f3bf 8f5b 	dmb	ish
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d030      	beq.n	800a838 <_Z23getFont_verdana_20_4bppv+0x84>
 800a7d6:	481a      	ldr	r0, [pc, #104]	; (800a840 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a7d8:	f014 f8ab 	bl	801e932 <__cxa_guard_acquire>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2301      	movne	r3, #1
 800a7e4:	2300      	moveq	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d025      	beq.n	800a838 <_Z23getFont_verdana_20_4bppv+0x84>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f8:	233f      	movs	r3, #63	; 0x3f
 800a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fc:	4b11      	ldr	r3, [pc, #68]	; (800a844 <_Z23getFont_verdana_20_4bppv+0x90>)
 800a7fe:	9308      	str	r3, [sp, #32]
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <_Z23getFont_verdana_20_4bppv+0x94>)
 800a802:	9307      	str	r3, [sp, #28]
 800a804:	2301      	movs	r3, #1
 800a806:	9306      	str	r3, [sp, #24]
 800a808:	2301      	movs	r3, #1
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	2301      	movs	r3, #1
 800a80e:	9304      	str	r3, [sp, #16]
 800a810:	2304      	movs	r3, #4
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	2300      	movs	r3, #0
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	2300      	movs	r3, #0
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	2314      	movs	r3, #20
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	2318      	movs	r3, #24
 800a822:	225f      	movs	r2, #95	; 0x5f
 800a824:	4909      	ldr	r1, [pc, #36]	; (800a84c <_Z23getFont_verdana_20_4bppv+0x98>)
 800a826:	480a      	ldr	r0, [pc, #40]	; (800a850 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800a828:	f7ff fec2 	bl	800a5b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a82c:	4809      	ldr	r0, [pc, #36]	; (800a854 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800a82e:	f014 f8cb 	bl	801e9c8 <atexit>
 800a832:	4803      	ldr	r0, [pc, #12]	; (800a840 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800a834:	f014 f889 	bl	801e94a <__cxa_guard_release>
    return verdana_20_4bpp;
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20010700 	.word	0x20010700
 800a844:	08023e10 	.word	0x08023e10
 800a848:	08023fbc 	.word	0x08023fbc
 800a84c:	080238c8 	.word	0x080238c8
 800a850:	200106d4 	.word	0x200106d4
 800a854:	0800a7a5 	.word	0x0800a7a5

0800a858 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__tcf_0+0xc>)
 800a85e:	f7ff fe4d 	bl	800a4fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20010704 	.word	0x20010704

0800a868 <_Z23getFont_verdana_40_4bppv>:
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08e      	sub	sp, #56	; 0x38
 800a86c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800a86e:	4b21      	ldr	r3, [pc, #132]	; (800a8f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	f3bf 8f5b 	dmb	ish
 800a876:	b2db      	uxtb	r3, r3
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bf0c      	ite	eq
 800a880:	2301      	moveq	r3, #1
 800a882:	2300      	movne	r3, #0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d030      	beq.n	800a8ec <_Z23getFont_verdana_40_4bppv+0x84>
 800a88a:	481a      	ldr	r0, [pc, #104]	; (800a8f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a88c:	f014 f851 	bl	801e932 <__cxa_guard_acquire>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	bf14      	ite	ne
 800a896:	2301      	movne	r3, #1
 800a898:	2300      	moveq	r3, #0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d025      	beq.n	800a8ec <_Z23getFont_verdana_40_4bppv+0x84>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ac:	233f      	movs	r3, #63	; 0x3f
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <_Z23getFont_verdana_40_4bppv+0x90>)
 800a8b2:	9308      	str	r3, [sp, #32]
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <_Z23getFont_verdana_40_4bppv+0x94>)
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9306      	str	r3, [sp, #24]
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	2304      	movs	r3, #4
 800a8c6:	9303      	str	r3, [sp, #12]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9302      	str	r3, [sp, #8]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	2328      	movs	r3, #40	; 0x28
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2328      	movs	r3, #40	; 0x28
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4909      	ldr	r1, [pc, #36]	; (800a900 <_Z23getFont_verdana_40_4bppv+0x98>)
 800a8da:	480a      	ldr	r0, [pc, #40]	; (800a904 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800a8dc:	f7ff fe68 	bl	800a5b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a8e0:	4809      	ldr	r0, [pc, #36]	; (800a908 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800a8e2:	f014 f871 	bl	801e9c8 <atexit>
 800a8e6:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a8e8:	f014 f82f 	bl	801e94a <__cxa_guard_release>
    return verdana_40_4bpp;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20010730 	.word	0x20010730
 800a8f8:	08023fb4 	.word	0x08023fb4
 800a8fc:	08023fc0 	.word	0x08023fc0
 800a900:	08023dfc 	.word	0x08023dfc
 800a904:	20010704 	.word	0x20010704
 800a908:	0800a859 	.word	0x0800a859

0800a90c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	805a      	strh	r2, [r3, #2]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	809a      	strh	r2, [r3, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	80da      	strh	r2, [r3, #6]
    {
    }
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4618      	mov	r0, r3
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	461a      	mov	r2, r3
 800a960:	4603      	mov	r3, r0
 800a962:	817b      	strh	r3, [r7, #10]
 800a964:	460b      	mov	r3, r1
 800a966:	813b      	strh	r3, [r7, #8]
 800a968:	4613      	mov	r3, r2
 800a96a:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	897a      	ldrh	r2, [r7, #10]
 800a970:	801a      	strh	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	893a      	ldrh	r2, [r7, #8]
 800a976:	805a      	strh	r2, [r3, #2]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	88fa      	ldrh	r2, [r7, #6]
 800a97c:	809a      	strh	r2, [r3, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8b3a      	ldrh	r2, [r7, #24]
 800a982:	80da      	strh	r2, [r3, #6]
    {
    }
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a99c:	4a14      	ldr	r2, [pc, #80]	; (800a9f0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ffbc 	bl	800a924 <_ZN8touchgfx4RectC1Ev>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	330c      	adds	r3, #12
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff ffb7 	bl	800a924 <_ZN8touchgfx4RectC1Ev>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	615a      	str	r2, [r3, #20]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	619a      	str	r2, [r3, #24]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	61da      	str	r2, [r3, #28]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	841a      	strh	r2, [r3, #32]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	845a      	strh	r2, [r3, #34]	; 0x22
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	080218b8 	.word	0x080218b8

0800a9f4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
    {
 800a9fc:	4a04      	ldr	r2, [pc, #16]	; (800aa10 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]
    }
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	080218b8 	.word	0x080218b8

0800aa14 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
    }
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff ffe9 	bl	800a9f4 <_ZN8touchgfx8DrawableD1Ev>
 800aa22:	2128      	movs	r1, #40	; 0x28
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f013 ff82 	bl	801e92e <_ZdlPvj>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
        }
    }
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
    }
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800aa7a:	2300      	movs	r3, #0
    }
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	461a      	mov	r2, r3
 800aa96:	4603      	mov	r3, r0
 800aa98:	817b      	strh	r3, [r7, #10]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	813b      	strh	r3, [r7, #8]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800aaa2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800aaa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 f837 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800aab2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aaba:	4619      	mov	r1, r3
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f88b 	bl	800abd8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800aad8:	4618      	mov	r0, r3
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	887a      	ldrh	r2, [r7, #2]
 800aaf4:	809a      	strh	r2, [r3, #4]
    }
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	887a      	ldrh	r2, [r7, #2]
 800ab12:	80da      	strh	r2, [r3, #6]
    }
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	807b      	strh	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3330      	adds	r3, #48	; 0x30
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	4798      	blx	r3
        setY(y);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3334      	adds	r3, #52	; 0x34
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
    }
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	887a      	ldrh	r2, [r7, #2]
 800ab6c:	811a      	strh	r2, [r3, #8]
    }
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	887a      	ldrh	r2, [r7, #2]
 800ab8a:	815a      	strh	r2, [r3, #10]
    }
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
    {
    }
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	807b      	strh	r3, [r7, #2]
 800abe4:	4613      	mov	r3, r2
 800abe6:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3338      	adds	r3, #56	; 0x38
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800abf4:	4611      	mov	r1, r2
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
        setHeight(height);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	333c      	adds	r3, #60	; 0x3c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ac06:	4611      	mov	r1, r2
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
    }
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
    {
    }
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	807b      	strh	r3, [r7, #2]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3354      	adds	r3, #84	; 0x54
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	8879      	ldrh	r1, [r7, #2]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ac92:	b292      	uxth	r2, r2
 800ac94:	1a8a      	subs	r2, r1, r2
 800ac96:	b292      	uxth	r2, r2
 800ac98:	b210      	sxth	r0, r2
 800ac9a:	8839      	ldrh	r1, [r7, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800aca2:	b292      	uxth	r2, r2
 800aca4:	1a8a      	subs	r2, r1, r2
 800aca6:	b292      	uxth	r2, r2
 800aca8:	b212      	sxth	r2, r2
 800acaa:	4601      	mov	r1, r0
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
    }
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acc6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acce:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acd6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff ffe1 	bl	800acb8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	601a      	str	r2, [r3, #0]
    }
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
    {
    }
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
    {
    }
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
	...

0800ad90 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
    {
 800ad98:	4a04      	ldr	r2, [pc, #16]	; (800adac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
    }
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	08020c58 	.word	0x08020c58

0800adb0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
    }
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff ffe9 	bl	800ad90 <_ZN8touchgfx15UIEventListenerD1Ev>
 800adbe:	2104      	movs	r1, #4
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f013 fdb4 	bl	801e92e <_ZdlPvj>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
    {
    }
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800ae0e:	6810      	ldr	r0, [r2, #0]
 800ae10:	6851      	ldr	r1, [r2, #4]
 800ae12:	c303      	stmia	r3!, {r0, r1}
    }
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f008 fbc6 	bl	80135be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
    {
 800ae44:	4a04      	ldr	r2, [pc, #16]	; (800ae58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	601a      	str	r2, [r3, #0]
    }
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	08020c40 	.word	0x08020c40

0800ae5c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
    }
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ffe9 	bl	800ae3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ae6a:	2104      	movs	r1, #4
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f013 fd5e 	bl	801e92e <_ZdlPvj>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
    {
        return instance;
 800ae80:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ae82:	681b      	ldr	r3, [r3, #0]
    }
 800ae84:	4618      	mov	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20011918 	.word	0x20011918

0800ae94 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ae94:	b480      	push	{r7}
 800ae96:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d008      	beq.n	800aeb6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800aea4:	4b08      	ldr	r3, [pc, #32]	; (800aec8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb4:	e002      	b.n	800aebc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800aeb6:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
    }
 800aebc:	4618      	mov	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20011918 	.word	0x20011918

0800aecc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	460b      	mov	r3, r1
 800aed8:	817b      	strh	r3, [r7, #10]
 800aeda:	4613      	mov	r3, r2
 800aedc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff feac 	bl	800ac3e <_ZNK8touchgfx8Drawable9isVisibleEv>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff feb2 	bl	800ac58 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aefa:	2301      	movs	r3, #1
 800aefc:	e000      	b.n	800af00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800aefe:	2300      	movs	r3, #0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
        }
    }
 800af0a:	bf00      	nop
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800af1c:	4a07      	ldr	r2, [pc, #28]	; (800af3c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	605a      	str	r2, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	721a      	strb	r2, [r3, #8]
    {
    }
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	08020b4c 	.word	0x08020b4c

0800af40 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
    {
 800af48:	4a04      	ldr	r2, [pc, #16]	; (800af5c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
    }
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	08020b4c 	.word	0x08020b4c

0800af60 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    }
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ffe9 	bl	800af40 <_ZN8touchgfx10TransitionD1Ev>
 800af6e:	210c      	movs	r1, #12
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f013 fcdc 	bl	801e92e <_ZdlPvj>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
    {
    }
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
    {
    }
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
    {
    }
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800afc4:	f008 faae 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800afc8:	4603      	mov	r3, r0
 800afca:	4618      	mov	r0, r3
 800afcc:	f008 ff1c 	bl	8013e08 <_ZN8touchgfx11Application10invalidateEv>
    }
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	605a      	str	r2, [r3, #4]
    }
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af02      	add	r7, sp, #8
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4613      	mov	r3, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	2100      	movs	r1, #0
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff fc9d 	bl	800a952 <_ZN8touchgfx4RectC1Essss>
        }
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
        {
        }
 800b02a:	bf00      	nop
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	4a05      	ldr	r2, [pc, #20]	; (800b058 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fea1 	bl	800ad90 <_ZN8touchgfx15UIEventListenerD1Ev>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	0802186c 	.word	0x0802186c

0800b05c <_ZN8touchgfx11ApplicationD0Ev>:
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7ff ffe7 	bl	800b038 <_ZN8touchgfx11ApplicationD1Ev>
 800b06a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f013 fc5d 	bl	801e92e <_ZdlPvj>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f008 fb38 	bl	8013700 <_ZN8touchgfx11ApplicationC1Ev>
 800b090:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a04      	ldr	r2, [pc, #16]	; (800b0bc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800b0aa:	6013      	str	r3, [r2, #0]
    }
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08020b00 	.word	0x08020b00
 800b0bc:	20011964 	.word	0x20011964

0800b0c0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f804 	bl	800b0d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00f      	beq.n	800b108 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	330c      	adds	r3, #12
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	4798      	blx	r3
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800b108:	2300      	movs	r3, #0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00e      	beq.n	800b12c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4610      	mov	r0, r2
 800b122:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	601a      	str	r2, [r3, #0]
    }
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff ff69 	bl	800b038 <_ZN8touchgfx11ApplicationD1Ev>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	08020b00 	.word	0x08020b00

0800b174 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ffe7 	bl	800b150 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b182:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f013 fbd1 	bl	801e92e <_ZdlPvj>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	4a08      	ldr	r2, [pc, #32]	; (800b1c4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 ff59 	bl	800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ffcb 	bl	800b150 <_ZN8touchgfx14MVPApplicationD1Ev>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	08020a9c 	.word	0x08020a9c

0800b1c8 <_ZN23FrontendApplicationBaseD0Ev>:
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff ffe1 	bl	800b198 <_ZN23FrontendApplicationBaseD1Ev>
 800b1d6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f013 fba7 	bl	801e92e <_ZdlPvj>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f8b0 	bl	800b358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	721a      	strb	r2, [r3, #8]
    }
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}

    virtual void uartMsgRdy() {};

    void bind(Model* m)
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	605a      	str	r2, [r3, #4]
    }
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
	...

0800b238 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fba6 	bl	800a994 <_ZN8touchgfx8DrawableC1Ev>
 800b248:	4a03      	ldr	r2, [pc, #12]	; (800b258 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	08020bd8 	.word	0x08020bd8

0800b25c <_ZN8touchgfx6WidgetD1Ev>:
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	4a05      	ldr	r2, [pc, #20]	; (800b27c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff fbc1 	bl	800a9f4 <_ZN8touchgfx8DrawableD1Ev>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	08020bd8 	.word	0x08020bd8

0800b280 <_ZN8touchgfx6WidgetD0Ev>:
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff ffe7 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800b28e:	2128      	movs	r1, #40	; 0x28
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f013 fb4c 	bl	801e92e <_ZdlPvj>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff fee6 	bl	800b080 <_ZN8touchgfx14MVPApplicationC1Ev>
 800b2b4:	4a13      	ldr	r2, [pc, #76]	; (800b304 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f92b 	bl	800b51c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800b2d6:	f7ff fdd1 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	3208      	adds	r2, #8
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f002 faf9 	bl	800d8e0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800b2ee:	f7ff fdd1 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f00e fcf6 	bl	8019ce6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08020a9c 	.word	0x08020a9c

0800b308 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	4611      	mov	r1, r2
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffe9 	bl	800b308 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	605a      	str	r2, [r3, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	3208      	adds	r2, #8
 800b346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b34a:	e883 0003 	stmia.w	r3, {r0, r1}
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b089      	sub	sp, #36	; 0x24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	2300      	movs	r3, #0
 800b36c:	61fb      	str	r3, [r7, #28]
 800b36e:	f107 0008 	add.w	r0, r7, #8
 800b372:	f107 0318 	add.w	r3, r7, #24
 800b376:	cb0c      	ldmia	r3, {r2, r3}
 800b378:	6879      	ldr	r1, [r7, #4]
 800b37a:	f000 f8eb 	bl	800b554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b37e:	f107 0308 	add.w	r3, r7, #8
 800b382:	4619      	mov	r1, r3
 800b384:	4620      	mov	r0, r4
 800b386:	f7ff ffcb 	bl	800b320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b38a:	f107 0308 	add.w	r3, r7, #8
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fe68 	bl	800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800b3a0:	bf00      	nop
 800b3a2:	3724      	adds	r7, #36	; 0x24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd90      	pop	{r4, r7, pc}
 800b3a8:	0800b3ad 	.word	0x0800b3ad

0800b3ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af02      	add	r7, sp, #8
 800b3b2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800b3cc:	4804      	ldr	r0, [pc, #16]	; (800b3e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800b3ce:	f000 f8f3 	bl	800b5b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20011958 	.word	0x20011958
 800b3e0:	20011954 	.word	0x20011954

0800b3e4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b089      	sub	sp, #36	; 0x24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800b3f2:	4b10      	ldr	r3, [pc, #64]	; (800b434 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 800b3f4:	61bb      	str	r3, [r7, #24]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	61fb      	str	r3, [r7, #28]
 800b3fa:	f107 0008 	add.w	r0, r7, #8
 800b3fe:	f107 0318 	add.w	r3, r7, #24
 800b402:	cb0c      	ldmia	r3, {r2, r3}
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	f000 f8a5 	bl	800b554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4619      	mov	r1, r3
 800b410:	4620      	mov	r0, r4
 800b412:	f7ff ff85 	bl	800b320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b416:	f107 0308 	add.w	r3, r7, #8
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 fe22 	bl	800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800b42c:	bf00      	nop
 800b42e:	3724      	adds	r7, #36	; 0x24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}
 800b434:	0800b439 	.word	0x0800b439

0800b438 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	4b04      	ldr	r3, [pc, #16]	; (800b468 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 800b458:	4804      	ldr	r0, [pc, #16]	; (800b46c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 800b45a:	f000 f9c9 	bl	800b7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20011958 	.word	0x20011958
 800b46c:	20011954 	.word	0x20011954

0800b470 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
{
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b089      	sub	sp, #36	; 0x24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800b47e:	4b10      	ldr	r3, [pc, #64]	; (800b4c0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x50>)
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	f107 0008 	add.w	r0, r7, #8
 800b48a:	f107 0318 	add.w	r3, r7, #24
 800b48e:	cb0c      	ldmia	r3, {r2, r3}
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	f000 f85f 	bl	800b554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b496:	f107 0308 	add.w	r3, r7, #8
 800b49a:	4619      	mov	r1, r3
 800b49c:	4620      	mov	r0, r4
 800b49e:	f7ff ff3f 	bl	800b320 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b4a2:	f107 0308 	add.w	r3, r7, #8
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fddc 	bl	800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800b4b8:	bf00      	nop
 800b4ba:	3724      	adds	r7, #36	; 0x24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd90      	pop	{r4, r7, pc}
 800b4c0:	0800b4c5 	.word	0x0800b4c5

0800b4c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x30>)
 800b4e4:	4804      	ldr	r0, [pc, #16]	; (800b4f8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x34>)
 800b4e6:	f000 faa1 	bl	800ba2c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20011958 	.word	0x20011958
 800b4f8:	20011954 	.word	0x20011954

0800b4fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	4a04      	ldr	r2, [pc, #16]	; (800b518 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	08020c40 	.word	0x08020c40

0800b51c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff ffe8 	bl	800b4fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b52c:	4a08      	ldr	r2, [pc, #32]	; (800b550 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	605a      	str	r2, [r3, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	609a      	str	r2, [r3, #8]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	60da      	str	r2, [r3, #12]
    {
    }
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	08020ae8 	.word	0x08020ae8

0800b554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4639      	mov	r1, r7
 800b560:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff ffc8 	bl	800b4fc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	605a      	str	r2, [r3, #4]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3308      	adds	r3, #8
 800b57c:	463a      	mov	r2, r7
 800b57e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b582:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	08020ae8 	.word	0x08020ae8

0800b594 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fcb8 	bl	800af14 <_ZN8touchgfx10TransitionC1Ev>
 800b5a4:	4a03      	ldr	r2, [pc, #12]	; (800b5b4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	08020a78 	.word	0x08020a78

0800b5b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b08f      	sub	sp, #60	; 0x3c
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3320      	adds	r3, #32
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800b5de:	d205      	bcs.n	800b5ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b5e0:	4b7e      	ldr	r3, [pc, #504]	; (800b7dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800b5e2:	4a7f      	ldr	r2, [pc, #508]	; (800b7e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b5e4:	21a3      	movs	r1, #163	; 0xa3
 800b5e6:	487f      	ldr	r0, [pc, #508]	; (800b7e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b5e8:	f013 f9d0 	bl	801e98c <__assert_func>
 800b5ec:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3320      	adds	r3, #32
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	4603      	mov	r3, r0
 800b602:	2b0f      	cmp	r3, #15
 800b604:	d805      	bhi.n	800b612 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b606:	4b78      	ldr	r3, [pc, #480]	; (800b7e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b608:	4a75      	ldr	r2, [pc, #468]	; (800b7e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b60a:	21a4      	movs	r1, #164	; 0xa4
 800b60c:	4875      	ldr	r0, [pc, #468]	; (800b7e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b60e:	f013 f9bd 	bl	801e98c <__assert_func>
 800b612:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3320      	adds	r3, #32
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4610      	mov	r0, r2
 800b624:	4798      	blx	r3
 800b626:	4603      	mov	r3, r0
 800b628:	2b0b      	cmp	r3, #11
 800b62a:	d805      	bhi.n	800b638 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b62c:	4b6f      	ldr	r3, [pc, #444]	; (800b7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800b62e:	4a6c      	ldr	r2, [pc, #432]	; (800b7e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b630:	21a5      	movs	r1, #165	; 0xa5
 800b632:	486c      	ldr	r0, [pc, #432]	; (800b7e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b634:	f013 f9aa 	bl	801e98c <__assert_func>
 800b638:	bf00      	nop
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b646:	f007 ff6d 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800b64a:	4603      	mov	r3, r0
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff fbe7 	bl	800ae20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d008      	beq.n	800b66c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	330c      	adds	r3, #12
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4610      	mov	r0, r2
 800b66a:	4798      	blx	r3
    if (*currentTrans)
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
    if (*currentScreen)
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d008      	beq.n	800b69e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3314      	adds	r3, #20
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
    if (*currentPresenter)
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d008      	beq.n	800b6b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4798      	blx	r3
    if (*currentScreen)
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d007      	beq.n	800b6d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4798      	blx	r3
    if (*currentPresenter)
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d008      	beq.n	800b6ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	4798      	blx	r3
}
 800b6ea:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fab6 	bl	800bc64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	200c      	movs	r0, #12
 800b6fe:	f7ff f905 	bl	800a90c <_ZnwjPv>
 800b702:	4604      	mov	r4, r0
 800b704:	4620      	mov	r0, r4
 800b706:	f7ff ff45 	bl	800b594 <_ZN8touchgfx12NoTransitionC1Ev>
 800b70a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f000 fab9 	bl	800bc8a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b718:	4603      	mov	r3, r0
 800b71a:	4619      	mov	r1, r3
 800b71c:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800b720:	f7ff f8f4 	bl	800a90c <_ZnwjPv>
 800b724:	4604      	mov	r4, r0
 800b726:	4620      	mov	r0, r4
 800b728:	f002 fb30 	bl	800dd8c <_ZN11Screen1ViewC1Ev>
 800b72c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	2100      	movs	r1, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f000 fabb 	bl	800bcb0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b73a:	4603      	mov	r3, r0
 800b73c:	4619      	mov	r1, r3
 800b73e:	2010      	movs	r0, #16
 800b740:	f7ff f8e4 	bl	800a90c <_ZnwjPv>
 800b744:	4604      	mov	r4, r0
 800b746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b748:	4620      	mov	r0, r4
 800b74a:	f002 fab1 	bl	800dcb0 <_ZN16Screen1PresenterC1ER11Screen1View>
 800b74e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b754:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b75a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b760:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	3304      	adds	r3, #4
 800b76c:	e000      	b.n	800b770 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800b76e:	2300      	movs	r3, #0
 800b770:	4619      	mov	r1, r3
 800b772:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b774:	f7ff fcde 	bl	800b134 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	3304      	adds	r3, #4
 800b77c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fd4b 	bl	800b21a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 faa4 	bl	800bcd6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	61fb      	str	r3, [r7, #28]
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	330c      	adds	r3, #12
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	69f8      	ldr	r0, [r7, #28]
 800b7a4:	4798      	blx	r3
    newPresenter->activate();
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69b8      	ldr	r0, [r7, #24]
 800b7ae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b7b0:	6979      	ldr	r1, [r7, #20]
 800b7b2:	69f8      	ldr	r0, [r7, #28]
 800b7b4:	f009 fb6e 	bl	8014e94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3310      	adds	r3, #16
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6978      	ldr	r0, [r7, #20]
 800b7c2:	4798      	blx	r3
    newTransition->invalidate();
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3314      	adds	r3, #20
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6978      	ldr	r0, [r7, #20]
 800b7ce:	4798      	blx	r3
}
 800b7d0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	373c      	adds	r7, #60	; 0x3c
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd90      	pop	{r4, r7, pc}
 800b7dc:	0801fc68 	.word	0x0801fc68
 800b7e0:	0801fcf8 	.word	0x0801fcf8
 800b7e4:	0801fdfc 	.word	0x0801fdfc
 800b7e8:	0801fe40 	.word	0x0801fe40
 800b7ec:	0801fee4 	.word	0x0801fee4

0800b7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b08f      	sub	sp, #60	; 0x3c
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3320      	adds	r3, #32
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	4603      	mov	r3, r0
 800b812:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800b816:	d205      	bcs.n	800b824 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b818:	4b7f      	ldr	r3, [pc, #508]	; (800ba18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800b81a:	4a80      	ldr	r2, [pc, #512]	; (800ba1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b81c:	21a3      	movs	r1, #163	; 0xa3
 800b81e:	4880      	ldr	r0, [pc, #512]	; (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b820:	f013 f8b4 	bl	801e98c <__assert_func>
 800b824:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3320      	adds	r3, #32
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	4603      	mov	r3, r0
 800b83a:	2b0f      	cmp	r3, #15
 800b83c:	d805      	bhi.n	800b84a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b83e:	4b79      	ldr	r3, [pc, #484]	; (800ba24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800b840:	4a76      	ldr	r2, [pc, #472]	; (800ba1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b842:	21a4      	movs	r1, #164	; 0xa4
 800b844:	4876      	ldr	r0, [pc, #472]	; (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b846:	f013 f8a1 	bl	801e98c <__assert_func>
 800b84a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68da      	ldr	r2, [r3, #12]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3320      	adds	r3, #32
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4610      	mov	r0, r2
 800b85c:	4798      	blx	r3
 800b85e:	4603      	mov	r3, r0
 800b860:	2b3f      	cmp	r3, #63	; 0x3f
 800b862:	d805      	bhi.n	800b870 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b864:	4b70      	ldr	r3, [pc, #448]	; (800ba28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800b866:	4a6d      	ldr	r2, [pc, #436]	; (800ba1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800b868:	21a5      	movs	r1, #165	; 0xa5
 800b86a:	486d      	ldr	r0, [pc, #436]	; (800ba20 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800b86c:	f013 f88e 	bl	801e98c <__assert_func>
 800b870:	bf00      	nop
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	62bb      	str	r3, [r7, #40]	; 0x28
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800b87e:	f007 fe51 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800b882:	4603      	mov	r3, r0
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff facb 	bl	800ae20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d008      	beq.n	800b8a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	330c      	adds	r3, #12
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
    if (*currentTrans)
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d007      	beq.n	800b8bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
    if (*currentScreen)
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	4798      	blx	r3
    if (*currentPresenter)
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d008      	beq.n	800b8f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
    if (*currentScreen)
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d007      	beq.n	800b908 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
    if (*currentPresenter)
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d008      	beq.n	800b922 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4610      	mov	r0, r2
 800b920:	4798      	blx	r3
}
 800b922:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	2100      	movs	r1, #0
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f9e1 	bl	800bcf2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b930:	4603      	mov	r3, r0
 800b932:	4619      	mov	r1, r3
 800b934:	2040      	movs	r0, #64	; 0x40
 800b936:	f7fe ffe9 	bl	800a90c <_ZnwjPv>
 800b93a:	4604      	mov	r4, r0
 800b93c:	2114      	movs	r1, #20
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 fa0c 	bl	800bd5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b944:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	2100      	movs	r1, #0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f99c 	bl	800bc8a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b952:	4603      	mov	r3, r0
 800b954:	4619      	mov	r1, r3
 800b956:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 800b95a:	f7fe ffd7 	bl	800a90c <_ZnwjPv>
 800b95e:	4604      	mov	r4, r0
 800b960:	4620      	mov	r0, r4
 800b962:	f002 fa13 	bl	800dd8c <_ZN11Screen1ViewC1Ev>
 800b966:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 f99e 	bl	800bcb0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b974:	4603      	mov	r3, r0
 800b976:	4619      	mov	r1, r3
 800b978:	2010      	movs	r0, #16
 800b97a:	f7fe ffc7 	bl	800a90c <_ZnwjPv>
 800b97e:	4604      	mov	r4, r0
 800b980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b982:	4620      	mov	r0, r4
 800b984:	f002 f994 	bl	800dcb0 <_ZN16Screen1PresenterC1ER11Screen1View>
 800b988:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b98e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b994:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b99a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d002      	beq.n	800b9a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	e000      	b.n	800b9aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b9ae:	f7ff fbc1 	bl	800b134 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fc2e 	bl	800b21a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f987 	bl	800bcd6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	61bb      	str	r3, [r7, #24]
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	69f8      	ldr	r0, [r7, #28]
 800b9de:	4798      	blx	r3
    newPresenter->activate();
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69b8      	ldr	r0, [r7, #24]
 800b9e8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800b9ea:	6979      	ldr	r1, [r7, #20]
 800b9ec:	69f8      	ldr	r0, [r7, #28]
 800b9ee:	f009 fa51 	bl	8014e94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3310      	adds	r3, #16
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6978      	ldr	r0, [r7, #20]
 800b9fc:	4798      	blx	r3
    newTransition->invalidate();
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3314      	adds	r3, #20
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6978      	ldr	r0, [r7, #20]
 800ba08:	4798      	blx	r3
}
 800ba0a:	bf00      	nop
    return newPresenter;
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	373c      	adds	r7, #60	; 0x3c
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd90      	pop	{r4, r7, pc}
 800ba16:	bf00      	nop
 800ba18:	0801fc68 	.word	0x0801fc68
 800ba1c:	0801ff88 	.word	0x0801ff88
 800ba20:	0801fdfc 	.word	0x0801fdfc
 800ba24:	0801fe40 	.word	0x0801fe40
 800ba28:	0801fee4 	.word	0x0801fee4

0800ba2c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ba2c:	b590      	push	{r4, r7, lr}
 800ba2e:	b08f      	sub	sp, #60	; 0x3c
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	689a      	ldr	r2, [r3, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3320      	adds	r3, #32
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2bdb      	cmp	r3, #219	; 0xdb
 800ba50:	d805      	bhi.n	800ba5e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800ba52:	4b7f      	ldr	r3, [pc, #508]	; (800bc50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ba54:	4a7f      	ldr	r2, [pc, #508]	; (800bc54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba56:	21a3      	movs	r1, #163	; 0xa3
 800ba58:	487f      	ldr	r0, [pc, #508]	; (800bc58 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba5a:	f012 ff97 	bl	801e98c <__assert_func>
 800ba5e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3320      	adds	r3, #32
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4610      	mov	r0, r2
 800ba70:	4798      	blx	r3
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b0f      	cmp	r3, #15
 800ba76:	d805      	bhi.n	800ba84 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800ba78:	4b78      	ldr	r3, [pc, #480]	; (800bc5c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ba7a:	4a76      	ldr	r2, [pc, #472]	; (800bc54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ba7c:	21a4      	movs	r1, #164	; 0xa4
 800ba7e:	4876      	ldr	r0, [pc, #472]	; (800bc58 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ba80:	f012 ff84 	bl	801e98c <__assert_func>
 800ba84:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3320      	adds	r3, #32
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4610      	mov	r0, r2
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b37      	cmp	r3, #55	; 0x37
 800ba9c:	d805      	bhi.n	800baaa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800ba9e:	4b70      	ldr	r3, [pc, #448]	; (800bc60 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800baa0:	4a6c      	ldr	r2, [pc, #432]	; (800bc54 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800baa2:	21a5      	movs	r1, #165	; 0xa5
 800baa4:	486c      	ldr	r0, [pc, #432]	; (800bc58 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800baa6:	f012 ff71 	bl	801e98c <__assert_func>
 800baaa:	bf00      	nop
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	62bb      	str	r3, [r7, #40]	; 0x28
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800bab8:	f007 fd34 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800babc:	4603      	mov	r3, r0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f9ae 	bl	800ae20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d008      	beq.n	800bade <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	330c      	adds	r3, #12
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4610      	mov	r0, r2
 800badc:	4798      	blx	r3
    if (*currentTrans)
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4610      	mov	r0, r2
 800baf4:	4798      	blx	r3
    if (*currentScreen)
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d008      	beq.n	800bb10 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3314      	adds	r3, #20
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4610      	mov	r0, r2
 800bb0e:	4798      	blx	r3
    if (*currentPresenter)
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d008      	beq.n	800bb2a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3304      	adds	r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4610      	mov	r0, r2
 800bb28:	4798      	blx	r3
    if (*currentScreen)
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4610      	mov	r0, r2
 800bb40:	4798      	blx	r3
    if (*currentPresenter)
 800bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d008      	beq.n	800bb5c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3308      	adds	r3, #8
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
}
 800bb5c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 f94b 	bl	800be00 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	2038      	movs	r0, #56	; 0x38
 800bb70:	f7fe fecc 	bl	800a90c <_ZnwjPv>
 800bb74:	4604      	mov	r4, r0
 800bb76:	2114      	movs	r1, #20
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f989 	bl	800be90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 800bb7e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	2100      	movs	r1, #0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f9c6 	bl	800bf18 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4619      	mov	r1, r3
 800bb90:	20dc      	movs	r0, #220	; 0xdc
 800bb92:	f7fe febb 	bl	800a90c <_ZnwjPv>
 800bb96:	4604      	mov	r4, r0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f002 f9d3 	bl	800df44 <_ZN11Screen2ViewC1Ev>
 800bb9e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	2100      	movs	r1, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f9c9 	bl	800bf3e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800bbac:	4603      	mov	r3, r0
 800bbae:	4619      	mov	r1, r3
 800bbb0:	2010      	movs	r0, #16
 800bbb2:	f7fe feab 	bl	800a90c <_ZnwjPv>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f002 f96c 	bl	800de98 <_ZN16Screen2PresenterC1ER11Screen2View>
 800bbc0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbc6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbcc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800bbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbdc:	3304      	adds	r3, #4
 800bbde:	e000      	b.n	800bbe2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bbe6:	f7ff faa5 	bl	800b134 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	3304      	adds	r3, #4
 800bbee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff fb12 	bl	800b21a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f9b2 	bl	800bf64 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	330c      	adds	r3, #12
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	69f8      	ldr	r0, [r7, #28]
 800bc16:	4798      	blx	r3
    newPresenter->activate();
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69b8      	ldr	r0, [r7, #24]
 800bc20:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800bc22:	6979      	ldr	r1, [r7, #20]
 800bc24:	69f8      	ldr	r0, [r7, #28]
 800bc26:	f009 f935 	bl	8014e94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	3310      	adds	r3, #16
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	4798      	blx	r3
    newTransition->invalidate();
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6978      	ldr	r0, [r7, #20]
 800bc40:	4798      	blx	r3
}
 800bc42:	bf00      	nop
    return newPresenter;
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	373c      	adds	r7, #60	; 0x3c
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd90      	pop	{r4, r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	0801fc68 	.word	0x0801fc68
 800bc54:	080200a0 	.word	0x080200a0
 800bc58:	0801fdfc 	.word	0x0801fdfc
 800bc5c:	0801fe40 	.word	0x0801fe40
 800bc60:	0801fee4 	.word	0x0801fee4

0800bc64 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3324      	adds	r3, #36	; 0x24
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	887a      	ldrh	r2, [r7, #2]
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	4798      	blx	r3
 800bc80:	4603      	mov	r3, r0
    }
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	460b      	mov	r3, r1
 800bc94:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3324      	adds	r3, #36	; 0x24
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	887a      	ldrh	r2, [r7, #2]
 800bca0:	4611      	mov	r1, r2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
    }
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3324      	adds	r3, #36	; 0x24
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	887a      	ldrh	r2, [r7, #2]
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	4798      	blx	r3
 800bccc:	4603      	mov	r3, r0
    }
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3324      	adds	r3, #36	; 0x24
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	887a      	ldrh	r2, [r7, #2]
 800bd08:	4611      	mov	r1, r2
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	4798      	blx	r3
 800bd0e:	4603      	mov	r3, r0
    }
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	4a05      	ldr	r2, [pc, #20]	; (800bd38 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff fa97 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	080215a8 	.word	0x080215a8

0800bd3c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7ff ffe7 	bl	800bd18 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800bd4a:	212c      	movs	r1, #44	; 0x2c
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f012 fdee 	bl	801e92e <_ZdlPvj>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff f8d2 	bl	800af14 <_ZN8touchgfx10TransitionC1Ev>
 800bd70:	4a1f      	ldr	r2, [pc, #124]	; (800bdf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x94>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	330c      	adds	r3, #12
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f005 fa2a 	bl	80111d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	879a      	strh	r2, [r3, #60]	; 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 800bd96:	4b17      	ldr	r3, [pc, #92]	; (800bdf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x98>)
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f083 0301 	eor.w	r3, r3, #1
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x50>
        {
            // No animation storage, don't slide
            done = true;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	721a      	strb	r2, [r3, #8]
            return;
 800bdaa:	e01b      	b.n	800bde4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x88>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f103 000c 	add.w	r0, r3, #12
 800bdb2:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	b21a      	sxth	r2, r3
 800bdb8:	4b10      	ldr	r3, [pc, #64]	; (800bdfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xa0>)
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	b21b      	sxth	r3, r3
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	f7fe fe5f 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	330c      	adds	r3, #12
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f005 f983 	bl	80110da <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800bdd4:	4b08      	ldr	r3, [pc, #32]	; (800bdf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	425b      	negs	r3, r3
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	875a      	strh	r2, [r3, #58]	; 0x3a
            break;
 800bde2:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	08020a30 	.word	0x08020a30
 800bdf4:	20011915 	.word	0x20011915
 800bdf8:	2001190a 	.word	0x2001190a
 800bdfc:	2001190c 	.word	0x2001190c

0800be00 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3324      	adds	r3, #36	; 0x24
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	887a      	ldrh	r2, [r7, #2]
 800be16:	4611      	mov	r1, r2
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	4798      	blx	r3
 800be1c:	4603      	mov	r3, r0
    }
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fa00 	bl	800b238 <_ZN8touchgfx6WidgetC1Ev>
 800be38:	4a03      	ldr	r2, [pc, #12]	; (800be48 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	08020b70 	.word	0x08020b70

0800be4c <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	4a05      	ldr	r2, [pc, #20]	; (800be6c <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff f9fd 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	08020b70 	.word	0x08020b70

0800be70 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff ffe7 	bl	800be4c <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800be7e:	2128      	movs	r1, #40	; 0x28
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f012 fd54 	bl	801e92e <_ZdlPvj>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af02      	add	r7, sp, #8
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7ff f838 	bl	800af14 <_ZN8touchgfx10TransitionC1Ev>
 800bea4:	4a19      	ldr	r2, [pc, #100]	; (800bf0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	78fa      	ldrb	r2, [r7, #3]
 800beae:	725a      	strb	r2, [r3, #9]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	729a      	strb	r2, [r3, #10]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	81da      	strh	r2, [r3, #14]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3310      	adds	r3, #16
 800bec0:	2228      	movs	r2, #40	; 0x28
 800bec2:	2100      	movs	r1, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f012 fee7 	bl	801ec98 <memset>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3310      	adds	r3, #16
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ffaa 	bl	800be28 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 800bed4:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	425b      	negs	r3, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	b21a      	sxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	819a      	strh	r2, [r3, #12]
            break;
 800bee2:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f103 0010 	add.w	r0, r3, #16
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	b21a      	sxth	r2, r3
 800bef0:	4b08      	ldr	r3, [pc, #32]	; (800bf14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x84>)
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	b21b      	sxth	r3, r3
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	4613      	mov	r3, r2
 800befa:	2200      	movs	r2, #0
 800befc:	2100      	movs	r1, #0
 800befe:	f7fe fdc3 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	08020a54 	.word	0x08020a54
 800bf10:	2001190a 	.word	0x2001190a
 800bf14:	2001190c 	.word	0x2001190c

0800bf18 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3324      	adds	r3, #36	; 0x24
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	887a      	ldrh	r2, [r7, #2]
 800bf2e:	4611      	mov	r1, r2
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
 800bf34:	4603      	mov	r3, r0
    }
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b082      	sub	sp, #8
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3324      	adds	r3, #36	; 0x24
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	887a      	ldrh	r2, [r7, #2]
 800bf54:	4611      	mov	r1, r2
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	4798      	blx	r3
 800bf5a:	4603      	mov	r3, r0
    }
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	330c      	adds	r3, #12
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff fec0 	bl	800bd18 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe ffd0 	bl	800af40 <_ZN8touchgfx10TransitionD1Ev>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	08020a30 	.word	0x08020a30

0800bfb0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff ffe1 	bl	800bf80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800bfbe:	2140      	movs	r1, #64	; 0x40
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f012 fcb4 	bl	801e92e <_ZdlPvj>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	4a08      	ldr	r2, [pc, #32]	; (800bffc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	3310      	adds	r3, #16
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7ff ff32 	bl	800be4c <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fe ffa8 	bl	800af40 <_ZN8touchgfx10TransitionD1Ev>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	08020a54 	.word	0x08020a54

0800c000 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff ffe1 	bl	800bfd0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 800c00e:	2138      	movs	r1, #56	; 0x38
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f012 fc8c 	bl	801e92e <_ZdlPvj>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN8touchgfx12NoTransitionD1Ev>:
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	4a05      	ldr	r2, [pc, #20]	; (800c040 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe ff85 	bl	800af40 <_ZN8touchgfx10TransitionD1Ev>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	08020a78 	.word	0x08020a78

0800c044 <_ZN8touchgfx12NoTransitionD0Ev>:
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff ffe7 	bl	800c020 <_ZN8touchgfx12NoTransitionD1Ev>
 800c052:	210c      	movs	r1, #12
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f012 fc6a 	bl	801e92e <_ZdlPvj>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	4a05      	ldr	r2, [pc, #20]	; (800c084 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fee1 	bl	800ae3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	08020ae8 	.word	0x08020ae8

0800c088 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff ffe7 	bl	800c064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c096:	2110      	movs	r1, #16
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f012 fc48 	bl	801e92e <_ZdlPvj>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 800c0a8:	b590      	push	{r4, r7, lr}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe ff64 	bl	800af80 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c0be:	3301      	adds	r3, #1
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        if (animationCounter > animationSteps)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d907      	bls.n	800c0e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            return;
 800c0e6:	e05f      	b.n	800c1a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c0ee:	b298      	uxth	r0, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	2100      	movs	r1, #0
 800c100:	f008 fece 	bl	8014ea0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c104:	4603      	mov	r3, r0
 800c106:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c108:	89fb      	ldrh	r3, [r7, #14]
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	b29b      	uxth	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00b      	beq.n	800c12c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c114:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dd01      	ble.n	800c120 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x78>
 800c11c:	2201      	movs	r2, #1
 800c11e:	e001      	b.n	800c124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7c>
 800c120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c124:	89fb      	ldrh	r3, [r7, #14]
 800c126:	4413      	add	r3, r2
 800c128:	b29b      	uxth	r3, r3
 800c12a:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 800c12c:	89fc      	ldrh	r4, [r7, #14]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	330c      	adds	r3, #12
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fcc9 	bl	800aaca <_ZNK8touchgfx8Drawable4getXEv>
 800c138:	4603      	mov	r3, r0
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	1ae3      	subs	r3, r4, r3
 800c13e:	b29b      	uxth	r3, r3
 800c140:	b21a      	sxth	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	879a      	strh	r2, [r3, #60]	; 0x3c
            break;
 800c146:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	331c      	adds	r3, #28
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4610      	mov	r0, r2
 800c158:	4798      	blx	r3
 800c15a:	60b8      	str	r0, [r7, #8]
        while (d)
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d018      	beq.n	800c194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xec>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3330      	adds	r3, #48	; 0x30
 800c168:	681c      	ldr	r4, [r3, #0]
 800c16a:	68b8      	ldr	r0, [r7, #8]
 800c16c:	f7fe fcad 	bl	800aaca <_ZNK8touchgfx8Drawable4getXEv>
 800c170:	4603      	mov	r3, r0
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	4413      	add	r3, r2
 800c17e:	b29b      	uxth	r3, r3
 800c180:	b21b      	sxth	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	68b8      	ldr	r0, [r7, #8]
 800c186:	47a0      	blx	r4
                break;
 800c188:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 800c18a:	68b8      	ldr	r0, [r7, #8]
 800c18c:	f7fe fc65 	bl	800aa5a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c190:	60b8      	str	r0, [r7, #8]
        while (d)
 800c192:	e7e3      	b.n	800c15c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	461a      	mov	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3314      	adds	r3, #20
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
    }
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd90      	pop	{r4, r7, pc}
	...

0800c1b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800c1b8:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00a      	beq.n	800c1de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6858      	ldr	r0, [r3, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3364      	adds	r3, #100	; 0x64
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	320c      	adds	r2, #12
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4798      	blx	r3
        }
    }
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20011915 	.word	0x20011915

0800c1ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fed6 	bl	800afa8 <_ZN8touchgfx10Transition4initEv>

        if (done)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7a1b      	ldrb	r3, [r3, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d131      	bne.n	800c268 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7c>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	331c      	adds	r3, #28
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4610      	mov	r0, r2
 800c214:	4798      	blx	r3
 800c216:	60f8      	str	r0, [r7, #12]
        while (d)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d018      	beq.n	800c250 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x64>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3330      	adds	r3, #48	; 0x30
 800c224:	681c      	ldr	r4, [r3, #0]
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f7fe fc4f 	bl	800aaca <_ZNK8touchgfx8Drawable4getXEv>
 800c22c:	4603      	mov	r3, r0
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800c236:	b29b      	uxth	r3, r3
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	b21b      	sxth	r3, r3
 800c23e:	4619      	mov	r1, r3
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	47a0      	blx	r4
                break;
 800c244:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7fe fc07 	bl	800aa5a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c24c:	60f8      	str	r0, [r7, #12]
        while (d)
 800c24e:	e7e3      	b.n	800c218 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x2c>
        }

        screenContainer->add(snapshot);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6858      	ldr	r0, [r3, #4]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3360      	adds	r3, #96	; 0x60
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	320c      	adds	r2, #12
 800c262:	4611      	mov	r1, r2
 800c264:	4798      	blx	r3
 800c266:	e000      	b.n	800c26a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7e>
            return;
 800c268:	bf00      	nop
    }
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd90      	pop	{r4, r7, pc}

0800c270 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    /**
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container. The direction of the transition determines the direction the contents of
     * the container moves.
     */
    virtual void handleTickEvent()
 800c270:	b590      	push	{r4, r7, lr}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fe80 	bl	800af80 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7a9b      	ldrb	r3, [r3, #10]
 800c284:	3301      	adds	r3, #1
 800c286:	b2da      	uxtb	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7a9a      	ldrb	r2, [r3, #10]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7a5b      	ldrb	r3, [r3, #9]
 800c294:	429a      	cmp	r2, r3
 800c296:	d906      	bls.n	800c2a6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	729a      	strb	r2, [r3, #10]
 800c2a4:	e08c      	b.n	800c3c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
            return;
        }

        const int16_t oldValue = calculatedValue;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	89db      	ldrh	r3, [r3, #14]
 800c2aa:	82fb      	strh	r3, [r7, #22]

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7a9b      	ldrb	r3, [r3, #10]
 800c2b0:	b298      	uxth	r0, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7a5b      	ldrb	r3, [r3, #9]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	2100      	movs	r1, #0
 800c2c0:	f008 fdee 	bl	8014ea0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d011      	beq.n	800c302 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	dd01      	ble.n	800c2f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x84>
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	e001      	b.n	800c2f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x88>
 800c2f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2f8:	4413      	add	r3, r2
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	b21a      	sxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	81da      	strh	r2, [r3, #14]
        }

        // Convert the calculated value to delta value relative to current moved-to position
        const int16_t relativeValue = calculatedValue - oldValue;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c308:	b29a      	uxth	r2, r3
 800c30a:	8afb      	ldrh	r3, [r7, #22]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	b29b      	uxth	r3, r3
 800c310:	82bb      	strh	r3, [r7, #20]

        // The Cover Transition only draws to parts of the non-TFT framebuffer. To avoid glitches
        // In Double buffering mode both framebuffers must be identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	7a9b      	ldrb	r3, [r3, #10]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d109      	bne.n	800c32e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
 800c31a:	4b2b      	ldr	r3, [pc, #172]	; (800c3c8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d005      	beq.n	800c32e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xbe>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800c322:	f007 f8ff 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800c326:	4603      	mov	r3, r0
 800c328:	4618      	mov	r0, r3
 800c32a:	f007 f901 	bl	8013530 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }

        Rect rect;
 800c32e:	f107 0308 	add.w	r3, r7, #8
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe faf6 	bl	800a924 <_ZN8touchgfx4RectC1Ev>
        switch (templateDirection)
        {
        case EAST:
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c33e:	b29a      	uxth	r2, r3
 800c340:	4b22      	ldr	r3, [pc, #136]	; (800c3cc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x15c>)
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	4413      	add	r3, r2
 800c346:	b29b      	uxth	r3, r3
 800c348:	b21b      	sxth	r3, r3
 800c34a:	813b      	strh	r3, [r7, #8]
            rect.y = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	817b      	strh	r3, [r7, #10]
            rect.width = -calculatedValue;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c356:	b29b      	uxth	r3, r3
 800c358:	425b      	negs	r3, r3
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	b21b      	sxth	r3, r3
 800c35e:	81bb      	strh	r3, [r7, #12]
            rect.height = HAL::DISPLAY_HEIGHT;
 800c360:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x160>)
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	b21b      	sxth	r3, r3
 800c366:	81fb      	strh	r3, [r7, #14]
            break;
 800c368:	bf00      	nop
            rect.y = HAL::DISPLAY_HEIGHT + calculatedValue;
            rect.width = HAL::DISPLAY_WIDTH;
            rect.height = -calculatedValue;
            break;
        }
        Application::getInstance()->invalidateArea(rect);
 800c36a:	f007 f8db 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800c36e:	f107 0308 	add.w	r3, r7, #8
 800c372:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c376:	f007 fa21 	bl	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>

        // Move children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	331c      	adds	r3, #28
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	6138      	str	r0, [r7, #16]
        while (d)
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d015      	beq.n	800c3c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x150>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3330      	adds	r3, #48	; 0x30
 800c39a:	681c      	ldr	r4, [r3, #0]
 800c39c:	6938      	ldr	r0, [r7, #16]
 800c39e:	f7fe fb94 	bl	800aaca <_ZNK8touchgfx8Drawable4getXEv>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	8abb      	ldrh	r3, [r7, #20]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	b21b      	sxth	r3, r3
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6938      	ldr	r0, [r7, #16]
 800c3b2:	47a0      	blx	r4
                break;
 800c3b4:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }

            d = d->getNextSibling();
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f7fe fb4f 	bl	800aa5a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c3bc:	6138      	str	r0, [r7, #16]
        while (d)
 800c3be:	e7e6      	b.n	800c38e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x11e>
        }
    }
 800c3c0:	371c      	adds	r7, #28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd90      	pop	{r4, r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20011914 	.word	0x20011914
 800c3cc:	2001190a 	.word	0x2001190a
 800c3d0:	2001190c 	.word	0x2001190c

0800c3d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6858      	ldr	r0, [r3, #4]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	3364      	adds	r3, #100	; 0x64
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	3210      	adds	r2, #16
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4798      	blx	r3
    }
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800c3fa:	b590      	push	{r4, r7, lr}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fdcf 	bl	800afa8 <_ZN8touchgfx10Transition4initEv>

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	331c      	adds	r3, #28
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4610      	mov	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	60f8      	str	r0, [r7, #12]
        while (d)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d018      	beq.n	800c456 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x5c>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3330      	adds	r3, #48	; 0x30
 800c42a:	681c      	ldr	r4, [r3, #0]
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7fe fb4c 	bl	800aaca <_ZNK8touchgfx8Drawable4getXEv>
 800c432:	4603      	mov	r3, r0
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	b29b      	uxth	r3, r3
 800c442:	b21b      	sxth	r3, r3
 800c444:	4619      	mov	r1, r3
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	47a0      	blx	r4
                break;
 800c44a:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f7fe fb04 	bl	800aa5a <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800c452:	60f8      	str	r0, [r7, #12]
        while (d)
 800c454:	e7e3      	b.n	800c41e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x24>
        }

        screenContainer->add(solid);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6858      	ldr	r0, [r3, #4]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3360      	adds	r3, #96	; 0x60
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	3210      	adds	r2, #16
 800c468:	4611      	mov	r1, r2
 800c46a:	4798      	blx	r3
    }
 800c46c:	bf00      	nop
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	bd90      	pop	{r4, r7, pc}

0800c474 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	68d2      	ldr	r2, [r2, #12]
 800c484:	1052      	asrs	r2, r2, #1
 800c486:	1899      	adds	r1, r3, r2
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d102      	bne.n	800c49a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	e00a      	b.n	800c4b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	68d2      	ldr	r2, [r2, #12]
 800c4a2:	1052      	asrs	r2, r2, #1
 800c4a4:	4413      	add	r3, r2
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	6892      	ldr	r2, [r2, #8]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	4798      	blx	r3
    }
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d010      	beq.n	800c4ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d107      	bne.n	800c4e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d001      	beq.n	800c4ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e000      	b.n	800c4f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800c4ee:	2300      	movs	r3, #0
    }
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
        : color(col)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	601a      	str	r2, [r3, #0]
    }
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	460b      	mov	r3, r1
 800c524:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	887a      	ldrh	r2, [r7, #2]
 800c52a:	801a      	strh	r2, [r3, #0]
    {
    }
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	460b      	mov	r3, r1
 800c544:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	78fa      	ldrb	r2, [r7, #3]
 800c54a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800c54e:	bf00      	nop
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
	...

0800c55c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
    {
 800c564:	4a06      	ldr	r2, [pc, #24]	; (800c580 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 fdd0 	bl	800d114 <_ZN8touchgfx9ContainerD1Ev>
    }
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	080219bc 	.word	0x080219bc

0800c584 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
    }
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff ffe5 	bl	800c55c <_ZN8touchgfx6ScreenD1Ev>
 800c592:	213c      	movs	r1, #60	; 0x3c
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f012 f9ca 	bl	801e92e <_ZdlPvj>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
    {
    }
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
    {
    }
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
    {
    }
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
    {
    }
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3304      	adds	r3, #4
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f003 fbaf 	bl	800fd80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4618      	mov	r0, r3
 800c638:	2326      	movs	r3, #38	; 0x26
 800c63a:	461a      	mov	r2, r3
 800c63c:	2100      	movs	r1, #0
 800c63e:	f012 fb2b 	bl	801ec98 <memset>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe fdf7 	bl	800b238 <_ZN8touchgfx6WidgetC1Ev>
 800c64a:	4a09      	ldr	r2, [pc, #36]	; (800c670 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	22ff      	movs	r2, #255	; 0xff
 800c654:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3328      	adds	r3, #40	; 0x28
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff ff4c 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4618      	mov	r0, r3
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	080216a8 	.word	0x080216a8

0800c674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4618      	mov	r0, r3
 800c69c:	2326      	movs	r3, #38	; 0x26
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f012 faf9 	bl	801ec98 <memset>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fe fdc5 	bl	800b238 <_ZN8touchgfx6WidgetC1Ev>
 800c6ae:	4a0a      	ldr	r2, [pc, #40]	; (800c6d8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	629a      	str	r2, [r3, #40]	; 0x28
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff ff37 	bl	800c53a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	08021538 	.word	0x08021538

0800c6dc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	4a05      	ldr	r2, [pc, #20]	; (800c718 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fda7 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	08021538 	.word	0x08021538

0800c71c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ffe7 	bl	800c6f8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800c72a:	2130      	movs	r1, #48	; 0x30
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f012 f8fe 	bl	801e92e <_ZdlPvj>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff ffa2 	bl	800c690 <_ZN8touchgfx14AbstractButtonC1Ev>
 800c74c:	4a0c      	ldr	r2, [pc, #48]	; (800c780 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	332e      	adds	r3, #46	; 0x2e
 800c756:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fedd 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3330      	adds	r3, #48	; 0x30
 800c764:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff fed6 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	22ff      	movs	r2, #255	; 0xff
 800c772:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08021710 	.word	0x08021710

0800c784 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	460b      	mov	r3, r1
 800c78e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800c790:	4a06      	ldr	r2, [pc, #24]	; (800c7ac <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	887a      	ldrh	r2, [r7, #2]
 800c79a:	809a      	strh	r2, [r3, #4]
    }
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	080209c0 	.word	0x080209c0

0800c7b0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	2326      	movs	r3, #38	; 0x26
 800c7be:	461a      	mov	r2, r3
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	f012 fa69 	bl	801ec98 <memset>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe fd35 	bl	800b238 <_ZN8touchgfx6WidgetC1Ev>
 800c7ce:	4a16      	ldr	r2, [pc, #88]	; (800c828 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3328      	adds	r3, #40	; 0x28
 800c7d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff ffd1 	bl	800c784 <_ZN8touchgfx9TypedTextC1Et>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3330      	adds	r3, #48	; 0x30
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff fe87 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	869a      	strh	r2, [r3, #52]	; 0x34
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	22ff      	movs	r2, #255	; 0xff
 800c7f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	333c      	adds	r3, #60	; 0x3c
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 f8f2 	bl	800ca02 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	08021618 	.word	0x08021618

0800c82c <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800c82c:	b590      	push	{r4, r7, lr}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	6178      	str	r0, [r7, #20]
 800c834:	460b      	mov	r3, r1
 800c836:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c83e:	4611      	mov	r1, r2
 800c840:	4618      	mov	r0, r3
 800c842:	f7fe f98b 	bl	800ab5c <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3384      	adds	r3, #132	; 0x84
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	697c      	ldr	r4, [r7, #20]
 800c850:	463a      	mov	r2, r7
 800c852:	6979      	ldr	r1, [r7, #20]
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
 800c858:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800c85c:	463a      	mov	r2, r7
 800c85e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800c864:	bf00      	nop
 800c866:	371c      	adds	r7, #28
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd90      	pop	{r4, r7, pc}

0800c86c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800c86c:	b590      	push	{r4, r7, lr}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	6178      	str	r0, [r7, #20]
 800c874:	460b      	mov	r3, r1
 800c876:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7fe f97a 	bl	800ab7a <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3384      	adds	r3, #132	; 0x84
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	697c      	ldr	r4, [r7, #20]
 800c890:	463a      	mov	r2, r7
 800c892:	6979      	ldr	r1, [r7, #20]
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800c89c:	463a      	mov	r2, r7
 800c89e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800c8a4:	bf00      	nop
 800c8a6:	371c      	adds	r7, #28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd90      	pop	{r4, r7, pc}

0800c8ac <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7fe f834 	bl	800a924 <_ZN8touchgfx4RectC1Ev>
    }
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	78fa      	ldrb	r2, [r7, #3]
 800c8d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800c8f0:	687e      	ldr	r6, [r7, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3334      	adds	r3, #52	; 0x34
 800c8f8:	681c      	ldr	r4, [r3, #0]
 800c8fa:	887d      	ldrh	r5, [r7, #2]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f869 	bl	800c9d4 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800c902:	4603      	mov	r3, r0
 800c904:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c906:	4b1d      	ldr	r3, [pc, #116]	; (800c97c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800c90e:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800c910:	4a1c      	ldr	r2, [pc, #112]	; (800c984 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800c912:	216c      	movs	r1, #108	; 0x6c
 800c914:	481c      	ldr	r0, [pc, #112]	; (800c988 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800c916:	f012 f839 	bl	801e98c <__assert_func>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	889a      	ldrh	r2, [r3, #4]
 800c922:	4b1a      	ldr	r3, [pc, #104]	; (800c98c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	bf34      	ite	cc
 800c92a:	2301      	movcc	r3, #1
 800c92c:	2300      	movcs	r3, #0
 800c92e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800c930:	2b00      	cmp	r3, #0
 800c932:	d105      	bne.n	800c940 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800c934:	4b16      	ldr	r3, [pc, #88]	; (800c990 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800c936:	4a13      	ldr	r2, [pc, #76]	; (800c984 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800c938:	216d      	movs	r1, #109	; 0x6d
 800c93a:	4813      	ldr	r0, [pc, #76]	; (800c988 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800c93c:	f012 f826 	bl	801e98c <__assert_func>
 800c940:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800c948:	6819      	ldr	r1, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	889b      	ldrh	r3, [r3, #4]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	440b      	add	r3, r1
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	3230      	adds	r2, #48	; 0x30
 800c95e:	6812      	ldr	r2, [r2, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	4790      	blx	r2
 800c964:	4603      	mov	r3, r0
 800c966:	1aeb      	subs	r3, r5, r3
 800c968:	b29b      	uxth	r3, r3
 800c96a:	b21b      	sxth	r3, r3
 800c96c:	4619      	mov	r1, r3
 800c96e:	4630      	mov	r0, r6
 800c970:	47a0      	blx	r4
    }
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20011968 	.word	0x20011968
 800c980:	080201b8 	.word	0x080201b8
 800c984:	080201fc 	.word	0x080201fc
 800c988:	08020238 	.word	0x08020238
 800c98c:	2001196c 	.word	0x2001196c
 800c990:	0802027c 	.word	0x0802027c
 800c994:	20011970 	.word	0x20011970

0800c998 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	807b      	strh	r3, [r7, #2]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	3330      	adds	r3, #48	; 0x30
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	4798      	blx	r3
        setBaselineY(baselineY);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3364      	adds	r3, #100	; 0x64
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	4798      	blx	r3
    }
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3328      	adds	r3, #40	; 0x28
    }
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c9f4:	2300      	movs	r3, #0
    }
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af02      	add	r7, sp, #8
 800ca08:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	f04f 33ff 	mov.w	r3, #4294967295
 800ca16:	2200      	movs	r2, #0
 800ca18:	2100      	movs	r1, #0
 800ca1a:	f7fd ff9a 	bl	800a952 <_ZN8touchgfx4RectC1Essss>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	609a      	str	r2, [r3, #8]
        {
        }
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	4a08      	ldr	r2, [pc, #32]	; (800ca5c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3328      	adds	r3, #40	; 0x28
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fd fd7c 	bl	800a540 <_ZN8touchgfx9TypedTextD1Ev>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fc06 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	08021618 	.word	0x08021618

0800ca60 <_ZN8touchgfx8TextAreaD0Ev>:
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff ffe1 	bl	800ca30 <_ZN8touchgfx8TextAreaD1Ev>
 800ca6e:	2148      	movs	r1, #72	; 0x48
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f011 ff5c 	bl	801e92e <_ZdlPvj>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
        : TextArea()
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fe90 	bl	800c7b0 <_ZN8touchgfx8TextAreaC1Ev>
 800ca90:	4a03      	ldr	r2, [pc, #12]	; (800caa0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
    {
    }
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	08021784 	.word	0x08021784

0800caa4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fd ffc0 	bl	800aa34 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff ff9b 	bl	800ca02 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff ffa3 	bl	800ca30 <_ZN8touchgfx8TextAreaD1Ev>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	08021784 	.word	0x08021784

0800caf8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff ffe7 	bl	800cad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800cb06:	2148      	movs	r1, #72	; 0x48
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f011 ff10 	bl	801e92e <_ZdlPvj>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff ffac 	bl	800ca80 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800cb28:	4a05      	ldr	r2, [pc, #20]	; (800cb40 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	08020d00 	.word	0x08020d00

0800cb44 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff ffdd 	bl	800cb44 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <_ZN15Screen1ViewBase11applicationEv>:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b082      	sub	sp, #8
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800cb9a:	f006 fcc3 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800cb9e:	4603      	mov	r3, r0
    }
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	4a05      	ldr	r2, [pc, #20]	; (800cbc8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff fccf 	bl	800c55c <_ZN8touchgfx6ScreenD1Ev>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08020ccc 	.word	0x08020ccc

0800cbcc <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ffe7 	bl	800cba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800cbda:	2140      	movs	r1, #64	; 0x40
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f011 fea6 	bl	801e92e <_ZdlPvj>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b09d      	sub	sp, #116	; 0x74
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f9e2 	bl	800cfc0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800cbfc:	4ab8      	ldr	r2, [pc, #736]	; (800cee0 <_ZN15Screen1ViewBaseC1Ev+0x2f4>)
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	3340      	adds	r3, #64	; 0x40
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff fd10 	bl	800c62c <_ZN8touchgfx3BoxC1Ev>
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	336c      	adds	r3, #108	; 0x6c
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fd0b 	bl	800c62c <_ZN8touchgfx3BoxC1Ev>
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	3398      	adds	r3, #152	; 0x98
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff fd8e 	bl	800c73c <_ZN8touchgfx6ButtonC1Ev>
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	33cc      	adds	r3, #204	; 0xcc
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff ff77 	bl	800cb18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 800cc30:	4bac      	ldr	r3, [pc, #688]	; (800cee4 <_ZN15Screen1ViewBaseC1Ev+0x2f8>)
 800cc32:	623b      	str	r3, [r7, #32]
 800cc34:	2300      	movs	r3, #0
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
 800cc38:	f107 0320 	add.w	r3, r7, #32
 800cc3c:	cb0c      	ldmia	r3, {r2, r3}
 800cc3e:	6979      	ldr	r1, [r7, #20]
 800cc40:	f000 f9e4 	bl	800d00c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cc4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800cc54:	2200      	movs	r2, #0
 800cc56:	2100      	movs	r1, #0
 800cc58:	f7fd ff16 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cc62:	2300      	movs	r3, #0
 800cc64:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800cc74:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800cc78:	041b      	lsls	r3, r3, #16
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	431a      	orrs	r2, r3
 800cc84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800cc8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fc31 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800cc9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff fce8 	bl	800c674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	3340      	adds	r3, #64	; 0x40
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7ff fcad 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800ccb8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	f7fd fedf 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(245, 17, 17));
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ccd0:	23f5      	movs	r3, #245	; 0xf5
 800ccd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800ccd6:	2311      	movs	r3, #17
 800ccd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ccdc:	2311      	movs	r3, #17
 800ccde:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800cce2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cce6:	041b      	lsls	r3, r3, #16
 800cce8:	461a      	mov	r2, r3
 800ccea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ccfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fbfa 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800cd08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f7ff fcb1 	bl	800c674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	336c      	adds	r3, #108	; 0x6c
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f7ff fc76 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 171);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	3398      	adds	r3, #152	; 0x98
 800cd24:	22ab      	movs	r2, #171	; 0xab
 800cd26:	2178      	movs	r1, #120	; 0x78
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fd fef9 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800cd34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd38:	2100      	movs	r1, #0
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fbed 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800cd40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd44:	2101      	movs	r1, #1
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fbe7 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800cd4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cd50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd54:	4619      	mov	r1, r3
 800cd56:	4620      	mov	r0, r4
 800cd58:	f004 fe1e 	bl	8011998 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	f7ff fcb6 	bl	800c6dc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	3398      	adds	r3, #152	; 0x98
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7ff fc47 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setPosition(18, 83, 448, 36);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800cd84:	2324      	movs	r3, #36	; 0x24
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800cd8c:	2253      	movs	r2, #83	; 0x53
 800cd8e:	2112      	movs	r1, #18
 800cd90:	f7fd fe7a 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800cda0:	2300      	movs	r3, #0
 800cda2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800cda6:	2300      	movs	r3, #0
 800cda8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800cdac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdb0:	041b      	lsls	r3, r3, #16
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	431a      	orrs	r2, r3
 800cdbc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800cdc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fb95 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800cdd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd4:	65bc      	str	r4, [r7, #88]	; 0x58
 800cdd6:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800cdd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdda:	69fa      	ldr	r2, [r7, #28]
 800cddc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800cdde:	bf00      	nop
    textArea1.setLinespacing(0);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	33cc      	adds	r3, #204	; 0xcc
 800cde4:	663b      	str	r3, [r7, #96]	; 0x60
 800cde6:	2300      	movs	r3, #0
 800cde8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        linespace = space;
 800cdec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdee:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800cdf2:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800cdf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	3384      	adds	r3, #132	; 0x84
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800cdfe:	463a      	mov	r2, r7
 800ce00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce02:	4610      	mov	r0, r2
 800ce04:	4798      	blx	r3
 800ce06:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ce0a:	463a      	mov	r2, r7
 800ce0c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ce12:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WNNF).getText());
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f503 748c 	add.w	r4, r3, #280	; 0x118
 800ce1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce1e:	2100      	movs	r1, #0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fcaf 	bl	800c784 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ce26:	4b30      	ldr	r3, [pc, #192]	; (800cee8 <_ZN15Screen1ViewBaseC1Ev+0x2fc>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <_ZN15Screen1ViewBaseC1Ev+0x24e>
 800ce2e:	4b2f      	ldr	r3, [pc, #188]	; (800ceec <_ZN15Screen1ViewBaseC1Ev+0x300>)
 800ce30:	4a2f      	ldr	r2, [pc, #188]	; (800cef0 <_ZN15Screen1ViewBaseC1Ev+0x304>)
 800ce32:	2160      	movs	r1, #96	; 0x60
 800ce34:	482f      	ldr	r0, [pc, #188]	; (800cef4 <_ZN15Screen1ViewBaseC1Ev+0x308>)
 800ce36:	f011 fda9 	bl	801e98c <__assert_func>
 800ce3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce3e:	667b      	str	r3, [r7, #100]	; 0x64
        return typedTextId < numberOfTypedTexts;
 800ce40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce42:	889a      	ldrh	r2, [r3, #4]
 800ce44:	4b2c      	ldr	r3, [pc, #176]	; (800cef8 <_ZN15Screen1ViewBaseC1Ev+0x30c>)
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	bf34      	ite	cc
 800ce4c:	2301      	movcc	r3, #1
 800ce4e:	2300      	movcs	r3, #0
 800ce50:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <_ZN15Screen1ViewBaseC1Ev+0x276>
 800ce56:	4b29      	ldr	r3, [pc, #164]	; (800cefc <_ZN15Screen1ViewBaseC1Ev+0x310>)
 800ce58:	4a25      	ldr	r2, [pc, #148]	; (800cef0 <_ZN15Screen1ViewBaseC1Ev+0x304>)
 800ce5a:	2161      	movs	r1, #97	; 0x61
 800ce5c:	4825      	ldr	r0, [pc, #148]	; (800cef4 <_ZN15Screen1ViewBaseC1Ev+0x308>)
 800ce5e:	f011 fd95 	bl	801e98c <__assert_func>
 800ce62:	bf00      	nop
        return texts->getText(typedTextId);
 800ce64:	4b26      	ldr	r3, [pc, #152]	; (800cf00 <_ZN15Screen1ViewBaseC1Ev+0x314>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 fd8d 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 800ce72:	4603      	mov	r3, r0
 800ce74:	bf00      	nop
 800ce76:	4a23      	ldr	r2, [pc, #140]	; (800cf04 <_ZN15Screen1ViewBaseC1Ev+0x318>)
 800ce78:	2111      	movs	r1, #17
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f009 fb1c 	bl	80164b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ce80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fd fb5b 	bl	800a540 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ce96:	4619      	mov	r1, r3
 800ce98:	4610      	mov	r0, r2
 800ce9a:	f7ff fe6d 	bl	800cb78 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B884));
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 800cea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cea8:	2101      	movs	r1, #1
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff fc6a 	bl	800c784 <_ZN8touchgfx9TypedTextC1Et>
 800ceb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f004 fd1c 	bl	80118f4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800cebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fd fb3d 	bl	800a540 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	33cc      	adds	r3, #204	; 0xcc
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7ff fb9c 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	4618      	mov	r0, r3
 800ced8:	376c      	adds	r7, #108	; 0x6c
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	bf00      	nop
 800cee0:	08020c80 	.word	0x08020c80
 800cee4:	0800cf97 	.word	0x0800cf97
 800cee8:	20011968 	.word	0x20011968
 800ceec:	080201b8 	.word	0x080201b8
 800cef0:	080202bc 	.word	0x080202bc
 800cef4:	08020238 	.word	0x08020238
 800cef8:	2001196c 	.word	0x2001196c
 800cefc:	0802027c 	.word	0x0802027c
 800cf00:	20011974 	.word	0x20011974
 800cf04:	080202f4 	.word	0x080202f4

0800cf08 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	4a12      	ldr	r2, [pc, #72]	; (800cf5c <_ZN15Screen1ViewBaseD1Ev+0x54>)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 f8b5 	bl	800d08c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	33cc      	adds	r3, #204	; 0xcc
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 f8d2 	bl	800d0d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	3398      	adds	r3, #152	; 0x98
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 f933 	bl	800d19c <_ZN8touchgfx6ButtonD1Ev>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	336c      	adds	r3, #108	; 0x6c
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 f90c 	bl	800d158 <_ZN8touchgfx3BoxD1Ev>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3340      	adds	r3, #64	; 0x40
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 f907 	bl	800d158 <_ZN8touchgfx3BoxD1Ev>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff fe2b 	bl	800cba8 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	08020c80 	.word	0x08020c80

0800cf60 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
}
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff ffcd 	bl	800cf08 <_ZN15Screen1ViewBaseD1Ev>
 800cf6e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f011 fcdb 	bl	801e92e <_ZdlPvj>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]

}
 800cf8a:	bf00      	nop
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3398      	adds	r3, #152	; 0x98
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d106      	bne.n	800cfb8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fdf1 	bl	800cb92 <_ZN15Screen1ViewBase11applicationEv>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fa5c 	bl	800b470 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
    }
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f007 fdb6 	bl	8014b3c <_ZN8touchgfx6ScreenC1Ev>
 800cfd0:	4a05      	ldr	r2, [pc, #20]	; (800cfe8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	08020ccc 	.word	0x08020ccc

0800cfec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	4a04      	ldr	r2, [pc, #16]	; (800d008 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	08020d90 	.word	0x08020d90

0800d00c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	4639      	mov	r1, r7
 800d018:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff ffe4 	bl	800cfec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d024:	4a08      	ldr	r2, [pc, #32]	; (800d048 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	605a      	str	r2, [r3, #4]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3308      	adds	r3, #8
 800d034:	463a      	mov	r2, r7
 800d036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d03a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	08020cb4 	.word	0x08020cb4

0800d04c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
    }
 800d054:	4a04      	ldr	r2, [pc, #16]	; (800d068 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	08020d90 	.word	0x08020d90

0800d06c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
    }
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff ffe9 	bl	800d04c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d07a:	2104      	movs	r1, #4
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f011 fc56 	bl	801e92e <_ZdlPvj>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4618      	mov	r0, r3
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	4a05      	ldr	r2, [pc, #20]	; (800d0ac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff ffd5 	bl	800d04c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	08020cb4 	.word	0x08020cb4

0800d0b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff ffe7 	bl	800d08c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d0be:	2110      	movs	r1, #16
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f011 fc34 	bl	801e92e <_ZdlPvj>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	4a05      	ldr	r2, [pc, #20]	; (800d0f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	601a      	str	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7ff fcf7 	bl	800cad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	08020d00 	.word	0x08020d00

0800d0f4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff ffe7 	bl	800d0d0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d102:	214c      	movs	r1, #76	; 0x4c
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f011 fc12 	bl	801e92e <_ZdlPvj>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	4a05      	ldr	r2, [pc, #20]	; (800d134 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4618      	mov	r0, r3
 800d126:	f7fd fc65 	bl	800a9f4 <_ZN8touchgfx8DrawableD1Ev>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	08021350 	.word	0x08021350

0800d138 <_ZN8touchgfx9ContainerD0Ev>:
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff ffe7 	bl	800d114 <_ZN8touchgfx9ContainerD1Ev>
 800d146:	212c      	movs	r1, #44	; 0x2c
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f011 fbf0 	bl	801e92e <_ZdlPvj>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	4a05      	ldr	r2, [pc, #20]	; (800d178 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe f877 	bl	800b25c <_ZN8touchgfx6WidgetD1Ev>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	080216a8 	.word	0x080216a8

0800d17c <_ZN8touchgfx3BoxD0Ev>:
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ffe7 	bl	800d158 <_ZN8touchgfx3BoxD1Ev>
 800d18a:	212c      	movs	r1, #44	; 0x2c
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f011 fbce 	bl	801e92e <_ZdlPvj>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4618      	mov	r0, r3
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	4a05      	ldr	r2, [pc, #20]	; (800d1bc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff faa3 	bl	800c6f8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	08021710 	.word	0x08021710

0800d1c0 <_ZN8touchgfx6ButtonD0Ev>:
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff ffe7 	bl	800d19c <_ZN8touchgfx6ButtonD1Ev>
 800d1ce:	2134      	movs	r1, #52	; 0x34
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f011 fbac 	bl	801e92e <_ZdlPvj>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	68d2      	ldr	r2, [r2, #12]
 800d1f2:	1052      	asrs	r2, r2, #1
 800d1f4:	1898      	adds	r0, r3, r2
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d102      	bne.n	800d208 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	e00a      	b.n	800d21e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	68d2      	ldr	r2, [r2, #12]
 800d210:	1052      	asrs	r2, r2, #1
 800d212:	4413      	add	r3, r2
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	6892      	ldr	r2, [r2, #8]
 800d21a:	4413      	add	r3, r2
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	4798      	blx	r3
    }
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d010      	beq.n	800d25c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d107      	bne.n	800d252 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d252:	2300      	movs	r3, #0
 800d254:	2b01      	cmp	r3, #1
 800d256:	d001      	beq.n	800d25c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d258:	2301      	movs	r3, #1
 800d25a:	e000      	b.n	800d25e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d25c:	2300      	movs	r3, #0
    }
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <_ZN15Screen2ViewBase11applicationEv>:
    Screen2ViewBase();
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b082      	sub	sp, #8
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800d272:	f006 f957 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800d276:	4603      	mov	r3, r0
    }
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	4a05      	ldr	r2, [pc, #20]	; (800d2a0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	f7ff f963 	bl	800c55c <_ZN8touchgfx6ScreenD1Ev>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	08020df4 	.word	0x08020df4

0800d2a4 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff ffe7 	bl	800d280 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800d2b2:	2140      	movs	r1, #64	; 0x40
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f011 fb3a 	bl	801e92e <_ZdlPvj>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
 800d2c4:	b590      	push	{r4, r7, lr}
 800d2c6:	b08d      	sub	sp, #52	; 0x34
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f91a 	bl	800d508 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 800d2d4:	4a5f      	ldr	r2, [pc, #380]	; (800d454 <_ZN15Screen2ViewBaseC1Ev+0x190>)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	3340      	adds	r3, #64	; 0x40
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff f9a4 	bl	800c62c <_ZN8touchgfx3BoxC1Ev>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	336c      	adds	r3, #108	; 0x6c
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff f99f 	bl	800c62c <_ZN8touchgfx3BoxC1Ev>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3398      	adds	r3, #152	; 0x98
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff fa22 	bl	800c73c <_ZN8touchgfx6ButtonC1Ev>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800d2fe:	4b56      	ldr	r3, [pc, #344]	; (800d458 <_ZN15Screen2ViewBaseC1Ev+0x194>)
 800d300:	60bb      	str	r3, [r7, #8]
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	cb0c      	ldmia	r3, {r2, r3}
 800d30c:	6879      	ldr	r1, [r7, #4]
 800d30e:	f000 f911 	bl	800d534 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d318:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d322:	2200      	movs	r2, #0
 800d324:	2100      	movs	r1, #0
 800d326:	f7fd fbaf 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d330:	2300      	movs	r3, #0
 800d332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d336:	2300      	movs	r3, #0
 800d338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d33c:	2300      	movs	r3, #0
 800d33e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d342:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d346:	041b      	lsls	r3, r3, #16
 800d348:	461a      	mov	r2, r3
 800d34a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d34e:	021b      	lsls	r3, r3, #8
 800d350:	431a      	orrs	r2, r3
 800d352:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d356:	4313      	orrs	r3, r2
 800d358:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d35c:	f107 031c 	add.w	r3, r7, #28
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff f8ca 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4620      	mov	r0, r4
 800d36e:	f7ff f981 	bl	800c674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3340      	adds	r3, #64	; 0x40
 800d378:	4619      	mov	r1, r3
 800d37a:	4610      	mov	r0, r2
 800d37c:	f7ff f946 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 480, 272);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800d386:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d390:	2200      	movs	r2, #0
 800d392:	2100      	movs	r1, #0
 800d394:	f7fd fb78 	bl	800aa88 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(2, 232, 14));
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d39e:	2302      	movs	r3, #2
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3a4:	23e8      	movs	r3, #232	; 0xe8
 800d3a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d3aa:	230e      	movs	r3, #14
 800d3ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3b4:	041b      	lsls	r3, r3, #16
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d3ca:	f107 0318 	add.w	r3, r7, #24
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff f893 	bl	800c4fc <_ZN8touchgfx9colortypeC1Em>
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f7ff f94a 	bl	800c674 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	336c      	adds	r3, #108	; 0x6c
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	f7ff f90f 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(120, 171);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	3398      	adds	r3, #152	; 0x98
 800d3f2:	22ab      	movs	r2, #171	; 0xab
 800d3f4:	2178      	movs	r1, #120	; 0x78
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fd fb92 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800d402:	f107 0310 	add.w	r3, r7, #16
 800d406:	2100      	movs	r1, #0
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff f886 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800d40e:	f107 0314 	add.w	r3, r7, #20
 800d412:	2101      	movs	r1, #1
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff f880 	bl	800c51a <_ZN8touchgfx6BitmapC1Et>
 800d41a:	f107 0214 	add.w	r2, r7, #20
 800d41e:	f107 0310 	add.w	r3, r7, #16
 800d422:	4619      	mov	r1, r3
 800d424:	4620      	mov	r0, r4
 800d426:	f004 fab7 	bl	8011998 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	33cc      	adds	r3, #204	; 0xcc
 800d434:	4619      	mov	r1, r3
 800d436:	4610      	mov	r0, r2
 800d438:	f7ff f950 	bl	800c6dc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(button1);
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	3398      	adds	r3, #152	; 0x98
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7ff f8e1 	bl	800c60c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4618      	mov	r0, r3
 800d44e:	372c      	adds	r7, #44	; 0x2c
 800d450:	46bd      	mov	sp, r7
 800d452:	bd90      	pop	{r4, r7, pc}
 800d454:	08020da8 	.word	0x08020da8
 800d458:	0800d4dd 	.word	0x0800d4dd

0800d45c <_ZN15Screen2ViewBaseD1Ev>:

Screen2ViewBase::~Screen2ViewBase()
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	4a0f      	ldr	r2, [pc, #60]	; (800d4a4 <_ZN15Screen2ViewBaseD1Ev+0x48>)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	33cc      	adds	r3, #204	; 0xcc
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f880 	bl	800d574 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	3398      	adds	r3, #152	; 0x98
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff fe8f 	bl	800d19c <_ZN8touchgfx6ButtonD1Ev>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	336c      	adds	r3, #108	; 0x6c
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff fe68 	bl	800d158 <_ZN8touchgfx3BoxD1Ev>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	3340      	adds	r3, #64	; 0x40
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fe63 	bl	800d158 <_ZN8touchgfx3BoxD1Ev>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff fef3 	bl	800d280 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
{

}
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	08020da8 	.word	0x08020da8

0800d4a8 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
}
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff ffd3 	bl	800d45c <_ZN15Screen2ViewBaseD1Ev>
 800d4b6:	21dc      	movs	r1, #220	; 0xdc
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f011 fa38 	bl	801e92e <_ZdlPvj>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3398      	adds	r3, #152	; 0x98
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d106      	bne.n	800d4fe <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff feba 	bl	800d26a <_ZN15Screen2ViewBase11applicationEv>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fd ff73 	bl	800b3e4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4618      	mov	r0, r3
 800d514:	f007 fb12 	bl	8014b3c <_ZN8touchgfx6ScreenC1Ev>
 800d518:	4a05      	ldr	r2, [pc, #20]	; (800d530 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	08020df4 	.word	0x08020df4

0800d534 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4639      	mov	r1, r7
 800d540:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4618      	mov	r0, r3
 800d548:	f7ff fd50 	bl	800cfec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d54c:	4a08      	ldr	r2, [pc, #32]	; (800d570 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	605a      	str	r2, [r3, #4]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3308      	adds	r3, #8
 800d55c:	463a      	mov	r2, r7
 800d55e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d562:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	08020ddc 	.word	0x08020ddc

0800d574 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	4a05      	ldr	r2, [pc, #20]	; (800d594 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fd61 	bl	800d04c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	08020ddc 	.word	0x08020ddc

0800d598 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff ffe7 	bl	800d574 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d5a6:	2110      	movs	r1, #16
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f011 f9c0 	bl	801e92e <_ZdlPvj>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	68d2      	ldr	r2, [r2, #12]
 800d5ca:	1052      	asrs	r2, r2, #1
 800d5cc:	1898      	adds	r0, r3, r2
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	f003 0301 	and.w	r3, r3, #1
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	e00a      	b.n	800d5f6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	68d2      	ldr	r2, [r2, #12]
 800d5e8:	1052      	asrs	r2, r2, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	6892      	ldr	r2, [r2, #8]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	4798      	blx	r3
    }
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d602:	b480      	push	{r7}
 800d604:	b083      	sub	sp, #12
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d010      	beq.n	800d634 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d107      	bne.n	800d62a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d626:	2301      	movs	r3, #1
 800d628:	e000      	b.n	800d62c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d62a:	2300      	movs	r3, #0
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d001      	beq.n	800d634 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d630:	2301      	movs	r3, #1
 800d632:	e000      	b.n	800d636 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d634:	2300      	movs	r3, #0
    }
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
	...

0800d644 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800d644:	b480      	push	{r7}
 800d646:	af00      	add	r7, sp, #0
    return bitmap_database;
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	08020e20 	.word	0x08020e20

0800d658 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800d658:	b480      	push	{r7}
 800d65a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800d65c:	2302      	movs	r3, #2
}
 800d65e:	4618      	mov	r0, r3
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	460b      	mov	r3, r1
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800d676:	2300      	movs	r3, #0
    }
 800d678:	4618      	mov	r0, r3
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d68c:	2300      	movs	r3, #0
    }
 800d68e:	4618      	mov	r0, r3
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d69a:	b480      	push	{r7}
 800d69c:	b083      	sub	sp, #12
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d6a2:	2300      	movs	r3, #0
    }
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800d6be:	4a07      	ldr	r2, [pc, #28]	; (800d6dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6013      	str	r3, [r2, #0]
        fonts = f;
 800d6c4:	4a06      	ldr	r2, [pc, #24]	; (800d6e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800d6ca:	4a06      	ldr	r2, [pc, #24]	; (800d6e4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800d6cc:	88fb      	ldrh	r3, [r7, #6]
 800d6ce:	8013      	strh	r3, [r2, #0]
    }
 800d6d0:	bf00      	nop
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	20011968 	.word	0x20011968
 800d6e0:	20011970 	.word	0x20011970
 800d6e4:	2001196c 	.word	0x2001196c

0800d6e8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d6e8:	b40e      	push	{r1, r2, r3}
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800d6f2:	f107 0320 	add.w	r3, r7, #32
 800d6f6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f006 fe52 	bl	80143a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d704:	4603      	mov	r3, r0
 800d706:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d708:	89fb      	ldrh	r3, [r7, #14]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d714:	b003      	add	sp, #12
 800d716:	4770      	bx	lr

0800d718 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800d718:	b40c      	push	{r2, r3}
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	460b      	mov	r3, r1
 800d724:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800d726:	f107 031c 	add.w	r3, r7, #28
 800d72a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800d72c:	78f9      	ldrb	r1, [r7, #3]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f006 fe38 	bl	80143a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800d738:	4603      	mov	r3, r0
 800d73a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800d73c:	89fb      	ldrh	r3, [r7, #14]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d748:	b002      	add	sp, #8
 800d74a:	4770      	bx	lr

0800d74c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	; 0x28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d016      	beq.n	800d78e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3322      	adds	r3, #34	; 0x22
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	8adb      	ldrh	r3, [r3, #22]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800d76e:	4b43      	ldr	r3, [pc, #268]	; (800d87c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d770:	4a43      	ldr	r2, [pc, #268]	; (800d880 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d772:	21c5      	movs	r1, #197	; 0xc5
 800d774:	4843      	ldr	r0, [pc, #268]	; (800d884 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d776:	f011 f909 	bl	801e98c <__assert_func>
            return buffer[pos];
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	8a9b      	ldrh	r3, [r3, #20]
 800d77e:	461a      	mov	r2, r3
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800d78a:	2301      	movs	r3, #1
 800d78c:	e000      	b.n	800d790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800d78e:	2300      	movs	r3, #0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d06a      	beq.n	800d86a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f008 f8e1 	bl	801595c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3322      	adds	r3, #34	; 0x22
 800d79e:	623b      	str	r3, [r7, #32]
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	8adb      	ldrh	r3, [r3, #22]
 800d7a8:	8bfa      	ldrh	r2, [r7, #30]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d305      	bcc.n	800d7ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800d7ae:	4b36      	ldr	r3, [pc, #216]	; (800d888 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800d7b0:	4a36      	ldr	r2, [pc, #216]	; (800d88c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800d7b2:	21cb      	movs	r1, #203	; 0xcb
 800d7b4:	4833      	ldr	r0, [pc, #204]	; (800d884 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d7b6:	f011 f8e9 	bl	801e98c <__assert_func>
            const uint16_t index = pos + offset;
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	8a9a      	ldrh	r2, [r3, #20]
 800d7be:	8bfb      	ldrh	r3, [r7, #30]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800d7c4:	8bbb      	ldrh	r3, [r7, #28]
 800d7c6:	2b09      	cmp	r3, #9
 800d7c8:	d801      	bhi.n	800d7ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800d7ca:	8bbb      	ldrh	r3, [r7, #28]
 800d7cc:	e001      	b.n	800d7d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800d7ce:	8bbb      	ldrh	r3, [r7, #28]
 800d7d0:	3b0a      	subs	r3, #10
 800d7d2:	6a3a      	ldr	r2, [r7, #32]
 800d7d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d8:	f640 123f 	movw	r2, #2367	; 0x93f
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	bf0c      	ite	eq
 800d7e0:	2301      	moveq	r3, #1
 800d7e2:	2300      	movne	r3, #0
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d03f      	beq.n	800d86a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	3322      	adds	r3, #34	; 0x22
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	3222      	adds	r2, #34	; 0x22
 800d7f2:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	8ad2      	ldrh	r2, [r2, #22]
 800d7f8:	2a00      	cmp	r2, #0
 800d7fa:	d105      	bne.n	800d808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800d7fc:	4b1f      	ldr	r3, [pc, #124]	; (800d87c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800d7fe:	4a20      	ldr	r2, [pc, #128]	; (800d880 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800d800:	21c5      	movs	r1, #197	; 0xc5
 800d802:	4820      	ldr	r0, [pc, #128]	; (800d884 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d804:	f011 f8c2 	bl	801e98c <__assert_func>
            return buffer[pos];
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	8a92      	ldrh	r2, [r2, #20]
 800d80c:	4611      	mov	r1, r2
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d814:	613b      	str	r3, [r7, #16]
 800d816:	4613      	mov	r3, r2
 800d818:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	8adb      	ldrh	r3, [r3, #22]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d806      	bhi.n	800d830 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800d822:	4b1b      	ldr	r3, [pc, #108]	; (800d890 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800d824:	4a1b      	ldr	r2, [pc, #108]	; (800d894 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800d826:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800d82a:	4816      	ldr	r0, [pc, #88]	; (800d884 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800d82c:	f011 f8ae 	bl	801e98c <__assert_func>
            const uint16_t index = pos + 1;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	8a9b      	ldrh	r3, [r3, #20]
 800d834:	3301      	adds	r3, #1
 800d836:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800d838:	89bb      	ldrh	r3, [r7, #12]
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d801      	bhi.n	800d842 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800d83e:	89bb      	ldrh	r3, [r7, #12]
 800d840:	e000      	b.n	800d844 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800d842:	2300      	movs	r3, #0
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	89f9      	ldrh	r1, [r7, #14]
 800d848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800d84c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3322      	adds	r3, #34	; 0x22
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	f640 133f 	movw	r3, #2367	; 0x93f
 800d858:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	8a9b      	ldrh	r3, [r3, #20]
 800d85e:	4619      	mov	r1, r3
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	8afa      	ldrh	r2, [r7, #22]
 800d864:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800d868:	bf00      	nop
        }
    }
    return getNextChar();
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f007 ff78 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d870:	4603      	mov	r3, r0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3728      	adds	r7, #40	; 0x28
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	080202f8 	.word	0x080202f8
 800d880:	08020304 	.word	0x08020304
 800d884:	080203b0 	.word	0x080203b0
 800d888:	080203f8 	.word	0x080203f8
 800d88c:	08020408 	.word	0x08020408
 800d890:	080204dc 	.word	0x080204dc
 800d894:	080204e8 	.word	0x080204e8

0800d898 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f007 ff26 	bl	80156f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800d8a6:	bf00      	nop
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b088      	sub	sp, #32
 800d8b2:	af02      	add	r7, sp, #8
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	1d38      	adds	r0, r7, #4
 800d8b8:	e880 0006 	stmia.w	r0, {r1, r2}
 800d8bc:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800d8be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d8c2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800d8c4:	1d39      	adds	r1, r7, #4
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f005 f9ee 	bl	8012cb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800d8d8:	bf00      	nop
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800d8e0:	b590      	push	{r4, r7, lr}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d127      	bne.n	800d944 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	4a1e      	ldr	r2, [pc, #120]	; (800d970 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d016      	beq.n	800d92e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800d900:	88fb      	ldrh	r3, [r7, #6]
 800d902:	4a1b      	ldr	r2, [pc, #108]	; (800d970 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800d904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d908:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	4413      	add	r3, r2
 800d912:	4a18      	ldr	r2, [pc, #96]	; (800d974 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800d914:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	4413      	add	r3, r2
 800d91e:	4a16      	ldr	r2, [pc, #88]	; (800d978 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800d920:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	4413      	add	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
 800d92c:	e00a      	b.n	800d944 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800d92e:	4b11      	ldr	r3, [pc, #68]	; (800d974 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800d930:	4a12      	ldr	r2, [pc, #72]	; (800d97c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800d932:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800d934:	4a12      	ldr	r2, [pc, #72]	; (800d980 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800d936:	4b10      	ldr	r3, [pc, #64]	; (800d978 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800d938:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	4a11      	ldr	r2, [pc, #68]	; (800d984 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800d93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d942:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00d      	beq.n	800d966 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800d94a:	4a0f      	ldr	r2, [pc, #60]	; (800d988 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800d94c:	88fb      	ldrh	r3, [r7, #6]
 800d94e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800d950:	f000 f83e 	bl	800d9d0 <_ZN17TypedTextDatabase8getFontsEv>
 800d954:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800d956:	f000 f833 	bl	800d9c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800d95a:	4603      	mov	r3, r0
 800d95c:	461a      	mov	r2, r3
 800d95e:	4621      	mov	r1, r4
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f7ff fea5 	bl	800d6b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800d966:	bf00      	nop
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd90      	pop	{r4, r7, pc}
 800d96e:	bf00      	nop
 800d970:	20010734 	.word	0x20010734
 800d974:	2001073c 	.word	0x2001073c
 800d978:	20010740 	.word	0x20010740
 800d97c:	0803b6cc 	.word	0x0803b6cc
 800d980:	0803b6c4 	.word	0x0803b6c4
 800d984:	0803b6e0 	.word	0x0803b6e0
 800d988:	20010738 	.word	0x20010738

0800d98c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800d998:	4b07      	ldr	r3, [pc, #28]	; (800d9b8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800d99e:	6819      	ldr	r1, [r3, #0]
 800d9a0:	887b      	ldrh	r3, [r7, #2]
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	440b      	add	r3, r1
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4413      	add	r3, r2
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	2001073c 	.word	0x2001073c
 800d9bc:	20010740 	.word	0x20010740

0800d9c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800d9c4:	2302      	movs	r3, #2
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800d9d4:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	20010744 	.word	0x20010744

0800d9e4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d113      	bne.n	800da1c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d10e      	bne.n	800da1c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800d9fe:	f7fc fed9 	bl	800a7b4 <_Z23getFont_verdana_20_4bppv>
 800da02:	4603      	mov	r3, r0
};
 800da04:	4a07      	ldr	r2, [pc, #28]	; (800da24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800da06:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800da08:	f7fc ff2e 	bl	800a868 <_Z23getFont_verdana_40_4bppv>
 800da0c:	4603      	mov	r3, r0
};
 800da0e:	4a05      	ldr	r2, [pc, #20]	; (800da24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800da10:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800da12:	f7fc fe75 	bl	800a700 <_Z23getFont_verdana_10_4bppv>
 800da16:	4603      	mov	r3, r0
};
 800da18:	4a02      	ldr	r2, [pc, #8]	; (800da24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800da1a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20010744 	.word	0x20010744

0800da28 <_GLOBAL__sub_I_touchgfx_fonts>:
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da30:	2001      	movs	r0, #1
 800da32:	f7ff ffd7 	bl	800d9e4 <_Z41__static_initialization_and_destruction_0ii>
 800da36:	bd80      	pop	{r7, pc}

0800da38 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	4a05      	ldr	r2, [pc, #20]	; (800da58 <_ZN19FrontendApplicationD1Ev+0x20>)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fd fba5 	bl	800b198 <_ZN23FrontendApplicationBaseD1Ev>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	08020eac 	.word	0x08020eac

0800da5c <_ZN19FrontendApplicationD0Ev>:
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff ffe7 	bl	800da38 <_ZN19FrontendApplicationD1Ev>
 800da6a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f010 ff5d 	bl	801e92e <_ZdlPvj>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 f82d 	bl	800daec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4618      	mov	r0, r3
 800da96:	f005 fdef 	bl	8013678 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
	...

0800daa4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fd fbf2 	bl	800b2a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800dabc:	4a03      	ldr	r2, [pc, #12]	; (800dacc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	601a      	str	r2, [r3, #0]
{

}
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	08020eac 	.word	0x08020eac

0800dad0 <_ZN5ModelC1Ev>:
extern osSemaphoreId binarySemUartMsgHandle;
//extern int MainBuf;



Model::Model() : modelListener(0)
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
{

}
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <_ZN5Model4tickEv>:

void Model::tick()
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
    if (binarySemUartMsgHandle != NULL)
 800daf4:	4b09      	ldr	r3, [pc, #36]	; (800db1c <_ZN5Model4tickEv+0x30>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00a      	beq.n	800db12 <_ZN5Model4tickEv+0x26>
    {
       if(xSemaphoreTake(binarySemUartMsgHandle, (TickType_t)10)==pdTRUE);
 800dafc:	4b07      	ldr	r3, [pc, #28]	; (800db1c <_ZN5Model4tickEv+0x30>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	210a      	movs	r1, #10
 800db02:	4618      	mov	r0, r3
 800db04:	f7fa fb7c 	bl	8008200 <xQueueSemaphoreTake>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b01      	cmp	r3, #1
       {
    	   uartMsgRdy();
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f807 	bl	800db20 <_ZN5Model10uartMsgRdyEv>
       }
    }
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20000498 	.word	0x20000498

0800db20 <_ZN5Model10uartMsgRdyEv>:
void Model::uartMsgRdy()
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    modelListener->uartMsgRdy();
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	3308      	adds	r3, #8
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4610      	mov	r0, r2
 800db38:	4798      	blx	r3

}
 800db3a:	bf00      	nop
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800db42:	b480      	push	{r7}
 800db44:	b083      	sub	sp, #12
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
    {
    }
 800db4a:	bf00      	nop
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
    {
    }
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
	...

0800db6c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
    {
 800db74:	4a04      	ldr	r2, [pc, #16]	; (800db88 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	601a      	str	r2, [r3, #0]
    }
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4618      	mov	r0, r3
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	08020f3c 	.word	0x08020f3c

0800db8c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
    }
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff ffe9 	bl	800db6c <_ZN8touchgfx9PresenterD1Ev>
 800db9a:	2104      	movs	r1, #4
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f010 fec6 	bl	801e92e <_ZdlPvj>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
    {
 800dbb4:	4a04      	ldr	r2, [pc, #16]	; (800dbc8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	601a      	str	r2, [r3, #0]
    }
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	08020f3c 	.word	0x08020f3c

0800dbcc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	4a06      	ldr	r2, [pc, #24]	; (800dbf0 <_ZN13ModelListenerC1Ev+0x24>)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	605a      	str	r2, [r3, #4]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	08020f28 	.word	0x08020f28

0800dbf4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	4a04      	ldr	r2, [pc, #16]	; (800dc10 <_ZN13ModelListenerD1Ev+0x1c>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4618      	mov	r0, r3
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	08020f28 	.word	0x08020f28

0800dc14 <_ZN13ModelListenerD0Ev>:
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ffe9 	bl	800dbf4 <_ZN13ModelListenerD1Ev>
 800dc22:	2108      	movs	r1, #8
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f010 fe82 	bl	801e92e <_ZdlPvj>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <_ZN13ModelListener10uartMsgRdyEv>:
    virtual void uartMsgRdy() {};
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	4a09      	ldr	r2, [pc, #36]	; (800dc78 <_ZN16Screen1PresenterD1Ev+0x30>)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	4a09      	ldr	r2, [pc, #36]	; (800dc7c <_ZN16Screen1PresenterD1Ev+0x34>)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	605a      	str	r2, [r3, #4]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff ffc7 	bl	800dbf4 <_ZN13ModelListenerD1Ev>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff ff7f 	bl	800db6c <_ZN8touchgfx9PresenterD1Ev>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	08020ef8 	.word	0x08020ef8
 800dc7c:	08020f14 	.word	0x08020f14

0800dc80 <_ZThn4_N16Screen1PresenterD1Ev>:
 800dc80:	f1a0 0004 	sub.w	r0, r0, #4
 800dc84:	e7e0      	b.n	800dc48 <_ZN16Screen1PresenterD1Ev>
 800dc86:	bf00      	nop

0800dc88 <_ZN16Screen1PresenterD0Ev>:
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff ffd9 	bl	800dc48 <_ZN16Screen1PresenterD1Ev>
 800dc96:	2110      	movs	r1, #16
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f010 fe48 	bl	801e92e <_ZdlPvj>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZThn4_N16Screen1PresenterD0Ev>:
 800dca8:	f1a0 0004 	sub.w	r0, r0, #4
 800dcac:	e7ec      	b.n	800dc88 <_ZN16Screen1PresenterD0Ev>
	...

0800dcb0 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
    : view(v)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff ff75 	bl	800dbac <_ZN8touchgfx9PresenterC1Ev>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff ff80 	bl	800dbcc <_ZN13ModelListenerC1Ev>
 800dccc:	4a06      	ldr	r2, [pc, #24]	; (800dce8 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	4a06      	ldr	r2, [pc, #24]	; (800dcec <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	605a      	str	r2, [r3, #4]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	60da      	str	r2, [r3, #12]
{

}
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	08020ef8 	.word	0x08020ef8
 800dcec:	08020f14 	.word	0x08020f14

0800dcf0 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]

}
 800dcf8:	bf00      	nop
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]

}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <_ZN16Screen1Presenter10uartMsgRdyEv>:


void Screen1Presenter::uartMsgRdy()
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
	view.uartMsgRdy();
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68da      	ldr	r2, [r3, #12]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	332c      	adds	r3, #44	; 0x2c
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4610      	mov	r0, r2
 800dd30:	4798      	blx	r3
}
 800dd32:	bf00      	nop
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <_ZThn4_N16Screen1Presenter10uartMsgRdyEv>:

    virtual void uartMsgRdy();
 800dd3a:	f1a0 0004 	sub.w	r0, r0, #4
 800dd3e:	f7ff bfeb 	b.w	800dd18 <_ZN16Screen1Presenter10uartMsgRdyEv>
	...

0800dd44 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	4a05      	ldr	r2, [pc, #20]	; (800dd64 <_ZN11Screen1ViewD1Ev+0x20>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7ff f8d7 	bl	800cf08 <_ZN15Screen1ViewBaseD1Ev>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	08020f54 	.word	0x08020f54

0800dd68 <_ZN11Screen1ViewD0Ev>:
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7ff ffe7 	bl	800dd44 <_ZN11Screen1ViewD1Ev>
 800dd76:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f010 fdd7 	bl	801e92e <_ZdlPvj>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4618      	mov	r0, r3
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <_ZN11Screen1ViewC1Ev>:
#include "string.h"
#include "PollingRoutines.h"

extern uint8_t uartMsgBuf[UART_BUF_SIZE];

Screen1View::Screen1View()
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe ff28 	bl	800cbec <_ZN15Screen1ViewBaseC1Ev>
 800dd9c:	4a03      	ldr	r2, [pc, #12]	; (800ddac <_ZN11Screen1ViewC1Ev+0x20>)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	601a      	str	r2, [r3, #0]
{

}
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	08020f54 	.word	0x08020f54

0800ddb0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7ff f8e1 	bl	800cf82 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800ddc0:	bf00      	nop
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe fbfa 	bl	800c5cc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <_ZN11Screen1View10uartMsgRdyEv>:
	textArea1.invalidate();
	memset(RxBuf, 0,  sizeof(RxBuf));
}*/

void Screen1View::uartMsgRdy()
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  if(uartMsgBuf[0]==0)return;
 800dde8:	4b10      	ldr	r3, [pc, #64]	; (800de2c <_ZN11Screen1View10uartMsgRdyEv+0x4c>)
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d019      	beq.n	800de24 <_ZN11Screen1View10uartMsgRdyEv+0x44>

  memset(&textArea1Buffer,0,TEXTAREA1_SIZE);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ddf6:	2211      	movs	r2, #17
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f010 ff4c 	bl	801ec98 <memset>
  Unicode::strncpy(textArea1Buffer, (char *)uartMsgBuf, TEXTAREA1_SIZE-1);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800de06:	2210      	movs	r2, #16
 800de08:	4908      	ldr	r1, [pc, #32]	; (800de2c <_ZN11Screen1View10uartMsgRdyEv+0x4c>)
 800de0a:	4618      	mov	r0, r3
 800de0c:	f007 ffef 	bl	8015dee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
  textArea1Buffer[16]='\0';
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  textArea1.invalidate();
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	33cc      	adds	r3, #204	; 0xcc
 800de1c:	4618      	mov	r0, r3
 800de1e:	f006 fbee 	bl	80145fe <_ZNK8touchgfx8Drawable10invalidateEv>
 800de22:	e000      	b.n	800de26 <_ZN11Screen1View10uartMsgRdyEv+0x46>
  if(uartMsgBuf[0]==0)return;
 800de24:	bf00      	nop
}
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20000124 	.word	0x20000124

0800de30 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	4a09      	ldr	r2, [pc, #36]	; (800de60 <_ZN16Screen2PresenterD1Ev+0x30>)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	4a09      	ldr	r2, [pc, #36]	; (800de64 <_ZN16Screen2PresenterD1Ev+0x34>)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	605a      	str	r2, [r3, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3304      	adds	r3, #4
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fed3 	bl	800dbf4 <_ZN13ModelListenerD1Ev>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff fe8b 	bl	800db6c <_ZN8touchgfx9PresenterD1Ev>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	08020f8c 	.word	0x08020f8c
 800de64:	08020fa4 	.word	0x08020fa4

0800de68 <_ZThn4_N16Screen2PresenterD1Ev>:
 800de68:	f1a0 0004 	sub.w	r0, r0, #4
 800de6c:	e7e0      	b.n	800de30 <_ZN16Screen2PresenterD1Ev>
 800de6e:	bf00      	nop

0800de70 <_ZN16Screen2PresenterD0Ev>:
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff ffd9 	bl	800de30 <_ZN16Screen2PresenterD1Ev>
 800de7e:	2110      	movs	r1, #16
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f010 fd54 	bl	801e92e <_ZdlPvj>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <_ZThn4_N16Screen2PresenterD0Ev>:
 800de90:	f1a0 0004 	sub.w	r0, r0, #4
 800de94:	e7ec      	b.n	800de70 <_ZN16Screen2PresenterD0Ev>
	...

0800de98 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
    : view(v)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff fe81 	bl	800dbac <_ZN8touchgfx9PresenterC1Ev>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3304      	adds	r3, #4
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff fe8c 	bl	800dbcc <_ZN13ModelListenerC1Ev>
 800deb4:	4a06      	ldr	r2, [pc, #24]	; (800ded0 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	4a06      	ldr	r2, [pc, #24]	; (800ded4 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	605a      	str	r2, [r3, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	60da      	str	r2, [r3, #12]
{

}
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	08020f8c 	.word	0x08020f8c
 800ded4:	08020fa4 	.word	0x08020fa4

0800ded8 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]

}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	4a05      	ldr	r2, [pc, #20]	; (800df20 <_ZN11Screen2ViewD1Ev+0x20>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff faa3 	bl	800d45c <_ZN15Screen2ViewBaseD1Ev>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	08020fb8 	.word	0x08020fb8

0800df24 <_ZN11Screen2ViewD0Ev>:
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff ffe7 	bl	800df00 <_ZN11Screen2ViewD1Ev>
 800df32:	21dc      	movs	r1, #220	; 0xdc
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f010 fcfa 	bl	801e92e <_ZdlPvj>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	f7ff f9b8 	bl	800d2c4 <_ZN15Screen2ViewBaseC1Ev>
 800df54:	4a03      	ldr	r2, [pc, #12]	; (800df64 <_ZN11Screen2ViewC1Ev+0x20>)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	601a      	str	r2, [r3, #0]
{

}
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	08020fb8 	.word	0x08020fb8

0800df68 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff faa8 	bl	800d4c8 <_ZN15Screen2ViewBase11setupScreenEv>
}
 800df78:	bf00      	nop
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fe fb1e 	bl	800c5cc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
    {
 800dfa0:	4a04      	ldr	r2, [pc, #16]	; (800dfb4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	601a      	str	r2, [r3, #0]
    }
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	08021004 	.word	0x08021004

0800dfb8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
    }
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ffe9 	bl	800df98 <_ZN8touchgfx15TouchControllerD1Ev>
 800dfc6:	2104      	movs	r1, #4
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f010 fcb0 	bl	801e92e <_ZdlPvj>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <_ZN20STM32TouchController4initEv>:
static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;


void STM32TouchController::init()
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]

    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800dfe0:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <_ZN20STM32TouchController4initEv+0x20>)
 800dfe2:	4a06      	ldr	r2, [pc, #24]	; (800dffc <_ZN20STM32TouchController4initEv+0x24>)
 800dfe4:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800dfe6:	4b04      	ldr	r3, [pc, #16]	; (800dff8 <_ZN20STM32TouchController4initEv+0x20>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2070      	movs	r0, #112	; 0x70
 800dfee:	4798      	blx	r3


}
 800dff0:	bf00      	nop
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20010750 	.word	0x20010750
 800dffc:	20000004 	.word	0x20000004

0800e000 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
    if (tsDriver)
 800e00c:	4b0f      	ldr	r3, [pc, #60]	; (800e04c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d015      	beq.n	800e040 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 800e014:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	2070      	movs	r0, #112	; 0x70
 800e01c:	4798      	blx	r3
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	bf14      	ite	ne
 800e024:	2301      	movne	r3, #1
 800e026:	2300      	moveq	r3, #0
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d008      	beq.n	800e040 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800e02e:	4b07      	ldr	r3, [pc, #28]	; (800e04c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	695b      	ldr	r3, [r3, #20]
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	2070      	movs	r0, #112	; 0x70
 800e03a:	4798      	blx	r3
            return true;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	20010750 	.word	0x20010750

0800e050 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	4a05      	ldr	r2, [pc, #20]	; (800e070 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff ff99 	bl	800df98 <_ZN8touchgfx15TouchControllerD1Ev>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	08020fec 	.word	0x08020fec

0800e074 <_ZN20STM32TouchControllerD0Ev>:
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff ffe7 	bl	800e050 <_ZN20STM32TouchControllerD1Ev>
 800e082:	2104      	movs	r1, #4
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f010 fc52 	bl	801e92e <_ZdlPvj>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0

}
 800e098:	bf00      	nop
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	2b03      	cmp	r3, #3
 800e0b2:	d80c      	bhi.n	800e0ce <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800e0b4:	a201      	add	r2, pc, #4	; (adr r2, 800e0bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800e0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ba:	bf00      	nop
 800e0bc:	0800e0cd 	.word	0x0800e0cd
 800e0c0:	0800e0cd 	.word	0x0800e0cd
 800e0c4:	0800e0cd 	.word	0x0800e0cd
 800e0c8:	0800e0cd 	.word	0x0800e0cd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800e0cc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800e0ce:	bf00      	nop
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop

0800e0dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d80c      	bhi.n	800e106 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800e0ec:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e105 	.word	0x0800e105
 800e0fc:	0800e105 	.word	0x0800e105
 800e100:	0800e105 	.word	0x0800e105
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800e104:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800e106:	bf00      	nop
 800e108:	370c      	adds	r7, #12
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop

0800e114 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	4603      	mov	r3, r0
 800e11c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	2b03      	cmp	r3, #3
 800e122:	d80c      	bhi.n	800e13e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800e124:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800e126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12a:	bf00      	nop
 800e12c:	0800e13d 	.word	0x0800e13d
 800e130:	0800e13d 	.word	0x0800e13d
 800e134:	0800e13d 	.word	0x0800e13d
 800e138:	0800e13d 	.word	0x0800e13d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800e13c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop

0800e14c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
    {
 800e154:	4a04      	ldr	r2, [pc, #16]	; (800e168 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	601a      	str	r2, [r3, #0]
    }
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr
 800e168:	080213ec 	.word	0x080213ec

0800e16c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
    }
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff ffe9 	bl	800e14c <_ZN8touchgfx3HALD1Ev>
 800e17a:	217c      	movs	r1, #124	; 0x7c
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f010 fbd6 	bl	801e92e <_ZdlPvj>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	807b      	strh	r3, [r7, #2]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800e1c4:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800e1c6:	881b      	ldrh	r3, [r3, #0]
 800e1c8:	887a      	ldrh	r2, [r7, #2]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d304      	bcc.n	800e1d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800e1ce:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	883a      	ldrh	r2, [r7, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d205      	bcs.n	800e1e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800e1d8:	4b09      	ldr	r3, [pc, #36]	; (800e200 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800e1da:	4a0a      	ldr	r2, [pc, #40]	; (800e204 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800e1dc:	219e      	movs	r1, #158	; 0x9e
 800e1de:	480a      	ldr	r0, [pc, #40]	; (800e208 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800e1e0:	f010 fbd4 	bl	801e98c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800e1e4:	4a09      	ldr	r2, [pc, #36]	; (800e20c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800e1e6:	887b      	ldrh	r3, [r7, #2]
 800e1e8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800e1ea:	4a09      	ldr	r2, [pc, #36]	; (800e210 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800e1ec:	883b      	ldrh	r3, [r7, #0]
 800e1ee:	8013      	strh	r3, [r2, #0]
    }
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	2001190a 	.word	0x2001190a
 800e1fc:	2001190c 	.word	0x2001190c
 800e200:	0802059c 	.word	0x0802059c
 800e204:	08020600 	.word	0x08020600
 800e208:	08020644 	.word	0x08020644
 800e20c:	20011910 	.word	0x20011910
 800e210:	20011912 	.word	0x20011912

0800e214 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800e222:	2b00      	cmp	r3, #0
 800e224:	d009      	beq.n	800e23a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4610      	mov	r0, r2
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
 800e238:	e000      	b.n	800e23c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800e23a:	2300      	movs	r3, #0
    }
 800e23c:	4618      	mov	r0, r3
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f002 fdc1 	bl	8010dd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	33ac      	adds	r3, #172	; 0xac
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	4798      	blx	r3
    }
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800e266:	b480      	push	{r7}
 800e268:	b083      	sub	sp, #12
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800e270:	2300      	movs	r3, #0
    }
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
	...

0800e280 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d106      	bne.n	800e2a2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800e294:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800e296:	4a10      	ldr	r2, [pc, #64]	; (800e2d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800e298:	f240 21d2 	movw	r1, #722	; 0x2d2
 800e29c:	480f      	ldr	r0, [pc, #60]	; (800e2dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800e29e:	f010 fb75 	bl	801e98c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	bf14      	ite	ne
 800e2b4:	2301      	movne	r3, #1
 800e2b6:	2300      	moveq	r3, #0
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800e2bc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	338c      	adds	r3, #140	; 0x8c
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	4798      	blx	r3
    }
 800e2cc:	bf00      	nop
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	08020688 	.word	0x08020688
 800e2d8:	080206c0 	.word	0x080206c0
 800e2dc:	08020644 	.word	0x08020644
 800e2e0:	20011914 	.word	0x20011914

0800e2e4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	bf14      	ite	ne
 800e2fa:	2301      	movne	r3, #1
 800e2fc:	2300      	moveq	r3, #0
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	4b03      	ldr	r3, [pc, #12]	; (800e310 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800e302:	701a      	strb	r2, [r3, #0]
    }
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20011915 	.word	0x20011915

0800e314 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e31c:	2300      	movs	r3, #0
    }
 800e31e:	4618      	mov	r0, r3
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b082      	sub	sp, #8
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	460b      	mov	r3, r1
 800e334:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d004      	beq.n	800e348 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e342:	887a      	ldrh	r2, [r7, #2]
 800e344:	4610      	mov	r0, r2
 800e346:	4798      	blx	r3
        }
    }
 800e348:	bf00      	nop
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800e358:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800e35c:	4618      	mov	r0, r3
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685a      	ldr	r2, [r3, #4]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3318      	adds	r3, #24
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4610      	mov	r0, r2
 800e380:	4798      	blx	r3
 800e382:	4603      	mov	r3, r0
    }
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d011      	beq.n	800e3c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800e3a4:	4b14      	ldr	r3, [pc, #80]	; (800e3f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d11e      	bne.n	800e3ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800e3ac:	4b13      	ldr	r3, [pc, #76]	; (800e3fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e3b2:	4b13      	ldr	r3, [pc, #76]	; (800e400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e3b4:	881a      	ldrh	r2, [r3, #0]
 800e3b6:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e3b8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800e3ba:	4a11      	ldr	r2, [pc, #68]	; (800e400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e3bc:	89bb      	ldrh	r3, [r7, #12]
 800e3be:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800e3c0:	4b0d      	ldr	r3, [pc, #52]	; (800e3f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800e3c6:	e010      	b.n	800e3ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800e3c8:	4b0b      	ldr	r3, [pc, #44]	; (800e3f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00c      	beq.n	800e3ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e3d8:	881a      	ldrh	r2, [r3, #0]
 800e3da:	4b08      	ldr	r3, [pc, #32]	; (800e3fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e3dc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800e3de:	4a08      	ldr	r2, [pc, #32]	; (800e400 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e3e0:	89fb      	ldrh	r3, [r7, #14]
 800e3e2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800e3e4:	4b04      	ldr	r3, [pc, #16]	; (800e3f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	701a      	strb	r2, [r3, #0]
    }
 800e3ea:	bf00      	nop
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	2001190e 	.word	0x2001190e
 800e3fc:	2001190c 	.word	0x2001190c
 800e400:	2001190a 	.word	0x2001190a

0800e404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	f001 ff44 	bl	801029c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800e414:	bf00      	nop
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	4a05      	ldr	r2, [pc, #20]	; (800e43c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7ff fe8d 	bl	800e14c <_ZN8touchgfx3HALD1Ev>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	08021244 	.word	0x08021244

0800e440 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff ffe7 	bl	800e41c <_ZN20TouchGFXGeneratedHALD1Ev>
 800e44e:	217c      	movs	r1, #124	; 0x7c
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f010 fa6c 	bl	801e92e <_ZdlPvj>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff ffca 	bl	800e404 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4618      	mov	r0, r3
 800e484:	f001 fae2 	bl	800fa4c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f001 fb78 	bl	800fb90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800e4a0:	4603      	mov	r3, r0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b082      	sub	sp, #8
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f001 fb77 	bl	800fbac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 fb7f 	bl	800fbd8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800e4da:	bf00      	nop
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	60f8      	str	r0, [r7, #12]
 800e4ea:	60b9      	str	r1, [r7, #8]
 800e4ec:	607a      	str	r2, [r7, #4]
 800e4ee:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	68b9      	ldr	r1, [r7, #8]
 800e4f8:	f001 fb7c 	bl	800fbf4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800e4fc:	4603      	mov	r3, r0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4618      	mov	r0, r3
 800e512:	f001 fabf 	bl	800fa94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800e516:	bf00      	nop
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b082      	sub	sp, #8
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	f001 fac3 	bl	800fab4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800e52e:	bf00      	nop
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	f001 fac5 	bl	800fad0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b082      	sub	sp, #8
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4618      	mov	r0, r3
 800e55a:	f001 fac7 	bl	800faec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4618      	mov	r0, r3
 800e572:	f001 fae9 	bl	800fb48 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800e576:	4603      	mov	r3, r0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f001 faea 	bl	800fb64 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800e590:	bf00      	nop
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	4a05      	ldr	r2, [pc, #20]	; (800e5b8 <_ZN11TouchGFXHALD1Ev+0x20>)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff ff37 	bl	800e41c <_ZN20TouchGFXGeneratedHALD1Ev>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	0802101c 	.word	0x0802101c

0800e5bc <_ZN11TouchGFXHALD0Ev>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff ffe7 	bl	800e598 <_ZN11TouchGFXHALD1Ev>
 800e5ca:	217c      	movs	r1, #124	; 0x7c
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f010 f9ae 	bl	801e92e <_ZdlPvj>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	4811      	ldr	r0, [pc, #68]	; (800e628 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800e5e4:	f7f9 fa16 	bl	8007a14 <osSemaphoreCreate>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	4a10      	ldr	r2, [pc, #64]	; (800e62c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800e5ec:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800e5ee:	4b0f      	ldr	r3, [pc, #60]	; (800e62c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d105      	bne.n	800e602 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	; (800e630 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800e5f8:	4a0e      	ldr	r2, [pc, #56]	; (800e634 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800e5fa:	2127      	movs	r1, #39	; 0x27
 800e5fc:	480e      	ldr	r0, [pc, #56]	; (800e638 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800e5fe:	f010 f9c5 	bl	801e98c <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 800e602:	2101      	movs	r1, #1
 800e604:	480d      	ldr	r0, [pc, #52]	; (800e63c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800e606:	f7f9 fa05 	bl	8007a14 <osSemaphoreCreate>
 800e60a:	4603      	mov	r3, r0
 800e60c:	4a0c      	ldr	r2, [pc, #48]	; (800e640 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800e60e:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 800e610:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d105      	bne.n	800e624 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 800e618:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 800e61a:	4a06      	ldr	r2, [pc, #24]	; (800e634 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800e61c:	212a      	movs	r1, #42	; 0x2a
 800e61e:	4806      	ldr	r0, [pc, #24]	; (800e638 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800e620:	f010 f9b4 	bl	801e98c <__assert_func>
}
 800e624:	bf00      	nop
 800e626:	bd80      	pop	{r7, pc}
 800e628:	080210ec 	.word	0x080210ec
 800e62c:	20010754 	.word	0x20010754
 800e630:	08020710 	.word	0x08020710
 800e634:	0802075c 	.word	0x0802075c
 800e638:	0802078c 	.word	0x0802078c
 800e63c:	080210f0 	.word	0x080210f0
 800e640:	20010758 	.word	0x20010758
 800e644:	080207b8 	.word	0x080207b8

0800e648 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 800e64c:	4b04      	ldr	r3, [pc, #16]	; (800e660 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f04f 31ff 	mov.w	r1, #4294967295
 800e654:	4618      	mov	r0, r3
 800e656:	f7f9 fa01 	bl	8007a5c <osSemaphoreWait>
}
 800e65a:	bf00      	nop
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20010754 	.word	0x20010754

0800e664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800e664:	b580      	push	{r7, lr}
 800e666:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800e668:	4b03      	ldr	r3, [pc, #12]	; (800e678 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f9 fa43 	bl	8007af8 <osSemaphoreRelease>
}
 800e672:	bf00      	nop
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20010754 	.word	0x20010754

0800e67c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 800e680:	4b03      	ldr	r3, [pc, #12]	; (800e690 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2100      	movs	r1, #0
 800e686:	4618      	mov	r0, r3
 800e688:	f7f9 f9e8 	bl	8007a5c <osSemaphoreWait>
}
 800e68c:	bf00      	nop
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20010754 	.word	0x20010754

0800e694 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800e694:	b580      	push	{r7, lr}
 800e696:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 800e698:	4b03      	ldr	r3, [pc, #12]	; (800e6a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7f9 fa2b 	bl	8007af8 <osSemaphoreRelease>
}
 800e6a2:	bf00      	nop
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20010754 	.word	0x20010754

0800e6ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7f9 fa1f 	bl	8007af8 <osSemaphoreRelease>
}
 800e6ba:	bf00      	nop
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20010758 	.word	0x20010758

0800e6c4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 800e6c8:	4b07      	ldr	r3, [pc, #28]	; (800e6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7f9 f9c4 	bl	8007a5c <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 800e6d4:	4b04      	ldr	r3, [pc, #16]	; (800e6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f04f 31ff 	mov.w	r1, #4294967295
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7f9 f9bd 	bl	8007a5c <osSemaphoreWait>
}
 800e6e2:	bf00      	nop
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20010758 	.word	0x20010758

0800e6ec <__NVIC_EnableIRQ>:
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	db0b      	blt.n	800e716 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	f003 021f 	and.w	r2, r3, #31
 800e704:	4907      	ldr	r1, [pc, #28]	; (800e724 <__NVIC_EnableIRQ+0x38>)
 800e706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e70a:	095b      	lsrs	r3, r3, #5
 800e70c:	2001      	movs	r0, #1
 800e70e:	fa00 f202 	lsl.w	r2, r0, r2
 800e712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e716:	bf00      	nop
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	e000e100 	.word	0xe000e100

0800e728 <__NVIC_DisableIRQ>:
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e736:	2b00      	cmp	r3, #0
 800e738:	db12      	blt.n	800e760 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	f003 021f 	and.w	r2, r3, #31
 800e740:	490a      	ldr	r1, [pc, #40]	; (800e76c <__NVIC_DisableIRQ+0x44>)
 800e742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e746:	095b      	lsrs	r3, r3, #5
 800e748:	2001      	movs	r0, #1
 800e74a:	fa00 f202 	lsl.w	r2, r0, r2
 800e74e:	3320      	adds	r3, #32
 800e750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e754:	f3bf 8f4f 	dsb	sy
}
 800e758:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e75a:	f3bf 8f6f 	isb	sy
}
 800e75e:	bf00      	nop
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	e000e100 	.word	0xe000e100

0800e770 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
        : color(0)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	601a      	str	r2, [r3, #0]
    }
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
        return color;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
    }
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    {
 800e7ac:	4a04      	ldr	r2, [pc, #16]	; (800e7c0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	601a      	str	r2, [r3, #0]
    }
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	0802114c 	.word	0x0802114c

0800e7c4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
    }
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7ff ffe9 	bl	800e7a4 <_ZN8touchgfx9DMA_QueueD1Ev>
 800e7d2:	2104      	movs	r1, #4
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f010 f8aa 	bl	801e92e <_ZdlPvj>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3344      	adds	r3, #68	; 0x44
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	4798      	blx	r3
    }
 800e7f8:	bf00      	nop
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
    {
 800e808:	4a04      	ldr	r2, [pc, #16]	; (800e81c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	601a      	str	r2, [r3, #0]
    }
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	080214c4 	.word	0x080214c4

0800e820 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
    }
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7ff ffe9 	bl	800e800 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800e82e:	210c      	movs	r1, #12
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f010 f87c 	bl	801e92e <_ZdlPvj>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	4618      	mov	r0, r3
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800e84a:	4a09      	ldr	r2, [pc, #36]	; (800e870 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	601a      	str	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	605a      	str	r2, [r3, #4]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	721a      	strb	r2, [r3, #8]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	725a      	strb	r2, [r3, #9]
    {
    }
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	080214c4 	.word	0x080214c4

0800e874 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800e87c:	2301      	movs	r3, #1
    }
 800e87e:	4618      	mov	r0, r3
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b082      	sub	sp, #8
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3328      	adds	r3, #40	; 0x28
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4610      	mov	r0, r2
 800e89e:	4798      	blx	r3
    }
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3314      	adds	r3, #20
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4610      	mov	r0, r2
 800e8c0:	4798      	blx	r3
    }
 800e8c2:	bf00      	nop
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800e8d2:	f7fc fad3 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff ffe5 	bl	800e8a8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800e8de:	bf00      	nop
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff ff3c 	bl	800e770 <_ZN8touchgfx9colortypeC1Ev>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
	...

0800e904 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800e904:	b5b0      	push	{r4, r5, r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	330c      	adds	r3, #12
 800e912:	4619      	mov	r1, r3
 800e914:	4610      	mov	r0, r2
 800e916:	f7ff ff93 	bl	800e840 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800e91a:	4a0e      	ldr	r2, [pc, #56]	; (800e954 <_ZN8STM32DMAC1Ev+0x50>)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f103 000c 	add.w	r0, r3, #12
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3320      	adds	r3, #32
 800e92a:	2260      	movs	r2, #96	; 0x60
 800e92c:	4619      	mov	r1, r3
 800e92e:	f002 fb8b 	bl	8011048 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3320      	adds	r3, #32
 800e936:	245f      	movs	r4, #95	; 0x5f
 800e938:	461d      	mov	r5, r3
 800e93a:	2c00      	cmp	r4, #0
 800e93c:	db05      	blt.n	800e94a <_ZN8STM32DMAC1Ev+0x46>
 800e93e:	4628      	mov	r0, r5
 800e940:	f7ff ffd1 	bl	800e8e6 <_ZN8touchgfx6BlitOpC1Ev>
 800e944:	3524      	adds	r5, #36	; 0x24
 800e946:	3c01      	subs	r4, #1
 800e948:	e7f7      	b.n	800e93a <_ZN8STM32DMAC1Ev+0x36>
{
}
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4618      	mov	r0, r3
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bdb0      	pop	{r4, r5, r7, pc}
 800e954:	080210fc 	.word	0x080210fc

0800e958 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	4a09      	ldr	r2, [pc, #36]	; (800e988 <_ZN8STM32DMAD1Ev+0x30>)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800e966:	205a      	movs	r0, #90	; 0x5a
 800e968:	f7ff fede 	bl	800e728 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	330c      	adds	r3, #12
 800e970:	4618      	mov	r0, r3
 800e972:	f000 faaf 	bl	800eed4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff ff41 	bl	800e800 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	080210fc 	.word	0x080210fc

0800e98c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
}
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff ffdf 	bl	800e958 <_ZN8STM32DMAD1Ev>
 800e99a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f00f ffc5 	bl	801e92e <_ZdlPvj>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
	...

0800e9b0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e9b8:	4b10      	ldr	r3, [pc, #64]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9bc:	4a0f      	ldr	r2, [pc, #60]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9c2:	6313      	str	r3, [r2, #48]	; 0x30
 800e9c4:	4b0d      	ldr	r3, [pc, #52]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	4a09      	ldr	r2, [pc, #36]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9da:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800e9dc:	4b07      	ldr	r3, [pc, #28]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	4a06      	ldr	r2, [pc, #24]	; (800e9fc <_ZN8STM32DMA10initializeEv+0x4c>)
 800e9e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e9e6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800e9e8:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <_ZN8STM32DMA10initializeEv+0x50>)
 800e9ea:	4a06      	ldr	r2, [pc, #24]	; (800ea04 <_ZN8STM32DMA10initializeEv+0x54>)
 800e9ec:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800e9ee:	205a      	movs	r0, #90	; 0x5a
 800e9f0:	f7ff fe7c 	bl	800e6ec <__NVIC_EnableIRQ>
}
 800e9f4:	bf00      	nop
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	40023800 	.word	0x40023800
 800ea00:	2000015c 	.word	0x2000015c
 800ea04:	0800e8cb 	.word	0x0800e8cb

0800ea08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	460b      	mov	r3, r1
 800ea12:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ea14:	2300      	movs	r3, #0
 800ea16:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ea18:	78fb      	ldrb	r3, [r7, #3]
 800ea1a:	2b0b      	cmp	r3, #11
 800ea1c:	d826      	bhi.n	800ea6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800ea1e:	a201      	add	r2, pc, #4	; (adr r2, 800ea24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea61 	.word	0x0800ea61
 800ea28:	0800ea5b 	.word	0x0800ea5b
 800ea2c:	0800ea55 	.word	0x0800ea55
 800ea30:	0800ea6d 	.word	0x0800ea6d
 800ea34:	0800ea6d 	.word	0x0800ea6d
 800ea38:	0800ea6d 	.word	0x0800ea6d
 800ea3c:	0800ea6d 	.word	0x0800ea6d
 800ea40:	0800ea67 	.word	0x0800ea67
 800ea44:	0800ea67 	.word	0x0800ea67
 800ea48:	0800ea67 	.word	0x0800ea67
 800ea4c:	0800ea67 	.word	0x0800ea67
 800ea50:	0800ea67 	.word	0x0800ea67
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ea54:	2300      	movs	r3, #0
 800ea56:	60fb      	str	r3, [r7, #12]
        break;
 800ea58:	e00e      	b.n	800ea78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	60fb      	str	r3, [r7, #12]
        break;
 800ea5e:	e00b      	b.n	800ea78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800ea60:	2302      	movs	r3, #2
 800ea62:	60fb      	str	r3, [r7, #12]
        break;
 800ea64:	e008      	b.n	800ea78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800ea66:	2305      	movs	r3, #5
 800ea68:	60fb      	str	r3, [r7, #12]
        break;
 800ea6a:	e005      	b.n	800ea78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800ea6e:	4a06      	ldr	r2, [pc, #24]	; (800ea88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800ea70:	2166      	movs	r1, #102	; 0x66
 800ea72:	4806      	ldr	r0, [pc, #24]	; (800ea8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800ea74:	f00f ff8a 	bl	801e98c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800ea78:	68fb      	ldr	r3, [r7, #12]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	080207f4 	.word	0x080207f4
 800ea88:	08020810 	.word	0x08020810
 800ea8c:	0802085c 	.word	0x0802085c

0800ea90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]

    switch (format)
 800eaa0:	78fb      	ldrb	r3, [r7, #3]
 800eaa2:	2b0a      	cmp	r3, #10
 800eaa4:	d821      	bhi.n	800eaea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800eaa6:	a201      	add	r2, pc, #4	; (adr r2, 800eaac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800eaa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaac:	0800eae5 	.word	0x0800eae5
 800eab0:	0800eadf 	.word	0x0800eadf
 800eab4:	0800ead9 	.word	0x0800ead9
 800eab8:	0800eaeb 	.word	0x0800eaeb
 800eabc:	0800eaeb 	.word	0x0800eaeb
 800eac0:	0800eaeb 	.word	0x0800eaeb
 800eac4:	0800eaeb 	.word	0x0800eaeb
 800eac8:	0800eadf 	.word	0x0800eadf
 800eacc:	0800eadf 	.word	0x0800eadf
 800ead0:	0800eadf 	.word	0x0800eadf
 800ead4:	0800eadf 	.word	0x0800eadf
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ead8:	2300      	movs	r3, #0
 800eada:	60fb      	str	r3, [r7, #12]
        break;
 800eadc:	e00b      	b.n	800eaf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800eade:	2301      	movs	r3, #1
 800eae0:	60fb      	str	r3, [r7, #12]
        break;
 800eae2:	e008      	b.n	800eaf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800eae4:	2302      	movs	r3, #2
 800eae6:	60fb      	str	r3, [r7, #12]
        break;
 800eae8:	e005      	b.n	800eaf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800eaec:	4a05      	ldr	r2, [pc, #20]	; (800eb04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800eaee:	2187      	movs	r1, #135	; 0x87
 800eaf0:	4805      	ldr	r0, [pc, #20]	; (800eb08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800eaf2:	f00f ff4b 	bl	801e98c <__assert_func>
        break;
    }

    return dma2dColorMode;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	080207f4 	.word	0x080207f4
 800eb04:	08020888 	.word	0x08020888
 800eb08:	0802085c 	.word	0x0802085c

0800eb0c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800eb14:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b089      	sub	sp, #36	; 0x24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	7f5b      	ldrb	r3, [r3, #29]
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ff67 	bl	800ea08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb3a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	7f9b      	ldrb	r3, [r3, #30]
 800eb40:	4619      	mov	r1, r3
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ff60 	bl	800ea08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb48:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	7f9b      	ldrb	r3, [r3, #30]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff ff9d 	bl	800ea90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800eb56:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	8b5b      	ldrh	r3, [r3, #26]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	8a9b      	ldrh	r3, [r3, #20]
 800eb62:	1ad2      	subs	r2, r2, r3
 800eb64:	4b92      	ldr	r3, [pc, #584]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eb66:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	8b5b      	ldrh	r3, [r3, #26]
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	8a9b      	ldrh	r3, [r3, #20]
 800eb72:	1ad2      	subs	r2, r2, r3
 800eb74:	4b8e      	ldr	r3, [pc, #568]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eb76:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	8b1b      	ldrh	r3, [r3, #24]
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	8a9b      	ldrh	r3, [r3, #20]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	4b8a      	ldr	r3, [pc, #552]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eb86:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800eb88:	4a89      	ldr	r2, [pc, #548]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	8adb      	ldrh	r3, [r3, #22]
 800eb92:	461a      	mov	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	8a9b      	ldrh	r3, [r3, #20]
 800eb98:	041b      	lsls	r3, r3, #16
 800eb9a:	431a      	orrs	r2, r3
 800eb9c:	4b84      	ldr	r3, [pc, #528]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eb9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	691a      	ldr	r2, [r3, #16]
 800eba4:	4b82      	ldr	r3, [pc, #520]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eba6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	685a      	ldr	r2, [r3, #4]
 800ebac:	4b80      	ldr	r3, [pc, #512]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ebae:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebb8:	d037      	beq.n	800ec2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800ebba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebbe:	f200 80e3 	bhi.w	800ed88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ebc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebc6:	d015      	beq.n	800ebf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800ebc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebcc:	f200 80dc 	bhi.w	800ed88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ebd0:	2b80      	cmp	r3, #128	; 0x80
 800ebd2:	d045      	beq.n	800ec60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800ebd4:	2b80      	cmp	r3, #128	; 0x80
 800ebd6:	f200 80d7 	bhi.w	800ed88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ebda:	2b40      	cmp	r3, #64	; 0x40
 800ebdc:	f000 80bf 	beq.w	800ed5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800ebe0:	2b40      	cmp	r3, #64	; 0x40
 800ebe2:	f200 80d1 	bhi.w	800ed88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ebe6:	2b04      	cmp	r3, #4
 800ebe8:	f000 80a4 	beq.w	800ed34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800ebec:	2b20      	cmp	r3, #32
 800ebee:	f000 80b6 	beq.w	800ed5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800ebf2:	e0c9      	b.n	800ed88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	7f1b      	ldrb	r3, [r3, #28]
 800ebf8:	061b      	lsls	r3, r3, #24
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4a6c      	ldr	r2, [pc, #432]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ebfe:	4b6d      	ldr	r3, [pc, #436]	; (800edb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800ec00:	430b      	orrs	r3, r1
 800ec02:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	330c      	adds	r3, #12
 800ec08:	4c69      	ldr	r4, [pc, #420]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff fdbe 	bl	800e78c <_ZNK8touchgfx9colortypecvmEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec14:	4a66      	ldr	r2, [pc, #408]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	691a      	ldr	r2, [r3, #16]
 800ec1e:	4b64      	ldr	r3, [pc, #400]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec20:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ec22:	4b63      	ldr	r3, [pc, #396]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec24:	4a64      	ldr	r2, [pc, #400]	; (800edb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ec26:	601a      	str	r2, [r3, #0]
        break;
 800ec28:	e0d9      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	7f1b      	ldrb	r3, [r3, #28]
 800ec2e:	061b      	lsls	r3, r3, #24
 800ec30:	4619      	mov	r1, r3
 800ec32:	4a5f      	ldr	r2, [pc, #380]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec34:	4b61      	ldr	r3, [pc, #388]	; (800edbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800ec36:	430b      	orrs	r3, r1
 800ec38:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	330c      	adds	r3, #12
 800ec3e:	4c5c      	ldr	r4, [pc, #368]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fda3 	bl	800e78c <_ZNK8touchgfx9colortypecvmEv>
 800ec46:	4603      	mov	r3, r0
 800ec48:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec4a:	4a59      	ldr	r2, [pc, #356]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	691a      	ldr	r2, [r3, #16]
 800ec54:	4b56      	ldr	r3, [pc, #344]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec56:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ec58:	4b55      	ldr	r3, [pc, #340]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec5a:	4a57      	ldr	r2, [pc, #348]	; (800edb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ec5c:	601a      	str	r2, [r3, #0]
        break;
 800ec5e:	e0be      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800ec66:	2301      	movs	r3, #1
 800ec68:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	7f1b      	ldrb	r3, [r3, #28]
 800ec6e:	061b      	lsls	r3, r3, #24
 800ec70:	461a      	mov	r2, r3
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	4313      	orrs	r3, r2
 800ec76:	4a4e      	ldr	r2, [pc, #312]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec7c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ec7e:	4a4c      	ldr	r2, [pc, #304]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	691a      	ldr	r2, [r3, #16]
 800ec88:	4b49      	ldr	r3, [pc, #292]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec8a:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	4b47      	ldr	r3, [pc, #284]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ec92:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d00d      	beq.n	800ecbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800eca2:	e020      	b.n	800ece6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800eca4:	4b42      	ldr	r3, [pc, #264]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eca6:	69da      	ldr	r2, [r3, #28]
 800eca8:	4b45      	ldr	r3, [pc, #276]	; (800edc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ecaa:	4013      	ands	r3, r2
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	8852      	ldrh	r2, [r2, #2]
 800ecb0:	3a01      	subs	r2, #1
 800ecb2:	0212      	lsls	r2, r2, #8
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	4a3e      	ldr	r2, [pc, #248]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ecb8:	430b      	orrs	r3, r1
 800ecba:	61d3      	str	r3, [r2, #28]
                break;
 800ecbc:	e01a      	b.n	800ecf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	7f1b      	ldrb	r3, [r3, #28]
 800ecc2:	2bff      	cmp	r3, #255	; 0xff
 800ecc4:	d101      	bne.n	800ecca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ecca:	4b39      	ldr	r3, [pc, #228]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800eccc:	69da      	ldr	r2, [r3, #28]
 800ecce:	4b3c      	ldr	r3, [pc, #240]	; (800edc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	8852      	ldrh	r2, [r2, #2]
 800ecd6:	3a01      	subs	r2, #1
 800ecd8:	0212      	lsls	r2, r2, #8
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	4a34      	ldr	r2, [pc, #208]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ecde:	f043 0310 	orr.w	r3, r3, #16
 800ece2:	61d3      	str	r3, [r2, #28]
                break;
 800ece4:	e006      	b.n	800ecf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800ece6:	4b37      	ldr	r3, [pc, #220]	; (800edc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ece8:	4a37      	ldr	r2, [pc, #220]	; (800edc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800ecea:	f240 1101 	movw	r1, #257	; 0x101
 800ecee:	4837      	ldr	r0, [pc, #220]	; (800edcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800ecf0:	f00f fe4c 	bl	801e98c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800ecf4:	4b2e      	ldr	r3, [pc, #184]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ecf6:	69db      	ldr	r3, [r3, #28]
 800ecf8:	4a2d      	ldr	r2, [pc, #180]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ecfa:	f043 0320 	orr.w	r3, r3, #32
 800ecfe:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ed00:	4b2b      	ldr	r3, [pc, #172]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	f003 0320 	and.w	r3, r3, #32
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bf14      	ite	ne
 800ed0c:	2301      	movne	r3, #1
 800ed0e:	2300      	moveq	r3, #0
 800ed10:	b2db      	uxtb	r3, r3
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d000      	beq.n	800ed18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 800ed16:	e7f3      	b.n	800ed00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800ed18:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed1a:	2210      	movs	r2, #16
 800ed1c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800ed1e:	7ffb      	ldrb	r3, [r7, #31]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ed24:	4b22      	ldr	r3, [pc, #136]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed26:	4a24      	ldr	r2, [pc, #144]	; (800edb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ed28:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800ed2a:	e058      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800ed2c:	4b20      	ldr	r3, [pc, #128]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed2e:	4a28      	ldr	r2, [pc, #160]	; (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800ed30:	601a      	str	r2, [r3, #0]
        break;
 800ed32:	e054      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	7f1b      	ldrb	r3, [r3, #28]
 800ed38:	061b      	lsls	r3, r3, #24
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	4a1b      	ldr	r2, [pc, #108]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed46:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ed48:	4a19      	ldr	r2, [pc, #100]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	691a      	ldr	r2, [r3, #16]
 800ed52:	4b17      	ldr	r3, [pc, #92]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed54:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ed56:	4b16      	ldr	r3, [pc, #88]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed58:	4a17      	ldr	r2, [pc, #92]	; (800edb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ed5a:	601a      	str	r2, [r3, #0]
        break;
 800ed5c:	e03f      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	7f1b      	ldrb	r3, [r3, #28]
 800ed62:	061b      	lsls	r3, r3, #24
 800ed64:	461a      	mov	r2, r3
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	4a11      	ldr	r2, [pc, #68]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed70:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ed72:	4a0f      	ldr	r2, [pc, #60]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	691a      	ldr	r2, [r3, #16]
 800ed7c:	4b0c      	ldr	r3, [pc, #48]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed7e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800ed80:	4b0b      	ldr	r3, [pc, #44]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed82:	4a0d      	ldr	r2, [pc, #52]	; (800edb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800ed84:	601a      	str	r2, [r3, #0]
        break;
 800ed86:	e02a      	b.n	800edde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	7f1b      	ldrb	r3, [r3, #28]
 800ed8c:	061b      	lsls	r3, r3, #24
 800ed8e:	461a      	mov	r2, r3
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	4313      	orrs	r3, r2
 800ed94:	4a06      	ldr	r2, [pc, #24]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ed96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed9a:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	7f5a      	ldrb	r2, [r3, #29]
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	7f9b      	ldrb	r3, [r3, #30]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d015      	beq.n	800edd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800eda8:	4b01      	ldr	r3, [pc, #4]	; (800edb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800edaa:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800edac:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800edae:	e015      	b.n	800eddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800edb0:	4002b000 	.word	0x4002b000
 800edb4:	0002000a 	.word	0x0002000a
 800edb8:	00020201 	.word	0x00020201
 800edbc:	00020009 	.word	0x00020009
 800edc0:	ffff00ef 	.word	0xffff00ef
 800edc4:	080208d4 	.word	0x080208d4
 800edc8:	080208f0 	.word	0x080208f0
 800edcc:	0802085c 	.word	0x0802085c
 800edd0:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800edd4:	4b04      	ldr	r3, [pc, #16]	; (800ede8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800edd6:	f240 2201 	movw	r2, #513	; 0x201
 800edda:	601a      	str	r2, [r3, #0]
        break;
 800eddc:	bf00      	nop
    }
}
 800edde:	bf00      	nop
 800ede0:	3724      	adds	r7, #36	; 0x24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd90      	pop	{r4, r7, pc}
 800ede6:	bf00      	nop
 800ede8:	4002b000 	.word	0x4002b000

0800edec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	7f9b      	ldrb	r3, [r3, #30]
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff fe47 	bl	800ea90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ee02:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800ee04:	4a2f      	ldr	r2, [pc, #188]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	8adb      	ldrh	r3, [r3, #22]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	8a9b      	ldrh	r3, [r3, #20]
 800ee14:	041b      	lsls	r3, r3, #16
 800ee16:	431a      	orrs	r2, r3
 800ee18:	4b2a      	ldr	r3, [pc, #168]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	691a      	ldr	r2, [r3, #16]
 800ee20:	4b28      	ldr	r3, [pc, #160]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	8b5b      	ldrh	r3, [r3, #26]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	8a9b      	ldrh	r3, [r3, #20]
 800ee2e:	1ad2      	subs	r2, r2, r3
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee32:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d12e      	bne.n	800ee9a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	8b5b      	ldrh	r3, [r3, #26]
 800ee40:	461a      	mov	r2, r3
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	8a9b      	ldrh	r3, [r3, #20]
 800ee46:	1ad2      	subs	r2, r2, r3
 800ee48:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee4a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	8b5b      	ldrh	r3, [r3, #26]
 800ee50:	461a      	mov	r2, r3
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	8a9b      	ldrh	r3, [r3, #20]
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee5a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ee5c:	4a19      	ldr	r2, [pc, #100]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	7f1b      	ldrb	r3, [r3, #28]
 800ee66:	061b      	lsls	r3, r3, #24
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4a16      	ldr	r2, [pc, #88]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee6c:	4b16      	ldr	r3, [pc, #88]	; (800eec8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800ee6e:	430b      	orrs	r3, r1
 800ee70:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	330c      	adds	r3, #12
 800ee76:	4c13      	ldr	r4, [pc, #76]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff fc87 	bl	800e78c <_ZNK8touchgfx9colortypecvmEv>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	691a      	ldr	r2, [r3, #16]
 800ee86:	4b0f      	ldr	r3, [pc, #60]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee88:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	691a      	ldr	r2, [r3, #16]
 800ee8e:	4b0d      	ldr	r3, [pc, #52]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee90:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800ee92:	4b0c      	ldr	r3, [pc, #48]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee94:	4a0d      	ldr	r2, [pc, #52]	; (800eecc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800ee96:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800ee98:	e010      	b.n	800eebc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800ee9a:	4a0a      	ldr	r2, [pc, #40]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800eea0:	4b08      	ldr	r3, [pc, #32]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	330c      	adds	r3, #12
 800eeaa:	4c06      	ldr	r4, [pc, #24]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff fc6d 	bl	800e78c <_ZNK8touchgfx9colortypecvmEv>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800eeb6:	4b03      	ldr	r3, [pc, #12]	; (800eec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800eeb8:	4a05      	ldr	r2, [pc, #20]	; (800eed0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800eeba:	601a      	str	r2, [r3, #0]
}
 800eebc:	bf00      	nop
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd90      	pop	{r4, r7, pc}
 800eec4:	4002b000 	.word	0x4002b000
 800eec8:	00010009 	.word	0x00010009
 800eecc:	00020201 	.word	0x00020201
 800eed0:	00030201 	.word	0x00030201

0800eed4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	4a05      	ldr	r2, [pc, #20]	; (800eef4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff fc5d 	bl	800e7a4 <_ZN8touchgfx9DMA_QueueD1Ev>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	08021514 	.word	0x08021514

0800eef8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff ffe7 	bl	800eed4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ef06:	2114      	movs	r1, #20
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f00f fd10 	bl	801e92e <_ZdlPvj>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800ef20:	4a04      	ldr	r2, [pc, #16]	; (800ef34 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6013      	str	r3, [r2, #0]
    }
 800ef26:	bf00      	nop
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	20011974 	.word	0x20011974

0800ef38 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
 800ef44:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800ef46:	4a0b      	ldr	r2, [pc, #44]	; (800ef74 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	605a      	str	r2, [r3, #4]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	609a      	str	r2, [r3, #8]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	683a      	ldr	r2, [r7, #0]
 800ef5c:	60da      	str	r2, [r3, #12]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	69ba      	ldr	r2, [r7, #24]
 800ef62:	611a      	str	r2, [r3, #16]
    {
    }
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4618      	mov	r0, r3
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	08021234 	.word	0x08021234

0800ef78 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
    {
 800ef80:	4a04      	ldr	r2, [pc, #16]	; (800ef94 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	601a      	str	r2, [r3, #0]
    }
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	08021234 	.word	0x08021234

0800ef98 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    }
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff ffe9 	bl	800ef78 <_ZN8touchgfx7MVPHeapD1Ev>
 800efa6:	2114      	movs	r1, #20
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f00f fcc0 	bl	801e92e <_ZdlPvj>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
    {
 800efc0:	4a04      	ldr	r2, [pc, #16]	; (800efd4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	601a      	str	r2, [r3, #0]
    }
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	08021814 	.word	0x08021814

0800efd8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
    }
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff ffe9 	bl	800efb8 <_ZN8touchgfx3LCDD1Ev>
 800efe6:	2108      	movs	r1, #8
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f00f fca0 	bl	801e92e <_ZdlPvj>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	801a      	strh	r2, [r3, #0]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	805a      	strh	r2, [r3, #2]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	809a      	strh	r2, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	80da      	strh	r2, [r3, #6]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	811a      	strh	r2, [r3, #8]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	815a      	strh	r2, [r3, #10]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	819a      	strh	r2, [r3, #12]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2200      	movs	r2, #0
 800f02e:	739a      	strb	r2, [r3, #14]
        {
        }
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	370c      	adds	r7, #12
 800f036:	46bd      	mov	sp, r7
 800f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03c:	4770      	bx	lr

0800f03e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800f03e:	b580      	push	{r7, lr}
 800f040:	b082      	sub	sp, #8
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff ffd5 	bl	800eff8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	611a      	str	r2, [r3, #16]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	829a      	strh	r2, [r3, #20]
    {
    }
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800f072:	4a55      	ldr	r2, [pc, #340]	; (800f1c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	605a      	str	r2, [r3, #4]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	609a      	str	r2, [r3, #8]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	60da      	str	r2, [r3, #12]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	611a      	str	r2, [r3, #16]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2200      	movs	r2, #0
 800f094:	615a      	str	r2, [r3, #20]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	619a      	str	r2, [r3, #24]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	331c      	adds	r3, #28
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff ffcc 	bl	800f03e <_ZN8touchgfx8GesturesC1Ev>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	639a      	str	r2, [r3, #56]	; 0x38
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	641a      	str	r2, [r3, #64]	; 0x40
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	645a      	str	r2, [r3, #68]	; 0x44
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	64da      	str	r2, [r3, #76]	; 0x4c
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	3350      	adds	r3, #80	; 0x50
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fb fc17 	bl	800a924 <_ZN8touchgfx4RectC1Ev>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	659a      	str	r2, [r3, #88]	; 0x58
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2200      	movs	r2, #0
 800f100:	65da      	str	r2, [r3, #92]	; 0x5c
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	661a      	str	r2, [r3, #96]	; 0x60
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2200      	movs	r2, #0
 800f11c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2201      	movs	r2, #1
 800f124:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2200      	movs	r2, #0
 800f154:	671a      	str	r2, [r3, #112]	; 0x70
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 800f17e:	4a13      	ldr	r2, [pc, #76]	; (800f1cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800f184:	4a12      	ldr	r2, [pc, #72]	; (800f1d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800f186:	8b3b      	ldrh	r3, [r7, #24]
 800f188:	8013      	strh	r3, [r2, #0]
 800f18a:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800f18c:	881a      	ldrh	r2, [r3, #0]
 800f18e:	4b11      	ldr	r3, [pc, #68]	; (800f1d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800f190:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800f192:	4a11      	ldr	r2, [pc, #68]	; (800f1d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800f194:	8bbb      	ldrh	r3, [r7, #28]
 800f196:	8013      	strh	r3, [r2, #0]
 800f198:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800f19a:	881a      	ldrh	r2, [r3, #0]
 800f19c:	4b0f      	ldr	r3, [pc, #60]	; (800f1dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800f19e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800f1a0:	4b0f      	ldr	r3, [pc, #60]	; (800f1e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800f1a6:	8b3a      	ldrh	r2, [r7, #24]
 800f1a8:	8bbb      	ldrh	r3, [r7, #28]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	bf34      	ite	cc
 800f1ae:	2301      	movcc	r3, #1
 800f1b0:	2300      	movcs	r3, #0
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	080213ec 	.word	0x080213ec
 800f1cc:	20011918 	.word	0x20011918
 800f1d0:	2001190a 	.word	0x2001190a
 800f1d4:	20011910 	.word	0x20011910
 800f1d8:	2001190c 	.word	0x2001190c
 800f1dc:	20011912 	.word	0x20011912
 800f1e0:	2001190e 	.word	0x2001190e

0800f1e4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fc f8b1 	bl	800b358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
	...

0800f200 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af02      	add	r7, sp, #8
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
 800f20c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	f7ff fe8d 	bl	800ef38 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800f21e:	4a04      	ldr	r2, [pc, #16]	; (800f230 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	601a      	str	r2, [r3, #0]
    {

    }
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	08021220 	.word	0x08021220

0800f234 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800f234:	b580      	push	{r7, lr}
 800f236:	af00      	add	r7, sp, #0
 800f238:	4801      	ldr	r0, [pc, #4]	; (800f240 <__tcf_0+0xc>)
 800f23a:	f000 f967 	bl	800f50c <_ZN12FrontendHeapD1Ev>
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	2001075c 	.word	0x2001075c

0800f244 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800f248:	4b12      	ldr	r3, [pc, #72]	; (800f294 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	f3bf 8f5b 	dmb	ish
 800f250:	b2db      	uxtb	r3, r3
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	2b00      	cmp	r3, #0
 800f258:	bf0c      	ite	eq
 800f25a:	2301      	moveq	r3, #1
 800f25c:	2300      	movne	r3, #0
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d013      	beq.n	800f28c <_ZN12FrontendHeap11getInstanceEv+0x48>
 800f264:	480b      	ldr	r0, [pc, #44]	; (800f294 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800f266:	f00f fb64 	bl	801e932 <__cxa_guard_acquire>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bf14      	ite	ne
 800f270:	2301      	movne	r3, #1
 800f272:	2300      	moveq	r3, #0
 800f274:	b2db      	uxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	d008      	beq.n	800f28c <_ZN12FrontendHeap11getInstanceEv+0x48>
 800f27a:	4807      	ldr	r0, [pc, #28]	; (800f298 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800f27c:	f000 f868 	bl	800f350 <_ZN12FrontendHeapC1Ev>
 800f280:	4806      	ldr	r0, [pc, #24]	; (800f29c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 800f282:	f00f fba1 	bl	801e9c8 <atexit>
 800f286:	4803      	ldr	r0, [pc, #12]	; (800f294 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800f288:	f00f fb5f 	bl	801e94a <__cxa_guard_release>
        return instance;
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 800f28e:	4618      	mov	r0, r3
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	20010a84 	.word	0x20010a84
 800f298:	2001075c 	.word	0x2001075c
 800f29c:	0800f235 	.word	0x0800f235

0800f2a0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	4a05      	ldr	r2, [pc, #20]	; (800f2c0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff fe61 	bl	800ef78 <_ZN8touchgfx7MVPHeapD1Ev>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	08021220 	.word	0x08021220

0800f2c4 <_ZN16FrontendHeapBaseD0Ev>:
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff ffe7 	bl	800f2a0 <_ZN16FrontendHeapBaseD1Ev>
 800f2d2:	2114      	movs	r1, #20
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f00f fb2a 	bl	801e92e <_ZdlPvj>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 fd32 	bl	800fd58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f2f4:	4a03      	ldr	r2, [pc, #12]	; (800f304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	080211ec 	.word	0x080211ec

0800f308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4618      	mov	r0, r3
 800f314:	f000 fd20 	bl	800fd58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f318:	4a03      	ldr	r2, [pc, #12]	; (800f328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	080211b8 	.word	0x080211b8

0800f32c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4618      	mov	r0, r3
 800f338:	f000 fd0e 	bl	800fd58 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f33c:	4a03      	ldr	r2, [pc, #12]	; (800f34c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	601a      	str	r2, [r3, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4618      	mov	r0, r3
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	08021184 	.word	0x08021184

0800f350 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800f350:	b590      	push	{r4, r7, lr}
 800f352:	b085      	sub	sp, #20
 800f354:	af02      	add	r7, sp, #8
 800f356:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f103 0114 	add.w	r1, r3, #20
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f503 74c0 	add.w	r4, r3, #384	; 0x180
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
                     app(model, *this)
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	4623      	mov	r3, r4
 800f376:	f7ff ff43 	bl	800f200 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800f37a:	4a18      	ldr	r2, [pc, #96]	; (800f3dc <_ZN12FrontendHeapC1Ev+0x8c>)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3314      	adds	r3, #20
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff ffad 	bl	800f2e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	332c      	adds	r3, #44	; 0x2c
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff ffba 	bl	800f308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff ffc6 	bl	800f32c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fb92 	bl	800dad0 <_ZN5ModelC1Ev>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f503 70e6 	add.w	r0, r3, #460	; 0x1cc
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	f7fe fb72 	bl	800daa4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7ff ff0a 	bl	800f1e4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	08021170 	.word	0x08021170

0800f3e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af02      	add	r7, sp, #8
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	8bbb      	ldrh	r3, [r7, #28]
 800f3f2:	9301      	str	r3, [sp, #4]
 800f3f4:	8b3b      	ldrh	r3, [r7, #24]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	68b9      	ldr	r1, [r7, #8]
 800f3fe:	f7ff fe31 	bl	800f064 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800f402:	4a04      	ldr	r2, [pc, #16]	; (800f414 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	601a      	str	r2, [r3, #0]
    }
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	4618      	mov	r0, r3
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	08021244 	.word	0x08021244

0800f418 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af02      	add	r7, sp, #8
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	603b      	str	r3, [r7, #0]
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	8bbb      	ldrh	r3, [r7, #28]
 800f42a:	9301      	str	r3, [sp, #4]
 800f42c:	8b3b      	ldrh	r3, [r7, #24]
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	68b9      	ldr	r1, [r7, #8]
 800f436:	f7ff ffd3 	bl	800f3e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f43a:	4a04      	ldr	r2, [pc, #16]	; (800f44c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	601a      	str	r2, [r3, #0]
    }
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	0802101c 	.word	0x0802101c

0800f450 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	4a04      	ldr	r2, [pc, #16]	; (800f46c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	08021004 	.word	0x08021004

0800f470 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7ff ffe8 	bl	800f450 <_ZN8touchgfx15TouchControllerC1Ev>
 800f480:	4a03      	ldr	r2, [pc, #12]	; (800f490 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	08020fec 	.word	0x08020fec

0800f494 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b085      	sub	sp, #20
 800f498:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800f49a:	f7fe f8d3 	bl	800d644 <_ZN14BitmapDatabase11getInstanceEv>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	f7fe f8da 	bl	800d658 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f007 f957 	bl	8016764 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800f4b6:	4809      	ldr	r0, [pc, #36]	; (800f4dc <touchgfx_init+0x48>)
 800f4b8:	f7ff fd2e 	bl	800ef18 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7fe fa0f 	bl	800d8e0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800f4c2:	4807      	ldr	r0, [pc, #28]	; (800f4e0 <touchgfx_init+0x4c>)
 800f4c4:	f007 f806 	bl	80164d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800f4c8:	f7ff febc 	bl	800f244 <_ZN12FrontendHeap11getInstanceEv>
 800f4cc:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800f4ce:	4805      	ldr	r0, [pc, #20]	; (800f4e4 <touchgfx_init+0x50>)
 800f4d0:	f7fe ffd2 	bl	800e478 <_ZN11TouchGFXHAL10initializeEv>
}
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd90      	pop	{r4, r7, pc}
 800f4dc:	20011884 	.word	0x20011884
 800f4e0:	2000003c 	.word	0x2000003c
 800f4e4:	20011888 	.word	0x20011888

0800f4e8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
}
 800f4ec:	bf00      	nop
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
	...

0800f4f8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800f4fc:	4802      	ldr	r0, [pc, #8]	; (800f508 <touchgfx_taskEntry+0x10>)
 800f4fe:	f000 ff36 	bl	801036e <_ZN8touchgfx3HAL9taskEntryEv>
}
 800f502:	bf00      	nop
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20011888 	.word	0x20011888

0800f50c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	4a10      	ldr	r2, [pc, #64]	; (800f558 <_ZN12FrontendHeapD1Ev+0x4c>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800f520:	4618      	mov	r0, r3
 800f522:	f7fe fa89 	bl	800da38 <_ZN19FrontendApplicationD1Ev>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 f827 	bl	800f580 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	332c      	adds	r3, #44	; 0x2c
 800f536:	4618      	mov	r0, r3
 800f538:	f000 f844 	bl	800f5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	3314      	adds	r3, #20
 800f540:	4618      	mov	r0, r3
 800f542:	f000 f863 	bl	800f60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff fea9 	bl	800f2a0 <_ZN16FrontendHeapBaseD1Ev>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4618      	mov	r0, r3
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	08021170 	.word	0x08021170

0800f55c <_ZN12FrontendHeapD0Ev>:
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7ff ffd1 	bl	800f50c <_ZN12FrontendHeapD1Ev>
 800f56a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f00f f9dd 	bl	801e92e <_ZdlPvj>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4618      	mov	r0, r3
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	4a05      	ldr	r2, [pc, #20]	; (800f5a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	601a      	str	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4618      	mov	r0, r3
 800f592:	f000 fbe0 	bl	800fd56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4618      	mov	r0, r3
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	08021184 	.word	0x08021184

0800f5a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7ff ffe7 	bl	800f580 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800f5b2:	2148      	movs	r1, #72	; 0x48
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f00f f9ba 	bl	801e92e <_ZdlPvj>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	4a05      	ldr	r2, [pc, #20]	; (800f5e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f000 fbbe 	bl	800fd56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	080211b8 	.word	0x080211b8

0800f5e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ffe7 	bl	800f5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f5f6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f00f f997 	bl	801e92e <_ZdlPvj>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
	...

0800f60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	4a05      	ldr	r2, [pc, #20]	; (800f62c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	601a      	str	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fb9a 	bl	800fd56 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	080211ec 	.word	0x080211ec

0800f630 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff ffe7 	bl	800f60c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f63e:	2118      	movs	r1, #24
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f00f f974 	bl	801e92e <_ZdlPvj>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	4a05      	ldr	r2, [pc, #20]	; (800f670 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff fca9 	bl	800efb8 <_ZN8touchgfx3LCDD1Ev>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4618      	mov	r0, r3
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	08021b80 	.word	0x08021b80

0800f674 <_ZN8touchgfx8LCD24bppD0Ev>:
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ffe7 	bl	800f650 <_ZN8touchgfx8LCD24bppD1Ev>
 800f682:	2158      	movs	r1, #88	; 0x58
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f00f f952 	bl	801e92e <_ZdlPvj>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <_Z41__static_initialization_and_destruction_0ii>:
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af02      	add	r7, sp, #8
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d119      	bne.n	800f6d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d114      	bne.n	800f6d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800f6ae:	4818      	ldr	r0, [pc, #96]	; (800f710 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f6b0:	f7ff fede 	bl	800f470 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800f6b4:	4817      	ldr	r0, [pc, #92]	; (800f714 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f6b6:	f7ff f925 	bl	800e904 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800f6ba:	4817      	ldr	r0, [pc, #92]	; (800f718 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f6bc:	f009 fa62 	bl	8018b84 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800f6c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	4b10      	ldr	r3, [pc, #64]	; (800f710 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f6ce:	4a12      	ldr	r2, [pc, #72]	; (800f718 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f6d0:	4910      	ldr	r1, [pc, #64]	; (800f714 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f6d2:	4812      	ldr	r0, [pc, #72]	; (800f71c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f6d4:	f7ff fea0 	bl	800f418 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d113      	bne.n	800f706 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d10e      	bne.n	800f706 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f6e8:	480c      	ldr	r0, [pc, #48]	; (800f71c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f6ea:	f7fe ff55 	bl	800e598 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800f6ee:	480c      	ldr	r0, [pc, #48]	; (800f720 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800f6f0:	f7fa fe32 	bl	800a358 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800f6f4:	4808      	ldr	r0, [pc, #32]	; (800f718 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f6f6:	f7ff ffab 	bl	800f650 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800f6fa:	4806      	ldr	r0, [pc, #24]	; (800f714 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f6fc:	f7ff f92c 	bl	800e958 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800f700:	4803      	ldr	r0, [pc, #12]	; (800f710 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f702:	f7fe fca5 	bl	800e050 <_ZN20STM32TouchControllerD1Ev>
}
 800f706:	bf00      	nop
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	20010a88 	.word	0x20010a88
 800f714:	20010a8c 	.word	0x20010a8c
 800f718:	2001182c 	.word	0x2001182c
 800f71c:	20011888 	.word	0x20011888
 800f720:	2000003c 	.word	0x2000003c

0800f724 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800f72c:	2301      	movs	r3, #1
    }
 800f72e:	4618      	mov	r0, r3
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800f73a:	b480      	push	{r7}
 800f73c:	b083      	sub	sp, #12
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800f742:	2340      	movs	r3, #64	; 0x40
    }
 800f744:	4618      	mov	r0, r3
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	460b      	mov	r3, r1
 800f75a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800f75c:	887b      	ldrh	r3, [r7, #2]
 800f75e:	019b      	lsls	r3, r3, #6
 800f760:	3308      	adds	r3, #8
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	4413      	add	r3, r2
    }
 800f766:	4618      	mov	r0, r3
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800f772:	b480      	push	{r7}
 800f774:	b083      	sub	sp, #12
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	460b      	mov	r3, r1
 800f77c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800f77e:	887b      	ldrh	r3, [r7, #2]
 800f780:	019b      	lsls	r3, r3, #6
 800f782:	3308      	adds	r3, #8
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	4413      	add	r3, r2
    }
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800f79c:	2301      	movs	r3, #1
    }
 800f79e:	4618      	mov	r0, r3
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800f7b2:	f44f 73a6 	mov.w	r3, #332	; 0x14c
    }
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	370c      	adds	r7, #12
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr

0800f7c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800f7c2:	b480      	push	{r7}
 800f7c4:	b083      	sub	sp, #12
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f7ce:	887b      	ldrh	r3, [r7, #2]
 800f7d0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f7d4:	fb02 f303 	mul.w	r3, r2, r3
 800f7d8:	3308      	adds	r3, #8
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	4413      	add	r3, r2
    }
 800f7de:	4618      	mov	r0, r3
 800f7e0:	370c      	adds	r7, #12
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800f7ea:	b480      	push	{r7}
 800f7ec:	b083      	sub	sp, #12
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f7f6:	887b      	ldrh	r3, [r7, #2]
 800f7f8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f7fc:	fb02 f303 	mul.w	r3, r2, r3
 800f800:	3308      	adds	r3, #8
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	4413      	add	r3, r2
    }
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800f81a:	2301      	movs	r3, #1
    }
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800f830:	2310      	movs	r3, #16
    }
 800f832:	4618      	mov	r0, r3
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800f83e:	b480      	push	{r7}
 800f840:	b083      	sub	sp, #12
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	460b      	mov	r3, r1
 800f848:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f84a:	887b      	ldrh	r3, [r7, #2]
 800f84c:	011b      	lsls	r3, r3, #4
 800f84e:	3308      	adds	r3, #8
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	4413      	add	r3, r2
    }
 800f854:	4618      	mov	r0, r3
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800f86c:	887b      	ldrh	r3, [r7, #2]
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	3308      	adds	r3, #8
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	4413      	add	r3, r2
    }
 800f876:	4618      	mov	r0, r3
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <_GLOBAL__sub_I_touchgfx_init>:
 800f882:	b580      	push	{r7, lr}
 800f884:	af00      	add	r7, sp, #0
 800f886:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f88a:	2001      	movs	r0, #1
 800f88c:	f7ff ff02 	bl	800f694 <_Z41__static_initialization_and_destruction_0ii>
 800f890:	bd80      	pop	{r7, pc}

0800f892 <_GLOBAL__sub_D_touchgfx_init>:
 800f892:	b580      	push	{r7, lr}
 800f894:	af00      	add	r7, sp, #0
 800f896:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f89a:	2000      	movs	r0, #0
 800f89c:	f7ff fefa 	bl	800f694 <_Z41__static_initialization_and_destruction_0ii>
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b082      	sub	sp, #8
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	3320      	adds	r3, #32
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	4798      	blx	r3
    }
 800f8b6:	bf00      	nop
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800f8d6:	bf00      	nop
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
	...

0800f8e4 <__NVIC_EnableIRQ>:
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f8ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	db0b      	blt.n	800f90e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	f003 021f 	and.w	r2, r3, #31
 800f8fc:	4907      	ldr	r1, [pc, #28]	; (800f91c <__NVIC_EnableIRQ+0x38>)
 800f8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f902:	095b      	lsrs	r3, r3, #5
 800f904:	2001      	movs	r0, #1
 800f906:	fa00 f202 	lsl.w	r2, r0, r2
 800f90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f90e:	bf00      	nop
 800f910:	370c      	adds	r7, #12
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	e000e100 	.word	0xe000e100

0800f920 <__NVIC_DisableIRQ>:
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	4603      	mov	r3, r0
 800f928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f92a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	db12      	blt.n	800f958 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	f003 021f 	and.w	r2, r3, #31
 800f938:	490a      	ldr	r1, [pc, #40]	; (800f964 <__NVIC_DisableIRQ+0x44>)
 800f93a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f93e:	095b      	lsrs	r3, r3, #5
 800f940:	2001      	movs	r0, #1
 800f942:	fa00 f202 	lsl.w	r2, r0, r2
 800f946:	3320      	adds	r3, #32
 800f948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f94c:	f3bf 8f4f 	dsb	sy
}
 800f950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f952:	f3bf 8f6f 	isb	sy
}
 800f956:	bf00      	nop
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	e000e100 	.word	0xe000e100

0800f968 <__NVIC_SetPriority>:
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	db0a      	blt.n	800f992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	490c      	ldr	r1, [pc, #48]	; (800f9b4 <__NVIC_SetPriority+0x4c>)
 800f982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f986:	0112      	lsls	r2, r2, #4
 800f988:	b2d2      	uxtb	r2, r2
 800f98a:	440b      	add	r3, r1
 800f98c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f990:	e00a      	b.n	800f9a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	b2da      	uxtb	r2, r3
 800f996:	4908      	ldr	r1, [pc, #32]	; (800f9b8 <__NVIC_SetPriority+0x50>)
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	f003 030f 	and.w	r3, r3, #15
 800f99e:	3b04      	subs	r3, #4
 800f9a0:	0112      	lsls	r2, r2, #4
 800f9a2:	b2d2      	uxtb	r2, r2
 800f9a4:	440b      	add	r3, r1
 800f9a6:	761a      	strb	r2, [r3, #24]
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	e000e100 	.word	0xe000e100
 800f9b8:	e000ed00 	.word	0xe000ed00

0800f9bc <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800f9c2:	4b21      	ldr	r3, [pc, #132]	; (800fa48 <SCB_CleanInvalidateDCache+0x8c>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f9ca:	f3bf 8f4f 	dsb	sy
}
 800f9ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800f9d0:	4b1d      	ldr	r3, [pc, #116]	; (800fa48 <SCB_CleanInvalidateDCache+0x8c>)
 800f9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9d6:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	0b5b      	lsrs	r3, r3, #13
 800f9dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f9e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	08db      	lsrs	r3, r3, #3
 800f9e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	015a      	lsls	r2, r3, #5
 800f9f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800f9f4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f9fa:	4913      	ldr	r1, [pc, #76]	; (800fa48 <SCB_CleanInvalidateDCache+0x8c>)
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	1e5a      	subs	r2, r3, #1
 800fa06:	60ba      	str	r2, [r7, #8]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	bf14      	ite	ne
 800fa0c:	2301      	movne	r3, #1
 800fa0e:	2300      	moveq	r3, #0
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d000      	beq.n	800fa18 <SCB_CleanInvalidateDCache+0x5c>
      do {
 800fa16:	e7e9      	b.n	800f9ec <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	1e5a      	subs	r2, r3, #1
 800fa1c:	60fa      	str	r2, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bf14      	ite	ne
 800fa22:	2301      	movne	r3, #1
 800fa24:	2300      	moveq	r3, #0
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d000      	beq.n	800fa2e <SCB_CleanInvalidateDCache+0x72>
    do {
 800fa2c:	e7d9      	b.n	800f9e2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800fa2e:	f3bf 8f4f 	dsb	sy
}
 800fa32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fa34:	f3bf 8f6f 	isb	sy
}
 800fa38:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800fa3a:	bf00      	nop
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	e000ed00 	.word	0xe000ed00

0800fa4c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800fa4c:	b5b0      	push	{r4, r5, r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 fc75 	bl	8010346 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800fa5c:	687d      	ldr	r5, [r7, #4]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3364      	adds	r3, #100	; 0x64
 800fa64:	681c      	ldr	r4, [r3, #0]
 800fa66:	f003 fd5d 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4628      	mov	r0, r5
 800fa70:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3388      	adds	r3, #136	; 0x88
 800fa7a:	681c      	ldr	r4, [r3, #0]
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	4a04      	ldr	r2, [pc, #16]	; (800fa90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800fa80:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800fa84:	47a0      	blx	r4
}
 800fa86:	bf00      	nop
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bdb0      	pop	{r4, r5, r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	c005fa00 	.word	0xc005fa00

0800fa94 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800fa9c:	2109      	movs	r1, #9
 800fa9e:	205a      	movs	r0, #90	; 0x5a
 800faa0:	f7ff ff62 	bl	800f968 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800faa4:	2109      	movs	r1, #9
 800faa6:	2058      	movs	r0, #88	; 0x58
 800faa8:	f7ff ff5e 	bl	800f968 <__NVIC_SetPriority>
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800fabc:	205a      	movs	r0, #90	; 0x5a
 800fabe:	f7ff ff11 	bl	800f8e4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800fac2:	2058      	movs	r0, #88	; 0x58
 800fac4:	f7ff ff0e 	bl	800f8e4 <__NVIC_EnableIRQ>
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800fad8:	205a      	movs	r0, #90	; 0x5a
 800fada:	f7ff ff21 	bl	800f920 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800fade:	2058      	movs	r0, #88	; 0x58
 800fae0:	f7ff ff1e 	bl	800f920 <__NVIC_DisableIRQ>
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800faf4:	4b11      	ldr	r3, [pc, #68]	; (800fb3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	3b01      	subs	r3, #1
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	4b0e      	ldr	r3, [pc, #56]	; (800fb40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fb06:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800fb08:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fb0a:	691b      	ldr	r3, [r3, #16]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	3b01      	subs	r3, #1
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	4b0a      	ldr	r3, [pc, #40]	; (800fb44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800fb1a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800fb1c:	4b08      	ldr	r3, [pc, #32]	; (800fb40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fb1e:	881a      	ldrh	r2, [r3, #0]
 800fb20:	4b06      	ldr	r3, [pc, #24]	; (800fb3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fb22:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800fb24:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb28:	4a04      	ldr	r2, [pc, #16]	; (800fb3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fb2a:	f043 0301 	orr.w	r3, r3, #1
 800fb2e:	6353      	str	r3, [r2, #52]	; 0x34
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	40016800 	.word	0x40016800
 800fb40:	20011906 	.word	0x20011906
 800fb44:	20011908 	.word	0x20011908

0800fb48 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4618      	mov	r0, r3
 800fb54:	f000 fbde 	bl	8010314 <_ZN8touchgfx3HAL10beginFrameEv>
 800fb58:	4603      	mov	r3, r0
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
	...

0800fb64 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 800fb76:	4b05      	ldr	r3, [pc, #20]	; (800fb8c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 800fb78:	2201      	movs	r2, #1
 800fb7a:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 fbd4 	bl	801032c <_ZN8touchgfx3HAL8endFrameEv>
}
 800fb84:	bf00      	nop
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	20011904 	.word	0x20011904

0800fb90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800fb98:	4b03      	ldr	r3, [pc, #12]	; (800fba8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800fb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	370c      	adds	r7, #12
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr
 800fba8:	40016884 	.word	0x40016884

0800fbac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800fbb6:	4a06      	ldr	r2, [pc, #24]	; (800fbd0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800fbbc:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fbc2:	bf00      	nop
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	40016884 	.word	0x40016884
 800fbd4:	40016800 	.word	0x40016800

0800fbd8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6839      	ldr	r1, [r7, #0]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fb5e 	bl	80102a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800fbec:	bf00      	nop
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
 800fc00:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	68b9      	ldr	r1, [r7, #8]
 800fc0a:	f000 fcb8 	bl	801057e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800fc0e:	4603      	mov	r3, r0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800fc20:	4b08      	ldr	r3, [pc, #32]	; (800fc44 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 800fc22:	695b      	ldr	r3, [r3, #20]
 800fc24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	bf14      	ite	ne
 800fc2c:	2301      	movne	r3, #1
 800fc2e:	2300      	moveq	r3, #0
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800fc36:	f7ff fec1 	bl	800f9bc <SCB_CleanInvalidateDCache>
    }
}
 800fc3a:	bf00      	nop
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	e000ed00 	.word	0xe000ed00

0800fc48 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800fc50:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	bf14      	ite	ne
 800fc5c:	2301      	movne	r3, #1
 800fc5e:	2300      	moveq	r3, #0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 800fc66:	f7ff fea9 	bl	800f9bc <SCB_CleanInvalidateDCache>
    }
}
 800fc6a:	bf00      	nop
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	e000ed00 	.word	0xe000ed00

0800fc78 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800fc80:	f7fb f8fc 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bf0c      	ite	eq
 800fc8a:	2301      	moveq	r3, #1
 800fc8c:	2300      	movne	r3, #0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d132      	bne.n	800fcfa <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800fc94:	4b1b      	ldr	r3, [pc, #108]	; (800fd04 <HAL_LTDC_LineEventCallback+0x8c>)
 800fc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc98:	4a1b      	ldr	r2, [pc, #108]	; (800fd08 <HAL_LTDC_LineEventCallback+0x90>)
 800fc9a:	8812      	ldrh	r2, [r2, #0]
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	bf0c      	ite	eq
 800fca0:	2301      	moveq	r3, #1
 800fca2:	2300      	movne	r3, #0
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d017      	beq.n	800fcda <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800fcaa:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <HAL_LTDC_LineEventCallback+0x94>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7f4 fbe9 	bl	8004488 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800fcb6:	f7fb f8e1 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff fdfe 	bl	800f8be <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800fcc2:	f7fe fcf3 	bl	800e6ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800fcc6:	f7fb f8d9 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800fcca:	4603      	mov	r3, r0
 800fccc:	4618      	mov	r0, r3
 800fcce:	f001 f881 	bl	8010dd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	f7fe f9e6 	bl	800e0a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fcd8:	e010      	b.n	800fcfc <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800fcda:	4b0b      	ldr	r3, [pc, #44]	; (800fd08 <HAL_LTDC_LineEventCallback+0x90>)
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7f4 fbd1 	bl	8004488 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800fce6:	f7fb f8c9 	bl	800ae7c <_ZN8touchgfx3HAL11getInstanceEv>
 800fcea:	4603      	mov	r3, r0
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fdd8 	bl	800f8a2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f7fe f9f2 	bl	800e0dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fcf8:	e000      	b.n	800fcfc <HAL_LTDC_LineEventCallback+0x84>
            return;
 800fcfa:	bf00      	nop
        }
    }
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	40016800 	.word	0x40016800
 800fd08:	20011906 	.word	0x20011906
 800fd0c:	20011908 	.word	0x20011908

0800fd10 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fd10:	8880      	ldrh	r0, [r0, #4]
 800fd12:	4770      	bx	lr

0800fd14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	6803      	ldr	r3, [r0, #0]
 800fd18:	460c      	mov	r4, r1
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	4605      	mov	r5, r0
 800fd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd20:	4798      	blx	r3
 800fd22:	4606      	mov	r6, r0
 800fd24:	682b      	ldr	r3, [r5, #0]
 800fd26:	4628      	mov	r0, r5
 800fd28:	1ba4      	subs	r4, r4, r6
 800fd2a:	6a1b      	ldr	r3, [r3, #32]
 800fd2c:	b2a4      	uxth	r4, r4
 800fd2e:	4798      	blx	r3
 800fd30:	fbb4 f0f0 	udiv	r0, r4, r0
 800fd34:	bd70      	pop	{r4, r5, r6, pc}

0800fd36 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fd36:	2300      	movs	r3, #0
 800fd38:	8083      	strh	r3, [r0, #4]
 800fd3a:	4770      	bx	lr

0800fd3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	6803      	ldr	r3, [r0, #0]
 800fd40:	4604      	mov	r4, r0
 800fd42:	8881      	ldrh	r1, [r0, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	4798      	blx	r3
 800fd48:	88a3      	ldrh	r3, [r4, #4]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	80a3      	strh	r3, [r4, #4]
 800fd4e:	bd10      	pop	{r4, pc}

0800fd50 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800fd50:	6803      	ldr	r3, [r0, #0]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd54:	4718      	bx	r3

0800fd56 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800fd56:	4770      	bx	lr

0800fd58 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800fd58:	4a02      	ldr	r2, [pc, #8]	; (800fd64 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800fd5a:	6002      	str	r2, [r0, #0]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	8082      	strh	r2, [r0, #4]
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	0802131c 	.word	0x0802131c

0800fd68 <_ZN8touchgfx9Container13getFirstChildEv>:
 800fd68:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fd6a:	4770      	bx	lr

0800fd6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800fd6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fd6e:	2000      	movs	r0, #0
 800fd70:	b12b      	cbz	r3, 800fd7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fd72:	b920      	cbnz	r0, 800fd7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fd74:	1a5a      	subs	r2, r3, r1
 800fd76:	699b      	ldr	r3, [r3, #24]
 800fd78:	4250      	negs	r0, r2
 800fd7a:	4150      	adcs	r0, r2
 800fd7c:	e7f8      	b.n	800fd70 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800fd7e:	4770      	bx	lr

0800fd80 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fd80:	2300      	movs	r3, #0
 800fd82:	6148      	str	r0, [r1, #20]
 800fd84:	618b      	str	r3, [r1, #24]
 800fd86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fd88:	b913      	cbnz	r3, 800fd90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800fd8a:	6281      	str	r1, [r0, #40]	; 0x28
 800fd8c:	4770      	bx	lr
 800fd8e:	4613      	mov	r3, r2
 800fd90:	699a      	ldr	r2, [r3, #24]
 800fd92:	2a00      	cmp	r2, #0
 800fd94:	d1fb      	bne.n	800fd8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fd96:	6199      	str	r1, [r3, #24]
 800fd98:	4770      	bx	lr

0800fd9a <_ZN8touchgfx9Container9removeAllEv>:
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fd9e:	b123      	cbz	r3, 800fdaa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800fda0:	6999      	ldr	r1, [r3, #24]
 800fda2:	6281      	str	r1, [r0, #40]	; 0x28
 800fda4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fda8:	e7f8      	b.n	800fd9c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fdaa:	4770      	bx	lr

0800fdac <_ZN8touchgfx9Container6unlinkEv>:
 800fdac:	2300      	movs	r3, #0
 800fdae:	6283      	str	r3, [r0, #40]	; 0x28
 800fdb0:	4770      	bx	lr

0800fdb2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	8002      	strh	r2, [r0, #0]
 800fdb6:	8042      	strh	r2, [r0, #2]
 800fdb8:	8082      	strh	r2, [r0, #4]
 800fdba:	80c2      	strh	r2, [r0, #6]
 800fdbc:	4770      	bx	lr

0800fdbe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fdbe:	b570      	push	{r4, r5, r6, lr}
 800fdc0:	460d      	mov	r5, r1
 800fdc2:	4616      	mov	r6, r2
 800fdc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fdc6:	b13c      	cbz	r4, 800fdd8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4632      	mov	r2, r6
 800fdce:	4629      	mov	r1, r5
 800fdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdd2:	4798      	blx	r3
 800fdd4:	69a4      	ldr	r4, [r4, #24]
 800fdd6:	e7f6      	b.n	800fdc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}

0800fdda <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fdda:	b538      	push	{r3, r4, r5, lr}
 800fddc:	460d      	mov	r5, r1
 800fdde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fde0:	b134      	cbz	r4, 800fdf0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fde2:	682b      	ldr	r3, [r5, #0]
 800fde4:	4621      	mov	r1, r4
 800fde6:	4628      	mov	r0, r5
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	4798      	blx	r3
 800fdec:	69a4      	ldr	r4, [r4, #24]
 800fdee:	e7f7      	b.n	800fde0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fdf0:	bd38      	pop	{r3, r4, r5, pc}

0800fdf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800fdf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fdf4:	b19b      	cbz	r3, 800fe1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fdf6:	428b      	cmp	r3, r1
 800fdf8:	d109      	bne.n	800fe0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800fdfa:	699a      	ldr	r2, [r3, #24]
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	6159      	str	r1, [r3, #20]
 800fe00:	6282      	str	r2, [r0, #40]	; 0x28
 800fe02:	b902      	cbnz	r2, 800fe06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800fe04:	4770      	bx	lr
 800fe06:	6199      	str	r1, [r3, #24]
 800fe08:	4770      	bx	lr
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	b13a      	cbz	r2, 800fe1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fe0e:	699a      	ldr	r2, [r3, #24]
 800fe10:	428a      	cmp	r2, r1
 800fe12:	d1fa      	bne.n	800fe0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fe14:	698a      	ldr	r2, [r1, #24]
 800fe16:	619a      	str	r2, [r3, #24]
 800fe18:	2300      	movs	r3, #0
 800fe1a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fe1e:	4770      	bx	lr

0800fe20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fe20:	b410      	push	{r4}
 800fe22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fe24:	4604      	mov	r4, r0
 800fe26:	b92b      	cbnz	r3, 800fe34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fe28:	6803      	ldr	r3, [r0, #0]
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe32:	4718      	bx	r3
 800fe34:	b941      	cbnz	r1, 800fe48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800fe36:	6193      	str	r3, [r2, #24]
 800fe38:	6282      	str	r2, [r0, #40]	; 0x28
 800fe3a:	6154      	str	r4, [r2, #20]
 800fe3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	4603      	mov	r3, r0
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0f9      	beq.n	800fe3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	6998      	ldr	r0, [r3, #24]
 800fe4c:	d1f9      	bne.n	800fe42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800fe4e:	6190      	str	r0, [r2, #24]
 800fe50:	618a      	str	r2, [r1, #24]
 800fe52:	e7f2      	b.n	800fe3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800fe54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800fe54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe58:	461f      	mov	r7, r3
 800fe5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800fe5e:	460d      	mov	r5, r1
 800fe60:	4616      	mov	r6, r2
 800fe62:	b103      	cbz	r3, 800fe66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800fe64:	6038      	str	r0, [r7, #0]
 800fe66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fe68:	b314      	cbz	r4, 800feb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fe6a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fe6e:	b1eb      	cbz	r3, 800feac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fe70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fe74:	428d      	cmp	r5, r1
 800fe76:	db19      	blt.n	800feac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fe78:	b289      	uxth	r1, r1
 800fe7a:	8923      	ldrh	r3, [r4, #8]
 800fe7c:	440b      	add	r3, r1
 800fe7e:	b21b      	sxth	r3, r3
 800fe80:	429d      	cmp	r5, r3
 800fe82:	da13      	bge.n	800feac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fe84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fe88:	4296      	cmp	r6, r2
 800fe8a:	db0f      	blt.n	800feac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fe8c:	b292      	uxth	r2, r2
 800fe8e:	8963      	ldrh	r3, [r4, #10]
 800fe90:	4413      	add	r3, r2
 800fe92:	b21b      	sxth	r3, r3
 800fe94:	429e      	cmp	r6, r3
 800fe96:	da09      	bge.n	800feac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	1ab2      	subs	r2, r6, r2
 800fe9c:	1a69      	subs	r1, r5, r1
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800fea4:	b212      	sxth	r2, r2
 800fea6:	463b      	mov	r3, r7
 800fea8:	b209      	sxth	r1, r1
 800feaa:	47c0      	blx	r8
 800feac:	69a4      	ldr	r4, [r4, #24]
 800feae:	e7db      	b.n	800fe68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800feb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800feb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb8:	4c6d      	ldr	r4, [pc, #436]	; (8010070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800feba:	b0a1      	sub	sp, #132	; 0x84
 800febc:	4606      	mov	r6, r0
 800febe:	6824      	ldr	r4, [r4, #0]
 800fec0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fec2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800fec6:	2400      	movs	r4, #0
 800fec8:	9303      	str	r3, [sp, #12]
 800feca:	802c      	strh	r4, [r5, #0]
 800fecc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800fece:	802c      	strh	r4, [r5, #0]
 800fed0:	601c      	str	r4, [r3, #0]
 800fed2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fed6:	f7ff ffbd 	bl	800fe54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800feda:	f1b9 0f03 	cmp.w	r9, #3
 800fede:	f340 80c1 	ble.w	8010064 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800fee2:	4631      	mov	r1, r6
 800fee4:	a80c      	add	r0, sp, #48	; 0x30
 800fee6:	f004 fc25 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800feea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800feee:	9306      	str	r3, [sp, #24]
 800fef0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800fef4:	9307      	str	r3, [sp, #28]
 800fef6:	9b03      	ldr	r3, [sp, #12]
 800fef8:	f8d3 a000 	ldr.w	sl, [r3]
 800fefc:	f1ba 0f00 	cmp.w	sl, #0
 800ff00:	f000 80b3 	beq.w	801006a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ff04:	4651      	mov	r1, sl
 800ff06:	a810      	add	r0, sp, #64	; 0x40
 800ff08:	f004 fc14 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ff0c:	2002      	movs	r0, #2
 800ff0e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800ff12:	9b01      	ldr	r3, [sp, #4]
 800ff14:	9a06      	ldr	r2, [sp, #24]
 800ff16:	fb91 f1f0 	sdiv	r1, r1, r0
 800ff1a:	189d      	adds	r5, r3, r2
 800ff1c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800ff20:	9a07      	ldr	r2, [sp, #28]
 800ff22:	4419      	add	r1, r3
 800ff24:	9b02      	ldr	r3, [sp, #8]
 800ff26:	4413      	add	r3, r2
 800ff28:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800ff2c:	1a6d      	subs	r5, r5, r1
 800ff2e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ff32:	fb92 f2f0 	sdiv	r2, r2, r0
 800ff36:	440a      	add	r2, r1
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	435b      	muls	r3, r3
 800ff3c:	fb05 3505 	mla	r5, r5, r5, r3
 800ff40:	4f4c      	ldr	r7, [pc, #304]	; (8010074 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ff42:	ac10      	add	r4, sp, #64	; 0x40
 800ff44:	f1b9 0f0c 	cmp.w	r9, #12
 800ff48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ff4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ff4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ff52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff54:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ff58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ff5c:	f04f 0303 	mov.w	r3, #3
 800ff60:	bfd8      	it	le
 800ff62:	f109 32ff 	addle.w	r2, r9, #4294967295
 800ff66:	f04f 0400 	mov.w	r4, #0
 800ff6a:	f8cd 9000 	str.w	r9, [sp]
 800ff6e:	bfcc      	ite	gt
 800ff70:	4698      	movgt	r8, r3
 800ff72:	fb92 f8f3 	sdivle	r8, r2, r3
 800ff76:	1c63      	adds	r3, r4, #1
 800ff78:	aa10      	add	r2, sp, #64	; 0x40
 800ff7a:	f004 0401 	and.w	r4, r4, #1
 800ff7e:	f04f 0b00 	mov.w	fp, #0
 800ff82:	9308      	str	r3, [sp, #32]
 800ff84:	9b00      	ldr	r3, [sp, #0]
 800ff86:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800ff8a:	fb93 f3f8 	sdiv	r3, r3, r8
 800ff8e:	3404      	adds	r4, #4
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	9a04      	ldr	r2, [sp, #16]
 800ff96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ff9a:	fb13 f302 	smulbb	r3, r3, r2
 800ff9e:	9a01      	ldr	r2, [sp, #4]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	1899      	adds	r1, r3, r2
 800ffa4:	9305      	str	r3, [sp, #20]
 800ffa6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ffaa:	b209      	sxth	r1, r1
 800ffac:	4299      	cmp	r1, r3
 800ffae:	db4d      	blt.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ffb0:	8932      	ldrh	r2, [r6, #8]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	b21b      	sxth	r3, r3
 800ffb6:	4299      	cmp	r1, r3
 800ffb8:	da48      	bge.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ffba:	9b04      	ldr	r3, [sp, #16]
 800ffbc:	6827      	ldr	r7, [r4, #0]
 800ffbe:	fb17 f703 	smulbb	r7, r7, r3
 800ffc2:	9b02      	ldr	r3, [sp, #8]
 800ffc4:	b2bf      	uxth	r7, r7
 800ffc6:	18fa      	adds	r2, r7, r3
 800ffc8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ffcc:	b212      	sxth	r2, r2
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	db3c      	blt.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ffd2:	8970      	ldrh	r0, [r6, #10]
 800ffd4:	4403      	add	r3, r0
 800ffd6:	b21b      	sxth	r3, r3
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	da37      	bge.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	4630      	mov	r0, r6
 800ffe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffe2:	ab0b      	add	r3, sp, #44	; 0x2c
 800ffe4:	f7ff ff36 	bl	800fe54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ffe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ffea:	b37a      	cbz	r2, 801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ffec:	4552      	cmp	r2, sl
 800ffee:	d02d      	beq.n	801004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fff0:	4611      	mov	r1, r2
 800fff2:	a80e      	add	r0, sp, #56	; 0x38
 800fff4:	9209      	str	r2, [sp, #36]	; 0x24
 800fff6:	f004 fb9d 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fffa:	f04f 0e02 	mov.w	lr, #2
 800fffe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8010002:	9a06      	ldr	r2, [sp, #24]
 8010004:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801000e:	4413      	add	r3, r2
 8010010:	9a07      	ldr	r2, [sp, #28]
 8010012:	fb91 f1fe 	sdiv	r1, r1, lr
 8010016:	fb9c fcfe 	sdiv	ip, ip, lr
 801001a:	4401      	add	r1, r0
 801001c:	1a58      	subs	r0, r3, r1
 801001e:	9b02      	ldr	r3, [sp, #8]
 8010020:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010024:	4413      	add	r3, r2
 8010026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010028:	448c      	add	ip, r1
 801002a:	eba3 030c 	sub.w	r3, r3, ip
 801002e:	435b      	muls	r3, r3
 8010030:	fb00 3300 	mla	r3, r0, r0, r3
 8010034:	42ab      	cmp	r3, r5
 8010036:	d208      	bcs.n	801004a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801003a:	461d      	mov	r5, r3
 801003c:	9803      	ldr	r0, [sp, #12]
 801003e:	6001      	str	r1, [r0, #0]
 8010040:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010042:	9805      	ldr	r0, [sp, #20]
 8010044:	8008      	strh	r0, [r1, #0]
 8010046:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010048:	800f      	strh	r7, [r1, #0]
 801004a:	4692      	mov	sl, r2
 801004c:	f10b 0b01 	add.w	fp, fp, #1
 8010050:	3408      	adds	r4, #8
 8010052:	f1bb 0f04 	cmp.w	fp, #4
 8010056:	d19d      	bne.n	800ff94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010058:	9b00      	ldr	r3, [sp, #0]
 801005a:	9c08      	ldr	r4, [sp, #32]
 801005c:	444b      	add	r3, r9
 801005e:	4544      	cmp	r4, r8
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	d188      	bne.n	800ff76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010064:	b021      	add	sp, #132	; 0x84
 8010066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006a:	f04f 35ff 	mov.w	r5, #4294967295
 801006e:	e767      	b.n	800ff40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010070:	20011918 	.word	0x20011918
 8010074:	08020930 	.word	0x08020930

08010078 <_ZN8touchgfx4RectaNERKS0_>:
 8010078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801007c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010080:	888c      	ldrh	r4, [r1, #4]
 8010082:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010086:	443c      	add	r4, r7
 8010088:	b2a4      	uxth	r4, r4
 801008a:	fa0f f884 	sxth.w	r8, r4
 801008e:	45c1      	cmp	r9, r8
 8010090:	da2f      	bge.n	80100f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8010092:	8882      	ldrh	r2, [r0, #4]
 8010094:	444a      	add	r2, r9
 8010096:	b292      	uxth	r2, r2
 8010098:	fa0f fe82 	sxth.w	lr, r2
 801009c:	4577      	cmp	r7, lr
 801009e:	da28      	bge.n	80100f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80100a0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80100a4:	88cb      	ldrh	r3, [r1, #6]
 80100a6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80100aa:	442b      	add	r3, r5
 80100ac:	b21b      	sxth	r3, r3
 80100ae:	429e      	cmp	r6, r3
 80100b0:	da1f      	bge.n	80100f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80100b2:	88c3      	ldrh	r3, [r0, #6]
 80100b4:	4433      	add	r3, r6
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	fa0f fc83 	sxth.w	ip, r3
 80100bc:	4565      	cmp	r5, ip
 80100be:	da18      	bge.n	80100f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80100c0:	454f      	cmp	r7, r9
 80100c2:	bfb8      	it	lt
 80100c4:	464f      	movlt	r7, r9
 80100c6:	42b5      	cmp	r5, r6
 80100c8:	bfb8      	it	lt
 80100ca:	4635      	movlt	r5, r6
 80100cc:	45f0      	cmp	r8, lr
 80100ce:	bfd8      	it	le
 80100d0:	4622      	movle	r2, r4
 80100d2:	1bd2      	subs	r2, r2, r7
 80100d4:	8082      	strh	r2, [r0, #4]
 80100d6:	884a      	ldrh	r2, [r1, #2]
 80100d8:	88c9      	ldrh	r1, [r1, #6]
 80100da:	8007      	strh	r7, [r0, #0]
 80100dc:	440a      	add	r2, r1
 80100de:	8045      	strh	r5, [r0, #2]
 80100e0:	b292      	uxth	r2, r2
 80100e2:	b211      	sxth	r1, r2
 80100e4:	458c      	cmp	ip, r1
 80100e6:	bfa8      	it	ge
 80100e8:	4613      	movge	r3, r2
 80100ea:	1b5b      	subs	r3, r3, r5
 80100ec:	80c3      	strh	r3, [r0, #6]
 80100ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100f2:	2300      	movs	r3, #0
 80100f4:	8003      	strh	r3, [r0, #0]
 80100f6:	8043      	strh	r3, [r0, #2]
 80100f8:	8083      	strh	r3, [r0, #4]
 80100fa:	80c3      	strh	r3, [r0, #6]
 80100fc:	e7f7      	b.n	80100ee <_ZN8touchgfx4RectaNERKS0_+0x76>

080100fe <_ZNK8touchgfx4Rect7isEmptyEv>:
 80100fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	dd06      	ble.n	8010114 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010106:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801010a:	2800      	cmp	r0, #0
 801010c:	bfcc      	ite	gt
 801010e:	2000      	movgt	r0, #0
 8010110:	2001      	movle	r0, #1
 8010112:	4770      	bx	lr
 8010114:	2001      	movs	r0, #1
 8010116:	4770      	bx	lr

08010118 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010122:	8003      	strh	r3, [r0, #0]
 8010124:	8043      	strh	r3, [r0, #2]
 8010126:	8083      	strh	r3, [r0, #4]
 8010128:	80c3      	strh	r3, [r0, #6]
 801012a:	2d00      	cmp	r5, #0
 801012c:	d040      	beq.n	80101b0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801012e:	1d28      	adds	r0, r5, #4
 8010130:	f7ff ffe5 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8010134:	b988      	cbnz	r0, 801015a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010136:	4620      	mov	r0, r4
 8010138:	f7ff ffe1 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801013c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010140:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010144:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010148:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801014c:	b138      	cbz	r0, 801015e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801014e:	8022      	strh	r2, [r4, #0]
 8010150:	8063      	strh	r3, [r4, #2]
 8010152:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010156:	f8a4 c006 	strh.w	ip, [r4, #6]
 801015a:	69ad      	ldr	r5, [r5, #24]
 801015c:	e7e5      	b.n	801012a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801015e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010162:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010166:	4290      	cmp	r0, r2
 8010168:	4607      	mov	r7, r0
 801016a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801016e:	460e      	mov	r6, r1
 8010170:	bfa8      	it	ge
 8010172:	4617      	movge	r7, r2
 8010174:	4299      	cmp	r1, r3
 8010176:	4472      	add	r2, lr
 8010178:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801017c:	bfa8      	it	ge
 801017e:	461e      	movge	r6, r3
 8010180:	4440      	add	r0, r8
 8010182:	4471      	add	r1, lr
 8010184:	4463      	add	r3, ip
 8010186:	b200      	sxth	r0, r0
 8010188:	8027      	strh	r7, [r4, #0]
 801018a:	b212      	sxth	r2, r2
 801018c:	8066      	strh	r6, [r4, #2]
 801018e:	b209      	sxth	r1, r1
 8010190:	b21b      	sxth	r3, r3
 8010192:	4290      	cmp	r0, r2
 8010194:	bfac      	ite	ge
 8010196:	ebc7 0200 	rsbge	r2, r7, r0
 801019a:	ebc7 0202 	rsblt	r2, r7, r2
 801019e:	4299      	cmp	r1, r3
 80101a0:	bfac      	ite	ge
 80101a2:	ebc6 0301 	rsbge	r3, r6, r1
 80101a6:	ebc6 0303 	rsblt	r3, r6, r3
 80101aa:	80a2      	strh	r2, [r4, #4]
 80101ac:	80e3      	strh	r3, [r4, #6]
 80101ae:	e7d4      	b.n	801015a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80101b0:	4620      	mov	r0, r4
 80101b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80101b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80101ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80101be:	b383      	cbz	r3, 8010222 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80101c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80101c2:	b374      	cbz	r4, 8010222 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80101c4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80101c8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80101cc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80101d0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80101d4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80101d8:	b303      	cbz	r3, 801021c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80101da:	4668      	mov	r0, sp
 80101dc:	1d21      	adds	r1, r4, #4
 80101de:	f8ad 5000 	strh.w	r5, [sp]
 80101e2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80101e6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80101ea:	f8ad 8006 	strh.w	r8, [sp, #6]
 80101ee:	f7ff ff43 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 80101f2:	4668      	mov	r0, sp
 80101f4:	f7ff ff83 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80101f8:	b980      	cbnz	r0, 801021c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80101fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80101fe:	4669      	mov	r1, sp
 8010200:	88a2      	ldrh	r2, [r4, #4]
 8010202:	4620      	mov	r0, r4
 8010204:	1a9b      	subs	r3, r3, r2
 8010206:	88e2      	ldrh	r2, [r4, #6]
 8010208:	f8ad 3000 	strh.w	r3, [sp]
 801020c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010210:	1a9b      	subs	r3, r3, r2
 8010212:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	4798      	blx	r3
 801021c:	69a4      	ldr	r4, [r4, #24]
 801021e:	2c00      	cmp	r4, #0
 8010220:	d1d8      	bne.n	80101d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8010222:	b002      	add	sp, #8
 8010224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010228 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801022a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801022e:	460d      	mov	r5, r1
 8010230:	4616      	mov	r6, r2
 8010232:	b323      	cbz	r3, 801027e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010234:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010236:	b314      	cbz	r4, 801027e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010238:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801023c:	b1eb      	cbz	r3, 801027a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801023e:	6828      	ldr	r0, [r5, #0]
 8010240:	466b      	mov	r3, sp
 8010242:	6869      	ldr	r1, [r5, #4]
 8010244:	c303      	stmia	r3!, {r0, r1}
 8010246:	4668      	mov	r0, sp
 8010248:	1d21      	adds	r1, r4, #4
 801024a:	f7ff ff15 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 801024e:	4668      	mov	r0, sp
 8010250:	f7ff ff55 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8010254:	b988      	cbnz	r0, 801027a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010256:	f8bd 3000 	ldrh.w	r3, [sp]
 801025a:	4669      	mov	r1, sp
 801025c:	88a2      	ldrh	r2, [r4, #4]
 801025e:	4620      	mov	r0, r4
 8010260:	1a9b      	subs	r3, r3, r2
 8010262:	88e2      	ldrh	r2, [r4, #6]
 8010264:	f8ad 3000 	strh.w	r3, [sp]
 8010268:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801026c:	1a9b      	subs	r3, r3, r2
 801026e:	4632      	mov	r2, r6
 8010270:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010278:	4798      	blx	r3
 801027a:	69a4      	ldr	r4, [r4, #24]
 801027c:	e7db      	b.n	8010236 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801027e:	b002      	add	sp, #8
 8010280:	bd70      	pop	{r4, r5, r6, pc}

08010282 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8010282:	4770      	bx	lr

08010284 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8010284:	4770      	bx	lr

08010286 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010286:	6803      	ldr	r3, [r0, #0]
 8010288:	b513      	push	{r0, r1, r4, lr}
 801028a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801028e:	2300      	movs	r3, #0
 8010290:	e9cd 3300 	strd	r3, r3, [sp]
 8010294:	466b      	mov	r3, sp
 8010296:	47a0      	blx	r4
 8010298:	b002      	add	sp, #8
 801029a:	bd10      	pop	{r4, pc}

0801029c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801029c:	2301      	movs	r3, #1
 801029e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80102a2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80102a6:	4770      	bx	lr

080102a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80102a8:	2301      	movs	r3, #1
 80102aa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80102ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80102b2:	4770      	bx	lr

080102b4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80102b4:	6843      	ldr	r3, [r0, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	725a      	strb	r2, [r3, #9]
 80102ba:	6840      	ldr	r0, [r0, #4]
 80102bc:	6803      	ldr	r3, [r0, #0]
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	4718      	bx	r3

080102c2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80102c2:	6840      	ldr	r0, [r0, #4]
 80102c4:	6803      	ldr	r3, [r0, #0]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	4718      	bx	r3

080102ca <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80102ca:	b530      	push	{r4, r5, lr}
 80102cc:	b08b      	sub	sp, #44	; 0x2c
 80102ce:	6804      	ldr	r4, [r0, #0]
 80102d0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80102d4:	9509      	str	r5, [sp, #36]	; 0x24
 80102d6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80102da:	9508      	str	r5, [sp, #32]
 80102dc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80102e0:	9507      	str	r5, [sp, #28]
 80102e2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80102e6:	9506      	str	r5, [sp, #24]
 80102e8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80102ec:	9505      	str	r5, [sp, #20]
 80102ee:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80102f2:	9504      	str	r5, [sp, #16]
 80102f4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80102f8:	9503      	str	r5, [sp, #12]
 80102fa:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80102fe:	9502      	str	r5, [sp, #8]
 8010300:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010304:	e9cd 3500 	strd	r3, r5, [sp]
 8010308:	4613      	mov	r3, r2
 801030a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801030c:	2200      	movs	r2, #0
 801030e:	47a0      	blx	r4
 8010310:	b00b      	add	sp, #44	; 0x2c
 8010312:	bd30      	pop	{r4, r5, pc}

08010314 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010314:	4b04      	ldr	r3, [pc, #16]	; (8010328 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	b123      	cbz	r3, 8010324 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801031a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801031e:	f080 0001 	eor.w	r0, r0, #1
 8010322:	4770      	bx	lr
 8010324:	2001      	movs	r0, #1
 8010326:	4770      	bx	lr
 8010328:	20011914 	.word	0x20011914

0801032c <_ZN8touchgfx3HAL8endFrameEv>:
 801032c:	b510      	push	{r4, lr}
 801032e:	4604      	mov	r4, r0
 8010330:	6840      	ldr	r0, [r0, #4]
 8010332:	6803      	ldr	r3, [r0, #0]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	4798      	blx	r3
 8010338:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801033c:	b113      	cbz	r3, 8010344 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801033e:	2301      	movs	r3, #1
 8010340:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010344:	bd10      	pop	{r4, pc}

08010346 <_ZN8touchgfx3HAL10initializeEv>:
 8010346:	b510      	push	{r4, lr}
 8010348:	4604      	mov	r4, r0
 801034a:	f7fe f947 	bl	800e5dc <_ZN8touchgfx10OSWrappers10initializeEv>
 801034e:	f7fd fea1 	bl	800e094 <_ZN8touchgfx4GPIO4initEv>
 8010352:	6860      	ldr	r0, [r4, #4]
 8010354:	6803      	ldr	r3, [r0, #0]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	4798      	blx	r3
 801035a:	68e0      	ldr	r0, [r4, #12]
 801035c:	6803      	ldr	r3, [r0, #0]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	4798      	blx	r3
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	4620      	mov	r0, r4
 8010366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801036c:	4718      	bx	r3

0801036e <_ZN8touchgfx3HAL9taskEntryEv>:
 801036e:	b508      	push	{r3, lr}
 8010370:	6803      	ldr	r3, [r0, #0]
 8010372:	4604      	mov	r4, r0
 8010374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010378:	4798      	blx	r3
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801037e:	4620      	mov	r0, r4
 8010380:	4798      	blx	r3
 8010382:	f7fe f99f 	bl	800e6c4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801038a:	e7f8      	b.n	801037e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801038c <_ZN8touchgfx3HAL4tickEv>:
 801038c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801038e:	6803      	ldr	r3, [r0, #0]
 8010390:	4604      	mov	r4, r0
 8010392:	4d5b      	ldr	r5, [pc, #364]	; (8010500 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010398:	4798      	blx	r3
 801039a:	2800      	cmp	r0, #0
 801039c:	f000 8095 	beq.w	80104ca <_ZN8touchgfx3HAL4tickEv+0x13e>
 80103a0:	2001      	movs	r0, #1
 80103a2:	2600      	movs	r6, #0
 80103a4:	f7fd fe7e 	bl	800e0a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80103a8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80103ac:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80103b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80103b4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80103b8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80103bc:	b133      	cbz	r3, 80103cc <_ZN8touchgfx3HAL4tickEv+0x40>
 80103be:	6823      	ldr	r3, [r4, #0]
 80103c0:	4620      	mov	r0, r4
 80103c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80103c6:	4798      	blx	r3
 80103c8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80103cc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80103d0:	2601      	movs	r6, #1
 80103d2:	6862      	ldr	r2, [r4, #4]
 80103d4:	f083 0301 	eor.w	r3, r3, #1
 80103d8:	702e      	strb	r6, [r5, #0]
 80103da:	7253      	strb	r3, [r2, #9]
 80103dc:	f003 f8a2 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 80103e0:	6803      	ldr	r3, [r0, #0]
 80103e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103e4:	4798      	blx	r3
 80103e6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80103ea:	b90b      	cbnz	r3, 80103f0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80103ec:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80103f0:	f003 f898 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 80103f4:	6803      	ldr	r3, [r0, #0]
 80103f6:	695b      	ldr	r3, [r3, #20]
 80103f8:	4798      	blx	r3
 80103fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103fc:	6803      	ldr	r3, [r0, #0]
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	4798      	blx	r3
 8010402:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010406:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801040a:	3b01      	subs	r3, #1
 801040c:	b2db      	uxtb	r3, r3
 801040e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010412:	b10a      	cbz	r2, 8010418 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1eb      	bne.n	80103f0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010418:	4a3a      	ldr	r2, [pc, #232]	; (8010504 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801041a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801041e:	7813      	ldrb	r3, [r2, #0]
 8010420:	3301      	adds	r3, #1
 8010422:	b25b      	sxtb	r3, r3
 8010424:	4299      	cmp	r1, r3
 8010426:	7013      	strb	r3, [r2, #0]
 8010428:	dc10      	bgt.n	801044c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801042a:	2300      	movs	r3, #0
 801042c:	68e0      	ldr	r0, [r4, #12]
 801042e:	a902      	add	r1, sp, #8
 8010430:	7013      	strb	r3, [r2, #0]
 8010432:	aa03      	add	r2, sp, #12
 8010434:	6803      	ldr	r3, [r0, #0]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	4798      	blx	r3
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	2800      	cmp	r0, #0
 801043e:	d050      	beq.n	80104e2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8010440:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010444:	4620      	mov	r0, r4
 8010446:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801044a:	4798      	blx	r3
 801044c:	2300      	movs	r3, #0
 801044e:	6960      	ldr	r0, [r4, #20]
 8010450:	f88d 3007 	strb.w	r3, [sp, #7]
 8010454:	b158      	cbz	r0, 801046e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010456:	6803      	ldr	r3, [r0, #0]
 8010458:	f10d 0107 	add.w	r1, sp, #7
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	4798      	blx	r3
 8010460:	b128      	cbz	r0, 801046e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010462:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010464:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010468:	6803      	ldr	r3, [r0, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	4798      	blx	r3
 801046e:	f104 001c 	add.w	r0, r4, #28
 8010472:	f00e f9a7 	bl	801e7c4 <_ZN8touchgfx8Gestures4tickEv>
 8010476:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801047a:	b30b      	cbz	r3, 80104c0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801047c:	6920      	ldr	r0, [r4, #16]
 801047e:	6803      	ldr	r3, [r0, #0]
 8010480:	691b      	ldr	r3, [r3, #16]
 8010482:	4798      	blx	r3
 8010484:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010486:	4606      	mov	r6, r0
 8010488:	b903      	cbnz	r3, 801048c <_ZN8touchgfx3HAL4tickEv+0x100>
 801048a:	6720      	str	r0, [r4, #112]	; 0x70
 801048c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801048e:	4a1e      	ldr	r2, [pc, #120]	; (8010508 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010490:	1af3      	subs	r3, r6, r3
 8010492:	4293      	cmp	r3, r2
 8010494:	d914      	bls.n	80104c0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8010496:	6920      	ldr	r0, [r4, #16]
 8010498:	6803      	ldr	r3, [r0, #0]
 801049a:	699b      	ldr	r3, [r3, #24]
 801049c:	4798      	blx	r3
 801049e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104a0:	2264      	movs	r2, #100	; 0x64
 80104a2:	1af3      	subs	r3, r6, r3
 80104a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80104a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80104ac:	2800      	cmp	r0, #0
 80104ae:	dc1d      	bgt.n	80104ec <_ZN8touchgfx3HAL4tickEv+0x160>
 80104b0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80104b4:	6920      	ldr	r0, [r4, #16]
 80104b6:	2100      	movs	r1, #0
 80104b8:	6803      	ldr	r3, [r0, #0]
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	4798      	blx	r3
 80104be:	6726      	str	r6, [r4, #112]	; 0x70
 80104c0:	f003 f830 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 80104c4:	6803      	ldr	r3, [r0, #0]
 80104c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c8:	4798      	blx	r3
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	4620      	mov	r0, r4
 80104ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80104d2:	4798      	blx	r3
 80104d4:	2001      	movs	r0, #1
 80104d6:	f7fd fe01 	bl	800e0dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80104da:	2300      	movs	r3, #0
 80104dc:	702b      	strb	r3, [r5, #0]
 80104de:	b004      	add	sp, #16
 80104e0:	bd70      	pop	{r4, r5, r6, pc}
 80104e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80104e6:	4620      	mov	r0, r4
 80104e8:	4798      	blx	r3
 80104ea:	e7af      	b.n	801044c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80104ec:	2863      	cmp	r0, #99	; 0x63
 80104ee:	bfcb      	itete	gt
 80104f0:	2300      	movgt	r3, #0
 80104f2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80104f6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80104fa:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80104fe:	e7d9      	b.n	80104b4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010500:	2001191c 	.word	0x2001191c
 8010504:	2001191d 	.word	0x2001191d
 8010508:	05f5e100 	.word	0x05f5e100

0801050c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801050c:	f7fe b8aa 	b.w	800e664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010510 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010510:	6581      	str	r1, [r0, #88]	; 0x58
 8010512:	301c      	adds	r0, #28
 8010514:	f00e b954 	b.w	801e7c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010518 <_ZN8touchgfx3HAL5touchEll>:
 8010518:	b530      	push	{r4, r5, lr}
 801051a:	b087      	sub	sp, #28
 801051c:	4604      	mov	r4, r0
 801051e:	a804      	add	r0, sp, #16
 8010520:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010524:	f002 fe08 	bl	8013138 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	a906      	add	r1, sp, #24
 801052c:	a803      	add	r0, sp, #12
 801052e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010532:	9b05      	ldr	r3, [sp, #20]
 8010534:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010538:	f002 fe50 	bl	80131dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801053c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8010540:	f104 001c 	add.w	r0, r4, #28
 8010544:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010548:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801054c:	b189      	cbz	r1, 8010572 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801054e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	4613      	mov	r3, r2
 8010556:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801055a:	462a      	mov	r2, r5
 801055c:	f00e f940 	bl	801e7e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010560:	b128      	cbz	r0, 801056e <_ZN8touchgfx3HAL5touchEll+0x56>
 8010562:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010566:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010568:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801056c:	6623      	str	r3, [r4, #96]	; 0x60
 801056e:	b007      	add	sp, #28
 8010570:	bd30      	pop	{r4, r5, pc}
 8010572:	f00e f975 	bl	801e860 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010576:	2301      	movs	r3, #1
 8010578:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801057c:	e7f1      	b.n	8010562 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801057e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801057e:	b510      	push	{r4, lr}
 8010580:	2b00      	cmp	r3, #0
 8010582:	d046      	beq.n	8010612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010584:	ea81 0002 	eor.w	r0, r1, r2
 8010588:	07c4      	lsls	r4, r0, #31
 801058a:	d508      	bpl.n	801059e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801058c:	440b      	add	r3, r1
 801058e:	3a01      	subs	r2, #1
 8010590:	428b      	cmp	r3, r1
 8010592:	d93e      	bls.n	8010612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010594:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010598:	f801 0b01 	strb.w	r0, [r1], #1
 801059c:	e7f8      	b.n	8010590 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801059e:	07d0      	lsls	r0, r2, #31
 80105a0:	bf42      	ittt	mi
 80105a2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80105a6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80105aa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d911      	bls.n	80105d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80105b2:	ea81 0402 	eor.w	r4, r1, r2
 80105b6:	4610      	mov	r0, r2
 80105b8:	07a4      	lsls	r4, r4, #30
 80105ba:	d022      	beq.n	8010602 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80105bc:	f023 0401 	bic.w	r4, r3, #1
 80105c0:	440c      	add	r4, r1
 80105c2:	428c      	cmp	r4, r1
 80105c4:	4602      	mov	r2, r0
 80105c6:	d904      	bls.n	80105d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80105c8:	8812      	ldrh	r2, [r2, #0]
 80105ca:	3002      	adds	r0, #2
 80105cc:	f821 2b02 	strh.w	r2, [r1], #2
 80105d0:	e7f7      	b.n	80105c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	f023 0003 	bic.w	r0, r3, #3
 80105da:	4408      	add	r0, r1
 80105dc:	4288      	cmp	r0, r1
 80105de:	4614      	mov	r4, r2
 80105e0:	d904      	bls.n	80105ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80105e2:	6824      	ldr	r4, [r4, #0]
 80105e4:	3204      	adds	r2, #4
 80105e6:	f841 4b04 	str.w	r4, [r1], #4
 80105ea:	e7f7      	b.n	80105dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80105ec:	f003 0303 	and.w	r3, r3, #3
 80105f0:	3a01      	subs	r2, #1
 80105f2:	440b      	add	r3, r1
 80105f4:	428b      	cmp	r3, r1
 80105f6:	d90c      	bls.n	8010612 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80105f8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80105fc:	f801 0b01 	strb.w	r0, [r1], #1
 8010600:	e7f8      	b.n	80105f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010602:	0790      	lsls	r0, r2, #30
 8010604:	d0e7      	beq.n	80105d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010606:	f832 0b02 	ldrh.w	r0, [r2], #2
 801060a:	3b02      	subs	r3, #2
 801060c:	f821 0b02 	strh.w	r0, [r1], #2
 8010610:	e7e1      	b.n	80105d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010612:	2001      	movs	r0, #1
 8010614:	bd10      	pop	{r4, pc}

08010616 <_ZN8touchgfx3HAL7noTouchEv>:
 8010616:	b510      	push	{r4, lr}
 8010618:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801061c:	4604      	mov	r4, r0
 801061e:	b153      	cbz	r3, 8010636 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010620:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010624:	2101      	movs	r1, #1
 8010626:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801062a:	301c      	adds	r0, #28
 801062c:	f00e f918 	bl	801e860 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010630:	2300      	movs	r3, #0
 8010632:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010636:	bd10      	pop	{r4, pc}

08010638 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801063c:	b085      	sub	sp, #20
 801063e:	4604      	mov	r4, r0
 8010640:	2000      	movs	r0, #0
 8010642:	4699      	mov	r9, r3
 8010644:	ad04      	add	r5, sp, #16
 8010646:	460f      	mov	r7, r1
 8010648:	4690      	mov	r8, r2
 801064a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801064e:	69a0      	ldr	r0, [r4, #24]
 8010650:	6806      	ldr	r6, [r0, #0]
 8010652:	9501      	str	r5, [sp, #4]
 8010654:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8010658:	9500      	str	r5, [sp, #0]
 801065a:	6835      	ldr	r5, [r6, #0]
 801065c:	47a8      	blx	r5
 801065e:	4d10      	ldr	r5, [pc, #64]	; (80106a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010660:	4606      	mov	r6, r0
 8010662:	f8a5 9000 	strh.w	r9, [r5]
 8010666:	f7fa fc15 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 801066a:	6803      	ldr	r3, [r0, #0]
 801066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066e:	4798      	blx	r3
 8010670:	b128      	cbz	r0, 801067e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010672:	2801      	cmp	r0, #1
 8010674:	d00b      	beq.n	801068e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010676:	4630      	mov	r0, r6
 8010678:	b005      	add	sp, #20
 801067a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801067e:	882b      	ldrh	r3, [r5, #0]
 8010680:	fb08 7203 	mla	r2, r8, r3, r7
 8010684:	9b03      	ldr	r3, [sp, #12]
 8010686:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801068a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801068c:	e7f3      	b.n	8010676 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801068e:	882a      	ldrh	r2, [r5, #0]
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	fb08 7202 	mla	r2, r8, r2, r7
 8010696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801069a:	1a9a      	subs	r2, r3, r2
 801069c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801069e:	e7ea      	b.n	8010676 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80106a0:	20011910 	.word	0x20011910

080106a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80106a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106a6:	b08b      	sub	sp, #44	; 0x2c
 80106a8:	4617      	mov	r7, r2
 80106aa:	4604      	mov	r4, r0
 80106ac:	460e      	mov	r6, r1
 80106ae:	461d      	mov	r5, r3
 80106b0:	f7fa fbf0 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 80106b4:	6803      	ldr	r3, [r0, #0]
 80106b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b8:	4798      	blx	r3
 80106ba:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80106be:	9007      	str	r0, [sp, #28]
 80106c0:	4631      	mov	r1, r6
 80106c2:	6822      	ldr	r2, [r4, #0]
 80106c4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80106c8:	4b0c      	ldr	r3, [pc, #48]	; (80106fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80106ca:	4620      	mov	r0, r4
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	9306      	str	r3, [sp, #24]
 80106d0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80106d4:	9305      	str	r3, [sp, #20]
 80106d6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80106da:	9304      	str	r3, [sp, #16]
 80106dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80106e0:	9303      	str	r3, [sp, #12]
 80106e2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80106e6:	9302      	str	r3, [sp, #8]
 80106e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80106ec:	e9cd 5300 	strd	r5, r3, [sp]
 80106f0:	463b      	mov	r3, r7
 80106f2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80106f4:	2200      	movs	r2, #0
 80106f6:	47a8      	blx	r5
 80106f8:	b00b      	add	sp, #44	; 0x2c
 80106fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106fc:	20011910 	.word	0x20011910

08010700 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010704:	4698      	mov	r8, r3
 8010706:	6803      	ldr	r3, [r0, #0]
 8010708:	b08b      	sub	sp, #44	; 0x2c
 801070a:	4617      	mov	r7, r2
 801070c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801070e:	460e      	mov	r6, r1
 8010710:	4b13      	ldr	r3, [pc, #76]	; (8010760 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010712:	4604      	mov	r4, r0
 8010714:	f8b3 9000 	ldrh.w	r9, [r3]
 8010718:	f7fa fbbc 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 801071c:	6803      	ldr	r3, [r0, #0]
 801071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010720:	4798      	blx	r3
 8010722:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010726:	2200      	movs	r2, #0
 8010728:	4631      	mov	r1, r6
 801072a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801072e:	2302      	movs	r3, #2
 8010730:	4620      	mov	r0, r4
 8010732:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010736:	2301      	movs	r3, #1
 8010738:	9305      	str	r3, [sp, #20]
 801073a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801073e:	9304      	str	r3, [sp, #16]
 8010740:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010744:	9303      	str	r3, [sp, #12]
 8010746:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801074a:	9302      	str	r3, [sp, #8]
 801074c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010750:	e9cd 8300 	strd	r8, r3, [sp]
 8010754:	463b      	mov	r3, r7
 8010756:	47a8      	blx	r5
 8010758:	b00b      	add	sp, #44	; 0x2c
 801075a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801075e:	bf00      	nop
 8010760:	20011910 	.word	0x20011910

08010764 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010768:	4698      	mov	r8, r3
 801076a:	6803      	ldr	r3, [r0, #0]
 801076c:	b087      	sub	sp, #28
 801076e:	460e      	mov	r6, r1
 8010770:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8010772:	4617      	mov	r7, r2
 8010774:	4b0f      	ldr	r3, [pc, #60]	; (80107b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010776:	4604      	mov	r4, r0
 8010778:	f8b3 9000 	ldrh.w	r9, [r3]
 801077c:	f7fa fb8a 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010780:	6803      	ldr	r3, [r0, #0]
 8010782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010784:	4798      	blx	r3
 8010786:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801078a:	463a      	mov	r2, r7
 801078c:	4631      	mov	r1, r6
 801078e:	f8cd 900c 	str.w	r9, [sp, #12]
 8010792:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010796:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801079a:	4620      	mov	r0, r4
 801079c:	9302      	str	r3, [sp, #8]
 801079e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	4643      	mov	r3, r8
 80107ac:	47a8      	blx	r5
 80107ae:	b007      	add	sp, #28
 80107b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107b4:	20011910 	.word	0x20011910

080107b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107bc:	4604      	mov	r4, r0
 80107be:	b08f      	sub	sp, #60	; 0x3c
 80107c0:	4610      	mov	r0, r2
 80107c2:	460d      	mov	r5, r1
 80107c4:	4691      	mov	r9, r2
 80107c6:	461e      	mov	r6, r3
 80107c8:	f005 fe9c 	bl	8016504 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	f000 809d 	beq.w	801090c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	4620      	mov	r0, r4
 80107d6:	f8df b198 	ldr.w	fp, [pc, #408]	; 8010970 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80107da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80107de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107e0:	4798      	blx	r3
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	4620      	mov	r0, r4
 80107e6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8010974 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80107ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ec:	4798      	blx	r3
 80107ee:	f8bb 3000 	ldrh.w	r3, [fp]
 80107f2:	4f5c      	ldr	r7, [pc, #368]	; (8010964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	f8ba 3000 	ldrh.w	r3, [sl]
 80107fa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80107fe:	4640      	mov	r0, r8
 8010800:	9302      	str	r3, [sp, #8]
 8010802:	883b      	ldrh	r3, [r7, #0]
 8010804:	9303      	str	r3, [sp, #12]
 8010806:	4b58      	ldr	r3, [pc, #352]	; (8010968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010808:	881a      	ldrh	r2, [r3, #0]
 801080a:	9305      	str	r3, [sp, #20]
 801080c:	9204      	str	r2, [sp, #16]
 801080e:	f005 ffbd 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010812:	8038      	strh	r0, [r7, #0]
 8010814:	4640      	mov	r0, r8
 8010816:	f005 ffed 	bl	80167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801081a:	9b05      	ldr	r3, [sp, #20]
 801081c:	b280      	uxth	r0, r0
 801081e:	8018      	strh	r0, [r3, #0]
 8010820:	4b52      	ldr	r3, [pc, #328]	; (801096c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d174      	bne.n	8010912 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8010828:	883b      	ldrh	r3, [r7, #0]
 801082a:	f8aa 0000 	strh.w	r0, [sl]
 801082e:	f8ab 3000 	strh.w	r3, [fp]
 8010832:	4648      	mov	r0, r9
 8010834:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8010838:	f005 fe64 	bl	8016504 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801083c:	2200      	movs	r2, #0
 801083e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8010842:	4611      	mov	r1, r2
 8010844:	4628      	mov	r0, r5
 8010846:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801084a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801084e:	f7fa f967 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
 8010852:	2301      	movs	r3, #1
 8010854:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8010858:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801085c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	dd5c      	ble.n	801091e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010864:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dd58      	ble.n	801091e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801086c:	462a      	mov	r2, r5
 801086e:	ab0a      	add	r3, sp, #40	; 0x28
 8010870:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010874:	6851      	ldr	r1, [r2, #4]
 8010876:	c303      	stmia	r3!, {r0, r1}
 8010878:	4631      	mov	r1, r6
 801087a:	a80a      	add	r0, sp, #40	; 0x28
 801087c:	f7ff fbfc 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8010880:	4b38      	ldr	r3, [pc, #224]	; (8010964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010882:	2100      	movs	r1, #0
 8010884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010888:	4b37      	ldr	r3, [pc, #220]	; (8010968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801088a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801088e:	aa0a      	add	r2, sp, #40	; 0x28
 8010890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010894:	910c      	str	r1, [sp, #48]	; 0x30
 8010896:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801089a:	ab08      	add	r3, sp, #32
 801089c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80108a4:	4618      	mov	r0, r3
 80108a6:	a90c      	add	r1, sp, #48	; 0x30
 80108a8:	f7ff fbe6 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 80108ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d13c      	bne.n	801092c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80108b2:	2000      	movs	r0, #0
 80108b4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80108b8:	2600      	movs	r6, #0
 80108ba:	696b      	ldr	r3, [r5, #20]
 80108bc:	a908      	add	r1, sp, #32
 80108be:	682a      	ldr	r2, [r5, #0]
 80108c0:	4628      	mov	r0, r5
 80108c2:	9305      	str	r3, [sp, #20]
 80108c4:	616e      	str	r6, [r5, #20]
 80108c6:	6892      	ldr	r2, [r2, #8]
 80108c8:	4790      	blx	r2
 80108ca:	9b05      	ldr	r3, [sp, #20]
 80108cc:	4652      	mov	r2, sl
 80108ce:	4649      	mov	r1, r9
 80108d0:	616b      	str	r3, [r5, #20]
 80108d2:	4628      	mov	r0, r5
 80108d4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80108d8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80108dc:	f7fa f920 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
 80108e0:	9a01      	ldr	r2, [sp, #4]
 80108e2:	4b23      	ldr	r3, [pc, #140]	; (8010970 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80108e4:	4620      	mov	r0, r4
 80108e6:	801a      	strh	r2, [r3, #0]
 80108e8:	9a02      	ldr	r2, [sp, #8]
 80108ea:	4b22      	ldr	r3, [pc, #136]	; (8010974 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80108ec:	801a      	strh	r2, [r3, #0]
 80108ee:	9a03      	ldr	r2, [sp, #12]
 80108f0:	4b1c      	ldr	r3, [pc, #112]	; (8010964 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80108f2:	801a      	strh	r2, [r3, #0]
 80108f4:	4b1c      	ldr	r3, [pc, #112]	; (8010968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80108f6:	9a04      	ldr	r2, [sp, #16]
 80108f8:	801a      	strh	r2, [r3, #0]
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010902:	4798      	blx	r3
 8010904:	6823      	ldr	r3, [r4, #0]
 8010906:	4620      	mov	r0, r4
 8010908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090a:	4798      	blx	r3
 801090c:	b00f      	add	sp, #60	; 0x3c
 801090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010912:	883b      	ldrh	r3, [r7, #0]
 8010914:	f8ab 0000 	strh.w	r0, [fp]
 8010918:	f8aa 3000 	strh.w	r3, [sl]
 801091c:	e789      	b.n	8010832 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801091e:	462a      	mov	r2, r5
 8010920:	ab0a      	add	r3, sp, #40	; 0x28
 8010922:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010926:	6851      	ldr	r1, [r2, #4]
 8010928:	c303      	stmia	r3!, {r0, r1}
 801092a:	e7a9      	b.n	8010880 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801092c:	a807      	add	r0, sp, #28
 801092e:	f006 f865 	bl	80169fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010932:	4606      	mov	r6, r0
 8010934:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010936:	6803      	ldr	r3, [r0, #0]
 8010938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093a:	4798      	blx	r3
 801093c:	4286      	cmp	r6, r0
 801093e:	d1b8      	bne.n	80108b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010940:	f7fa faa8 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010944:	6803      	ldr	r3, [r0, #0]
 8010946:	4606      	mov	r6, r0
 8010948:	a807      	add	r0, sp, #28
 801094a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	f006 f855 	bl	80169fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010952:	9b05      	ldr	r3, [sp, #20]
 8010954:	4601      	mov	r1, r0
 8010956:	4630      	mov	r0, r6
 8010958:	4798      	blx	r3
 801095a:	f080 0001 	eor.w	r0, r0, #1
 801095e:	b2c0      	uxtb	r0, r0
 8010960:	e7a8      	b.n	80108b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010962:	bf00      	nop
 8010964:	2001190a 	.word	0x2001190a
 8010968:	2001190c 	.word	0x2001190c
 801096c:	2001190e 	.word	0x2001190e
 8010970:	20011910 	.word	0x20011910
 8010974:	20011912 	.word	0x20011912

08010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801097a:	b510      	push	{r4, lr}
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	4604      	mov	r4, r0
 8010980:	b13b      	cbz	r3, 8010992 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010982:	6803      	ldr	r3, [r0, #0]
 8010984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010986:	4798      	blx	r3
 8010988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801098a:	4283      	cmp	r3, r0
 801098c:	d101      	bne.n	8010992 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801098e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010990:	bd10      	pop	{r4, pc}
 8010992:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010994:	e7fc      	b.n	8010990 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010996:	bf00      	nop
 8010998:	20011914 	.word	0x20011914

0801099c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a0:	461d      	mov	r5, r3
 80109a2:	b08a      	sub	sp, #40	; 0x28
 80109a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a8:	4690      	mov	r8, r2
 80109aa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80109ae:	2400      	movs	r4, #0
 80109b0:	4607      	mov	r7, r0
 80109b2:	fb06 8505 	mla	r5, r6, r5, r8
 80109b6:	9404      	str	r4, [sp, #16]
 80109b8:	f88d 4020 	strb.w	r4, [sp, #32]
 80109bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80109c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80109c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80109c8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80109cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80109d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80109d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80109d8:	f7ff ffce 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80109dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80109e6:	a901      	add	r1, sp, #4
 80109e8:	9505      	str	r5, [sp, #20]
 80109ea:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80109ee:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80109f2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80109f6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80109fa:	6803      	ldr	r3, [r0, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	4798      	blx	r3
 8010a00:	b00a      	add	sp, #40	; 0x28
 8010a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a06 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010a06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a0a:	b08b      	sub	sp, #44	; 0x2c
 8010a0c:	2400      	movs	r4, #0
 8010a0e:	4691      	mov	r9, r2
 8010a10:	461d      	mov	r5, r3
 8010a12:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8010a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a1a:	4688      	mov	r8, r1
 8010a1c:	4607      	mov	r7, r0
 8010a1e:	9404      	str	r4, [sp, #16]
 8010a20:	fb06 9505 	mla	r5, r6, r5, r9
 8010a24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a28:	f7ff ffa6 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010a2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010a30:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010a3a:	a901      	add	r1, sp, #4
 8010a3c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010a40:	9505      	str	r5, [sp, #20]
 8010a42:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010a46:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010a4a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010a4e:	f8cd 8010 	str.w	r8, [sp, #16]
 8010a52:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010a56:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010a5a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010a5e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010a62:	6803      	ldr	r3, [r0, #0]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	4798      	blx	r3
 8010a68:	b00b      	add	sp, #44	; 0x2c
 8010a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010a70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a74:	b08a      	sub	sp, #40	; 0x28
 8010a76:	4698      	mov	r8, r3
 8010a78:	2300      	movs	r3, #0
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010a80:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8010a84:	2d0b      	cmp	r5, #11
 8010a86:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8010a8a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8010a8e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8010a92:	9304      	str	r3, [sp, #16]
 8010a94:	d137      	bne.n	8010b06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010a96:	2380      	movs	r3, #128	; 0x80
 8010a98:	f88d 0020 	strb.w	r0, [sp, #32]
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	9203      	str	r2, [sp, #12]
 8010aa0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010aa4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010aa8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010aac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010ab0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010ab4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010ab8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010abc:	f7ff ff5c 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010ac0:	2c0b      	cmp	r4, #11
 8010ac2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010ac6:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010aca:	bf94      	ite	ls
 8010acc:	4b19      	ldrls	r3, [pc, #100]	; (8010b34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010ace:	2100      	movhi	r1, #0
 8010ad0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010ad4:	bf98      	it	ls
 8010ad6:	5d19      	ldrbls	r1, [r3, r4]
 8010ad8:	fb02 8307 	mla	r3, r2, r7, r8
 8010adc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010ae0:	10c9      	asrs	r1, r1, #3
 8010ae2:	fb01 0003 	mla	r0, r1, r3, r0
 8010ae6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010aea:	a901      	add	r1, sp, #4
 8010aec:	9005      	str	r0, [sp, #20]
 8010aee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010af2:	2300      	movs	r3, #0
 8010af4:	6870      	ldr	r0, [r6, #4]
 8010af6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010afa:	6803      	ldr	r3, [r0, #0]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	4798      	blx	r3
 8010b00:	b00a      	add	sp, #40	; 0x28
 8010b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b06:	2d02      	cmp	r5, #2
 8010b08:	d109      	bne.n	8010b1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010b0a:	28ff      	cmp	r0, #255	; 0xff
 8010b0c:	d105      	bne.n	8010b1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010b0e:	f1bc 0f00 	cmp.w	ip, #0
 8010b12:	bf14      	ite	ne
 8010b14:	2340      	movne	r3, #64	; 0x40
 8010b16:	2320      	moveq	r3, #32
 8010b18:	e7be      	b.n	8010a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010b1a:	2340      	movs	r3, #64	; 0x40
 8010b1c:	e7bc      	b.n	8010a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010b1e:	28ff      	cmp	r0, #255	; 0xff
 8010b20:	d105      	bne.n	8010b2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010b22:	f1bc 0f00 	cmp.w	ip, #0
 8010b26:	bf14      	ite	ne
 8010b28:	2304      	movne	r3, #4
 8010b2a:	2301      	moveq	r3, #1
 8010b2c:	e7b4      	b.n	8010a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010b2e:	2304      	movs	r3, #4
 8010b30:	e7b2      	b.n	8010a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010b32:	bf00      	nop
 8010b34:	080213d8 	.word	0x080213d8

08010b38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3c:	b08b      	sub	sp, #44	; 0x2c
 8010b3e:	461d      	mov	r5, r3
 8010b40:	2400      	movs	r4, #0
 8010b42:	4688      	mov	r8, r1
 8010b44:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8010b48:	4693      	mov	fp, r2
 8010b4a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8010b4e:	4607      	mov	r7, r0
 8010b50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010b54:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8010b58:	9404      	str	r4, [sp, #16]
 8010b5a:	bf14      	ite	ne
 8010b5c:	2308      	movne	r3, #8
 8010b5e:	2302      	moveq	r3, #2
 8010b60:	fb05 b50a 	mla	r5, r5, sl, fp
 8010b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b68:	f7ff ff06 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010b6c:	2e0b      	cmp	r6, #11
 8010b6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010b72:	a901      	add	r1, sp, #4
 8010b74:	bf98      	it	ls
 8010b76:	4b13      	ldrls	r3, [pc, #76]	; (8010bc4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010b78:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010b7c:	bf98      	it	ls
 8010b7e:	5d9c      	ldrbls	r4, [r3, r6]
 8010b80:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010b84:	10e4      	asrs	r4, r4, #3
 8010b86:	f8cd 8010 	str.w	r8, [sp, #16]
 8010b8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010b8e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010b92:	fb04 0405 	mla	r4, r4, r5, r0
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	9405      	str	r4, [sp, #20]
 8010ba0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010ba4:	f88d 9020 	strb.w	r9, [sp, #32]
 8010ba8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010bac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010bb0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8010bb4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010bb8:	6803      	ldr	r3, [r0, #0]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	4798      	blx	r3
 8010bbe:	b00b      	add	sp, #44	; 0x2c
 8010bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc4:	080213d8 	.word	0x080213d8

08010bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	461e      	mov	r6, r3
 8010bce:	4b0a      	ldr	r3, [pc, #40]	; (8010bf8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010bd0:	460f      	mov	r7, r1
 8010bd2:	4690      	mov	r8, r2
 8010bd4:	881d      	ldrh	r5, [r3, #0]
 8010bd6:	f7fa f95d 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010bda:	6803      	ldr	r3, [r0, #0]
 8010bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bde:	4798      	blx	r3
 8010be0:	280b      	cmp	r0, #11
 8010be2:	bf96      	itet	ls
 8010be4:	4b05      	ldrls	r3, [pc, #20]	; (8010bfc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010be6:	2400      	movhi	r4, #0
 8010be8:	5c1c      	ldrbls	r4, [r3, r0]
 8010bea:	fb08 7005 	mla	r0, r8, r5, r7
 8010bee:	10e4      	asrs	r4, r4, #3
 8010bf0:	fb04 6000 	mla	r0, r4, r0, r6
 8010bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf8:	20011910 	.word	0x20011910
 8010bfc:	080213d8 	.word	0x080213d8

08010c00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c02:	b08b      	sub	sp, #44	; 0x2c
 8010c04:	461f      	mov	r7, r3
 8010c06:	4604      	mov	r4, r0
 8010c08:	4616      	mov	r6, r2
 8010c0a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010c0e:	2500      	movs	r5, #0
 8010c10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010c14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010c18:	9504      	str	r5, [sp, #16]
 8010c1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c1e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010c22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010c26:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010c2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c2e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010c32:	f88d 3020 	strb.w	r3, [sp, #32]
 8010c36:	f7ff fe9f 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c3a:	463a      	mov	r2, r7
 8010c3c:	4631      	mov	r1, r6
 8010c3e:	4603      	mov	r3, r0
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7ff ffc1 	bl	8010bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010c46:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010c48:	9005      	str	r0, [sp, #20]
 8010c4a:	881b      	ldrh	r3, [r3, #0]
 8010c4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010c50:	f7fa f920 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010c54:	6803      	ldr	r3, [r0, #0]
 8010c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c58:	4798      	blx	r3
 8010c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c5c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8010c60:	a901      	add	r1, sp, #4
 8010c62:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8010c66:	9304      	str	r3, [sp, #16]
 8010c68:	6860      	ldr	r0, [r4, #4]
 8010c6a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010c6e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010c72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010c76:	6803      	ldr	r3, [r0, #0]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	4798      	blx	r3
 8010c7c:	b00b      	add	sp, #44	; 0x2c
 8010c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c80:	20011910 	.word	0x20011910

08010c84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c86:	b08d      	sub	sp, #52	; 0x34
 8010c88:	2501      	movs	r5, #1
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	466b      	mov	r3, sp
 8010c8e:	9503      	str	r5, [sp, #12]
 8010c90:	e883 0006 	stmia.w	r3, {r1, r2}
 8010c94:	2300      	movs	r3, #0
 8010c96:	f8bd 6000 	ldrh.w	r6, [sp]
 8010c9a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010c9e:	9306      	str	r3, [sp, #24]
 8010ca0:	6803      	ldr	r3, [r0, #0]
 8010ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ca4:	4798      	blx	r3
 8010ca6:	463a      	mov	r2, r7
 8010ca8:	4631      	mov	r1, r6
 8010caa:	4603      	mov	r3, r0
 8010cac:	4620      	mov	r0, r4
 8010cae:	f7ff ff8b 	bl	8010bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cb4:	9004      	str	r0, [sp, #16]
 8010cb6:	9307      	str	r3, [sp, #28]
 8010cb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010cbc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010cc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010cc4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010cc8:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010cd0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010cd4:	f7fa f8de 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010cd8:	6803      	ldr	r3, [r0, #0]
 8010cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cdc:	4798      	blx	r3
 8010cde:	23ff      	movs	r3, #255	; 0xff
 8010ce0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010ce4:	a903      	add	r1, sp, #12
 8010ce6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010cea:	6860      	ldr	r0, [r4, #4]
 8010cec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010cf0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010cf4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010cf8:	6803      	ldr	r3, [r0, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	4798      	blx	r3
 8010cfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010d00:	b00d      	add	sp, #52	; 0x34
 8010d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d04:	20011910 	.word	0x20011910

08010d08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0c:	b08c      	sub	sp, #48	; 0x30
 8010d0e:	461e      	mov	r6, r3
 8010d10:	2300      	movs	r3, #0
 8010d12:	4604      	mov	r4, r0
 8010d14:	466d      	mov	r5, sp
 8010d16:	9306      	str	r3, [sp, #24]
 8010d18:	6803      	ldr	r3, [r0, #0]
 8010d1a:	e885 0006 	stmia.w	r5, {r1, r2}
 8010d1e:	2501      	movs	r5, #1
 8010d20:	f8bd 7000 	ldrh.w	r7, [sp]
 8010d24:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010d28:	9503      	str	r5, [sp, #12]
 8010d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d2c:	4798      	blx	r3
 8010d2e:	4642      	mov	r2, r8
 8010d30:	4639      	mov	r1, r7
 8010d32:	4603      	mov	r3, r0
 8010d34:	4620      	mov	r0, r4
 8010d36:	f7ff ff47 	bl	8010bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010d3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010d3e:	9004      	str	r0, [sp, #16]
 8010d40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010d44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010d48:	9607      	str	r6, [sp, #28]
 8010d4a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010d4e:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d58:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010d5c:	f7fa f89a 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8010d60:	6803      	ldr	r3, [r0, #0]
 8010d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d64:	4798      	blx	r3
 8010d66:	23ff      	movs	r3, #255	; 0xff
 8010d68:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010d6c:	a903      	add	r1, sp, #12
 8010d6e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010d72:	6860      	ldr	r0, [r4, #4]
 8010d74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010d78:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010d7c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010d80:	6803      	ldr	r3, [r0, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	4798      	blx	r3
 8010d86:	4630      	mov	r0, r6
 8010d88:	b00c      	add	sp, #48	; 0x30
 8010d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8e:	bf00      	nop
 8010d90:	20011910 	.word	0x20011910

08010d94 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d96:	b085      	sub	sp, #20
 8010d98:	4605      	mov	r5, r0
 8010d9a:	ac02      	add	r4, sp, #8
 8010d9c:	e884 0006 	stmia.w	r4, {r1, r2}
 8010da0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010da4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010da8:	f7ff fde6 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010dac:	4631      	mov	r1, r6
 8010dae:	4603      	mov	r3, r0
 8010db0:	463a      	mov	r2, r7
 8010db2:	4628      	mov	r0, r5
 8010db4:	f7ff ff08 	bl	8010bc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010db8:	4a05      	ldr	r2, [pc, #20]	; (8010dd0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010dba:	682b      	ldr	r3, [r5, #0]
 8010dbc:	8812      	ldrh	r2, [r2, #0]
 8010dbe:	9200      	str	r2, [sp, #0]
 8010dc0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010dca:	47b0      	blx	r6
 8010dcc:	b005      	add	sp, #20
 8010dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd0:	20011910 	.word	0x20011910

08010dd4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010dd4:	b570      	push	{r4, r5, r6, lr}
 8010dd6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010dda:	4604      	mov	r4, r0
 8010ddc:	b19b      	cbz	r3, 8010e06 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010dde:	2002      	movs	r0, #2
 8010de0:	f7fd f998 	bl	800e114 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010de4:	2300      	movs	r3, #0
 8010de6:	4620      	mov	r0, r4
 8010de8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010dec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010df0:	6823      	ldr	r3, [r4, #0]
 8010df2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8010df6:	f7ff fdbf 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010dfa:	4601      	mov	r1, r0
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	462b      	mov	r3, r5
 8010e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e04:	4718      	bx	r3
 8010e06:	bd70      	pop	{r4, r5, r6, pc}

08010e08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8010e0e:	4604      	mov	r4, r0
 8010e10:	460d      	mov	r5, r1
 8010e12:	428b      	cmp	r3, r1
 8010e14:	d006      	beq.n	8010e24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010e16:	6803      	ldr	r3, [r0, #0]
 8010e18:	b929      	cbnz	r1, 8010e26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010e1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010e1e:	4798      	blx	r3
 8010e20:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010e2a:	e7f8      	b.n	8010e1e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010e2c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010e2c:	4b0d      	ldr	r3, [pc, #52]	; (8010e64 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010e2e:	b510      	push	{r4, lr}
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	4604      	mov	r4, r0
 8010e34:	b95b      	cbnz	r3, 8010e4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010e36:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d007      	beq.n	8010e4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010e3e:	6840      	ldr	r0, [r0, #4]
 8010e40:	f000 f90e 	bl	8011060 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010e44:	b118      	cbz	r0, 8010e4e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010e46:	6862      	ldr	r2, [r4, #4]
 8010e48:	7a53      	ldrb	r3, [r2, #9]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0fc      	beq.n	8010e48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010e4e:	f7fd fbfb 	bl	800e648 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010e52:	4620      	mov	r0, r4
 8010e54:	2100      	movs	r1, #0
 8010e56:	f7ff ffd7 	bl	8010e08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f7ff fd8c 	bl	8010978 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e60:	bd10      	pop	{r4, pc}
 8010e62:	bf00      	nop
 8010e64:	20011914 	.word	0x20011914

08010e68 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8010e68:	4770      	bx	lr

08010e6a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	4770      	bx	lr

08010e6e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010e6e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010e72:	1a13      	subs	r3, r2, r0
 8010e74:	4258      	negs	r0, r3
 8010e76:	4158      	adcs	r0, r3
 8010e78:	4770      	bx	lr

08010e7a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010e7a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010e7e:	1a9b      	subs	r3, r3, r2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	bfdc      	itt	le
 8010e84:	6882      	ldrle	r2, [r0, #8]
 8010e86:	189b      	addle	r3, r3, r2
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	bfcc      	ite	gt
 8010e8c:	2000      	movgt	r0, #0
 8010e8e:	2001      	movle	r0, #1
 8010e90:	4770      	bx	lr

08010e92 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010e92:	6902      	ldr	r2, [r0, #16]
 8010e94:	6843      	ldr	r3, [r0, #4]
 8010e96:	2024      	movs	r0, #36	; 0x24
 8010e98:	fb00 3002 	mla	r0, r0, r2, r3
 8010e9c:	4770      	bx	lr

08010e9e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010e9e:	6803      	ldr	r3, [r0, #0]
 8010ea0:	691b      	ldr	r3, [r3, #16]
 8010ea2:	4718      	bx	r3

08010ea4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	b570      	push	{r4, r5, r6, lr}
 8010ea8:	7203      	strb	r3, [r0, #8]
 8010eaa:	4604      	mov	r4, r0
 8010eac:	6840      	ldr	r0, [r0, #4]
 8010eae:	6803      	ldr	r3, [r0, #0]
 8010eb0:	699b      	ldr	r3, [r3, #24]
 8010eb2:	4798      	blx	r3
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	2b40      	cmp	r3, #64	; 0x40
 8010eba:	d00c      	beq.n	8010ed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ebc:	d810      	bhi.n	8010ee0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010ebe:	2b04      	cmp	r3, #4
 8010ec0:	d01d      	beq.n	8010efe <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010ec2:	d804      	bhi.n	8010ece <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d006      	beq.n	8010ed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ec8:	2b02      	cmp	r3, #2
 8010eca:	d02c      	beq.n	8010f26 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	2b08      	cmp	r3, #8
 8010ed0:	d01d      	beq.n	8010f0e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010ed2:	2b20      	cmp	r3, #32
 8010ed4:	d1fa      	bne.n	8010ecc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	4620      	mov	r0, r4
 8010eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010edc:	4798      	blx	r3
 8010ede:	e013      	b.n	8010f08 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ee4:	d0f7      	beq.n	8010ed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ee6:	d804      	bhi.n	8010ef2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010ee8:	2b80      	cmp	r3, #128	; 0x80
 8010eea:	d0f4      	beq.n	8010ed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ef0:	e7f0      	b.n	8010ed4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef6:	d0ee      	beq.n	8010ed6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010efc:	e7e5      	b.n	8010eca <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	7f01      	ldrb	r1, [r0, #28]
 8010f02:	4620      	mov	r0, r4
 8010f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f06:	4798      	blx	r3
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f0c:	e006      	b.n	8010f1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010f0e:	6823      	ldr	r3, [r4, #0]
 8010f10:	7f01      	ldrb	r1, [r0, #28]
 8010f12:	4620      	mov	r0, r4
 8010f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f16:	4798      	blx	r3
 8010f18:	6823      	ldr	r3, [r4, #0]
 8010f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	4620      	mov	r0, r4
 8010f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f24:	4718      	bx	r3
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	4620      	mov	r0, r4
 8010f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2c:	4798      	blx	r3
 8010f2e:	e7f3      	b.n	8010f18 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010f30 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010f30:	4770      	bx	lr

08010f32 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010f32:	4770      	bx	lr

08010f34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010f34:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	1ad2      	subs	r2, r2, r3
 8010f3c:	2a00      	cmp	r2, #0
 8010f3e:	bfdc      	itt	le
 8010f40:	6884      	ldrle	r4, [r0, #8]
 8010f42:	1912      	addle	r2, r2, r4
 8010f44:	2a01      	cmp	r2, #1
 8010f46:	dd16      	ble.n	8010f76 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010f48:	6842      	ldr	r2, [r0, #4]
 8010f4a:	2424      	movs	r4, #36	; 0x24
 8010f4c:	fb04 2303 	mla	r3, r4, r3, r2
 8010f50:	f101 0220 	add.w	r2, r1, #32
 8010f54:	f851 4b04 	ldr.w	r4, [r1], #4
 8010f58:	4291      	cmp	r1, r2
 8010f5a:	f843 4b04 	str.w	r4, [r3], #4
 8010f5e:	d1f9      	bne.n	8010f54 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010f60:	780a      	ldrb	r2, [r1, #0]
 8010f62:	701a      	strb	r2, [r3, #0]
 8010f64:	68c3      	ldr	r3, [r0, #12]
 8010f66:	6882      	ldr	r2, [r0, #8]
 8010f68:	f3bf 8f5b 	dmb	ish
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	bfd8      	it	le
 8010f72:	1a9b      	suble	r3, r3, r2
 8010f74:	60c3      	str	r3, [r0, #12]
 8010f76:	bd10      	pop	{r4, pc}

08010f78 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010f78:	6903      	ldr	r3, [r0, #16]
 8010f7a:	6882      	ldr	r2, [r0, #8]
 8010f7c:	f3bf 8f5b 	dmb	ish
 8010f80:	3301      	adds	r3, #1
 8010f82:	429a      	cmp	r2, r3
 8010f84:	bfd8      	it	le
 8010f86:	1a9b      	suble	r3, r3, r2
 8010f88:	6103      	str	r3, [r0, #16]
 8010f8a:	4770      	bx	lr

08010f8c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010f8c:	b570      	push	{r4, r5, r6, lr}
 8010f8e:	4604      	mov	r4, r0
 8010f90:	460e      	mov	r6, r1
 8010f92:	6860      	ldr	r0, [r4, #4]
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	4798      	blx	r3
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	d1f9      	bne.n	8010f92 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8010f9e:	4d0d      	ldr	r5, [pc, #52]	; (8010fd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8010fa0:	6828      	ldr	r0, [r5, #0]
 8010fa2:	6803      	ldr	r3, [r0, #0]
 8010fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fa6:	4798      	blx	r3
 8010fa8:	f7fd fb68 	bl	800e67c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010fac:	6828      	ldr	r0, [r5, #0]
 8010fae:	2101      	movs	r1, #1
 8010fb0:	f7ff ff2a 	bl	8010e08 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010fb4:	6860      	ldr	r0, [r4, #4]
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	6803      	ldr	r3, [r0, #0]
 8010fba:	689b      	ldr	r3, [r3, #8]
 8010fbc:	4798      	blx	r3
 8010fbe:	6823      	ldr	r3, [r4, #0]
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc4:	4798      	blx	r3
 8010fc6:	6828      	ldr	r0, [r5, #0]
 8010fc8:	6803      	ldr	r3, [r0, #0]
 8010fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fd0:	4718      	bx	r3
 8010fd2:	bf00      	nop
 8010fd4:	20011918 	.word	0x20011918

08010fd8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010fd8:	b508      	push	{r3, lr}
 8010fda:	f7fd fb35 	bl	800e648 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010fe2:	f7fd bb3f 	b.w	800e664 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010fe6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	4604      	mov	r4, r0
 8010fea:	6840      	ldr	r0, [r0, #4]
 8010fec:	6803      	ldr	r3, [r0, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4798      	blx	r3
 8010ff2:	b948      	cbnz	r0, 8011008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010ff4:	7a63      	ldrb	r3, [r4, #9]
 8010ff6:	b13b      	cbz	r3, 8011008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010ff8:	7a23      	ldrb	r3, [r4, #8]
 8010ffa:	b92b      	cbnz	r3, 8011008 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010ffc:	6823      	ldr	r3, [r4, #0]
 8010ffe:	4620      	mov	r0, r4
 8011000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011006:	4718      	bx	r3
 8011008:	bd10      	pop	{r4, pc}

0801100a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801100a:	b570      	push	{r4, r5, r6, lr}
 801100c:	4604      	mov	r4, r0
 801100e:	6840      	ldr	r0, [r0, #4]
 8011010:	6803      	ldr	r3, [r0, #0]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4798      	blx	r3
 8011016:	4605      	mov	r5, r0
 8011018:	b930      	cbnz	r0, 8011028 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801101a:	7a23      	ldrb	r3, [r4, #8]
 801101c:	b123      	cbz	r3, 8011028 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801101e:	6860      	ldr	r0, [r4, #4]
 8011020:	6803      	ldr	r3, [r0, #0]
 8011022:	695b      	ldr	r3, [r3, #20]
 8011024:	4798      	blx	r3
 8011026:	7225      	strb	r5, [r4, #8]
 8011028:	6860      	ldr	r0, [r4, #4]
 801102a:	6803      	ldr	r3, [r0, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4798      	blx	r3
 8011030:	b928      	cbnz	r0, 801103e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	4620      	mov	r0, r4
 8011036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801103c:	4718      	bx	r3
 801103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011042:	f7fd bb27 	b.w	800e694 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08011048 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011048:	b510      	push	{r4, lr}
 801104a:	6082      	str	r2, [r0, #8]
 801104c:	2200      	movs	r2, #0
 801104e:	4c03      	ldr	r4, [pc, #12]	; (801105c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011050:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011054:	e9c0 4100 	strd	r4, r1, [r0]
 8011058:	bd10      	pop	{r4, pc}
 801105a:	bf00      	nop
 801105c:	08021514 	.word	0x08021514

08011060 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011060:	6840      	ldr	r0, [r0, #4]
 8011062:	6803      	ldr	r3, [r0, #0]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4718      	bx	r3

08011068 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011068:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801106c:	4770      	bx	lr

0801106e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801106e:	b510      	push	{r4, lr}
 8011070:	4604      	mov	r4, r0
 8011072:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011074:	b150      	cbz	r0, 801108c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011076:	6803      	ldr	r3, [r0, #0]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	4798      	blx	r3
 801107c:	b130      	cbz	r0, 801108c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801107e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011080:	4621      	mov	r1, r4
 8011082:	6803      	ldr	r3, [r0, #0]
 8011084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	4718      	bx	r3
 801108c:	bd10      	pop	{r4, pc}

0801108e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801108e:	790b      	ldrb	r3, [r1, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	bf0c      	ite	eq
 8011094:	2301      	moveq	r3, #1
 8011096:	2300      	movne	r3, #0
 8011098:	b570      	push	{r4, r5, r6, lr}
 801109a:	4604      	mov	r4, r0
 801109c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80110a0:	460e      	mov	r6, r1
 80110a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80110a6:	d109      	bne.n	80110bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80110a8:	b14d      	cbz	r5, 80110be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80110aa:	7933      	ldrb	r3, [r6, #4]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d10c      	bne.n	80110ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	4620      	mov	r0, r4
 80110b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ba:	4718      	bx	r3
 80110bc:	b12d      	cbz	r5, 80110ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	4620      	mov	r0, r4
 80110c2:	695b      	ldr	r3, [r3, #20]
 80110c4:	4798      	blx	r3
 80110c6:	2d00      	cmp	r5, #0
 80110c8:	d1ef      	bne.n	80110aa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80110ca:	bd70      	pop	{r4, r5, r6, pc}

080110cc <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 80110cc:	b508      	push	{r3, lr}
 80110ce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80110d2:	b10b      	cbz	r3, 80110d8 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 80110d4:	f7f9 fcae 	bl	800aa34 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80110d8:	bd08      	pop	{r3, pc}

080110da <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80110da:	6803      	ldr	r3, [r0, #0]
 80110dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80110e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110e2:	4718      	bx	r3

080110e4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80110e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80110e8:	2bff      	cmp	r3, #255	; 0xff
 80110ea:	b510      	push	{r4, lr}
 80110ec:	d104      	bne.n	80110f8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80110ee:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80110f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d105      	bne.n	8011104 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80110f8:	2300      	movs	r3, #0
 80110fa:	8003      	strh	r3, [r0, #0]
 80110fc:	8043      	strh	r3, [r0, #2]
 80110fe:	8083      	strh	r3, [r0, #4]
 8011100:	80c3      	strh	r3, [r0, #6]
 8011102:	bd10      	pop	{r4, pc}
 8011104:	2300      	movs	r3, #0
 8011106:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801110a:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801110e:	8003      	strh	r3, [r0, #0]
 8011110:	8043      	strh	r3, [r0, #2]
 8011112:	8084      	strh	r4, [r0, #4]
 8011114:	80c2      	strh	r2, [r0, #6]
 8011116:	e7f4      	b.n	8011102 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08011118 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8011118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801111c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8011120:	b087      	sub	sp, #28
 8011122:	4604      	mov	r4, r0
 8011124:	4689      	mov	r9, r1
 8011126:	b363      	cbz	r3, 8011182 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8011128:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801112e:	429a      	cmp	r2, r3
 8011130:	d027      	beq.n	8011182 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8011132:	ad06      	add	r5, sp, #24
 8011134:	2700      	movs	r7, #0
 8011136:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801113a:	4628      	mov	r0, r5
 801113c:	f005 fb26 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011140:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011144:	a904      	add	r1, sp, #16
 8011146:	f8ad 0014 	strh.w	r0, [sp, #20]
 801114a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801114e:	4620      	mov	r0, r4
 8011150:	6823      	ldr	r3, [r4, #0]
 8011152:	9704      	str	r7, [sp, #16]
 8011154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011156:	4798      	blx	r3
 8011158:	f7f9 fe9c 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 801115c:	6803      	ldr	r3, [r0, #0]
 801115e:	4606      	mov	r6, r0
 8011160:	4628      	mov	r0, r5
 8011162:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011166:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011168:	f8ad 300c 	strh.w	r3, [sp, #12]
 801116c:	f005 fbc2 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8011170:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011174:	4601      	mov	r1, r0
 8011176:	9701      	str	r7, [sp, #4]
 8011178:	aa04      	add	r2, sp, #16
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4630      	mov	r0, r6
 801117e:	464b      	mov	r3, r9
 8011180:	47c0      	blx	r8
 8011182:	b007      	add	sp, #28
 8011184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011188 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8011188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801118a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801118e:	460d      	mov	r5, r1
 8011190:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011194:	2100      	movs	r1, #0
 8011196:	f8ad 3006 	strh.w	r3, [sp, #6]
 801119a:	4604      	mov	r4, r0
 801119c:	6803      	ldr	r3, [r0, #0]
 801119e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80111a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a4:	9100      	str	r1, [sp, #0]
 80111a6:	4669      	mov	r1, sp
 80111a8:	4798      	blx	r3
 80111aa:	4621      	mov	r1, r4
 80111ac:	a802      	add	r0, sp, #8
 80111ae:	f003 fac1 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111b2:	f7f9 fe6f 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 80111b6:	6803      	ldr	r3, [r0, #0]
 80111b8:	aa02      	add	r2, sp, #8
 80111ba:	4669      	mov	r1, sp
 80111bc:	695e      	ldr	r6, [r3, #20]
 80111be:	462b      	mov	r3, r5
 80111c0:	47b0      	blx	r6
 80111c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111c6:	2800      	cmp	r0, #0
 80111c8:	bf08      	it	eq
 80111ca:	461d      	moveq	r5, r3
 80111cc:	84e5      	strh	r5, [r4, #38]	; 0x26
 80111ce:	b004      	add	sp, #16
 80111d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080111d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80111d4:	2200      	movs	r2, #0
 80111d6:	8082      	strh	r2, [r0, #4]
 80111d8:	80c2      	strh	r2, [r0, #6]
 80111da:	8102      	strh	r2, [r0, #8]
 80111dc:	8142      	strh	r2, [r0, #10]
 80111de:	8182      	strh	r2, [r0, #12]
 80111e0:	81c2      	strh	r2, [r0, #14]
 80111e2:	8202      	strh	r2, [r0, #16]
 80111e4:	8242      	strh	r2, [r0, #18]
 80111e6:	61c2      	str	r2, [r0, #28]
 80111e8:	8402      	strh	r2, [r0, #32]
 80111ea:	8442      	strh	r2, [r0, #34]	; 0x22
 80111ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80111f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80111f4:	2201      	movs	r2, #1
 80111f6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80111fa:	4a04      	ldr	r2, [pc, #16]	; (801120c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 80111fc:	6002      	str	r2, [r0, #0]
 80111fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011202:	84c2      	strh	r2, [r0, #38]	; 0x26
 8011204:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	080215a8 	.word	0x080215a8

08011210 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8011210:	2000      	movs	r0, #0
 8011212:	4770      	bx	lr

08011214 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8011214:	4b07      	ldr	r3, [pc, #28]	; (8011234 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8011216:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	4293      	cmp	r3, r2
 801121c:	bf81      	itttt	hi
 801121e:	4b06      	ldrhi	r3, [pc, #24]	; (8011238 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8011220:	681b      	ldrhi	r3, [r3, #0]
 8011222:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8011226:	7858      	ldrbhi	r0, [r3, #1]
 8011228:	bf8c      	ite	hi
 801122a:	f000 0003 	andhi.w	r0, r0, #3
 801122e:	2000      	movls	r0, #0
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	2001196c 	.word	0x2001196c
 8011238:	20011968 	.word	0x20011968

0801123c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801123c:	4b11      	ldr	r3, [pc, #68]	; (8011284 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801123e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011242:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011244:	4604      	mov	r4, r0
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	428b      	cmp	r3, r1
 801124a:	d918      	bls.n	801127e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801124c:	6803      	ldr	r3, [r0, #0]
 801124e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8011250:	4b0d      	ldr	r3, [pc, #52]	; (8011288 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	f7fc fb9a 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	4606      	mov	r6, r0
 801125c:	4620      	mov	r0, r4
 801125e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011260:	4798      	blx	r3
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	4607      	mov	r7, r0
 8011266:	4620      	mov	r0, r4
 8011268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801126c:	4798      	blx	r3
 801126e:	463a      	mov	r2, r7
 8011270:	4603      	mov	r3, r0
 8011272:	4631      	mov	r1, r6
 8011274:	4620      	mov	r0, r4
 8011276:	46ac      	mov	ip, r5
 8011278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801127c:	4760      	bx	ip
 801127e:	2000      	movs	r0, #0
 8011280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011284:	2001196c 	.word	0x2001196c
 8011288:	20011974 	.word	0x20011974

0801128c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801128c:	4b18      	ldr	r3, [pc, #96]	; (80112f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801128e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011292:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011294:	4604      	mov	r4, r0
 8011296:	881b      	ldrh	r3, [r3, #0]
 8011298:	428b      	cmp	r3, r1
 801129a:	d926      	bls.n	80112ea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801129c:	4b15      	ldr	r3, [pc, #84]	; (80112f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80112a4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80112a8:	4b13      	ldr	r3, [pc, #76]	; (80112f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80112aa:	7855      	ldrb	r5, [r2, #1]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80112b2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80112b6:	6833      	ldr	r3, [r6, #0]
 80112b8:	69df      	ldr	r7, [r3, #28]
 80112ba:	4b10      	ldr	r3, [pc, #64]	; (80112fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80112bc:	6818      	ldr	r0, [r3, #0]
 80112be:	f7fc fb65 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	4680      	mov	r8, r0
 80112c6:	4620      	mov	r0, r4
 80112c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112ca:	4798      	blx	r3
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	4681      	mov	r9, r0
 80112d0:	4620      	mov	r0, r4
 80112d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112d6:	4798      	blx	r3
 80112d8:	464b      	mov	r3, r9
 80112da:	9000      	str	r0, [sp, #0]
 80112dc:	4642      	mov	r2, r8
 80112de:	4629      	mov	r1, r5
 80112e0:	4630      	mov	r0, r6
 80112e2:	47b8      	blx	r7
 80112e4:	b003      	add	sp, #12
 80112e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112ea:	2000      	movs	r0, #0
 80112ec:	e7fa      	b.n	80112e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80112ee:	bf00      	nop
 80112f0:	2001196c 	.word	0x2001196c
 80112f4:	20011968 	.word	0x20011968
 80112f8:	20011970 	.word	0x20011970
 80112fc:	20011974 	.word	0x20011974

08011300 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8011300:	b40e      	push	{r1, r2, r3}
 8011302:	4b30      	ldr	r3, [pc, #192]	; (80113c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8011304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011308:	881a      	ldrh	r2, [r3, #0]
 801130a:	b09d      	sub	sp, #116	; 0x74
 801130c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801130e:	4604      	mov	r4, r0
 8011310:	429a      	cmp	r2, r3
 8011312:	d954      	bls.n	80113be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8011314:	aa26      	add	r2, sp, #152	; 0x98
 8011316:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80113c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801131a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80113cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801131e:	9202      	str	r2, [sp, #8]
 8011320:	f8d9 2000 	ldr.w	r2, [r9]
 8011324:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011328:	f8d8 3000 	ldr.w	r3, [r8]
 801132c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011330:	682b      	ldr	r3, [r5, #0]
 8011332:	4628      	mov	r0, r5
 8011334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011336:	4798      	blx	r3
 8011338:	4606      	mov	r6, r0
 801133a:	b207      	sxth	r7, r0
 801133c:	a803      	add	r0, sp, #12
 801133e:	f003 fde2 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8011342:	682b      	ldr	r3, [r5, #0]
 8011344:	4628      	mov	r0, r5
 8011346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011348:	4798      	blx	r3
 801134a:	682b      	ldr	r3, [r5, #0]
 801134c:	4682      	mov	sl, r0
 801134e:	4628      	mov	r0, r5
 8011350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011352:	4798      	blx	r3
 8011354:	4653      	mov	r3, sl
 8011356:	9000      	str	r0, [sp, #0]
 8011358:	a803      	add	r0, sp, #12
 801135a:	9a02      	ldr	r2, [sp, #8]
 801135c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801135e:	f003 fe2d 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011362:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011364:	f8d9 3000 	ldr.w	r3, [r9]
 8011368:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801136c:	8925      	ldrh	r5, [r4, #8]
 801136e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8011372:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011376:	eba5 050c 	sub.w	r5, r5, ip
 801137a:	784a      	ldrb	r2, [r1, #1]
 801137c:	f8d8 3000 	ldr.w	r3, [r8]
 8011380:	b22d      	sxth	r5, r5
 8011382:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8011386:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801138a:	9500      	str	r5, [sp, #0]
 801138c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011390:	a803      	add	r0, sp, #12
 8011392:	f001 fc5f 	bl	8012c54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011396:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801139a:	b203      	sxth	r3, r0
 801139c:	18b9      	adds	r1, r7, r2
 801139e:	2900      	cmp	r1, #0
 80113a0:	dd0b      	ble.n	80113ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80113a2:	3b01      	subs	r3, #1
 80113a4:	fb13 f302 	smulbb	r3, r3, r2
 80113a8:	fb16 3300 	smlabb	r3, r6, r0, r3
 80113ac:	b21f      	sxth	r7, r3
 80113ae:	4638      	mov	r0, r7
 80113b0:	b01d      	add	sp, #116	; 0x74
 80113b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b6:	b003      	add	sp, #12
 80113b8:	4770      	bx	lr
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dcf7      	bgt.n	80113ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80113be:	2700      	movs	r7, #0
 80113c0:	e7f5      	b.n	80113ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80113c2:	bf00      	nop
 80113c4:	2001196c 	.word	0x2001196c
 80113c8:	20011968 	.word	0x20011968
 80113cc:	20011970 	.word	0x20011970

080113d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80113d0:	4bbd      	ldr	r3, [pc, #756]	; (80116c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80113d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d6:	460c      	mov	r4, r1
 80113d8:	881b      	ldrh	r3, [r3, #0]
 80113da:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80113dc:	b0a9      	sub	sp, #164	; 0xa4
 80113de:	4680      	mov	r8, r0
 80113e0:	428b      	cmp	r3, r1
 80113e2:	d809      	bhi.n	80113f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80113e4:	2300      	movs	r3, #0
 80113e6:	f04f 32ff 	mov.w	r2, #4294967295
 80113ea:	6083      	str	r3, [r0, #8]
 80113ec:	e9c0 3200 	strd	r3, r2, [r0]
 80113f0:	4640      	mov	r0, r8
 80113f2:	b029      	add	sp, #164	; 0xa4
 80113f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f8:	4eb4      	ldr	r6, [pc, #720]	; (80116cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 80113fa:	6833      	ldr	r3, [r6, #0]
 80113fc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8011400:	4bb3      	ldr	r3, [pc, #716]	; (80116d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011408:	4bb2      	ldr	r3, [pc, #712]	; (80116d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801140a:	6818      	ldr	r0, [r3, #0]
 801140c:	f7fc fabe 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	4681      	mov	r9, r0
 8011414:	4628      	mov	r0, r5
 8011416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011418:	4798      	blx	r3
 801141a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801141c:	b203      	sxth	r3, r0
 801141e:	4682      	mov	sl, r0
 8011420:	4407      	add	r7, r0
 8011422:	a80f      	add	r0, sp, #60	; 0x3c
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	b2bb      	uxth	r3, r7
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801142e:	2b00      	cmp	r3, #0
 8011430:	f040 80a5 	bne.w	801157e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8011434:	f003 fd67 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8011438:	682b      	ldr	r3, [r5, #0]
 801143a:	4628      	mov	r0, r5
 801143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801143e:	4798      	blx	r3
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	4606      	mov	r6, r0
 8011444:	4628      	mov	r0, r5
 8011446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011448:	4798      	blx	r3
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	4607      	mov	r7, r0
 801144e:	4620      	mov	r0, r4
 8011450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011452:	4798      	blx	r3
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	4683      	mov	fp, r0
 8011458:	4620      	mov	r0, r4
 801145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801145e:	4798      	blx	r3
 8011460:	463b      	mov	r3, r7
 8011462:	4649      	mov	r1, r9
 8011464:	4632      	mov	r2, r6
 8011466:	2600      	movs	r6, #0
 8011468:	e9cd b000 	strd	fp, r0, [sp]
 801146c:	a80f      	add	r0, sp, #60	; 0x3c
 801146e:	4637      	mov	r7, r6
 8011470:	f003 fdb9 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8011474:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011478:	f8df b250 	ldr.w	fp, [pc, #592]	; 80116cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801147c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011480:	bf0c      	ite	eq
 8011482:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8011486:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801148a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801148c:	4629      	mov	r1, r5
 801148e:	f8db 3000 	ldr.w	r3, [fp]
 8011492:	a80f      	add	r0, sp, #60	; 0x3c
 8011494:	3701      	adds	r7, #1
 8011496:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801149a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801149e:	b2bf      	uxth	r7, r7
 80114a0:	785b      	ldrb	r3, [r3, #1]
 80114a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80114a6:	f001 f8f0 	bl	801268a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	4286      	cmp	r6, r0
 80114ae:	eba9 0903 	sub.w	r9, r9, r3
 80114b2:	bfb8      	it	lt
 80114b4:	4606      	movlt	r6, r0
 80114b6:	a80f      	add	r0, sp, #60	; 0x3c
 80114b8:	fa0f f989 	sxth.w	r9, r9
 80114bc:	b236      	sxth	r6, r6
 80114be:	f003 fd49 	bl	8014f54 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80114c2:	b918      	cbnz	r0, 80114cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80114c4:	7a2b      	ldrb	r3, [r5, #8]
 80114c6:	444b      	add	r3, r9
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	dcde      	bgt.n	801148a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 80114cc:	9b03      	ldr	r3, [sp, #12]
 80114ce:	4620      	mov	r0, r4
 80114d0:	9a04      	ldr	r2, [sp, #16]
 80114d2:	fb13 f707 	smulbb	r7, r3, r7
 80114d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80114d8:	f895 9009 	ldrb.w	r9, [r5, #9]
 80114dc:	1aff      	subs	r7, r7, r3
 80114de:	b2bf      	uxth	r7, r7
 80114e0:	b23b      	sxth	r3, r7
 80114e2:	429a      	cmp	r2, r3
 80114e4:	bfa8      	it	ge
 80114e6:	4657      	movge	r7, sl
 80114e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80114ec:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80114f0:	6823      	ldr	r3, [r4, #0]
 80114f2:	444f      	add	r7, r9
 80114f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114f6:	bf08      	it	eq
 80114f8:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 80114fc:	fa1f f987 	uxth.w	r9, r7
 8011500:	bf18      	it	ne
 8011502:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8011506:	4798      	blx	r3
 8011508:	2801      	cmp	r0, #1
 801150a:	fa0f f789 	sxth.w	r7, r9
 801150e:	b2b3      	uxth	r3, r6
 8011510:	f000 80e2 	beq.w	80116d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8011514:	2802      	cmp	r0, #2
 8011516:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801151a:	f000 80e3 	beq.w	80116e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801151e:	7aea      	ldrb	r2, [r5, #11]
 8011520:	b236      	sxth	r6, r6
 8011522:	7b2d      	ldrb	r5, [r5, #12]
 8011524:	1ab6      	subs	r6, r6, r2
 8011526:	442a      	add	r2, r5
 8011528:	fa1f fa86 	uxth.w	sl, r6
 801152c:	4413      	add	r3, r2
 801152e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8011532:	fa0f fb8a 	sxth.w	fp, sl
 8011536:	b29b      	uxth	r3, r3
 8011538:	2a02      	cmp	r2, #2
 801153a:	b21e      	sxth	r6, r3
 801153c:	f000 80d6 	beq.w	80116ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8011540:	2a03      	cmp	r2, #3
 8011542:	f000 80de 	beq.w	8011702 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8011546:	2a01      	cmp	r2, #1
 8011548:	f040 80e6 	bne.w	8011718 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801154c:	8925      	ldrh	r5, [r4, #8]
 801154e:	4633      	mov	r3, r6
 8011550:	463e      	mov	r6, r7
 8011552:	eba5 0909 	sub.w	r9, r5, r9
 8011556:	461f      	mov	r7, r3
 8011558:	465d      	mov	r5, fp
 801155a:	fa0f fb89 	sxth.w	fp, r9
 801155e:	4b5d      	ldr	r3, [pc, #372]	; (80116d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8011560:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011562:	6818      	ldr	r0, [r3, #0]
 8011564:	f7fc fa12 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 8011568:	f8a8 b000 	strh.w	fp, [r8]
 801156c:	f8a8 5002 	strh.w	r5, [r8, #2]
 8011570:	f8a8 6004 	strh.w	r6, [r8, #4]
 8011574:	f8a8 7006 	strh.w	r7, [r8, #6]
 8011578:	f8c8 0008 	str.w	r0, [r8, #8]
 801157c:	e738      	b.n	80113f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801157e:	f003 fcc2 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8011582:	682b      	ldr	r3, [r5, #0]
 8011584:	4628      	mov	r0, r5
 8011586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011588:	4798      	blx	r3
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	4607      	mov	r7, r0
 801158e:	4628      	mov	r0, r5
 8011590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011592:	4798      	blx	r3
 8011594:	6823      	ldr	r3, [r4, #0]
 8011596:	4683      	mov	fp, r0
 8011598:	4620      	mov	r0, r4
 801159a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801159c:	4798      	blx	r3
 801159e:	6822      	ldr	r2, [r4, #0]
 80115a0:	9005      	str	r0, [sp, #20]
 80115a2:	4620      	mov	r0, r4
 80115a4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80115a8:	4790      	blx	r2
 80115aa:	9b05      	ldr	r3, [sp, #20]
 80115ac:	463a      	mov	r2, r7
 80115ae:	4649      	mov	r1, r9
 80115b0:	9001      	str	r0, [sp, #4]
 80115b2:	a80f      	add	r0, sp, #60	; 0x3c
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	465b      	mov	r3, fp
 80115b8:	f003 fd15 	bl	8014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80115bc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80115c0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80115c4:	af0f      	add	r7, sp, #60	; 0x3c
 80115c6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80115ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80115ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80115d0:	bf0a      	itet	eq
 80115d2:	464a      	moveq	r2, r9
 80115d4:	461a      	movne	r2, r3
 80115d6:	4699      	moveq	r9, r3
 80115d8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80115dc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80115e0:	1ad2      	subs	r2, r2, r3
 80115e2:	6833      	ldr	r3, [r6, #0]
 80115e4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 80115e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80115ec:	7859      	ldrb	r1, [r3, #1]
 80115ee:	2300      	movs	r3, #0
 80115f0:	9707      	str	r7, [sp, #28]
 80115f2:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80115f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80115fa:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80115fe:	f88d 1020 	strb.w	r1, [sp, #32]
 8011602:	9509      	str	r5, [sp, #36]	; 0x24
 8011604:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011608:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801160c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8011610:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011614:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011618:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801161c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011620:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011624:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8011628:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801162c:	b350      	cbz	r0, 8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801162e:	682b      	ldr	r3, [r5, #0]
 8011630:	4628      	mov	r0, r5
 8011632:	695b      	ldr	r3, [r3, #20]
 8011634:	4798      	blx	r3
 8011636:	4607      	mov	r7, r0
 8011638:	b320      	cbz	r0, 8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801163a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801163c:	4639      	mov	r1, r7
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	4798      	blx	r3
 8011644:	4606      	mov	r6, r0
 8011646:	b1e8      	cbz	r0, 8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8011648:	7b43      	ldrb	r3, [r0, #13]
 801164a:	7a82      	ldrb	r2, [r0, #10]
 801164c:	005b      	lsls	r3, r3, #1
 801164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011652:	4313      	orrs	r3, r2
 8011654:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8011658:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801165c:	2b06      	cmp	r3, #6
 801165e:	d111      	bne.n	8011684 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8011660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011662:	4632      	mov	r2, r6
 8011664:	4639      	mov	r1, r7
 8011666:	6803      	ldr	r3, [r0, #0]
 8011668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801166a:	4798      	blx	r3
 801166c:	7b73      	ldrb	r3, [r6, #13]
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011674:	7ab3      	ldrb	r3, [r6, #10]
 8011676:	4313      	orrs	r3, r2
 8011678:	4418      	add	r0, r3
 801167a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801167e:	4418      	add	r0, r3
 8011680:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8011684:	2600      	movs	r6, #0
 8011686:	4637      	mov	r7, r6
 8011688:	a806      	add	r0, sp, #24
 801168a:	3701      	adds	r7, #1
 801168c:	f001 f9df 	bl	8012a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011690:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8011694:	9b03      	ldr	r3, [sp, #12]
 8011696:	b2bf      	uxth	r7, r7
 8011698:	4286      	cmp	r6, r0
 801169a:	eba9 0903 	sub.w	r9, r9, r3
 801169e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80116a2:	bfb8      	it	lt
 80116a4:	4606      	movlt	r6, r0
 80116a6:	fa0f f989 	sxth.w	r9, r9
 80116aa:	b236      	sxth	r6, r6
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f43f af0d 	beq.w	80114cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80116b2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f47f af08 	bne.w	80114cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80116bc:	7a2b      	ldrb	r3, [r5, #8]
 80116be:	444b      	add	r3, r9
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dce1      	bgt.n	8011688 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80116c4:	e702      	b.n	80114cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80116c6:	bf00      	nop
 80116c8:	2001196c 	.word	0x2001196c
 80116cc:	20011968 	.word	0x20011968
 80116d0:	20011970 	.word	0x20011970
 80116d4:	20011974 	.word	0x20011974
 80116d8:	ebaa 0606 	sub.w	r6, sl, r6
 80116dc:	2002      	movs	r0, #2
 80116de:	fb96 f6f0 	sdiv	r6, r6, r0
 80116e2:	e71c      	b.n	801151e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80116e4:	441e      	add	r6, r3
 80116e6:	ebaa 0606 	sub.w	r6, sl, r6
 80116ea:	e718      	b.n	801151e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80116ec:	8925      	ldrh	r5, [r4, #8]
 80116ee:	1aed      	subs	r5, r5, r3
 80116f0:	eba5 050a 	sub.w	r5, r5, sl
 80116f4:	fa0f fb85 	sxth.w	fp, r5
 80116f8:	8965      	ldrh	r5, [r4, #10]
 80116fa:	eba5 0509 	sub.w	r5, r5, r9
 80116fe:	b22d      	sxth	r5, r5
 8011700:	e72d      	b.n	801155e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8011702:	8965      	ldrh	r5, [r4, #10]
 8011704:	f04f 0b00 	mov.w	fp, #0
 8011708:	1aed      	subs	r5, r5, r3
 801170a:	4633      	mov	r3, r6
 801170c:	463e      	mov	r6, r7
 801170e:	eba5 050a 	sub.w	r5, r5, sl
 8011712:	461f      	mov	r7, r3
 8011714:	b22d      	sxth	r5, r5
 8011716:	e722      	b.n	801155e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8011718:	2500      	movs	r5, #0
 801171a:	e720      	b.n	801155e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801171c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801171c:	b513      	push	{r0, r1, r4, lr}
 801171e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8011722:	4604      	mov	r4, r0
 8011724:	b1fb      	cbz	r3, 8011766 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011726:	4b16      	ldr	r3, [pc, #88]	; (8011780 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8011728:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	428b      	cmp	r3, r1
 801172e:	d91a      	bls.n	8011766 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011730:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011734:	2b00      	cmp	r3, #0
 8011736:	dd16      	ble.n	8011766 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011738:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801173c:	2b00      	cmp	r3, #0
 801173e:	dd12      	ble.n	8011766 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011740:	4b10      	ldr	r3, [pc, #64]	; (8011784 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8011742:	6818      	ldr	r0, [r3, #0]
 8011744:	f7fc f922 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 8011748:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801174c:	6822      	ldr	r2, [r4, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	db06      	blt.n	8011760 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8011752:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011756:	2b00      	cmp	r3, #0
 8011758:	db02      	blt.n	8011760 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801175a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801175c:	4298      	cmp	r0, r3
 801175e:	d004      	beq.n	801176a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8011760:	6953      	ldr	r3, [r2, #20]
 8011762:	4620      	mov	r0, r4
 8011764:	4798      	blx	r3
 8011766:	b002      	add	sp, #8
 8011768:	bd10      	pop	{r4, pc}
 801176a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801176e:	466b      	mov	r3, sp
 8011770:	6912      	ldr	r2, [r2, #16]
 8011772:	c903      	ldmia	r1, {r0, r1}
 8011774:	e883 0003 	stmia.w	r3, {r0, r1}
 8011778:	4619      	mov	r1, r3
 801177a:	4620      	mov	r0, r4
 801177c:	4790      	blx	r2
 801177e:	e7f2      	b.n	8011766 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011780:	2001196c 	.word	0x2001196c
 8011784:	20011974 	.word	0x20011974

08011788 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8011788:	4b45      	ldr	r3, [pc, #276]	; (80118a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801178a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801178e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011790:	b08e      	sub	sp, #56	; 0x38
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	4604      	mov	r4, r0
 8011796:	4293      	cmp	r3, r2
 8011798:	d97e      	bls.n	8011898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801179a:	6808      	ldr	r0, [r1, #0]
 801179c:	ab05      	add	r3, sp, #20
 801179e:	6849      	ldr	r1, [r1, #4]
 80117a0:	4d40      	ldr	r5, [pc, #256]	; (80118a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80117a2:	c303      	stmia	r3!, {r0, r1}
 80117a4:	4611      	mov	r1, r2
 80117a6:	6828      	ldr	r0, [r5, #0]
 80117a8:	f7fc f8f0 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 80117ac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	db11      	blt.n	80117d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80117b4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	db0d      	blt.n	80117d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80117bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80117be:	4298      	cmp	r0, r3
 80117c0:	d10a      	bne.n	80117d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80117c2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80117c6:	ab09      	add	r3, sp, #36	; 0x24
 80117c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80117d0:	4619      	mov	r1, r3
 80117d2:	a805      	add	r0, sp, #20
 80117d4:	f7fe fc50 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 80117d8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	dd5b      	ble.n	8011898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80117e0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dd57      	ble.n	8011898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80117e8:	4f2f      	ldr	r7, [pc, #188]	; (80118a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80117ea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80117f2:	4b2e      	ldr	r3, [pc, #184]	; (80118ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80117fa:	2e00      	cmp	r6, #0
 80117fc:	d04c      	beq.n	8011898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	4620      	mov	r0, r4
 8011802:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8011806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011808:	4798      	blx	r3
 801180a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8011812:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8011816:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801181a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801181e:	785b      	ldrb	r3, [r3, #1]
 8011820:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8011824:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011828:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801182a:	9609      	str	r6, [sp, #36]	; 0x24
 801182c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011830:	4b1f      	ldr	r3, [pc, #124]	; (80118b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8011832:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801183c:	910b      	str	r1, [sp, #44]	; 0x2c
 801183e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8011842:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8011846:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801184a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801184e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011852:	b10a      	cbz	r2, 8011858 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8011854:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8011856:	b906      	cbnz	r6, 801185a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8011858:	689e      	ldr	r6, [r3, #8]
 801185a:	af07      	add	r7, sp, #28
 801185c:	4621      	mov	r1, r4
 801185e:	4638      	mov	r0, r7
 8011860:	f002 ff68 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011864:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011866:	6828      	ldr	r0, [r5, #0]
 8011868:	f7fc f890 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	4605      	mov	r5, r0
 8011870:	4620      	mov	r0, r4
 8011872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011874:	4798      	blx	r3
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	4680      	mov	r8, r0
 801187a:	4620      	mov	r0, r4
 801187c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011880:	4798      	blx	r3
 8011882:	ab09      	add	r3, sp, #36	; 0x24
 8011884:	9501      	str	r5, [sp, #4]
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	ab05      	add	r3, sp, #20
 801188a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801188e:	4630      	mov	r0, r6
 8011890:	e897 0006 	ldmia.w	r7, {r1, r2}
 8011894:	f7fc f80b 	bl	800d8ae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011898:	b00e      	add	sp, #56	; 0x38
 801189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801189e:	bf00      	nop
 80118a0:	2001196c 	.word	0x2001196c
 80118a4:	20011974 	.word	0x20011974
 80118a8:	20011968 	.word	0x20011968
 80118ac:	20011970 	.word	0x20011970
 80118b0:	20011918 	.word	0x20011918

080118b4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80118b4:	b538      	push	{r3, r4, r5, lr}
 80118b6:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80118b8:	4604      	mov	r4, r0
 80118ba:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d214      	bcs.n	80118ec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80118c2:	6803      	ldr	r3, [r0, #0]
 80118c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118c6:	4798      	blx	r3
 80118c8:	6823      	ldr	r3, [r4, #0]
 80118ca:	4605      	mov	r5, r0
 80118cc:	4620      	mov	r0, r4
 80118ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118d0:	4798      	blx	r3
 80118d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80118d6:	b22d      	sxth	r5, r5
 80118d8:	4601      	mov	r1, r0
 80118da:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80118de:	bf06      	itte	eq
 80118e0:	4602      	moveq	r2, r0
 80118e2:	4629      	moveq	r1, r5
 80118e4:	462a      	movne	r2, r5
 80118e6:	4620      	mov	r0, r4
 80118e8:	f7f9 f976 	bl	800abd8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80118ec:	bd38      	pop	{r3, r4, r5, pc}
 80118ee:	bf00      	nop
 80118f0:	2001196c 	.word	0x2001196c

080118f4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80118f4:	b530      	push	{r4, r5, lr}
 80118f6:	888b      	ldrh	r3, [r1, #4]
 80118f8:	b085      	sub	sp, #20
 80118fa:	4604      	mov	r4, r0
 80118fc:	8583      	strh	r3, [r0, #44]	; 0x2c
 80118fe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011902:	b923      	cbnz	r3, 801190e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011904:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011908:	b90b      	cbnz	r3, 801190e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801190a:	f7ff ffd3 	bl	80118b4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801190e:	6823      	ldr	r3, [r4, #0]
 8011910:	466d      	mov	r5, sp
 8011912:	4621      	mov	r1, r4
 8011914:	343c      	adds	r4, #60	; 0x3c
 8011916:	4628      	mov	r0, r5
 8011918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801191c:	4798      	blx	r3
 801191e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011926:	b005      	add	sp, #20
 8011928:	bd30      	pop	{r4, r5, pc}

0801192a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801192a:	2300      	movs	r3, #0
 801192c:	8083      	strh	r3, [r0, #4]
 801192e:	80c3      	strh	r3, [r0, #6]
 8011930:	8003      	strh	r3, [r0, #0]
 8011932:	8043      	strh	r3, [r0, #2]
 8011934:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8011938:	2bff      	cmp	r3, #255	; 0xff
 801193a:	bf01      	itttt	eq
 801193c:	890b      	ldrheq	r3, [r1, #8]
 801193e:	8083      	strheq	r3, [r0, #4]
 8011940:	894b      	ldrheq	r3, [r1, #10]
 8011942:	80c3      	strheq	r3, [r0, #6]
 8011944:	4770      	bx	lr
	...

08011948 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801194a:	4604      	mov	r4, r0
 801194c:	466b      	mov	r3, sp
 801194e:	6808      	ldr	r0, [r1, #0]
 8011950:	6849      	ldr	r1, [r1, #4]
 8011952:	c303      	stmia	r3!, {r0, r1}
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	4669      	mov	r1, sp
 8011958:	4620      	mov	r0, r4
 801195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195c:	4798      	blx	r3
 801195e:	4b08      	ldr	r3, [pc, #32]	; (8011980 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011966:	b10a      	cbz	r2, 801196c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011968:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801196a:	b900      	cbnz	r0, 801196e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801196c:	6898      	ldr	r0, [r3, #8]
 801196e:	6803      	ldr	r3, [r0, #0]
 8011970:	4669      	mov	r1, sp
 8011972:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011974:	6a1d      	ldr	r5, [r3, #32]
 8011976:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801197a:	47a8      	blx	r5
 801197c:	b003      	add	sp, #12
 801197e:	bd30      	pop	{r4, r5, pc}
 8011980:	20011918 	.word	0x20011918

08011984 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011984:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011988:	b12a      	cbz	r2, 8011996 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801198a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801198e:	b112      	cbz	r2, 8011996 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011990:	6803      	ldr	r3, [r0, #0]
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	4718      	bx	r3
 8011996:	4770      	bx	lr

08011998 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	880b      	ldrh	r3, [r1, #0]
 801199c:	4605      	mov	r5, r0
 801199e:	4604      	mov	r4, r0
 80119a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80119a2:	8813      	ldrh	r3, [r2, #0]
 80119a4:	f825 3f30 	strh.w	r3, [r5, #48]!
 80119a8:	4628      	mov	r0, r5
 80119aa:	f004 feef 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80119ae:	4606      	mov	r6, r0
 80119b0:	4628      	mov	r0, r5
 80119b2:	f004 ff1f 	bl	80167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	4605      	mov	r5, r0
 80119ba:	4631      	mov	r1, r6
 80119bc:	4620      	mov	r0, r4
 80119be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119c0:	4798      	blx	r3
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	4629      	mov	r1, r5
 80119c6:	4620      	mov	r0, r4
 80119c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119ce:	4718      	bx	r3

080119d0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80119d0:	b510      	push	{r4, lr}
 80119d2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80119d6:	4604      	mov	r4, r0
 80119d8:	2bff      	cmp	r3, #255	; 0xff
 80119da:	d006      	beq.n	80119ea <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80119dc:	2300      	movs	r3, #0
 80119de:	8003      	strh	r3, [r0, #0]
 80119e0:	8043      	strh	r3, [r0, #2]
 80119e2:	8083      	strh	r3, [r0, #4]
 80119e4:	80c3      	strh	r3, [r0, #6]
 80119e6:	4620      	mov	r0, r4
 80119e8:	bd10      	pop	{r4, pc}
 80119ea:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80119ee:	b11b      	cbz	r3, 80119f8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80119f0:	3130      	adds	r1, #48	; 0x30
 80119f2:	f004 ff33 	bl	801685c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80119f6:	e7f6      	b.n	80119e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80119f8:	312e      	adds	r1, #46	; 0x2e
 80119fa:	e7fa      	b.n	80119f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080119fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8011a04:	b08a      	sub	sp, #40	; 0x28
 8011a06:	4604      	mov	r4, r0
 8011a08:	4688      	mov	r8, r1
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d066      	beq.n	8011adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011a0e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8011a10:	a805      	add	r0, sp, #20
 8011a12:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a16:	f004 feb9 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011a1a:	4607      	mov	r7, r0
 8011a1c:	a805      	add	r0, sp, #20
 8011a1e:	f004 fee9 	bl	80167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011a22:	f9b8 6000 	ldrsh.w	r6, [r8]
 8011a26:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4432      	add	r2, r6
 8011a2e:	9306      	str	r3, [sp, #24]
 8011a30:	b292      	uxth	r2, r2
 8011a32:	fa0f fc82 	sxth.w	ip, r2
 8011a36:	459c      	cmp	ip, r3
 8011a38:	dd52      	ble.n	8011ae0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a3a:	42b7      	cmp	r7, r6
 8011a3c:	dd50      	ble.n	8011ae0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a3e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8011a42:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011a46:	442b      	add	r3, r5
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	b219      	sxth	r1, r3
 8011a4c:	2900      	cmp	r1, #0
 8011a4e:	dd47      	ble.n	8011ae0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a50:	42a8      	cmp	r0, r5
 8011a52:	dd45      	ble.n	8011ae0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011a54:	4567      	cmp	r7, ip
 8011a56:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011a5a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011a5e:	bfb8      	it	lt
 8011a60:	b2ba      	uxthlt	r2, r7
 8011a62:	4288      	cmp	r0, r1
 8011a64:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011a68:	bfb8      	it	lt
 8011a6a:	b283      	uxthlt	r3, r0
 8011a6c:	1b92      	subs	r2, r2, r6
 8011a6e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011a72:	1b5b      	subs	r3, r3, r5
 8011a74:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011a78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011a7c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d026      	beq.n	8011ad6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a88:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	dd22      	ble.n	8011ad6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a90:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	dd1e      	ble.n	8011ad6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	a908      	add	r1, sp, #32
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa6:	4798      	blx	r3
 8011aa8:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011ab0:	b10a      	cbz	r2, 8011ab6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8011ab2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011ab4:	b900      	cbnz	r0, 8011ab8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8011ab6:	6898      	ldr	r0, [r3, #8]
 8011ab8:	2501      	movs	r5, #1
 8011aba:	6801      	ldr	r1, [r0, #0]
 8011abc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011ac0:	9502      	str	r5, [sp, #8]
 8011ac2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8011ac6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011aca:	9401      	str	r4, [sp, #4]
 8011acc:	ac06      	add	r4, sp, #24
 8011ace:	9400      	str	r4, [sp, #0]
 8011ad0:	688c      	ldr	r4, [r1, #8]
 8011ad2:	a905      	add	r1, sp, #20
 8011ad4:	47a0      	blx	r4
 8011ad6:	b00a      	add	sp, #40	; 0x28
 8011ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011adc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011ade:	e797      	b.n	8011a10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9307      	str	r3, [sp, #28]
 8011ae4:	e7ca      	b.n	8011a7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8011ae6:	bf00      	nop
 8011ae8:	20011918 	.word	0x20011918

08011aec <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011aec:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8011af0:	b12a      	cbz	r2, 8011afe <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011af2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8011af6:	b112      	cbz	r2, 8011afe <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011af8:	6803      	ldr	r3, [r0, #0]
 8011afa:	695b      	ldr	r3, [r3, #20]
 8011afc:	4718      	bx	r3
 8011afe:	4770      	bx	lr

08011b00 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8011b00:	4b30      	ldr	r3, [pc, #192]	; (8011bc4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8011b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b06:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011b08:	b08d      	sub	sp, #52	; 0x34
 8011b0a:	881b      	ldrh	r3, [r3, #0]
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	460f      	mov	r7, r1
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d954      	bls.n	8011bbe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011b14:	4b2c      	ldr	r3, [pc, #176]	; (8011bc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8011b16:	6819      	ldr	r1, [r3, #0]
 8011b18:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8011b1c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8011b20:	4a2a      	ldr	r2, [pc, #168]	; (8011bcc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011b28:	2900      	cmp	r1, #0
 8011b2a:	d048      	beq.n	8011bbe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011b2c:	785a      	ldrb	r2, [r3, #1]
 8011b2e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011b32:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8011b36:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011b3a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011b3e:	4b24      	ldr	r3, [pc, #144]	; (8011bd0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011b40:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8011b44:	681a      	ldr	r2, [r3, #0]
 8011b46:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8011b4a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8011b4e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8011b52:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8011b54:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8011b58:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8011b5c:	9107      	str	r1, [sp, #28]
 8011b5e:	f88d 8020 	strb.w	r8, [sp, #32]
 8011b62:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8011b66:	9609      	str	r6, [sp, #36]	; 0x24
 8011b68:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8011b6c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8011b70:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8011b74:	b10b      	cbz	r3, 8011b7a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8011b76:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8011b78:	b905      	cbnz	r5, 8011b7c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8011b7a:	6895      	ldr	r5, [r2, #8]
 8011b7c:	ae05      	add	r6, sp, #20
 8011b7e:	4621      	mov	r1, r4
 8011b80:	4630      	mov	r0, r6
 8011b82:	f002 fdd7 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b86:	4b13      	ldr	r3, [pc, #76]	; (8011bd4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8011b88:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f7fb fefe 	bl	800d98c <_ZNK8touchgfx5Texts7getTextEt>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	4680      	mov	r8, r0
 8011b94:	4620      	mov	r0, r4
 8011b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b98:	4798      	blx	r3
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	4681      	mov	r9, r0
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ba4:	4798      	blx	r3
 8011ba6:	ab07      	add	r3, sp, #28
 8011ba8:	f8cd 8004 	str.w	r8, [sp, #4]
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	463b      	mov	r3, r7
 8011bb0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011bba:	f7fb fe78 	bl	800d8ae <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011bbe:	b00d      	add	sp, #52	; 0x34
 8011bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bc4:	2001196c 	.word	0x2001196c
 8011bc8:	20011968 	.word	0x20011968
 8011bcc:	20011970 	.word	0x20011970
 8011bd0:	20011918 	.word	0x20011918
 8011bd4:	20011974 	.word	0x20011974

08011bd8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011bd8:	b510      	push	{r4, lr}
 8011bda:	6803      	ldr	r3, [r0, #0]
 8011bdc:	460c      	mov	r4, r1
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	4798      	blx	r3
 8011be2:	1b03      	subs	r3, r0, r4
 8011be4:	4258      	negs	r0, r3
 8011be6:	4158      	adcs	r0, r3
 8011be8:	bd10      	pop	{r4, pc}
	...

08011bec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011bec:	4b01      	ldr	r3, [pc, #4]	; (8011bf4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011bee:	6019      	str	r1, [r3, #0]
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	20011920 	.word	0x20011920

08011bf8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bfc:	4696      	mov	lr, r2
 8011bfe:	b097      	sub	sp, #92	; 0x5c
 8011c00:	4605      	mov	r5, r0
 8011c02:	4614      	mov	r4, r2
 8011c04:	460e      	mov	r6, r1
 8011c06:	461f      	mov	r7, r3
 8011c08:	f10d 0c1c 	add.w	ip, sp, #28
 8011c0c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8011c10:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011c14:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c20:	f8de 3000 	ldr.w	r3, [lr]
 8011c24:	f104 0e14 	add.w	lr, r4, #20
 8011c28:	f8cc 3000 	str.w	r3, [ip]
 8011c2c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011c30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c38:	f8de 3000 	ldr.w	r3, [lr]
 8011c3c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011c40:	f8cc 3000 	str.w	r3, [ip]
 8011c44:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c50:	f8de 3000 	ldr.w	r3, [lr]
 8011c54:	4631      	mov	r1, r6
 8011c56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f8cc 3000 	str.w	r3, [ip]
 8011c5e:	682b      	ldr	r3, [r5, #0]
 8011c60:	9201      	str	r2, [sp, #4]
 8011c62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011c64:	f8cd 8008 	str.w	r8, [sp, #8]
 8011c68:	9200      	str	r2, [sp, #0]
 8011c6a:	aa07      	add	r2, sp, #28
 8011c6c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011c70:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8011c74:	463b      	mov	r3, r7
 8011c76:	47d8      	blx	fp
 8011c78:	46a6      	mov	lr, r4
 8011c7a:	f10d 0c1c 	add.w	ip, sp, #28
 8011c7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c86:	f8de 3000 	ldr.w	r3, [lr]
 8011c8a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8011c8e:	343c      	adds	r4, #60	; 0x3c
 8011c90:	f8cc 3000 	str.w	r3, [ip]
 8011c94:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011c98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ca0:	f8de 3000 	ldr.w	r3, [lr]
 8011ca4:	f8cc 3000 	str.w	r3, [ip]
 8011ca8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cb2:	6823      	ldr	r3, [r4, #0]
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f8cc 3000 	str.w	r3, [ip]
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011cc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cc4:	f8cd 8008 	str.w	r8, [sp, #8]
 8011cc8:	9201      	str	r2, [sp, #4]
 8011cca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011ccc:	9200      	str	r2, [sp, #0]
 8011cce:	aa07      	add	r2, sp, #28
 8011cd0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8011cd2:	463b      	mov	r3, r7
 8011cd4:	47a0      	blx	r4
 8011cd6:	b017      	add	sp, #92	; 0x5c
 8011cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cdc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011cdc:	2000      	movs	r0, #0
 8011cde:	4770      	bx	lr

08011ce0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	b08d      	sub	sp, #52	; 0x34
 8011ce6:	4688      	mov	r8, r1
 8011ce8:	f8d3 c000 	ldr.w	ip, [r3]
 8011cec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011cee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8011cf2:	680f      	ldr	r7, [r1, #0]
 8011cf4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8011cf8:	eba7 070c 	sub.w	r7, r7, ip
 8011cfc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8011d00:	edd3 6a07 	vldr	s13, [r3, #28]
 8011d04:	42bc      	cmp	r4, r7
 8011d06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011d08:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011d0c:	bfa8      	it	ge
 8011d0e:	463c      	movge	r4, r7
 8011d10:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011d14:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011d18:	ee07 4a90 	vmov	s15, r4
 8011d1c:	eb09 0e0c 	add.w	lr, r9, ip
 8011d20:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8011d24:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011d28:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011d2c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8011d30:	4571      	cmp	r1, lr
 8011d32:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011d36:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011d3a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011d3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d42:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011d46:	ee32 1a05 	vadd.f32	s2, s4, s10
 8011d4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011d4e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011d52:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011d56:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011d5a:	f340 808c 	ble.w	8011e76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011d5e:	eba1 060e 	sub.w	r6, r1, lr
 8011d62:	fb96 f5f4 	sdiv	r5, r6, r4
 8011d66:	ee07 5a10 	vmov	s14, r5
 8011d6a:	2d00      	cmp	r5, #0
 8011d6c:	fb04 6615 	mls	r6, r4, r5, r6
 8011d70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011d74:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011d78:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011d7c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011d80:	dd12      	ble.n	8011da8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011d82:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011d86:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011d8a:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011d8e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d96:	bf14      	ite	ne
 8011d98:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011d9c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011da0:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011da4:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011da8:	fb05 f204 	mul.w	r2, r5, r4
 8011dac:	1abf      	subs	r7, r7, r2
 8011dae:	4494      	add	ip, r2
 8011db0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011db4:	4411      	add	r1, r2
 8011db6:	eb09 020c 	add.w	r2, r9, ip
 8011dba:	b209      	sxth	r1, r1
 8011dbc:	443a      	add	r2, r7
 8011dbe:	428a      	cmp	r2, r1
 8011dc0:	bfc4      	itt	gt
 8011dc2:	eba1 0209 	subgt.w	r2, r1, r9
 8011dc6:	eba2 070c 	subgt.w	r7, r2, ip
 8011dca:	2f00      	cmp	r7, #0
 8011dcc:	dd50      	ble.n	8011e70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011dce:	fb97 f1f4 	sdiv	r1, r7, r4
 8011dd2:	fb04 7211 	mls	r2, r4, r1, r7
 8011dd6:	b90a      	cbnz	r2, 8011ddc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011dd8:	3901      	subs	r1, #1
 8011dda:	4622      	mov	r2, r4
 8011ddc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011de0:	6840      	ldr	r0, [r0, #4]
 8011de2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8011de6:	44b6      	add	lr, r6
 8011de8:	f8d0 a000 	ldr.w	sl, [r0]
 8011dec:	2900      	cmp	r1, #0
 8011dee:	bfcc      	ite	gt
 8011df0:	46a1      	movgt	r9, r4
 8011df2:	4691      	movle	r9, r2
 8011df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8011df6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011df8:	fb04 e505 	mla	r5, r4, r5, lr
 8011dfc:	eef0 6a42 	vmov.f32	s13, s4
 8011e00:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011e04:	9008      	str	r0, [sp, #32]
 8011e06:	eeb0 7a61 	vmov.f32	s14, s3
 8011e0a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011e0c:	695b      	ldr	r3, [r3, #20]
 8011e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011e12:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011e16:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011e1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011e1c:	445b      	add	r3, fp
 8011e1e:	9307      	str	r3, [sp, #28]
 8011e20:	ee16 3a90 	vmov	r3, s13
 8011e24:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011e28:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011e2c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011e30:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011e34:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011e38:	ee17 7a90 	vmov	r7, s15
 8011e3c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011e40:	fb97 f7f4 	sdiv	r7, r7, r4
 8011e44:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011e48:	ee17 ca90 	vmov	ip, s15
 8011e4c:	fb9c fcf4 	sdiv	ip, ip, r4
 8011e50:	fb0c 3306 	mla	r3, ip, r6, r3
 8011e54:	9302      	str	r3, [sp, #8]
 8011e56:	ee17 3a10 	vmov	r3, s14
 8011e5a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011e5e:	fb07 3706 	mla	r7, r7, r6, r3
 8011e62:	eba9 0306 	sub.w	r3, r9, r6
 8011e66:	e9cd 4700 	strd	r4, r7, [sp]
 8011e6a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011e6e:	47a0      	blx	r4
 8011e70:	b00d      	add	sp, #52	; 0x34
 8011e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e76:	2500      	movs	r5, #0
 8011e78:	462e      	mov	r6, r5
 8011e7a:	e799      	b.n	8011db0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e80:	b0db      	sub	sp, #364	; 0x16c
 8011e82:	461d      	mov	r5, r3
 8011e84:	4614      	mov	r4, r2
 8011e86:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011e8a:	910f      	str	r1, [sp, #60]	; 0x3c
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e90:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011e94:	9009      	str	r0, [sp, #36]	; 0x24
 8011e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e98:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011e9c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8011ea2:	6803      	ldr	r3, [r0, #0]
 8011ea4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8011ea6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011eaa:	47b8      	blx	r7
 8011eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eae:	6058      	str	r0, [r3, #4]
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	f000 83a1 	beq.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011eb6:	682b      	ldr	r3, [r5, #0]
 8011eb8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8011ebc:	ed94 7a02 	vldr	s14, [r4, #8]
 8011ec0:	9314      	str	r3, [sp, #80]	; 0x50
 8011ec2:	686b      	ldr	r3, [r5, #4]
 8011ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ec8:	9315      	str	r3, [sp, #84]	; 0x54
 8011eca:	4bc1      	ldr	r3, [pc, #772]	; (80121d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011ecc:	7819      	ldrb	r1, [r3, #0]
 8011ece:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011ed2:	2900      	cmp	r1, #0
 8011ed4:	bf16      	itet	ne
 8011ed6:	4619      	movne	r1, r3
 8011ed8:	4611      	moveq	r1, r2
 8011eda:	4613      	movne	r3, r2
 8011edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee0:	9116      	str	r1, [sp, #88]	; 0x58
 8011ee2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8011ee6:	f240 8387 	bls.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011eea:	ed94 7a07 	vldr	s14, [r4, #28]
 8011eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef6:	f240 837f 	bls.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011efa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8011efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f06:	f240 8377 	bls.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f0a:	6822      	ldr	r2, [r4, #0]
 8011f0c:	4bb1      	ldr	r3, [pc, #708]	; (80121d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	f2c0 8372 	blt.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f14:	49b0      	ldr	r1, [pc, #704]	; (80121d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011f16:	6963      	ldr	r3, [r4, #20]
 8011f18:	428a      	cmp	r2, r1
 8011f1a:	f300 836d 	bgt.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f1e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011f22:	48ae      	ldr	r0, [pc, #696]	; (80121dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011f24:	33ff      	adds	r3, #255	; 0xff
 8011f26:	4283      	cmp	r3, r0
 8011f28:	f200 8366 	bhi.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f2e:	4dac      	ldr	r5, [pc, #688]	; (80121e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011f30:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011f34:	33ff      	adds	r3, #255	; 0xff
 8011f36:	42ab      	cmp	r3, r5
 8011f38:	f200 835e 	bhi.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f3c:	6862      	ldr	r2, [r4, #4]
 8011f3e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8011f42:	33ff      	adds	r3, #255	; 0xff
 8011f44:	4283      	cmp	r3, r0
 8011f46:	f200 8357 	bhi.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f4a:	69a1      	ldr	r1, [r4, #24]
 8011f4c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8011f50:	33ff      	adds	r3, #255	; 0xff
 8011f52:	4283      	cmp	r3, r0
 8011f54:	f200 8350 	bhi.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f5a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8011f5e:	30ff      	adds	r0, #255	; 0xff
 8011f60:	42a8      	cmp	r0, r5
 8011f62:	f200 8349 	bhi.w	80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f66:	428a      	cmp	r2, r1
 8011f68:	f280 8110 	bge.w	801218c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	f300 8119 	bgt.w	80121a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011f72:	4299      	cmp	r1, r3
 8011f74:	f280 811d 	bge.w	80121b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011f78:	2502      	movs	r5, #2
 8011f7a:	2701      	movs	r7, #1
 8011f7c:	46a9      	mov	r9, r5
 8011f7e:	46b8      	mov	r8, r7
 8011f80:	f04f 0a00 	mov.w	sl, #0
 8011f84:	4621      	mov	r1, r4
 8011f86:	a849      	add	r0, sp, #292	; 0x124
 8011f88:	f003 fd08 	bl	801599c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011f8c:	4622      	mov	r2, r4
 8011f8e:	4653      	mov	r3, sl
 8011f90:	a949      	add	r1, sp, #292	; 0x124
 8011f92:	f8cd 9000 	str.w	r9, [sp]
 8011f96:	a819      	add	r0, sp, #100	; 0x64
 8011f98:	f003 fe30 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011f9c:	4622      	mov	r2, r4
 8011f9e:	4653      	mov	r3, sl
 8011fa0:	a949      	add	r1, sp, #292	; 0x124
 8011fa2:	f8cd 8000 	str.w	r8, [sp]
 8011fa6:	a829      	add	r0, sp, #164	; 0xa4
 8011fa8:	f003 fe28 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011fac:	4643      	mov	r3, r8
 8011fae:	4622      	mov	r2, r4
 8011fb0:	a949      	add	r1, sp, #292	; 0x124
 8011fb2:	f8cd 9000 	str.w	r9, [sp]
 8011fb6:	a839      	add	r0, sp, #228	; 0xe4
 8011fb8:	f003 fe20 	bl	8015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011fbc:	42af      	cmp	r7, r5
 8011fbe:	af12      	add	r7, sp, #72	; 0x48
 8011fc0:	bfb7      	itett	lt
 8011fc2:	2300      	movlt	r3, #0
 8011fc4:	2301      	movge	r3, #1
 8011fc6:	ad29      	addlt	r5, sp, #164	; 0xa4
 8011fc8:	ac19      	addlt	r4, sp, #100	; 0x64
 8011fca:	bfb1      	iteee	lt
 8011fcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011fce:	ad19      	addge	r5, sp, #100	; 0x64
 8011fd0:	930e      	strge	r3, [sp, #56]	; 0x38
 8011fd2:	ac29      	addge	r4, sp, #164	; 0xa4
 8011fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011fda:	e887 0003 	stmia.w	r7, {r0, r1}
 8011fde:	b928      	cbnz	r0, 8011fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011fe0:	4b80      	ldr	r3, [pc, #512]	; (80121e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011fe2:	6818      	ldr	r0, [r3, #0]
 8011fe4:	6803      	ldr	r3, [r0, #0]
 8011fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fe8:	4798      	blx	r3
 8011fea:	6038      	str	r0, [r7, #0]
 8011fec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011fee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ff6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8011ffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ffc:	6963      	ldr	r3, [r4, #20]
 8011ffe:	440b      	add	r3, r1
 8012000:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012004:	4408      	add	r0, r1
 8012006:	b200      	sxth	r0, r0
 8012008:	4283      	cmp	r3, r0
 801200a:	900d      	str	r0, [sp, #52]	; 0x34
 801200c:	f280 80dd 	bge.w	80121ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012010:	428b      	cmp	r3, r1
 8012012:	da08      	bge.n	8012026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012014:	2a00      	cmp	r2, #0
 8012016:	dd06      	ble.n	8012026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012018:	1acb      	subs	r3, r1, r3
 801201a:	429a      	cmp	r2, r3
 801201c:	f2c0 80e4 	blt.w	80121e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012020:	2b00      	cmp	r3, #0
 8012022:	f300 80e2 	bgt.w	80121ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012026:	6967      	ldr	r7, [r4, #20]
 8012028:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801202c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801202e:	443b      	add	r3, r7
 8012030:	461f      	mov	r7, r3
 8012032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012034:	1bdf      	subs	r7, r3, r7
 8012036:	4297      	cmp	r7, r2
 8012038:	bfa8      	it	ge
 801203a:	4617      	movge	r7, r2
 801203c:	2f00      	cmp	r7, #0
 801203e:	f340 8166 	ble.w	801230e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012042:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012044:	6829      	ldr	r1, [r5, #0]
 8012046:	f9b3 2000 	ldrsh.w	r2, [r3]
 801204a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801204e:	4411      	add	r1, r2
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	4299      	cmp	r1, r3
 8012054:	dd1a      	ble.n	801208c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012056:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801205a:	4402      	add	r2, r0
 801205c:	440b      	add	r3, r1
 801205e:	b21b      	sxth	r3, r3
 8012060:	429a      	cmp	r2, r3
 8012062:	dc13      	bgt.n	801208c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012066:	a912      	add	r1, sp, #72	; 0x48
 8012068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801206a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	9206      	str	r2, [sp, #24]
 8012070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012072:	9500      	str	r5, [sp, #0]
 8012074:	9205      	str	r2, [sp, #20]
 8012076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012078:	e9cd b203 	strd	fp, r2, [sp, #12]
 801207c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801207e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012082:	aa49      	add	r2, sp, #292	; 0x124
 8012084:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012088:	4623      	mov	r3, r4
 801208a:	47c8      	blx	r9
 801208c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012090:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012094:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012098:	ee37 7a27 	vadd.f32	s14, s14, s15
 801209c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80120a0:	68a1      	ldr	r1, [r4, #8]
 80120a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80120a6:	ed94 6a08 	vldr	s12, [r4, #32]
 80120aa:	edd4 6a07 	vldr	s13, [r4, #28]
 80120ae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80120b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80120b6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80120ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80120be:	edc4 6a07 	vstr	s13, [r4, #28]
 80120c2:	441a      	add	r2, r3
 80120c4:	6963      	ldr	r3, [r4, #20]
 80120c6:	3301      	adds	r3, #1
 80120c8:	6022      	str	r2, [r4, #0]
 80120ca:	6163      	str	r3, [r4, #20]
 80120cc:	69a3      	ldr	r3, [r4, #24]
 80120ce:	3b01      	subs	r3, #1
 80120d0:	61a3      	str	r3, [r4, #24]
 80120d2:	6923      	ldr	r3, [r4, #16]
 80120d4:	440b      	add	r3, r1
 80120d6:	68e1      	ldr	r1, [r4, #12]
 80120d8:	428b      	cmp	r3, r1
 80120da:	6123      	str	r3, [r4, #16]
 80120dc:	db15      	blt.n	801210a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80120de:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80120e2:	3201      	adds	r2, #1
 80120e4:	1a5b      	subs	r3, r3, r1
 80120e6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80120ea:	6022      	str	r2, [r4, #0]
 80120ec:	6123      	str	r3, [r4, #16]
 80120ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80120f2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80120f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80120fa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80120fe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012106:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801210a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801210e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012112:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012116:	ee37 7a27 	vadd.f32	s14, s14, s15
 801211a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801211e:	68a9      	ldr	r1, [r5, #8]
 8012120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012124:	ed95 6a08 	vldr	s12, [r5, #32]
 8012128:	edd5 6a07 	vldr	s13, [r5, #28]
 801212c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012130:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012134:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012138:	e9d5 2300 	ldrd	r2, r3, [r5]
 801213c:	edc5 6a07 	vstr	s13, [r5, #28]
 8012140:	441a      	add	r2, r3
 8012142:	696b      	ldr	r3, [r5, #20]
 8012144:	3301      	adds	r3, #1
 8012146:	602a      	str	r2, [r5, #0]
 8012148:	616b      	str	r3, [r5, #20]
 801214a:	69ab      	ldr	r3, [r5, #24]
 801214c:	3b01      	subs	r3, #1
 801214e:	61ab      	str	r3, [r5, #24]
 8012150:	692b      	ldr	r3, [r5, #16]
 8012152:	440b      	add	r3, r1
 8012154:	68e9      	ldr	r1, [r5, #12]
 8012156:	428b      	cmp	r3, r1
 8012158:	612b      	str	r3, [r5, #16]
 801215a:	db15      	blt.n	8012188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801215c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012160:	3201      	adds	r2, #1
 8012162:	1a5b      	subs	r3, r3, r1
 8012164:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012168:	602a      	str	r2, [r5, #0]
 801216a:	612b      	str	r3, [r5, #16]
 801216c:	edc5 6a07 	vstr	s13, [r5, #28]
 8012170:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012174:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012178:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801217c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012184:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012188:	3f01      	subs	r7, #1
 801218a:	e757      	b.n	801203c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801218c:	4299      	cmp	r1, r3
 801218e:	dc13      	bgt.n	80121b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012190:	429a      	cmp	r2, r3
 8012192:	da14      	bge.n	80121be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012194:	2502      	movs	r5, #2
 8012196:	2703      	movs	r7, #3
 8012198:	f04f 0800 	mov.w	r8, #0
 801219c:	46a9      	mov	r9, r5
 801219e:	f04f 0a01 	mov.w	sl, #1
 80121a2:	e6ef      	b.n	8011f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80121a4:	2501      	movs	r5, #1
 80121a6:	2700      	movs	r7, #0
 80121a8:	46a9      	mov	r9, r5
 80121aa:	46b8      	mov	r8, r7
 80121ac:	f04f 0a02 	mov.w	sl, #2
 80121b0:	e6e8      	b.n	8011f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80121b2:	2501      	movs	r5, #1
 80121b4:	2702      	movs	r7, #2
 80121b6:	e6e1      	b.n	8011f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80121b8:	2500      	movs	r5, #0
 80121ba:	2701      	movs	r7, #1
 80121bc:	e7f4      	b.n	80121a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80121be:	2702      	movs	r7, #2
 80121c0:	2503      	movs	r5, #3
 80121c2:	f04f 0900 	mov.w	r9, #0
 80121c6:	46b8      	mov	r8, r7
 80121c8:	e7e9      	b.n	801219e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80121ca:	4613      	mov	r3, r2
 80121cc:	e728      	b.n	8012020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80121ce:	bf00      	nop
 80121d0:	2001190e 	.word	0x2001190e
 80121d4:	fffd8f01 	.word	0xfffd8f01
 80121d8:	00027100 	.word	0x00027100
 80121dc:	0004e1ff 	.word	0x0004e1ff
 80121e0:	0004e1fe 	.word	0x0004e1fe
 80121e4:	20011918 	.word	0x20011918
 80121e8:	4613      	mov	r3, r2
 80121ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 80121ec:	469e      	mov	lr, r3
 80121ee:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80121f0:	469c      	mov	ip, r3
 80121f2:	9111      	str	r1, [sp, #68]	; 0x44
 80121f4:	f04f 0900 	mov.w	r9, #0
 80121f8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80121fc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012200:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8012204:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012208:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801220c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012210:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8012214:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012218:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801221c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012220:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012224:	f1bc 0f00 	cmp.w	ip, #0
 8012228:	d147      	bne.n	80122ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801222a:	eb03 0c07 	add.w	ip, r3, r7
 801222e:	1ad7      	subs	r7, r2, r3
 8012230:	f1b9 0f00 	cmp.w	r9, #0
 8012234:	d009      	beq.n	801224a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012236:	9029      	str	r0, [sp, #164]	; 0xa4
 8012238:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801223c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8012240:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8012244:	912d      	str	r1, [sp, #180]	; 0xb4
 8012246:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801224a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801224c:	f04f 0800 	mov.w	r8, #0
 8012250:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012254:	9111      	str	r1, [sp, #68]	; 0x44
 8012256:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801225a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801225e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012262:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012266:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801226a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801226e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8012272:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012276:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801227a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801227e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8012282:	f1be 0f00 	cmp.w	lr, #0
 8012286:	d031      	beq.n	80122ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012288:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801228a:	4450      	add	r0, sl
 801228c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012290:	4431      	add	r1, r6
 8012292:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012296:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801229a:	4549      	cmp	r1, r9
 801229c:	db08      	blt.n	80122b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801229e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80122a2:	3001      	adds	r0, #1
 80122a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80122a8:	eba1 0109 	sub.w	r1, r1, r9
 80122ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80122b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80122b4:	f04f 0801 	mov.w	r8, #1
 80122b8:	e7e3      	b.n	8012282 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80122ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80122bc:	4450      	add	r0, sl
 80122be:	ee37 7a24 	vadd.f32	s14, s14, s9
 80122c2:	4431      	add	r1, r6
 80122c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80122c8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80122cc:	4541      	cmp	r1, r8
 80122ce:	db08      	blt.n	80122e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80122d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80122d4:	3001      	adds	r0, #1
 80122d6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80122da:	eba1 0108 	sub.w	r1, r1, r8
 80122de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80122e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80122e6:	f04f 0901 	mov.w	r9, #1
 80122ea:	e79b      	b.n	8012224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80122ec:	449c      	add	ip, r3
 80122ee:	1aff      	subs	r7, r7, r3
 80122f0:	f1b8 0f00 	cmp.w	r8, #0
 80122f4:	d009      	beq.n	801230a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80122f6:	9019      	str	r0, [sp, #100]	; 0x64
 80122f8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80122fc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012300:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012304:	911d      	str	r1, [sp, #116]	; 0x74
 8012306:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801230a:	1ad2      	subs	r2, r2, r3
 801230c:	e68b      	b.n	8012026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801230e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012310:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012312:	2b00      	cmp	r3, #0
 8012314:	f000 80d1 	beq.w	80124ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012318:	ad19      	add	r5, sp, #100	; 0x64
 801231a:	ac39      	add	r4, sp, #228	; 0xe4
 801231c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801231e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012326:	930c      	str	r3, [sp, #48]	; 0x30
 8012328:	990c      	ldr	r1, [sp, #48]	; 0x30
 801232a:	6963      	ldr	r3, [r4, #20]
 801232c:	440b      	add	r3, r1
 801232e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012332:	4408      	add	r0, r1
 8012334:	b200      	sxth	r0, r0
 8012336:	4283      	cmp	r3, r0
 8012338:	900d      	str	r0, [sp, #52]	; 0x34
 801233a:	f280 80c1 	bge.w	80124c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801233e:	428b      	cmp	r3, r1
 8012340:	da08      	bge.n	8012354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012342:	2a00      	cmp	r2, #0
 8012344:	dd06      	ble.n	8012354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012346:	1acb      	subs	r3, r1, r3
 8012348:	429a      	cmp	r2, r3
 801234a:	f2c0 80bb 	blt.w	80124c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801234e:	2b00      	cmp	r3, #0
 8012350:	f300 80b9 	bgt.w	80124c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012354:	6967      	ldr	r7, [r4, #20]
 8012356:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801235a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801235c:	443b      	add	r3, r7
 801235e:	461f      	mov	r7, r3
 8012360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012362:	1bdf      	subs	r7, r3, r7
 8012364:	4297      	cmp	r7, r2
 8012366:	bfa8      	it	ge
 8012368:	4617      	movge	r7, r2
 801236a:	2f00      	cmp	r7, #0
 801236c:	f340 813c 	ble.w	80125e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012370:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012372:	6829      	ldr	r1, [r5, #0]
 8012374:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012378:	f9bb 3000 	ldrsh.w	r3, [fp]
 801237c:	4411      	add	r1, r2
 801237e:	6820      	ldr	r0, [r4, #0]
 8012380:	4299      	cmp	r1, r3
 8012382:	dd1a      	ble.n	80123ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012384:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012388:	4402      	add	r2, r0
 801238a:	440b      	add	r3, r1
 801238c:	b21b      	sxth	r3, r3
 801238e:	429a      	cmp	r2, r3
 8012390:	dc13      	bgt.n	80123ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012392:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012394:	a912      	add	r1, sp, #72	; 0x48
 8012396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012398:	9809      	ldr	r0, [sp, #36]	; 0x24
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	9206      	str	r2, [sp, #24]
 801239e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123a0:	9500      	str	r5, [sp, #0]
 80123a2:	9205      	str	r2, [sp, #20]
 80123a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123a6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80123aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80123ac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80123b0:	aa49      	add	r2, sp, #292	; 0x124
 80123b2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80123b6:	4623      	mov	r3, r4
 80123b8:	47c8      	blx	r9
 80123ba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80123be:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80123c2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80123c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123ca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80123ce:	68a1      	ldr	r1, [r4, #8]
 80123d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123d4:	ed94 6a08 	vldr	s12, [r4, #32]
 80123d8:	edd4 6a07 	vldr	s13, [r4, #28]
 80123dc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80123e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80123e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80123e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123ec:	edc4 6a07 	vstr	s13, [r4, #28]
 80123f0:	441a      	add	r2, r3
 80123f2:	6963      	ldr	r3, [r4, #20]
 80123f4:	3301      	adds	r3, #1
 80123f6:	6022      	str	r2, [r4, #0]
 80123f8:	6163      	str	r3, [r4, #20]
 80123fa:	69a3      	ldr	r3, [r4, #24]
 80123fc:	3b01      	subs	r3, #1
 80123fe:	61a3      	str	r3, [r4, #24]
 8012400:	6923      	ldr	r3, [r4, #16]
 8012402:	440b      	add	r3, r1
 8012404:	68e1      	ldr	r1, [r4, #12]
 8012406:	428b      	cmp	r3, r1
 8012408:	6123      	str	r3, [r4, #16]
 801240a:	db15      	blt.n	8012438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801240c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012410:	3201      	adds	r2, #1
 8012412:	1a5b      	subs	r3, r3, r1
 8012414:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012418:	6022      	str	r2, [r4, #0]
 801241a:	6123      	str	r3, [r4, #16]
 801241c:	edc4 6a07 	vstr	s13, [r4, #28]
 8012420:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012424:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012428:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801242c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012434:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012438:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801243c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012440:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012448:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801244c:	68a9      	ldr	r1, [r5, #8]
 801244e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012452:	ed95 6a08 	vldr	s12, [r5, #32]
 8012456:	edd5 6a07 	vldr	s13, [r5, #28]
 801245a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801245e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012462:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012466:	e9d5 2300 	ldrd	r2, r3, [r5]
 801246a:	edc5 6a07 	vstr	s13, [r5, #28]
 801246e:	441a      	add	r2, r3
 8012470:	696b      	ldr	r3, [r5, #20]
 8012472:	3301      	adds	r3, #1
 8012474:	602a      	str	r2, [r5, #0]
 8012476:	616b      	str	r3, [r5, #20]
 8012478:	69ab      	ldr	r3, [r5, #24]
 801247a:	3b01      	subs	r3, #1
 801247c:	61ab      	str	r3, [r5, #24]
 801247e:	692b      	ldr	r3, [r5, #16]
 8012480:	440b      	add	r3, r1
 8012482:	68e9      	ldr	r1, [r5, #12]
 8012484:	428b      	cmp	r3, r1
 8012486:	612b      	str	r3, [r5, #16]
 8012488:	db15      	blt.n	80124b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801248a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801248e:	3201      	adds	r2, #1
 8012490:	1a5b      	subs	r3, r3, r1
 8012492:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012496:	602a      	str	r2, [r5, #0]
 8012498:	612b      	str	r3, [r5, #16]
 801249a:	edc5 6a07 	vstr	s13, [r5, #28]
 801249e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80124a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80124a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80124aa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80124ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80124b6:	3f01      	subs	r7, #1
 80124b8:	e757      	b.n	801236a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80124ba:	ad39      	add	r5, sp, #228	; 0xe4
 80124bc:	ac19      	add	r4, sp, #100	; 0x64
 80124be:	e72d      	b.n	801231c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80124c0:	4613      	mov	r3, r2
 80124c2:	e744      	b.n	801234e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80124c4:	4613      	mov	r3, r2
 80124c6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80124c8:	469e      	mov	lr, r3
 80124ca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80124ce:	461f      	mov	r7, r3
 80124d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80124d4:	f04f 0900 	mov.w	r9, #0
 80124d8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80124dc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80124e0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80124e4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80124e8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80124ec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80124ee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80124f2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80124f6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80124fa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80124fe:	960e      	str	r6, [sp, #56]	; 0x38
 8012500:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8012504:	2f00      	cmp	r7, #0
 8012506:	d146      	bne.n	8012596 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012508:	449c      	add	ip, r3
 801250a:	1ad7      	subs	r7, r2, r3
 801250c:	f1b9 0f00 	cmp.w	r9, #0
 8012510:	d009      	beq.n	8012526 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012512:	9039      	str	r0, [sp, #228]	; 0xe4
 8012514:	913d      	str	r1, [sp, #244]	; 0xf4
 8012516:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801251a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801251e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8012522:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8012526:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012528:	f04f 0800 	mov.w	r8, #0
 801252c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012530:	910e      	str	r1, [sp, #56]	; 0x38
 8012532:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012536:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801253a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801253e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012542:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012546:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801254a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801254e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012552:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012556:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801255a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801255e:	f1be 0f00 	cmp.w	lr, #0
 8012562:	d030      	beq.n	80125c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012564:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012566:	4450      	add	r0, sl
 8012568:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801256c:	4431      	add	r1, r6
 801256e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012572:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012576:	4549      	cmp	r1, r9
 8012578:	db08      	blt.n	801258c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801257a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801257e:	3001      	adds	r0, #1
 8012580:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012584:	eba1 0109 	sub.w	r1, r1, r9
 8012588:	ee37 7a06 	vadd.f32	s14, s14, s12
 801258c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012590:	f04f 0801 	mov.w	r8, #1
 8012594:	e7e3      	b.n	801255e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012596:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012598:	4450      	add	r0, sl
 801259a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801259e:	4431      	add	r1, r6
 80125a0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80125a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80125a8:	4541      	cmp	r1, r8
 80125aa:	db08      	blt.n	80125be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80125ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80125b0:	3001      	adds	r0, #1
 80125b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80125b6:	eba1 0108 	sub.w	r1, r1, r8
 80125ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80125be:	3f01      	subs	r7, #1
 80125c0:	f04f 0901 	mov.w	r9, #1
 80125c4:	e79e      	b.n	8012504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80125c6:	449c      	add	ip, r3
 80125c8:	1aff      	subs	r7, r7, r3
 80125ca:	f1b8 0f00 	cmp.w	r8, #0
 80125ce:	d009      	beq.n	80125e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80125d0:	9019      	str	r0, [sp, #100]	; 0x64
 80125d2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80125d6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80125da:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80125de:	911d      	str	r1, [sp, #116]	; 0x74
 80125e0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80125e4:	1ad2      	subs	r2, r2, r3
 80125e6:	e6b5      	b.n	8012354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80125e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	b923      	cbnz	r3, 80125f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80125ee:	4b04      	ldr	r3, [pc, #16]	; (8012600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80125f0:	6818      	ldr	r0, [r3, #0]
 80125f2:	6803      	ldr	r3, [r0, #0]
 80125f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f6:	4798      	blx	r3
 80125f8:	b05b      	add	sp, #364	; 0x16c
 80125fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125fe:	bf00      	nop
 8012600:	20011918 	.word	0x20011918

08012604 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4604      	mov	r4, r0
 8012608:	2500      	movs	r5, #0
 801260a:	9805      	ldr	r0, [sp, #20]
 801260c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8012610:	6061      	str	r1, [r4, #4]
 8012612:	8263      	strh	r3, [r4, #18]
 8012614:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8012618:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801261c:	8025      	strh	r5, [r4, #0]
 801261e:	7221      	strb	r1, [r4, #8]
 8012620:	7266      	strb	r6, [r4, #9]
 8012622:	60e0      	str	r0, [r4, #12]
 8012624:	8222      	strh	r2, [r4, #16]
 8012626:	82a3      	strh	r3, [r4, #20]
 8012628:	82e5      	strh	r5, [r4, #22]
 801262a:	8325      	strh	r5, [r4, #24]
 801262c:	8365      	strh	r5, [r4, #26]
 801262e:	83a5      	strh	r5, [r4, #28]
 8012630:	83e5      	strh	r5, [r4, #30]
 8012632:	8425      	strh	r5, [r4, #32]
 8012634:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8012638:	b32e      	cbz	r6, 8012686 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801263a:	6803      	ldr	r3, [r0, #0]
 801263c:	695b      	ldr	r3, [r3, #20]
 801263e:	4798      	blx	r3
 8012640:	4606      	mov	r6, r0
 8012642:	b300      	cbz	r0, 8012686 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012644:	68e0      	ldr	r0, [r4, #12]
 8012646:	4631      	mov	r1, r6
 8012648:	6803      	ldr	r3, [r0, #0]
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	4798      	blx	r3
 801264e:	4605      	mov	r5, r0
 8012650:	b1c8      	cbz	r0, 8012686 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012652:	7b43      	ldrb	r3, [r0, #13]
 8012654:	7a82      	ldrb	r2, [r0, #10]
 8012656:	005b      	lsls	r3, r3, #1
 8012658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801265c:	4313      	orrs	r3, r2
 801265e:	8423      	strh	r3, [r4, #32]
 8012660:	7a63      	ldrb	r3, [r4, #9]
 8012662:	2b06      	cmp	r3, #6
 8012664:	d10f      	bne.n	8012686 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8012666:	68e0      	ldr	r0, [r4, #12]
 8012668:	462a      	mov	r2, r5
 801266a:	4631      	mov	r1, r6
 801266c:	6803      	ldr	r3, [r0, #0]
 801266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012670:	4798      	blx	r3
 8012672:	7b6b      	ldrb	r3, [r5, #13]
 8012674:	005b      	lsls	r3, r3, #1
 8012676:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801267a:	7aab      	ldrb	r3, [r5, #10]
 801267c:	4313      	orrs	r3, r2
 801267e:	4418      	add	r0, r3
 8012680:	8c23      	ldrh	r3, [r4, #32]
 8012682:	4418      	add	r0, r3
 8012684:	8420      	strh	r0, [r4, #32]
 8012686:	4620      	mov	r0, r4
 8012688:	bd70      	pop	{r4, r5, r6, pc}

0801268a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801268a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268e:	2400      	movs	r4, #0
 8012690:	b085      	sub	sp, #20
 8012692:	4681      	mov	r9, r0
 8012694:	4688      	mov	r8, r1
 8012696:	4692      	mov	sl, r2
 8012698:	469b      	mov	fp, r3
 801269a:	4627      	mov	r7, r4
 801269c:	4625      	mov	r5, r4
 801269e:	4626      	mov	r6, r4
 80126a0:	4554      	cmp	r4, sl
 80126a2:	da2a      	bge.n	80126fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80126a4:	2300      	movs	r3, #0
 80126a6:	9303      	str	r3, [sp, #12]
 80126a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80126ac:	429d      	cmp	r5, r3
 80126ae:	d004      	beq.n	80126ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80126b0:	f242 030b 	movw	r3, #8203	; 0x200b
 80126b4:	429d      	cmp	r5, r3
 80126b6:	bf18      	it	ne
 80126b8:	462f      	movne	r7, r5
 80126ba:	ab03      	add	r3, sp, #12
 80126bc:	4642      	mov	r2, r8
 80126be:	4659      	mov	r1, fp
 80126c0:	4648      	mov	r0, r9
 80126c2:	f002 ff81 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80126c6:	4605      	mov	r5, r0
 80126c8:	b1b8      	cbz	r0, 80126fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80126ca:	280a      	cmp	r0, #10
 80126cc:	d015      	beq.n	80126fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80126ce:	9a03      	ldr	r2, [sp, #12]
 80126d0:	b18a      	cbz	r2, 80126f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80126d2:	7b50      	ldrb	r0, [r2, #13]
 80126d4:	4639      	mov	r1, r7
 80126d6:	7a93      	ldrb	r3, [r2, #10]
 80126d8:	0040      	lsls	r0, r0, #1
 80126da:	8895      	ldrh	r5, [r2, #4]
 80126dc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80126e0:	4303      	orrs	r3, r0
 80126e2:	4640      	mov	r0, r8
 80126e4:	9301      	str	r3, [sp, #4]
 80126e6:	f8d8 3000 	ldr.w	r3, [r8]
 80126ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ec:	4798      	blx	r3
 80126ee:	9b01      	ldr	r3, [sp, #4]
 80126f0:	4418      	add	r0, r3
 80126f2:	4406      	add	r6, r0
 80126f4:	b2b6      	uxth	r6, r6
 80126f6:	3401      	adds	r4, #1
 80126f8:	e7d2      	b.n	80126a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80126fa:	4630      	mov	r0, r6
 80126fc:	b005      	add	sp, #20
 80126fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012702 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8012702:	2a02      	cmp	r2, #2
 8012704:	b530      	push	{r4, r5, lr}
 8012706:	d011      	beq.n	801272c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8012708:	2a03      	cmp	r2, #3
 801270a:	d01c      	beq.n	8012746 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801270c:	2a01      	cmp	r2, #1
 801270e:	d10c      	bne.n	801272a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012710:	888b      	ldrh	r3, [r1, #4]
 8012712:	8801      	ldrh	r1, [r0, #0]
 8012714:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012718:	1a5b      	subs	r3, r3, r1
 801271a:	8844      	ldrh	r4, [r0, #2]
 801271c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012720:	1a9b      	subs	r3, r3, r2
 8012722:	8004      	strh	r4, [r0, #0]
 8012724:	8081      	strh	r1, [r0, #4]
 8012726:	8043      	strh	r3, [r0, #2]
 8012728:	80c2      	strh	r2, [r0, #6]
 801272a:	bd30      	pop	{r4, r5, pc}
 801272c:	88cb      	ldrh	r3, [r1, #6]
 801272e:	8842      	ldrh	r2, [r0, #2]
 8012730:	1a9b      	subs	r3, r3, r2
 8012732:	88c2      	ldrh	r2, [r0, #6]
 8012734:	1a9b      	subs	r3, r3, r2
 8012736:	888a      	ldrh	r2, [r1, #4]
 8012738:	8801      	ldrh	r1, [r0, #0]
 801273a:	8043      	strh	r3, [r0, #2]
 801273c:	1a52      	subs	r2, r2, r1
 801273e:	8881      	ldrh	r1, [r0, #4]
 8012740:	1a52      	subs	r2, r2, r1
 8012742:	8002      	strh	r2, [r0, #0]
 8012744:	e7f1      	b.n	801272a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8012746:	88cb      	ldrh	r3, [r1, #6]
 8012748:	8841      	ldrh	r1, [r0, #2]
 801274a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801274e:	1a5b      	subs	r3, r3, r1
 8012750:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012754:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012758:	1a9b      	subs	r3, r3, r2
 801275a:	8045      	strh	r5, [r0, #2]
 801275c:	8082      	strh	r2, [r0, #4]
 801275e:	8003      	strh	r3, [r0, #0]
 8012760:	80c4      	strh	r4, [r0, #6]
 8012762:	e7e2      	b.n	801272a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08012764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8012764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012768:	b09f      	sub	sp, #124	; 0x7c
 801276a:	9116      	str	r1, [sp, #88]	; 0x58
 801276c:	9317      	str	r3, [sp, #92]	; 0x5c
 801276e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012770:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012772:	8809      	ldrh	r1, [r1, #0]
 8012774:	889b      	ldrh	r3, [r3, #4]
 8012776:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801277a:	440b      	add	r3, r1
 801277c:	9212      	str	r2, [sp, #72]	; 0x48
 801277e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8012782:	b21b      	sxth	r3, r3
 8012784:	9011      	str	r0, [sp, #68]	; 0x44
 8012786:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801278a:	9310      	str	r3, [sp, #64]	; 0x40
 801278c:	f8d8 3000 	ldr.w	r3, [r8]
 8012790:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8012794:	7b19      	ldrb	r1, [r3, #12]
 8012796:	7adb      	ldrb	r3, [r3, #11]
 8012798:	9114      	str	r1, [sp, #80]	; 0x50
 801279a:	9315      	str	r3, [sp, #84]	; 0x54
 801279c:	2a00      	cmp	r2, #0
 801279e:	d06a      	beq.n	8012876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80127a0:	f898 3010 	ldrb.w	r3, [r8, #16]
 80127a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80127a6:	2b06      	cmp	r3, #6
 80127a8:	bf14      	ite	ne
 80127aa:	2301      	movne	r3, #1
 80127ac:	2302      	moveq	r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	f04f 0900 	mov.w	r9, #0
 80127b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80127b6:	464c      	mov	r4, r9
 80127b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80127bc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80127c0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80127c4:	4293      	cmp	r3, r2
 80127c6:	f280 808f 	bge.w	80128e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80127ca:	2300      	movs	r3, #0
 80127cc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80127d0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80127d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80127d8:	429c      	cmp	r4, r3
 80127da:	d006      	beq.n	80127ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80127dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127de:	f242 020b 	movw	r2, #8203	; 0x200b
 80127e2:	4294      	cmp	r4, r2
 80127e4:	bf18      	it	ne
 80127e6:	4623      	movne	r3, r4
 80127e8:	930d      	str	r3, [sp, #52]	; 0x34
 80127ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80127ee:	f8d8 2000 	ldr.w	r2, [r8]
 80127f2:	428b      	cmp	r3, r1
 80127f4:	db41      	blt.n	801287a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80127f6:	6813      	ldr	r3, [r2, #0]
 80127f8:	4610      	mov	r0, r2
 80127fa:	695b      	ldr	r3, [r3, #20]
 80127fc:	4798      	blx	r3
 80127fe:	4604      	mov	r4, r0
 8012800:	f8d8 0000 	ldr.w	r0, [r8]
 8012804:	aa1d      	add	r2, sp, #116	; 0x74
 8012806:	4621      	mov	r1, r4
 8012808:	6803      	ldr	r3, [r0, #0]
 801280a:	689d      	ldr	r5, [r3, #8]
 801280c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8012810:	47a8      	blx	r5
 8012812:	901c      	str	r0, [sp, #112]	; 0x70
 8012814:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012818:	429c      	cmp	r4, r3
 801281a:	f000 80ec 	beq.w	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801281e:	f242 030b 	movw	r3, #8203	; 0x200b
 8012822:	429c      	cmp	r4, r3
 8012824:	f000 80e7 	beq.w	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8012828:	2c00      	cmp	r4, #0
 801282a:	f000 80f9 	beq.w	8012a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801282e:	2c0a      	cmp	r4, #10
 8012830:	d060      	beq.n	80128f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8012832:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012834:	b36a      	cbz	r2, 8012892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8012836:	8894      	ldrh	r4, [r2, #4]
 8012838:	f1bb 0f00 	cmp.w	fp, #0
 801283c:	d03b      	beq.n	80128b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801283e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8012842:	f1bb 0f01 	cmp.w	fp, #1
 8012846:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801284a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801284e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8012852:	ea49 0903 	orr.w	r9, r9, r3
 8012856:	d134      	bne.n	80128c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8012858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801285a:	eba6 0609 	sub.w	r6, r6, r9
 801285e:	2b00      	cmp	r3, #0
 8012860:	d14f      	bne.n	8012902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8012862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012864:	eb09 0306 	add.w	r3, r9, r6
 8012868:	4413      	add	r3, r2
 801286a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801286c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012870:	4293      	cmp	r3, r2
 8012872:	da51      	bge.n	8012918 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8012874:	e038      	b.n	80128e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8012876:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012878:	e79a      	b.n	80127b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801287a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801287e:	4659      	mov	r1, fp
 8012880:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012882:	9301      	str	r3, [sp, #4]
 8012884:	ab1d      	add	r3, sp, #116	; 0x74
 8012886:	9300      	str	r3, [sp, #0]
 8012888:	ab1c      	add	r3, sp, #112	; 0x70
 801288a:	f002 fee6 	bl	801565a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801288e:	4604      	mov	r4, r0
 8012890:	e7c0      	b.n	8012814 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8012892:	f8d8 0000 	ldr.w	r0, [r8]
 8012896:	6803      	ldr	r3, [r0, #0]
 8012898:	691b      	ldr	r3, [r3, #16]
 801289a:	4798      	blx	r3
 801289c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80128a0:	4298      	cmp	r0, r3
 80128a2:	f000 80a8 	beq.w	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80128a6:	f242 030b 	movw	r3, #8203	; 0x200b
 80128aa:	4298      	cmp	r0, r3
 80128ac:	f000 80a3 	beq.w	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80128b0:	f1bb 0f00 	cmp.w	fp, #0
 80128b4:	d100      	bne.n	80128b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80128b6:	444e      	add	r6, r9
 80128b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80128ba:	2a00      	cmp	r2, #0
 80128bc:	d1bf      	bne.n	801283e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80128be:	4691      	mov	r9, r2
 80128c0:	e099      	b.n	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80128c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 80ad 	beq.w	8012a24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80128ca:	f1bb 0f00 	cmp.w	fp, #0
 80128ce:	d118      	bne.n	8012902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80128d0:	f8d8 0000 	ldr.w	r0, [r8]
 80128d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80128d6:	6803      	ldr	r3, [r0, #0]
 80128d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128da:	4798      	blx	r3
 80128dc:	4406      	add	r6, r0
 80128de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128e2:	1af3      	subs	r3, r6, r3
 80128e4:	4293      	cmp	r3, r2
 80128e6:	dd17      	ble.n	8012918 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80128e8:	2c00      	cmp	r4, #0
 80128ea:	f000 8099 	beq.w	8012a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80128ee:	2c0a      	cmp	r4, #10
 80128f0:	f040 8087 	bne.w	8012a02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 80128f4:	240a      	movs	r4, #10
 80128f6:	fab4 f084 	clz	r0, r4
 80128fa:	0940      	lsrs	r0, r0, #5
 80128fc:	b01f      	add	sp, #124	; 0x7c
 80128fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012902:	f8d8 0000 	ldr.w	r0, [r8]
 8012906:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012908:	6803      	ldr	r3, [r0, #0]
 801290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801290c:	4798      	blx	r3
 801290e:	f1bb 0f01 	cmp.w	fp, #1
 8012912:	eba6 0600 	sub.w	r6, r6, r0
 8012916:	d0a4      	beq.n	8012862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8012918:	981c      	ldr	r0, [sp, #112]	; 0x70
 801291a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801291c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8012920:	f9b3 7000 	ldrsh.w	r7, [r3]
 8012924:	7b43      	ldrb	r3, [r0, #13]
 8012926:	4431      	add	r1, r6
 8012928:	015b      	lsls	r3, r3, #5
 801292a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801292e:	7983      	ldrb	r3, [r0, #6]
 8012930:	4313      	orrs	r3, r2
 8012932:	440b      	add	r3, r1
 8012934:	42bb      	cmp	r3, r7
 8012936:	db5e      	blt.n	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8012938:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801293a:	4299      	cmp	r1, r3
 801293c:	da5b      	bge.n	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801293e:	f8d8 0000 	ldr.w	r0, [r8]
 8012942:	42b7      	cmp	r7, r6
 8012944:	6803      	ldr	r3, [r0, #0]
 8012946:	bfcc      	ite	gt
 8012948:	1bbf      	subgt	r7, r7, r6
 801294a:	2700      	movle	r7, #0
 801294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801294e:	bfc8      	it	gt
 8012950:	b2bf      	uxthgt	r7, r7
 8012952:	4798      	blx	r3
 8012954:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012956:	7b5a      	ldrb	r2, [r3, #13]
 8012958:	00d1      	lsls	r1, r2, #3
 801295a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801295e:	7a19      	ldrb	r1, [r3, #8]
 8012960:	4329      	orrs	r1, r5
 8012962:	0655      	lsls	r5, r2, #25
 8012964:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012966:	bf48      	it	mi
 8012968:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801296c:	4405      	add	r5, r0
 801296e:	bf48      	it	mi
 8012970:	b209      	sxthmi	r1, r1
 8012972:	1a6d      	subs	r5, r5, r1
 8012974:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8012976:	b2ad      	uxth	r5, r5
 8012978:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801297c:	fa0f fa85 	sxth.w	sl, r5
 8012980:	4551      	cmp	r1, sl
 8012982:	dd3c      	ble.n	80129fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8012984:	0112      	lsls	r2, r2, #4
 8012986:	79d8      	ldrb	r0, [r3, #7]
 8012988:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801298c:	4302      	orrs	r2, r0
 801298e:	4492      	add	sl, r2
 8012990:	4551      	cmp	r1, sl
 8012992:	dc30      	bgt.n	80129f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8012994:	1b4d      	subs	r5, r1, r5
 8012996:	468a      	mov	sl, r1
 8012998:	b22d      	sxth	r5, r5
 801299a:	9319      	str	r3, [sp, #100]	; 0x64
 801299c:	b2ad      	uxth	r5, r5
 801299e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80129a0:	f8d8 0000 	ldr.w	r0, [r8]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	6801      	ldr	r1, [r0, #0]
 80129a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80129aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80129ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80129ae:	9218      	str	r2, [sp, #96]	; 0x60
 80129b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80129b2:	4788      	blx	r1
 80129b4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80129b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80129ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80129bc:	f898 100e 	ldrb.w	r1, [r8, #14]
 80129c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80129c2:	910a      	str	r1, [sp, #40]	; 0x28
 80129c4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80129c8:	9109      	str	r1, [sp, #36]	; 0x24
 80129ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80129ce:	9305      	str	r3, [sp, #20]
 80129d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80129d2:	9206      	str	r2, [sp, #24]
 80129d4:	9304      	str	r3, [sp, #16]
 80129d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80129d8:	f8cd a004 	str.w	sl, [sp, #4]
 80129dc:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80129e0:	4437      	add	r7, r6
 80129e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80129e4:	b23f      	sxth	r7, r7
 80129e6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80129ea:	9700      	str	r7, [sp, #0]
 80129ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	47a8      	blx	r5
 80129f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129f8:	3301      	adds	r3, #1
 80129fa:	930e      	str	r3, [sp, #56]	; 0x38
 80129fc:	e6e0      	b.n	80127c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80129fe:	2500      	movs	r5, #0
 8012a00:	e7cb      	b.n	801299a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8012a02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012a04:	3501      	adds	r5, #1
 8012a06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012a08:	429d      	cmp	r5, r3
 8012a0a:	f6bf af74 	bge.w	80128f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8012a0e:	4659      	mov	r1, fp
 8012a10:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012a12:	f7fa fe9b 	bl	800d74c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012a16:	4604      	mov	r4, r0
 8012a18:	b110      	cbz	r0, 8012a20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8012a1a:	280a      	cmp	r0, #10
 8012a1c:	d1f2      	bne.n	8012a04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8012a1e:	e769      	b.n	80128f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8012a20:	2400      	movs	r4, #0
 8012a22:	e768      	b.n	80128f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8012a24:	f1bb 0f00 	cmp.w	fp, #0
 8012a28:	f43f af59 	beq.w	80128de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8012a2c:	e774      	b.n	8012918 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08012a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012a2e:	b530      	push	{r4, r5, lr}
 8012a30:	8ac4      	ldrh	r4, [r0, #22]
 8012a32:	8b45      	ldrh	r5, [r0, #26]
 8012a34:	8343      	strh	r3, [r0, #26]
 8012a36:	442c      	add	r4, r5
 8012a38:	1ae4      	subs	r4, r4, r3
 8012a3a:	8b83      	ldrh	r3, [r0, #28]
 8012a3c:	82c4      	strh	r4, [r0, #22]
 8012a3e:	8b04      	ldrh	r4, [r0, #24]
 8012a40:	4422      	add	r2, r4
 8012a42:	440c      	add	r4, r1
 8012a44:	1a59      	subs	r1, r3, r1
 8012a46:	83c2      	strh	r2, [r0, #30]
 8012a48:	8304      	strh	r4, [r0, #24]
 8012a4a:	8381      	strh	r1, [r0, #28]
 8012a4c:	bd30      	pop	{r4, r5, pc}

08012a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8012a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a52:	4604      	mov	r4, r0
 8012a54:	8a47      	ldrh	r7, [r0, #18]
 8012a56:	68c0      	ldr	r0, [r0, #12]
 8012a58:	b085      	sub	sp, #20
 8012a5a:	6803      	ldr	r3, [r0, #0]
 8012a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5e:	4798      	blx	r3
 8012a60:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8012a64:	7a63      	ldrb	r3, [r4, #9]
 8012a66:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	42b7      	cmp	r7, r6
 8012a6e:	bfac      	ite	ge
 8012a70:	f04f 0900 	movge.w	r9, #0
 8012a74:	f04f 0901 	movlt.w	r9, #1
 8012a78:	2b05      	cmp	r3, #5
 8012a7a:	d804      	bhi.n	8012a86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8012a7c:	e8df f003 	tbb	[pc, r3]
 8012a80:	470f0854 	.word	0x470f0854
 8012a84:	4c4c      	.short	0x4c4c
 8012a86:	2500      	movs	r5, #0
 8012a88:	46a9      	mov	r9, r5
 8012a8a:	462e      	mov	r6, r5
 8012a8c:	462f      	mov	r7, r5
 8012a8e:	e00e      	b.n	8012aae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012a90:	42b7      	cmp	r7, r6
 8012a92:	f04f 0500 	mov.w	r5, #0
 8012a96:	bfb4      	ite	lt
 8012a98:	2600      	movlt	r6, #0
 8012a9a:	2601      	movge	r6, #1
 8012a9c:	e7f6      	b.n	8012a8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012a9e:	42b7      	cmp	r7, r6
 8012aa0:	464d      	mov	r5, r9
 8012aa2:	f04f 0900 	mov.w	r9, #0
 8012aa6:	bfb4      	ite	lt
 8012aa8:	2600      	movlt	r6, #0
 8012aaa:	2601      	movge	r6, #1
 8012aac:	464f      	mov	r7, r9
 8012aae:	f04f 0800 	mov.w	r8, #0
 8012ab2:	f8a4 8016 	strh.w	r8, [r4, #22]
 8012ab6:	f8a4 8018 	strh.w	r8, [r4, #24]
 8012aba:	f8cd 8004 	str.w	r8, [sp, #4]
 8012abe:	2300      	movs	r3, #0
 8012ac0:	9303      	str	r3, [sp, #12]
 8012ac2:	8823      	ldrh	r3, [r4, #0]
 8012ac4:	2b20      	cmp	r3, #32
 8012ac6:	d033      	beq.n	8012b30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8012ac8:	f242 010b 	movw	r1, #8203	; 0x200b
 8012acc:	1a5a      	subs	r2, r3, r1
 8012ace:	f1d2 0a00 	rsbs	sl, r2, #0
 8012ad2:	eb4a 0a02 	adc.w	sl, sl, r2
 8012ad6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012ada:	4293      	cmp	r3, r2
 8012adc:	d008      	beq.n	8012af0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012ade:	428b      	cmp	r3, r1
 8012ae0:	9a01      	ldr	r2, [sp, #4]
 8012ae2:	bf0e      	itee	eq
 8012ae4:	f04f 0a01 	moveq.w	sl, #1
 8012ae8:	461a      	movne	r2, r3
 8012aea:	f04f 0a00 	movne.w	sl, #0
 8012aee:	9201      	str	r2, [sp, #4]
 8012af0:	ab03      	add	r3, sp, #12
 8012af2:	68e2      	ldr	r2, [r4, #12]
 8012af4:	7a21      	ldrb	r1, [r4, #8]
 8012af6:	6860      	ldr	r0, [r4, #4]
 8012af8:	f002 fd66 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012afc:	8020      	strh	r0, [r4, #0]
 8012afe:	b9d8      	cbnz	r0, 8012b38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8012b00:	8ba2      	ldrh	r2, [r4, #28]
 8012b02:	2300      	movs	r3, #0
 8012b04:	4611      	mov	r1, r2
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7ff ff91 	bl	8012a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012b0c:	e06e      	b.n	8012bec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012b0e:	2500      	movs	r5, #0
 8012b10:	2701      	movs	r7, #1
 8012b12:	46a9      	mov	r9, r5
 8012b14:	462e      	mov	r6, r5
 8012b16:	e7ca      	b.n	8012aae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012b18:	42b7      	cmp	r7, r6
 8012b1a:	f04f 0500 	mov.w	r5, #0
 8012b1e:	bfb4      	ite	lt
 8012b20:	2700      	movlt	r7, #0
 8012b22:	2701      	movge	r7, #1
 8012b24:	462e      	mov	r6, r5
 8012b26:	e7c2      	b.n	8012aae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8012b28:	2500      	movs	r5, #0
 8012b2a:	2601      	movs	r6, #1
 8012b2c:	46a9      	mov	r9, r5
 8012b2e:	e7ad      	b.n	8012a8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8012b30:	9301      	str	r3, [sp, #4]
 8012b32:	f04f 0a01 	mov.w	sl, #1
 8012b36:	e7db      	b.n	8012af0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8012b38:	8b63      	ldrh	r3, [r4, #26]
 8012b3a:	280a      	cmp	r0, #10
 8012b3c:	f103 0301 	add.w	r3, r3, #1
 8012b40:	8363      	strh	r3, [r4, #26]
 8012b42:	d0dd      	beq.n	8012b00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8012b44:	9a03      	ldr	r2, [sp, #12]
 8012b46:	bb62      	cbnz	r2, 8012ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8012b48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012b4c:	4298      	cmp	r0, r3
 8012b4e:	d003      	beq.n	8012b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012b50:	f242 030b 	movw	r3, #8203	; 0x200b
 8012b54:	4298      	cmp	r0, r3
 8012b56:	d1b2      	bne.n	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012b58:	8823      	ldrh	r3, [r4, #0]
 8012b5a:	8ba1      	ldrh	r1, [r4, #28]
 8012b5c:	2b20      	cmp	r3, #32
 8012b5e:	d003      	beq.n	8012b68 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8012b60:	f242 000b 	movw	r0, #8203	; 0x200b
 8012b64:	4283      	cmp	r3, r0
 8012b66:	d131      	bne.n	8012bcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8012b68:	f1ba 0f00 	cmp.w	sl, #0
 8012b6c:	bf0a      	itet	eq
 8012b6e:	4688      	moveq	r8, r1
 8012b70:	4650      	movne	r0, sl
 8012b72:	2001      	moveq	r0, #1
 8012b74:	440a      	add	r2, r1
 8012b76:	8b23      	ldrh	r3, [r4, #24]
 8012b78:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012b7c:	b292      	uxth	r2, r2
 8012b7e:	83a2      	strh	r2, [r4, #28]
 8012b80:	4413      	add	r3, r2
 8012b82:	f1b9 0f00 	cmp.w	r9, #0
 8012b86:	d102      	bne.n	8012b8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	d042      	beq.n	8012c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8012b8c:	b300      	cbz	r0, 8012bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8012b8e:	8c21      	ldrh	r1, [r4, #32]
 8012b90:	4419      	add	r1, r3
 8012b92:	458c      	cmp	ip, r1
 8012b94:	da37      	bge.n	8012c06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012b96:	8ae1      	ldrh	r1, [r4, #22]
 8012b98:	2900      	cmp	r1, #0
 8012b9a:	d034      	beq.n	8012c06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012b9c:	4563      	cmp	r3, ip
 8012b9e:	dd8e      	ble.n	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012ba0:	e01d      	b.n	8012bde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8012ba2:	8893      	ldrh	r3, [r2, #4]
 8012ba4:	9901      	ldr	r1, [sp, #4]
 8012ba6:	8023      	strh	r3, [r4, #0]
 8012ba8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8012bac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012bb0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8012bb4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8012bb8:	ea4b 0b00 	orr.w	fp, fp, r0
 8012bbc:	68e0      	ldr	r0, [r4, #12]
 8012bbe:	6803      	ldr	r3, [r0, #0]
 8012bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc2:	4798      	blx	r3
 8012bc4:	eb0b 0200 	add.w	r2, fp, r0
 8012bc8:	b292      	uxth	r2, r2
 8012bca:	e7c5      	b.n	8012b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e7d1      	b.n	8012b74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8012bd0:	4563      	cmp	r3, ip
 8012bd2:	f77f af74 	ble.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012bd6:	8ae3      	ldrh	r3, [r4, #22]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f43f af70 	beq.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012bde:	2301      	movs	r3, #1
 8012be0:	8c22      	ldrh	r2, [r4, #32]
 8012be2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8012be6:	8be3      	ldrh	r3, [r4, #30]
 8012be8:	4413      	add	r3, r2
 8012bea:	83e3      	strh	r3, [r4, #30]
 8012bec:	68e0      	ldr	r0, [r4, #12]
 8012bee:	6803      	ldr	r3, [r0, #0]
 8012bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf2:	4798      	blx	r3
 8012bf4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8012bf8:	4418      	add	r0, r3
 8012bfa:	8a63      	ldrh	r3, [r4, #18]
 8012bfc:	1a18      	subs	r0, r3, r0
 8012bfe:	8260      	strh	r0, [r4, #18]
 8012c00:	b005      	add	sp, #20
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	2300      	movs	r3, #0
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f7ff ff0f 	bl	8012a2e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012c10:	e755      	b.n	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c12:	4563      	cmp	r3, ip
 8012c14:	dd14      	ble.n	8012c40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8012c16:	b117      	cbz	r7, 8012c1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	460a      	mov	r2, r1
 8012c1c:	e772      	b.n	8012b04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8012c1e:	2e00      	cmp	r6, #0
 8012c20:	f43f af4d 	beq.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c24:	2800      	cmp	r0, #0
 8012c26:	f47f af4a 	bne.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c2a:	f1ba 0f00 	cmp.w	sl, #0
 8012c2e:	d002      	beq.n	8012c36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8012c30:	2301      	movs	r3, #1
 8012c32:	4642      	mov	r2, r8
 8012c34:	e767      	b.n	8012b06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8012c36:	8ae3      	ldrh	r3, [r4, #22]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f43f af40 	beq.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c3e:	e7d5      	b.n	8012bec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	f47f af3c 	bne.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c46:	f1ba 0f00 	cmp.w	sl, #0
 8012c4a:	f43f af38 	beq.w	8012abe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012c4e:	2301      	movs	r3, #1
 8012c50:	4642      	mov	r2, r8
 8012c52:	e7da      	b.n	8012c0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08012c54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8012c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c56:	4605      	mov	r5, r0
 8012c58:	b08f      	sub	sp, #60	; 0x3c
 8012c5a:	4617      	mov	r7, r2
 8012c5c:	461c      	mov	r4, r3
 8012c5e:	460e      	mov	r6, r1
 8012c60:	b1d1      	cbz	r1, 8012c98 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4620      	mov	r0, r4
 8012c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c68:	4798      	blx	r3
 8012c6a:	4240      	negs	r0, r0
 8012c6c:	9603      	str	r6, [sp, #12]
 8012c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c72:	b200      	sxth	r0, r0
 8012c74:	9700      	str	r7, [sp, #0]
 8012c76:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8012c80:	2401      	movs	r4, #1
 8012c82:	a805      	add	r0, sp, #20
 8012c84:	f7ff fcbe 	bl	8012604 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012c88:	a805      	add	r0, sp, #20
 8012c8a:	f7ff fee0 	bl	8012a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012c8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012c92:	b163      	cbz	r3, 8012cae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8012c94:	3401      	adds	r4, #1
 8012c96:	e7f7      	b.n	8012c88 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8012c98:	2401      	movs	r4, #1
 8012c9a:	f002 fd61 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012c9e:	280a      	cmp	r0, #10
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	bf08      	it	eq
 8012ca4:	3401      	addeq	r4, #1
 8012ca6:	f002 fd5b 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d1f7      	bne.n	8012c9e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8012cae:	b2a0      	uxth	r0, r4
 8012cb0:	b00f      	add	sp, #60	; 0x3c
 8012cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012cb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	b0e3      	sub	sp, #396	; 0x18c
 8012cba:	461c      	mov	r4, r3
 8012cbc:	4683      	mov	fp, r0
 8012cbe:	4688      	mov	r8, r1
 8012cc0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	f000 810f 	beq.w	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012cc8:	6823      	ldr	r3, [r4, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f000 810b 	beq.w	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012cd0:	7ba3      	ldrb	r3, [r4, #14]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	f000 8107 	beq.w	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012cd8:	ad0a      	add	r5, sp, #40	; 0x28
 8012cda:	6810      	ldr	r0, [r2, #0]
 8012cdc:	6851      	ldr	r1, [r2, #4]
 8012cde:	462b      	mov	r3, r5
 8012ce0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8012ce4:	c303      	stmia	r3!, {r0, r1}
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8012cec:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	910c      	str	r1, [sp, #48]	; 0x30
 8012cf4:	a90c      	add	r1, sp, #48	; 0x30
 8012cf6:	79a2      	ldrb	r2, [r4, #6]
 8012cf8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012cfc:	f7ff fd01 	bl	8012702 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012d00:	a90c      	add	r1, sp, #48	; 0x30
 8012d02:	79a2      	ldrb	r2, [r4, #6]
 8012d04:	4608      	mov	r0, r1
 8012d06:	f7ff fcfc 	bl	8012702 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012d0a:	a817      	add	r0, sp, #92	; 0x5c
 8012d0c:	f002 f8fb 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8012d10:	6820      	ldr	r0, [r4, #0]
 8012d12:	6803      	ldr	r3, [r0, #0]
 8012d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d16:	4798      	blx	r3
 8012d18:	4606      	mov	r6, r0
 8012d1a:	6820      	ldr	r0, [r4, #0]
 8012d1c:	6803      	ldr	r3, [r0, #0]
 8012d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d20:	4798      	blx	r3
 8012d22:	4633      	mov	r3, r6
 8012d24:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8012d26:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8012d28:	9000      	str	r0, [sp, #0]
 8012d2a:	a817      	add	r0, sp, #92	; 0x5c
 8012d2c:	f002 f946 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012d30:	6820      	ldr	r0, [r4, #0]
 8012d32:	f894 a004 	ldrb.w	sl, [r4, #4]
 8012d36:	6803      	ldr	r3, [r0, #0]
 8012d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3a:	4798      	blx	r3
 8012d3c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012d40:	6823      	ldr	r3, [r4, #0]
 8012d42:	4607      	mov	r7, r0
 8012d44:	4406      	add	r6, r0
 8012d46:	a830      	add	r0, sp, #192	; 0xc0
 8012d48:	f893 9009 	ldrb.w	r9, [r3, #9]
 8012d4c:	f002 f8db 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8012d50:	7c23      	ldrb	r3, [r4, #16]
 8012d52:	b17b      	cbz	r3, 8012d74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8012d54:	6820      	ldr	r0, [r4, #0]
 8012d56:	6803      	ldr	r3, [r0, #0]
 8012d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d5a:	4798      	blx	r3
 8012d5c:	9009      	str	r0, [sp, #36]	; 0x24
 8012d5e:	6820      	ldr	r0, [r4, #0]
 8012d60:	6802      	ldr	r2, [r0, #0]
 8012d62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012d64:	4790      	blx	r2
 8012d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d68:	9000      	str	r0, [sp, #0]
 8012d6a:	a830      	add	r0, sp, #192	; 0xc0
 8012d6c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8012d6e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8012d70:	f002 f924 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012d74:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012d78:	a80e      	add	r0, sp, #56	; 0x38
 8012d7a:	7be2      	ldrb	r2, [r4, #15]
 8012d7c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012d80:	1a8a      	subs	r2, r1, r2
 8012d82:	7c21      	ldrb	r1, [r4, #16]
 8012d84:	9103      	str	r1, [sp, #12]
 8012d86:	b292      	uxth	r2, r2
 8012d88:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8012d8c:	9102      	str	r1, [sp, #8]
 8012d8e:	6821      	ldr	r1, [r4, #0]
 8012d90:	9101      	str	r1, [sp, #4]
 8012d92:	7961      	ldrb	r1, [r4, #5]
 8012d94:	9100      	str	r1, [sp, #0]
 8012d96:	a930      	add	r1, sp, #192	; 0xc0
 8012d98:	f7ff fc34 	bl	8012604 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012d9c:	2e00      	cmp	r6, #0
 8012d9e:	dc5b      	bgt.n	8012e58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8012da0:	af17      	add	r7, sp, #92	; 0x5c
 8012da2:	f04f 0900 	mov.w	r9, #0
 8012da6:	7c23      	ldrb	r3, [r4, #16]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f000 80ae 	beq.w	8012f0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012dae:	a80e      	add	r0, sp, #56	; 0x38
 8012db0:	f7ff fe4d 	bl	8012a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012db4:	f1ba 0f00 	cmp.w	sl, #0
 8012db8:	f000 80a2 	beq.w	8012f00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8012dbc:	7c23      	ldrb	r3, [r4, #16]
 8012dbe:	2264      	movs	r2, #100	; 0x64
 8012dc0:	4639      	mov	r1, r7
 8012dc2:	a849      	add	r0, sp, #292	; 0x124
 8012dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8012dc6:	f00b ff59 	bl	801ec7c <memcpy>
 8012dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	f000 80a4 	beq.w	8012f1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8012dd2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8012dd6:	7922      	ldrb	r2, [r4, #4]
 8012dd8:	2a01      	cmp	r2, #1
 8012dda:	f040 8087 	bne.w	8012eec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012dde:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8012de2:	1ac0      	subs	r0, r0, r3
 8012de4:	2302      	movs	r3, #2
 8012de6:	fb90 f0f3 	sdiv	r0, r0, r3
 8012dea:	b200      	sxth	r0, r0
 8012dec:	7c23      	ldrb	r3, [r4, #16]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f000 8088 	beq.w	8012f04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8012df4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8012df8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8012dfc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e00:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012e04:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012e08:	2100      	movs	r1, #0
 8012e0a:	4410      	add	r0, r2
 8012e0c:	4642      	mov	r2, r8
 8012e0e:	b200      	sxth	r0, r0
 8012e10:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012e14:	9000      	str	r0, [sp, #0]
 8012e16:	4658      	mov	r0, fp
 8012e18:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012e1c:	f7ff fca2 	bl	8012764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012e20:	2800      	cmp	r0, #0
 8012e22:	d160      	bne.n	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012e24:	b2b2      	uxth	r2, r6
 8012e26:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012e2a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012e2e:	4413      	add	r3, r2
 8012e30:	1a8a      	subs	r2, r1, r2
 8012e32:	b21b      	sxth	r3, r3
 8012e34:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8012e38:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8012e3c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012e40:	2a00      	cmp	r2, #0
 8012e42:	d150      	bne.n	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012e44:	6822      	ldr	r2, [r4, #0]
 8012e46:	8869      	ldrh	r1, [r5, #2]
 8012e48:	7a12      	ldrb	r2, [r2, #8]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	88ea      	ldrh	r2, [r5, #6]
 8012e4e:	440a      	add	r2, r1
 8012e50:	b212      	sxth	r2, r2
 8012e52:	4293      	cmp	r3, r2
 8012e54:	dda7      	ble.n	8012da6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8012e56:	e046      	b.n	8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012e58:	7c23      	ldrb	r3, [r4, #16]
 8012e5a:	444f      	add	r7, r9
 8012e5c:	b1c3      	cbz	r3, 8012e90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8012e5e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8012e62:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e66:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012e6a:	443b      	add	r3, r7
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	da97      	bge.n	8012da0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012e70:	a80e      	add	r0, sp, #56	; 0x38
 8012e72:	f7ff fdec 	bl	8012a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012e76:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8012e7a:	3b01      	subs	r3, #1
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	454b      	cmp	r3, r9
 8012e80:	9309      	str	r3, [sp, #36]	; 0x24
 8012e82:	d021      	beq.n	8012ec8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8012e84:	7961      	ldrb	r1, [r4, #5]
 8012e86:	a817      	add	r0, sp, #92	; 0x5c
 8012e88:	f7fa fc60 	bl	800d74c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8e:	e7f4      	b.n	8012e7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8012e90:	fa1f f986 	uxth.w	r9, r6
 8012e94:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e98:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012e9c:	443b      	add	r3, r7
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	f6bf af7e 	bge.w	8012da0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012ea4:	a817      	add	r0, sp, #92	; 0x5c
 8012ea6:	f002 fc5b 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012eaa:	b1e0      	cbz	r0, 8012ee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012eac:	280a      	cmp	r0, #10
 8012eae:	d1f1      	bne.n	8012e94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012eb0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012eb4:	444b      	add	r3, r9
 8012eb6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012eba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8012ebe:	eba3 0309 	sub.w	r3, r3, r9
 8012ec2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012ec6:	e7e5      	b.n	8012e94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012ec8:	b2b3      	uxth	r3, r6
 8012eca:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012ece:	441a      	add	r2, r3
 8012ed0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8012ed4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012ede:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d1bd      	bne.n	8012e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8012ee6:	b063      	add	sp, #396	; 0x18c
 8012ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eec:	2a02      	cmp	r2, #2
 8012eee:	d105      	bne.n	8012efc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8012ef0:	7be2      	ldrb	r2, [r4, #15]
 8012ef2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8012ef6:	1a80      	subs	r0, r0, r2
 8012ef8:	1ac0      	subs	r0, r0, r3
 8012efa:	e776      	b.n	8012dea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8012efc:	2000      	movs	r0, #0
 8012efe:	e775      	b.n	8012dec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012f00:	7be0      	ldrb	r0, [r4, #15]
 8012f02:	e773      	b.n	8012dec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8012f04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012f08:	e776      	b.n	8012df8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012f0a:	f1ba 0f00 	cmp.w	sl, #0
 8012f0e:	d0f7      	beq.n	8012f00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8012f10:	2264      	movs	r2, #100	; 0x64
 8012f12:	4639      	mov	r1, r7
 8012f14:	a849      	add	r0, sp, #292	; 0x124
 8012f16:	f00b feb1 	bl	801ec7c <memcpy>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012f20:	6821      	ldr	r1, [r4, #0]
 8012f22:	a849      	add	r0, sp, #292	; 0x124
 8012f24:	f7ff fbb1 	bl	801268a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012f28:	b203      	sxth	r3, r0
 8012f2a:	e754      	b.n	8012dd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08012f2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012f2c:	2b03      	cmp	r3, #3
 8012f2e:	d818      	bhi.n	8012f62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8012f30:	e8df f003 	tbb	[pc, r3]
 8012f34:	130d0602 	.word	0x130d0602
 8012f38:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012f3c:	1850      	adds	r0, r2, r1
 8012f3e:	4770      	bx	lr
 8012f40:	8803      	ldrh	r3, [r0, #0]
 8012f42:	8880      	ldrh	r0, [r0, #4]
 8012f44:	4418      	add	r0, r3
 8012f46:	b200      	sxth	r0, r0
 8012f48:	1a80      	subs	r0, r0, r2
 8012f4a:	3801      	subs	r0, #1
 8012f4c:	4770      	bx	lr
 8012f4e:	8803      	ldrh	r3, [r0, #0]
 8012f50:	8880      	ldrh	r0, [r0, #4]
 8012f52:	4418      	add	r0, r3
 8012f54:	b200      	sxth	r0, r0
 8012f56:	1a40      	subs	r0, r0, r1
 8012f58:	e7f7      	b.n	8012f4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012f5a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012f5e:	4410      	add	r0, r2
 8012f60:	4770      	bx	lr
 8012f62:	2000      	movs	r0, #0
 8012f64:	4770      	bx	lr

08012f66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d817      	bhi.n	8012f9a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8012f6a:	e8df f003 	tbb	[pc, r3]
 8012f6e:	0602      	.short	0x0602
 8012f70:	1009      	.short	0x1009
 8012f72:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012f76:	1850      	adds	r0, r2, r1
 8012f78:	4770      	bx	lr
 8012f7a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012f7e:	e7fa      	b.n	8012f76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012f80:	8843      	ldrh	r3, [r0, #2]
 8012f82:	88c0      	ldrh	r0, [r0, #6]
 8012f84:	4418      	add	r0, r3
 8012f86:	b200      	sxth	r0, r0
 8012f88:	1a80      	subs	r0, r0, r2
 8012f8a:	3801      	subs	r0, #1
 8012f8c:	4770      	bx	lr
 8012f8e:	8843      	ldrh	r3, [r0, #2]
 8012f90:	88c0      	ldrh	r0, [r0, #6]
 8012f92:	4418      	add	r0, r3
 8012f94:	b200      	sxth	r0, r0
 8012f96:	1a40      	subs	r0, r0, r1
 8012f98:	e7f7      	b.n	8012f8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012f9a:	2000      	movs	r0, #0
 8012f9c:	4770      	bx	lr
	...

08012fa0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012fa0:	4b01      	ldr	r3, [pc, #4]	; (8012fa8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	4770      	bx	lr
 8012fa8:	20011920 	.word	0x20011920

08012fac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012fac:	4603      	mov	r3, r0
 8012fae:	b1c8      	cbz	r0, 8012fe4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012fb0:	0c02      	lsrs	r2, r0, #16
 8012fb2:	0412      	lsls	r2, r2, #16
 8012fb4:	b9a2      	cbnz	r2, 8012fe0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8012fb6:	0403      	lsls	r3, r0, #16
 8012fb8:	2010      	movs	r0, #16
 8012fba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012fbe:	bf04      	itt	eq
 8012fc0:	021b      	lsleq	r3, r3, #8
 8012fc2:	3008      	addeq	r0, #8
 8012fc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012fc8:	bf04      	itt	eq
 8012fca:	011b      	lsleq	r3, r3, #4
 8012fcc:	3004      	addeq	r0, #4
 8012fce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012fd2:	bf04      	itt	eq
 8012fd4:	009b      	lsleq	r3, r3, #2
 8012fd6:	3002      	addeq	r0, #2
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	db04      	blt.n	8012fe6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012fdc:	3001      	adds	r0, #1
 8012fde:	4770      	bx	lr
 8012fe0:	2000      	movs	r0, #0
 8012fe2:	e7ea      	b.n	8012fba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012fe4:	2020      	movs	r0, #32
 8012fe6:	4770      	bx	lr

08012fe8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	b087      	sub	sp, #28
 8012fee:	4681      	mov	r9, r0
 8012ff0:	4698      	mov	r8, r3
 8012ff2:	4610      	mov	r0, r2
 8012ff4:	460d      	mov	r5, r1
 8012ff6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8012ffa:	b981      	cbnz	r1, 801301e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8012ffc:	b14b      	cbz	r3, 8013012 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8012ffe:	460b      	mov	r3, r1
 8013000:	464a      	mov	r2, r9
 8013002:	4641      	mov	r1, r8
 8013004:	e9cd 4700 	strd	r4, r7, [sp]
 8013008:	f7ff ffee 	bl	8012fe8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801300c:	b007      	add	sp, #28
 801300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013012:	f04f 33ff 	mov.w	r3, #4294967295
 8013016:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801301a:	603b      	str	r3, [r7, #0]
 801301c:	e7f6      	b.n	801300c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801301e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8013022:	d107      	bne.n	8013034 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8013024:	fb09 f602 	mul.w	r6, r9, r2
 8013028:	fbb6 f0f4 	udiv	r0, r6, r4
 801302c:	fb04 6610 	mls	r6, r4, r0, r6
 8013030:	603e      	str	r6, [r7, #0]
 8013032:	e7eb      	b.n	801300c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8013034:	2601      	movs	r6, #1
 8013036:	fa09 fb01 	lsl.w	fp, r9, r1
 801303a:	408e      	lsls	r6, r1
 801303c:	fbbb f3f4 	udiv	r3, fp, r4
 8013040:	3e01      	subs	r6, #1
 8013042:	9302      	str	r3, [sp, #8]
 8013044:	fb0a f303 	mul.w	r3, sl, r3
 8013048:	4016      	ands	r6, r2
 801304a:	9303      	str	r3, [sp, #12]
 801304c:	4630      	mov	r0, r6
 801304e:	f7ff ffad 	bl	8012fac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013052:	464a      	mov	r2, r9
 8013054:	460b      	mov	r3, r1
 8013056:	4601      	mov	r1, r0
 8013058:	4630      	mov	r0, r6
 801305a:	e9cd 4700 	strd	r4, r7, [sp]
 801305e:	f7ff ffc3 	bl	8012fe8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013062:	9b02      	ldr	r3, [sp, #8]
 8013064:	4606      	mov	r6, r0
 8013066:	eb05 0108 	add.w	r1, r5, r8
 801306a:	fb04 bb13 	mls	fp, r4, r3, fp
 801306e:	4658      	mov	r0, fp
 8013070:	f7ff ff9c 	bl	8012fac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013074:	ab05      	add	r3, sp, #20
 8013076:	465a      	mov	r2, fp
 8013078:	e9cd 4300 	strd	r4, r3, [sp]
 801307c:	4603      	mov	r3, r0
 801307e:	4650      	mov	r0, sl
 8013080:	f7ff ffb2 	bl	8012fe8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013084:	6839      	ldr	r1, [r7, #0]
 8013086:	9a05      	ldr	r2, [sp, #20]
 8013088:	9b03      	ldr	r3, [sp, #12]
 801308a:	4411      	add	r1, r2
 801308c:	fbb1 f2f4 	udiv	r2, r1, r4
 8013090:	18d3      	adds	r3, r2, r3
 8013092:	fb04 1412 	mls	r4, r4, r2, r1
 8013096:	441e      	add	r6, r3
 8013098:	603c      	str	r4, [r7, #0]
 801309a:	4430      	add	r0, r6
 801309c:	e7b6      	b.n	801300c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801309e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801309e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130a2:	b085      	sub	sp, #20
 80130a4:	f1b0 0900 	subs.w	r9, r0, #0
 80130a8:	461d      	mov	r5, r3
 80130aa:	4617      	mov	r7, r2
 80130ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80130ae:	bfbb      	ittet	lt
 80130b0:	f1c9 0900 	rsblt	r9, r9, #0
 80130b4:	f04f 36ff 	movlt.w	r6, #4294967295
 80130b8:	2601      	movge	r6, #1
 80130ba:	6823      	ldrlt	r3, [r4, #0]
 80130bc:	bfbc      	itt	lt
 80130be:	425b      	neglt	r3, r3
 80130c0:	6023      	strlt	r3, [r4, #0]
 80130c2:	2a00      	cmp	r2, #0
 80130c4:	da04      	bge.n	80130d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80130c6:	6823      	ldr	r3, [r4, #0]
 80130c8:	4257      	negs	r7, r2
 80130ca:	4276      	negs	r6, r6
 80130cc:	425b      	negs	r3, r3
 80130ce:	6023      	str	r3, [r4, #0]
 80130d0:	2d00      	cmp	r5, #0
 80130d2:	4638      	mov	r0, r7
 80130d4:	bfba      	itte	lt
 80130d6:	426d      	neglt	r5, r5
 80130d8:	f04f 38ff 	movlt.w	r8, #4294967295
 80130dc:	f04f 0801 	movge.w	r8, #1
 80130e0:	f7ff ff64 	bl	8012fac <_ZN8touchgfx16TouchCalibration4clzuEm>
 80130e4:	ab03      	add	r3, sp, #12
 80130e6:	463a      	mov	r2, r7
 80130e8:	e9cd 5300 	strd	r5, r3, [sp]
 80130ec:	4603      	mov	r3, r0
 80130ee:	4648      	mov	r0, r9
 80130f0:	f7ff ff7a 	bl	8012fe8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	9a03      	ldr	r2, [sp, #12]
 80130f8:	4546      	cmp	r6, r8
 80130fa:	441a      	add	r2, r3
 80130fc:	fb92 f3f5 	sdiv	r3, r2, r5
 8013100:	4418      	add	r0, r3
 8013102:	fb05 2313 	mls	r3, r5, r3, r2
 8013106:	bf18      	it	ne
 8013108:	4240      	negne	r0, r0
 801310a:	1c72      	adds	r2, r6, #1
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	d105      	bne.n	801311c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8013110:	2b00      	cmp	r3, #0
 8013112:	f1c3 0200 	rsb	r2, r3, #0
 8013116:	db0b      	blt.n	8013130 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013118:	6022      	str	r2, [r4, #0]
 801311a:	e006      	b.n	801312a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801311c:	2e01      	cmp	r6, #1
 801311e:	d104      	bne.n	801312a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013120:	2b00      	cmp	r3, #0
 8013122:	da02      	bge.n	801312a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013124:	442b      	add	r3, r5
 8013126:	3801      	subs	r0, #1
 8013128:	6023      	str	r3, [r4, #0]
 801312a:	b005      	add	sp, #20
 801312c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013130:	3801      	subs	r0, #1
 8013132:	1b52      	subs	r2, r2, r5
 8013134:	e7f0      	b.n	8013118 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08013138 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801313c:	4c1c      	ldr	r4, [pc, #112]	; (80131b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801313e:	4605      	mov	r5, r0
 8013140:	6807      	ldr	r7, [r0, #0]
 8013142:	69a3      	ldr	r3, [r4, #24]
 8013144:	b92b      	cbnz	r3, 8013152 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013146:	6840      	ldr	r0, [r0, #4]
 8013148:	e9c5 7000 	strd	r7, r0, [r5]
 801314c:	b004      	add	sp, #16
 801314e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013152:	f04f 0802 	mov.w	r8, #2
 8013156:	68a2      	ldr	r2, [r4, #8]
 8013158:	ae04      	add	r6, sp, #16
 801315a:	6820      	ldr	r0, [r4, #0]
 801315c:	fb93 f1f8 	sdiv	r1, r3, r8
 8013160:	440a      	add	r2, r1
 8013162:	69e1      	ldr	r1, [r4, #28]
 8013164:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013168:	463a      	mov	r2, r7
 801316a:	9600      	str	r6, [sp, #0]
 801316c:	f7ff ff97 	bl	801309e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013170:	69a3      	ldr	r3, [r4, #24]
 8013172:	4607      	mov	r7, r0
 8013174:	686a      	ldr	r2, [r5, #4]
 8013176:	6a21      	ldr	r1, [r4, #32]
 8013178:	9600      	str	r6, [sp, #0]
 801317a:	6860      	ldr	r0, [r4, #4]
 801317c:	f7ff ff8f 	bl	801309e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013180:	69a3      	ldr	r3, [r4, #24]
 8013182:	6962      	ldr	r2, [r4, #20]
 8013184:	4407      	add	r7, r0
 8013186:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013188:	9600      	str	r6, [sp, #0]
 801318a:	68e0      	ldr	r0, [r4, #12]
 801318c:	fb93 f8f8 	sdiv	r8, r3, r8
 8013190:	4442      	add	r2, r8
 8013192:	9203      	str	r2, [sp, #12]
 8013194:	682a      	ldr	r2, [r5, #0]
 8013196:	f7ff ff82 	bl	801309e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801319a:	4680      	mov	r8, r0
 801319c:	9600      	str	r6, [sp, #0]
 801319e:	69a3      	ldr	r3, [r4, #24]
 80131a0:	686a      	ldr	r2, [r5, #4]
 80131a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80131a4:	6920      	ldr	r0, [r4, #16]
 80131a6:	f7ff ff7a 	bl	801309e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80131aa:	4440      	add	r0, r8
 80131ac:	e7cc      	b.n	8013148 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80131ae:	bf00      	nop
 80131b0:	20011924 	.word	0x20011924

080131b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80131b4:	4b07      	ldr	r3, [pc, #28]	; (80131d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d109      	bne.n	80131d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80131bc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80131c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80131c4:	8003      	strh	r3, [r0, #0]
 80131c6:	4b04      	ldr	r3, [pc, #16]	; (80131d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80131c8:	881b      	ldrh	r3, [r3, #0]
 80131ca:	3b01      	subs	r3, #1
 80131cc:	1a9b      	subs	r3, r3, r2
 80131ce:	800b      	strh	r3, [r1, #0]
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	2001190e 	.word	0x2001190e
 80131d8:	2001190a 	.word	0x2001190a

080131dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80131dc:	4b07      	ldr	r3, [pc, #28]	; (80131fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80131de:	b510      	push	{r4, lr}
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b01      	cmp	r3, #1
 80131e4:	d108      	bne.n	80131f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80131e6:	4b06      	ldr	r3, [pc, #24]	; (8013200 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80131e8:	880c      	ldrh	r4, [r1, #0]
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 80131f0:	3b01      	subs	r3, #1
 80131f2:	1b1b      	subs	r3, r3, r4
 80131f4:	8003      	strh	r3, [r0, #0]
 80131f6:	800a      	strh	r2, [r1, #0]
 80131f8:	bd10      	pop	{r4, pc}
 80131fa:	bf00      	nop
 80131fc:	2001190e 	.word	0x2001190e
 8013200:	2001190a 	.word	0x2001190a

08013204 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8013204:	4b0a      	ldr	r3, [pc, #40]	; (8013230 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8013206:	b510      	push	{r4, lr}
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d10e      	bne.n	801322c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801320e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013212:	8843      	ldrh	r3, [r0, #2]
 8013214:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013218:	18ca      	adds	r2, r1, r3
 801321a:	4b06      	ldr	r3, [pc, #24]	; (8013234 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801321c:	8044      	strh	r4, [r0, #2]
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	1a9b      	subs	r3, r3, r2
 8013222:	8003      	strh	r3, [r0, #0]
 8013224:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013228:	8081      	strh	r1, [r0, #4]
 801322a:	80c3      	strh	r3, [r0, #6]
 801322c:	bd10      	pop	{r4, pc}
 801322e:	bf00      	nop
 8013230:	2001190e 	.word	0x2001190e
 8013234:	2001190a 	.word	0x2001190a

08013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013238:	4b08      	ldr	r3, [pc, #32]	; (801325c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d10c      	bne.n	801325a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013240:	8803      	ldrh	r3, [r0, #0]
 8013242:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013246:	8842      	ldrh	r2, [r0, #2]
 8013248:	8002      	strh	r2, [r0, #0]
 801324a:	185a      	adds	r2, r3, r1
 801324c:	4b04      	ldr	r3, [pc, #16]	; (8013260 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	1a9b      	subs	r3, r3, r2
 8013252:	8043      	strh	r3, [r0, #2]
 8013254:	88c3      	ldrh	r3, [r0, #6]
 8013256:	80c1      	strh	r1, [r0, #6]
 8013258:	8083      	strh	r3, [r0, #4]
 801325a:	4770      	bx	lr
 801325c:	2001190e 	.word	0x2001190e
 8013260:	2001190a 	.word	0x2001190a

08013264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013264:	4b07      	ldr	r3, [pc, #28]	; (8013284 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013266:	b510      	push	{r4, lr}
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b01      	cmp	r3, #1
 801326c:	d108      	bne.n	8013280 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801326e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013272:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013276:	8003      	strh	r3, [r0, #0]
 8013278:	8893      	ldrh	r3, [r2, #4]
 801327a:	3b01      	subs	r3, #1
 801327c:	1b1b      	subs	r3, r3, r4
 801327e:	800b      	strh	r3, [r1, #0]
 8013280:	bd10      	pop	{r4, pc}
 8013282:	bf00      	nop
 8013284:	2001190e 	.word	0x2001190e

08013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013288:	4b0a      	ldr	r3, [pc, #40]	; (80132b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801328a:	460a      	mov	r2, r1
 801328c:	b510      	push	{r4, lr}
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b01      	cmp	r3, #1
 8013292:	d10d      	bne.n	80132b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013294:	8881      	ldrh	r1, [r0, #4]
 8013296:	8803      	ldrh	r3, [r0, #0]
 8013298:	440b      	add	r3, r1
 801329a:	4601      	mov	r1, r0
 801329c:	3b01      	subs	r3, #1
 801329e:	f821 3b02 	strh.w	r3, [r1], #2
 80132a2:	f7ff ffdf 	bl	8013264 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80132a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80132aa:	88c2      	ldrh	r2, [r0, #6]
 80132ac:	80c3      	strh	r3, [r0, #6]
 80132ae:	8082      	strh	r2, [r0, #4]
 80132b0:	bd10      	pop	{r4, pc}
 80132b2:	bf00      	nop
 80132b4:	2001190e 	.word	0x2001190e

080132b8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80132b8:	4b06      	ldr	r3, [pc, #24]	; (80132d4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80132ba:	2100      	movs	r1, #0
 80132bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80132c0:	4b05      	ldr	r3, [pc, #20]	; (80132d8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80132c2:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80132c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80132ca:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80132ce:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80132d2:	4770      	bx	lr
 80132d4:	2001190a 	.word	0x2001190a
 80132d8:	2001190c 	.word	0x2001190c

080132dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80132dc:	4b03      	ldr	r3, [pc, #12]	; (80132ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80132de:	6818      	ldr	r0, [r3, #0]
 80132e0:	b110      	cbz	r0, 80132e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80132e2:	6803      	ldr	r3, [r0, #0]
 80132e4:	699b      	ldr	r3, [r3, #24]
 80132e6:	4718      	bx	r3
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop
 80132ec:	20011954 	.word	0x20011954

080132f0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80132f0:	4770      	bx	lr
	...

080132f4 <_ZN8touchgfx11Application4drawEv>:
 80132f4:	4b09      	ldr	r3, [pc, #36]	; (801331c <_ZN8touchgfx11Application4drawEv+0x28>)
 80132f6:	b507      	push	{r0, r1, r2, lr}
 80132f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80132fc:	2100      	movs	r1, #0
 80132fe:	4b08      	ldr	r3, [pc, #32]	; (8013320 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013300:	9100      	str	r1, [sp, #0]
 8013302:	4669      	mov	r1, sp
 8013304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013308:	f8ad 2004 	strh.w	r2, [sp, #4]
 801330c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013314:	4798      	blx	r3
 8013316:	b003      	add	sp, #12
 8013318:	f85d fb04 	ldr.w	pc, [sp], #4
 801331c:	2001190a 	.word	0x2001190a
 8013320:	2001190c 	.word	0x2001190c

08013324 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8013324:	4b03      	ldr	r3, [pc, #12]	; (8013334 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8013326:	6818      	ldr	r0, [r3, #0]
 8013328:	b110      	cbz	r0, 8013330 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801332a:	6803      	ldr	r3, [r0, #0]
 801332c:	69db      	ldr	r3, [r3, #28]
 801332e:	4718      	bx	r3
 8013330:	4770      	bx	lr
 8013332:	bf00      	nop
 8013334:	20011954 	.word	0x20011954

08013338 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013338:	4b03      	ldr	r3, [pc, #12]	; (8013348 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801333a:	6818      	ldr	r0, [r3, #0]
 801333c:	b110      	cbz	r0, 8013344 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801333e:	6803      	ldr	r3, [r0, #0]
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	4718      	bx	r3
 8013344:	4770      	bx	lr
 8013346:	bf00      	nop
 8013348:	20011954 	.word	0x20011954

0801334c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801334c:	2300      	movs	r3, #0
 801334e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8013352:	4770      	bx	lr

08013354 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013354:	4b03      	ldr	r3, [pc, #12]	; (8013364 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013356:	6818      	ldr	r0, [r3, #0]
 8013358:	b110      	cbz	r0, 8013360 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801335a:	6803      	ldr	r3, [r0, #0]
 801335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801335e:	4718      	bx	r3
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	20011954 	.word	0x20011954

08013368 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013368:	b510      	push	{r4, lr}
 801336a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801336e:	888a      	ldrh	r2, [r1, #4]
 8013370:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013374:	4422      	add	r2, r4
 8013376:	b212      	sxth	r2, r2
 8013378:	4293      	cmp	r3, r2
 801337a:	da15      	bge.n	80133a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801337c:	8882      	ldrh	r2, [r0, #4]
 801337e:	4413      	add	r3, r2
 8013380:	b21b      	sxth	r3, r3
 8013382:	429c      	cmp	r4, r3
 8013384:	da10      	bge.n	80133a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013386:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801338a:	88c9      	ldrh	r1, [r1, #6]
 801338c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013390:	4419      	add	r1, r3
 8013392:	b209      	sxth	r1, r1
 8013394:	428a      	cmp	r2, r1
 8013396:	da07      	bge.n	80133a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013398:	88c0      	ldrh	r0, [r0, #6]
 801339a:	4410      	add	r0, r2
 801339c:	b200      	sxth	r0, r0
 801339e:	4283      	cmp	r3, r0
 80133a0:	bfac      	ite	ge
 80133a2:	2000      	movge	r0, #0
 80133a4:	2001      	movlt	r0, #1
 80133a6:	bd10      	pop	{r4, pc}
 80133a8:	2000      	movs	r0, #0
 80133aa:	e7fc      	b.n	80133a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080133ac <_ZN8touchgfx4Rect10restrictToEss>:
 80133ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	b510      	push	{r4, lr}
 80133b4:	da04      	bge.n	80133c0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80133b6:	8884      	ldrh	r4, [r0, #4]
 80133b8:	4423      	add	r3, r4
 80133ba:	8083      	strh	r3, [r0, #4]
 80133bc:	2300      	movs	r3, #0
 80133be:	8003      	strh	r3, [r0, #0]
 80133c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80133c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80133c8:	1b09      	subs	r1, r1, r4
 80133ca:	428b      	cmp	r3, r1
 80133cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80133d0:	bfc8      	it	gt
 80133d2:	8081      	strhgt	r1, [r0, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	da04      	bge.n	80133e2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80133d8:	88c1      	ldrh	r1, [r0, #6]
 80133da:	440b      	add	r3, r1
 80133dc:	80c3      	strh	r3, [r0, #6]
 80133de:	2300      	movs	r3, #0
 80133e0:	8043      	strh	r3, [r0, #2]
 80133e2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80133e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80133ea:	1a52      	subs	r2, r2, r1
 80133ec:	4293      	cmp	r3, r2
 80133ee:	bfc8      	it	gt
 80133f0:	80c2      	strhgt	r2, [r0, #6]
 80133f2:	bd10      	pop	{r4, pc}

080133f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80133f4:	4b10      	ldr	r3, [pc, #64]	; (8013438 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80133f6:	b510      	push	{r4, lr}
 80133f8:	460c      	mov	r4, r1
 80133fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133fe:	4b0f      	ldr	r3, [pc, #60]	; (801343c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013400:	4620      	mov	r0, r4
 8013402:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013406:	f7ff ffd1 	bl	80133ac <_ZN8touchgfx4Rect10restrictToEss>
 801340a:	4b0d      	ldr	r3, [pc, #52]	; (8013440 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801340c:	6818      	ldr	r0, [r3, #0]
 801340e:	b190      	cbz	r0, 8013436 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	4621      	mov	r1, r4
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	4798      	blx	r3
 8013418:	4b0a      	ldr	r3, [pc, #40]	; (8013444 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801341a:	6818      	ldr	r0, [r3, #0]
 801341c:	b118      	cbz	r0, 8013426 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801341e:	6803      	ldr	r3, [r0, #0]
 8013420:	4621      	mov	r1, r4
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	4798      	blx	r3
 8013426:	4b08      	ldr	r3, [pc, #32]	; (8013448 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013428:	4621      	mov	r1, r4
 801342a:	6818      	ldr	r0, [r3, #0]
 801342c:	6803      	ldr	r3, [r0, #0]
 801342e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013432:	69db      	ldr	r3, [r3, #28]
 8013434:	4718      	bx	r3
 8013436:	bd10      	pop	{r4, pc}
 8013438:	2001190c 	.word	0x2001190c
 801343c:	2001190a 	.word	0x2001190a
 8013440:	20011954 	.word	0x20011954
 8013444:	20011950 	.word	0x20011950
 8013448:	20011918 	.word	0x20011918

0801344c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801344e:	4606      	mov	r6, r0
 8013450:	4608      	mov	r0, r1
 8013452:	460f      	mov	r7, r1
 8013454:	f7fc fe53 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013458:	b9e8      	cbnz	r0, 8013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801345a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801345e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8013462:	42a5      	cmp	r5, r4
 8013464:	db17      	blt.n	8013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013466:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801346a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801346e:	429a      	cmp	r2, r3
 8013470:	db11      	blt.n	8013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013472:	88b9      	ldrh	r1, [r7, #4]
 8013474:	440d      	add	r5, r1
 8013476:	88b1      	ldrh	r1, [r6, #4]
 8013478:	440c      	add	r4, r1
 801347a:	b22d      	sxth	r5, r5
 801347c:	b224      	sxth	r4, r4
 801347e:	42a5      	cmp	r5, r4
 8013480:	dc09      	bgt.n	8013496 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013482:	88f8      	ldrh	r0, [r7, #6]
 8013484:	4410      	add	r0, r2
 8013486:	88f2      	ldrh	r2, [r6, #6]
 8013488:	4413      	add	r3, r2
 801348a:	b200      	sxth	r0, r0
 801348c:	b21b      	sxth	r3, r3
 801348e:	4298      	cmp	r0, r3
 8013490:	bfcc      	ite	gt
 8013492:	2000      	movgt	r0, #0
 8013494:	2001      	movle	r0, #1
 8013496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801349a:	4604      	mov	r4, r0
 801349c:	4608      	mov	r0, r1
 801349e:	460d      	mov	r5, r1
 80134a0:	f7fc fe2d 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80134a4:	b978      	cbnz	r0, 80134c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80134a6:	4620      	mov	r0, r4
 80134a8:	f7fc fe29 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80134ac:	f9b5 6000 	ldrsh.w	r6, [r5]
 80134b0:	b150      	cbz	r0, 80134c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80134b2:	8026      	strh	r6, [r4, #0]
 80134b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80134b8:	8063      	strh	r3, [r4, #2]
 80134ba:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80134be:	80a3      	strh	r3, [r4, #4]
 80134c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80134c4:	80e3      	strh	r3, [r4, #6]
 80134c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80134cc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80134d0:	42b1      	cmp	r1, r6
 80134d2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80134d6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80134da:	460f      	mov	r7, r1
 80134dc:	88ed      	ldrh	r5, [r5, #6]
 80134de:	bfa8      	it	ge
 80134e0:	4637      	movge	r7, r6
 80134e2:	4293      	cmp	r3, r2
 80134e4:	4618      	mov	r0, r3
 80134e6:	4466      	add	r6, ip
 80134e8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80134ec:	bfa8      	it	ge
 80134ee:	4610      	movge	r0, r2
 80134f0:	442a      	add	r2, r5
 80134f2:	88e5      	ldrh	r5, [r4, #6]
 80134f4:	4461      	add	r1, ip
 80134f6:	b236      	sxth	r6, r6
 80134f8:	8027      	strh	r7, [r4, #0]
 80134fa:	442b      	add	r3, r5
 80134fc:	b209      	sxth	r1, r1
 80134fe:	b212      	sxth	r2, r2
 8013500:	8060      	strh	r0, [r4, #2]
 8013502:	b21b      	sxth	r3, r3
 8013504:	428e      	cmp	r6, r1
 8013506:	bfac      	ite	ge
 8013508:	ebc7 0106 	rsbge	r1, r7, r6
 801350c:	ebc7 0101 	rsblt	r1, r7, r1
 8013510:	429a      	cmp	r2, r3
 8013512:	bfac      	ite	ge
 8013514:	ebc0 0202 	rsbge	r2, r0, r2
 8013518:	ebc0 0203 	rsblt	r2, r0, r3
 801351c:	80a1      	strh	r1, [r4, #4]
 801351e:	80e2      	strh	r2, [r4, #6]
 8013520:	e7d1      	b.n	80134c6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08013524 <_ZN8touchgfx11Application11getInstanceEv>:
 8013524:	4b01      	ldr	r3, [pc, #4]	; (801352c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8013526:	6818      	ldr	r0, [r3, #0]
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop
 801352c:	20011964 	.word	0x20011964

08013530 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8013530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013532:	4b10      	ldr	r3, [pc, #64]	; (8013574 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8013534:	4605      	mov	r5, r0
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	b1d3      	cbz	r3, 8013570 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801353a:	4b0f      	ldr	r3, [pc, #60]	; (8013578 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801353c:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8013540:	4f0e      	ldr	r7, [pc, #56]	; (801357c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8013542:	881c      	ldrh	r4, [r3, #0]
 8013544:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 8013548:	42a3      	cmp	r3, r4
 801354a:	d90e      	bls.n	801356a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013552:	b10a      	cbz	r2, 8013558 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8013554:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013556:	b900      	cbnz	r0, 801355a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8013558:	6898      	ldr	r0, [r3, #8]
 801355a:	6803      	ldr	r3, [r0, #0]
 801355c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8013560:	3401      	adds	r4, #1
 8013562:	69db      	ldr	r3, [r3, #28]
 8013564:	4798      	blx	r3
 8013566:	b2a4      	uxth	r4, r4
 8013568:	e7ec      	b.n	8013544 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801356a:	2300      	movs	r3, #0
 801356c:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 8013570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013572:	bf00      	nop
 8013574:	20011914 	.word	0x20011914
 8013578:	20000040 	.word	0x20000040
 801357c:	20011918 	.word	0x20011918

08013580 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013580:	2300      	movs	r3, #0
 8013582:	b510      	push	{r4, lr}
 8013584:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8013588:	4604      	mov	r4, r0
 801358a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801358e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013592:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013596:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801359a:	429a      	cmp	r2, r3
 801359c:	d90e      	bls.n	80135bc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801359e:	18e2      	adds	r2, r4, r3
 80135a0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80135a4:	b122      	cbz	r2, 80135b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80135a6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80135aa:	6803      	ldr	r3, [r0, #0]
 80135ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ae:	4798      	blx	r3
 80135b0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80135b4:	3301      	adds	r3, #1
 80135b6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80135ba:	e7ea      	b.n	8013592 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80135bc:	bd10      	pop	{r4, pc}

080135be <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80135be:	2300      	movs	r3, #0
 80135c0:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80135c4:	30a4      	adds	r0, #164	; 0xa4
 80135c6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80135ca:	f802 3b01 	strb.w	r3, [r2], #1
 80135ce:	4282      	cmp	r2, r0
 80135d0:	d1fb      	bne.n	80135ca <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80135d2:	4770      	bx	lr

080135d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	4c0b      	ldr	r4, [pc, #44]	; (8013604 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80135d8:	4605      	mov	r5, r0
 80135da:	460e      	mov	r6, r1
 80135dc:	6820      	ldr	r0, [r4, #0]
 80135de:	b110      	cbz	r0, 80135e6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80135e0:	6803      	ldr	r3, [r0, #0]
 80135e2:	695b      	ldr	r3, [r3, #20]
 80135e4:	4798      	blx	r3
 80135e6:	1d28      	adds	r0, r5, #4
 80135e8:	f7ff ffe9 	bl	80135be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80135ec:	6026      	str	r6, [r4, #0]
 80135ee:	6833      	ldr	r3, [r6, #0]
 80135f0:	4630      	mov	r0, r6
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	4798      	blx	r3
 80135f6:	682b      	ldr	r3, [r5, #0]
 80135f8:	4628      	mov	r0, r5
 80135fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013600:	4718      	bx	r3
 8013602:	bf00      	nop
 8013604:	20011954 	.word	0x20011954

08013608 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8013608:	2300      	movs	r3, #0
 801360a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801360e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8013612:	461a      	mov	r2, r3
 8013614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013616:	461c      	mov	r4, r3
 8013618:	461d      	mov	r5, r3
 801361a:	459c      	cmp	ip, r3
 801361c:	dd1a      	ble.n	8013654 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801361e:	18c6      	adds	r6, r0, r3
 8013620:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8013624:	b16e      	cbz	r6, 8013642 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8013626:	429a      	cmp	r2, r3
 8013628:	d008      	beq.n	801363c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801362a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801362e:	fa1f fe82 	uxth.w	lr, r2
 8013632:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8013636:	1887      	adds	r7, r0, r2
 8013638:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801363c:	3201      	adds	r2, #1
 801363e:	3301      	adds	r3, #1
 8013640:	e7eb      	b.n	801361a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8013642:	4299      	cmp	r1, r3
 8013644:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8013648:	bfa8      	it	ge
 801364a:	3501      	addge	r5, #1
 801364c:	429e      	cmp	r6, r3
 801364e:	bfc8      	it	gt
 8013650:	3401      	addgt	r4, #1
 8013652:	e7f4      	b.n	801363e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8013654:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8013658:	1b49      	subs	r1, r1, r5
 801365a:	1b1b      	subs	r3, r3, r4
 801365c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8013660:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8013664:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8013668:	4293      	cmp	r3, r2
 801366a:	dd03      	ble.n	8013674 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801366c:	3b01      	subs	r3, #1
 801366e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013672:	e7f7      	b.n	8013664 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8013674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013678 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013678:	b570      	push	{r4, r5, r6, lr}
 801367a:	4d16      	ldr	r5, [pc, #88]	; (80136d4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801367c:	4604      	mov	r4, r0
 801367e:	6828      	ldr	r0, [r5, #0]
 8013680:	b140      	cbz	r0, 8013694 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013682:	7a03      	ldrb	r3, [r0, #8]
 8013684:	b933      	cbnz	r3, 8013694 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8013686:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801368a:	6803      	ldr	r3, [r0, #0]
 801368c:	689b      	ldr	r3, [r3, #8]
 801368e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013692:	4718      	bx	r3
 8013694:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8013698:	4e0f      	ldr	r6, [pc, #60]	; (80136d8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801369a:	b973      	cbnz	r3, 80136ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801369c:	b168      	cbz	r0, 80136ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801369e:	7a03      	ldrb	r3, [r0, #8]
 80136a0:	b15b      	cbz	r3, 80136ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80136a2:	6830      	ldr	r0, [r6, #0]
 80136a4:	b110      	cbz	r0, 80136ac <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80136a6:	6803      	ldr	r3, [r0, #0]
 80136a8:	691b      	ldr	r3, [r3, #16]
 80136aa:	4798      	blx	r3
 80136ac:	6828      	ldr	r0, [r5, #0]
 80136ae:	6803      	ldr	r3, [r0, #0]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	4798      	blx	r3
 80136b4:	2301      	movs	r3, #1
 80136b6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80136ba:	3404      	adds	r4, #4
 80136bc:	4620      	mov	r0, r4
 80136be:	f7ff ff5f 	bl	8013580 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7ff ffa0 	bl	8013608 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80136c8:	6830      	ldr	r0, [r6, #0]
 80136ca:	b110      	cbz	r0, 80136d2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80136cc:	6803      	ldr	r3, [r0, #0]
 80136ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d0:	e7dd      	b.n	801368e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80136d2:	bd70      	pop	{r4, r5, r6, pc}
 80136d4:	20011958 	.word	0x20011958
 80136d8:	20011954 	.word	0x20011954

080136dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80136dc:	4603      	mov	r3, r0
 80136de:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80136e2:	2200      	movs	r2, #0
 80136e4:	801a      	strh	r2, [r3, #0]
 80136e6:	3308      	adds	r3, #8
 80136e8:	f823 2c06 	strh.w	r2, [r3, #-6]
 80136ec:	f823 2c04 	strh.w	r2, [r3, #-4]
 80136f0:	f823 2c02 	strh.w	r2, [r3, #-2]
 80136f4:	428b      	cmp	r3, r1
 80136f6:	d1f5      	bne.n	80136e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80136f8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80136fc:	4770      	bx	lr
	...

08013700 <_ZN8touchgfx11ApplicationC1Ev>:
 8013700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013702:	4b1d      	ldr	r3, [pc, #116]	; (8013778 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8013704:	4606      	mov	r6, r0
 8013706:	4604      	mov	r4, r0
 8013708:	2500      	movs	r5, #0
 801370a:	f846 3b04 	str.w	r3, [r6], #4
 801370e:	22a8      	movs	r2, #168	; 0xa8
 8013710:	2100      	movs	r1, #0
 8013712:	4630      	mov	r0, r6
 8013714:	f00b fac0 	bl	801ec98 <memset>
 8013718:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801371c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013720:	4f16      	ldr	r7, [pc, #88]	; (801377c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8013722:	f7ff ffdb 	bl	80136dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013726:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801372a:	f7ff ffd7 	bl	80136dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801372e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8013732:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8013736:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801373a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801373e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8013742:	490f      	ldr	r1, [pc, #60]	; (8013780 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8013744:	480f      	ldr	r0, [pc, #60]	; (8013784 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8013746:	f00a ffe9 	bl	801e71c <CRC_Lock>
 801374a:	4b0f      	ldr	r3, [pc, #60]	; (8013788 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801374c:	b158      	cbz	r0, 8013766 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801374e:	801d      	strh	r5, [r3, #0]
 8013750:	2300      	movs	r3, #0
 8013752:	4a0e      	ldr	r2, [pc, #56]	; (801378c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8013754:	4630      	mov	r0, r6
 8013756:	6013      	str	r3, [r2, #0]
 8013758:	4a0d      	ldr	r2, [pc, #52]	; (8013790 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801375a:	603b      	str	r3, [r7, #0]
 801375c:	6013      	str	r3, [r2, #0]
 801375e:	f7ff ff2e 	bl	80135be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013762:	4620      	mov	r0, r4
 8013764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801376a:	2002      	movs	r0, #2
 801376c:	801a      	strh	r2, [r3, #0]
 801376e:	6038      	str	r0, [r7, #0]
 8013770:	f001 fa1c 	bl	8014bac <_ZN8touchgfx6Screen4drawEv>
 8013774:	e7ec      	b.n	8013750 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8013776:	bf00      	nop
 8013778:	0802186c 	.word	0x0802186c
 801377c:	20011954 	.word	0x20011954
 8013780:	b5e8b5cd 	.word	0xb5e8b5cd
 8013784:	f407a5c2 	.word	0xf407a5c2
 8013788:	20000040 	.word	0x20000040
 801378c:	20011964 	.word	0x20011964
 8013790:	20011958 	.word	0x20011958

08013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8013794:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8013798:	3b01      	subs	r3, #1
 801379a:	b29b      	uxth	r3, r3
 801379c:	428b      	cmp	r3, r1
 801379e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80137a2:	b510      	push	{r4, lr}
 80137a4:	d908      	bls.n	80137b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80137a6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80137aa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80137b4:	685a      	ldr	r2, [r3, #4]
 80137b6:	6062      	str	r2, [r4, #4]
 80137b8:	bd10      	pop	{r4, pc}
	...

080137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80137bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c0:	b08f      	sub	sp, #60	; 0x3c
 80137c2:	4b8f      	ldr	r3, [pc, #572]	; (8013a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80137c4:	4683      	mov	fp, r0
 80137c6:	ac0a      	add	r4, sp, #40	; 0x28
 80137c8:	e884 0006 	stmia.w	r4, {r1, r2}
 80137cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137d0:	4620      	mov	r0, r4
 80137d2:	4b8c      	ldr	r3, [pc, #560]	; (8013a04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80137d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80137d8:	f7ff fde8 	bl	80133ac <_ZN8touchgfx4Rect10restrictToEss>
 80137dc:	4620      	mov	r0, r4
 80137de:	f7fc fc8e 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d16a      	bne.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80137e6:	9403      	str	r4, [sp, #12]
 80137e8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80137ec:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80137f0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	35a4      	adds	r5, #164	; 0xa4
 80137f8:	b15c      	cbz	r4, 8013812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80137fa:	4629      	mov	r1, r5
 80137fc:	9803      	ldr	r0, [sp, #12]
 80137fe:	f7ff fe25 	bl	801344c <_ZNK8touchgfx4Rect8includesERKS0_>
 8013802:	3c01      	subs	r4, #1
 8013804:	b118      	cbz	r0, 801380e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8013806:	b2a1      	uxth	r1, r4
 8013808:	9801      	ldr	r0, [sp, #4]
 801380a:	f7ff ffc3 	bl	8013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801380e:	3d08      	subs	r5, #8
 8013810:	e7f2      	b.n	80137f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8013812:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8013816:	f108 33ff 	add.w	r3, r8, #4294967295
 801381a:	f8cd 8010 	str.w	r8, [sp, #16]
 801381e:	9302      	str	r3, [sp, #8]
 8013820:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013824:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013828:	9306      	str	r3, [sp, #24]
 801382a:	445c      	add	r4, fp
 801382c:	2500      	movs	r5, #0
 801382e:	4626      	mov	r6, r4
 8013830:	f8cd 8014 	str.w	r8, [sp, #20]
 8013834:	462f      	mov	r7, r5
 8013836:	9b05      	ldr	r3, [sp, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d073      	beq.n	8013924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801383c:	9903      	ldr	r1, [sp, #12]
 801383e:	4630      	mov	r0, r6
 8013840:	f7ff fd92 	bl	8013368 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013844:	b350      	cbz	r0, 801389c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013846:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801384a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801384e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8013852:	45e6      	cmp	lr, ip
 8013854:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8013858:	db33      	blt.n	80138c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801385a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801385e:	88b3      	ldrh	r3, [r6, #4]
 8013860:	4472      	add	r2, lr
 8013862:	4463      	add	r3, ip
 8013864:	b212      	sxth	r2, r2
 8013866:	b21b      	sxth	r3, r3
 8013868:	429a      	cmp	r2, r3
 801386a:	dc2a      	bgt.n	80138c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801386c:	fa1f f289 	uxth.w	r2, r9
 8013870:	88f3      	ldrh	r3, [r6, #6]
 8013872:	45ca      	cmp	sl, r9
 8013874:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8013878:	4413      	add	r3, r2
 801387a:	fa1f fc8a 	uxth.w	ip, sl
 801387e:	b29b      	uxth	r3, r3
 8013880:	fa0f fe83 	sxth.w	lr, r3
 8013884:	db0f      	blt.n	80138a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8013886:	eba3 030c 	sub.w	r3, r3, ip
 801388a:	1ac9      	subs	r1, r1, r3
 801388c:	b209      	sxth	r1, r1
 801388e:	2900      	cmp	r1, #0
 8013890:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013894:	dd12      	ble.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013896:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801389a:	4605      	mov	r5, r0
 801389c:	9b05      	ldr	r3, [sp, #20]
 801389e:	3e08      	subs	r6, #8
 80138a0:	3b01      	subs	r3, #1
 80138a2:	9305      	str	r3, [sp, #20]
 80138a4:	e7c7      	b.n	8013836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80138a6:	4461      	add	r1, ip
 80138a8:	b209      	sxth	r1, r1
 80138aa:	4571      	cmp	r1, lr
 80138ac:	dc38      	bgt.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80138ae:	eba2 020c 	sub.w	r2, r2, ip
 80138b2:	b212      	sxth	r2, r2
 80138b4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80138b8:	2a00      	cmp	r2, #0
 80138ba:	dcee      	bgt.n	801389a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80138bc:	b00f      	add	sp, #60	; 0x3c
 80138be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c2:	45ca      	cmp	sl, r9
 80138c4:	db2c      	blt.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80138c6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80138ca:	449a      	add	sl, r3
 80138cc:	88f3      	ldrh	r3, [r6, #6]
 80138ce:	4499      	add	r9, r3
 80138d0:	fa0f fa8a 	sxth.w	sl, sl
 80138d4:	fa0f f989 	sxth.w	r9, r9
 80138d8:	45ca      	cmp	sl, r9
 80138da:	dc21      	bgt.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80138dc:	fa1f f28c 	uxth.w	r2, ip
 80138e0:	88b3      	ldrh	r3, [r6, #4]
 80138e2:	45e6      	cmp	lr, ip
 80138e4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80138e8:	4413      	add	r3, r2
 80138ea:	fa1f f98e 	uxth.w	r9, lr
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	fa0f fa83 	sxth.w	sl, r3
 80138f4:	db0a      	blt.n	801390c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80138f6:	eba3 0309 	sub.w	r3, r3, r9
 80138fa:	1ac9      	subs	r1, r1, r3
 80138fc:	b209      	sxth	r1, r1
 80138fe:	2900      	cmp	r1, #0
 8013900:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8013904:	ddda      	ble.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013906:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801390a:	e7c6      	b.n	801389a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801390c:	4449      	add	r1, r9
 801390e:	b209      	sxth	r1, r1
 8013910:	4551      	cmp	r1, sl
 8013912:	dc05      	bgt.n	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013914:	eba2 0209 	sub.w	r2, r2, r9
 8013918:	b212      	sxth	r2, r2
 801391a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801391e:	e7cb      	b.n	80138b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013920:	4607      	mov	r7, r0
 8013922:	e7bb      	b.n	801389c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013924:	2d00      	cmp	r5, #0
 8013926:	d181      	bne.n	801382c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8013928:	2f00      	cmp	r7, #0
 801392a:	f000 81dd 	beq.w	8013ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801392e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8013932:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8013936:	b2b3      	uxth	r3, r6
 8013938:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801393c:	b2b9      	uxth	r1, r7
 801393e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8013942:	441a      	add	r2, r3
 8013944:	448a      	add	sl, r1
 8013946:	9105      	str	r1, [sp, #20]
 8013948:	b292      	uxth	r2, r2
 801394a:	fa1f fa8a 	uxth.w	sl, sl
 801394e:	fa0f f882 	sxth.w	r8, r2
 8013952:	fa0f f98a 	sxth.w	r9, sl
 8013956:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801395a:	9b04      	ldr	r3, [sp, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d053      	beq.n	8013a08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8013960:	9903      	ldr	r1, [sp, #12]
 8013962:	4620      	mov	r0, r4
 8013964:	f7ff fd00 	bl	8013368 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013968:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801396c:	b1c0      	cbz	r0, 80139a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801396e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8013972:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013976:	4576      	cmp	r6, lr
 8013978:	dc23      	bgt.n	80139c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801397a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801397e:	44f4      	add	ip, lr
 8013980:	fa0f fc8c 	sxth.w	ip, ip
 8013984:	45e0      	cmp	r8, ip
 8013986:	db1c      	blt.n	80139c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013988:	428f      	cmp	r7, r1
 801398a:	fa1f fc81 	uxth.w	ip, r1
 801398e:	88e1      	ldrh	r1, [r4, #6]
 8013990:	dc0d      	bgt.n	80139ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8013992:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013996:	f8a4 9002 	strh.w	r9, [r4, #2]
 801399a:	eba1 010c 	sub.w	r1, r1, ip
 801399e:	80e1      	strh	r1, [r4, #6]
 80139a0:	4628      	mov	r0, r5
 80139a2:	9904      	ldr	r1, [sp, #16]
 80139a4:	3c08      	subs	r4, #8
 80139a6:	4605      	mov	r5, r0
 80139a8:	3901      	subs	r1, #1
 80139aa:	9104      	str	r1, [sp, #16]
 80139ac:	e7d3      	b.n	8013956 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 80139ae:	4461      	add	r1, ip
 80139b0:	b209      	sxth	r1, r1
 80139b2:	4549      	cmp	r1, r9
 80139b4:	dcf5      	bgt.n	80139a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80139b6:	9905      	ldr	r1, [sp, #20]
 80139b8:	eba1 0c0c 	sub.w	ip, r1, ip
 80139bc:	f8a4 c006 	strh.w	ip, [r4, #6]
 80139c0:	e7ee      	b.n	80139a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80139c2:	428f      	cmp	r7, r1
 80139c4:	dced      	bgt.n	80139a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80139c6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80139ca:	4461      	add	r1, ip
 80139cc:	b209      	sxth	r1, r1
 80139ce:	4589      	cmp	r9, r1
 80139d0:	dbe7      	blt.n	80139a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80139d2:	4576      	cmp	r6, lr
 80139d4:	fa1f fc8e 	uxth.w	ip, lr
 80139d8:	88a1      	ldrh	r1, [r4, #4]
 80139da:	dc07      	bgt.n	80139ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80139dc:	eba2 0c0c 	sub.w	ip, r2, ip
 80139e0:	f8a4 8000 	strh.w	r8, [r4]
 80139e4:	eba1 010c 	sub.w	r1, r1, ip
 80139e8:	80a1      	strh	r1, [r4, #4]
 80139ea:	e7d9      	b.n	80139a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80139ec:	4461      	add	r1, ip
 80139ee:	b209      	sxth	r1, r1
 80139f0:	4588      	cmp	r8, r1
 80139f2:	dbd6      	blt.n	80139a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80139f4:	eba3 0c0c 	sub.w	ip, r3, ip
 80139f8:	f8a4 c004 	strh.w	ip, [r4, #4]
 80139fc:	e7d0      	b.n	80139a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80139fe:	bf00      	nop
 8013a00:	2001190c 	.word	0x2001190c
 8013a04:	2001190a 	.word	0x2001190a
 8013a08:	2d00      	cmp	r5, #0
 8013a0a:	f000 816d 	beq.w	8013ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013a0e:	9b06      	ldr	r3, [sp, #24]
 8013a10:	445b      	add	r3, fp
 8013a12:	461c      	mov	r4, r3
 8013a14:	9b02      	ldr	r3, [sp, #8]
 8013a16:	3301      	adds	r3, #1
 8013a18:	f000 8166 	beq.w	8013ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8013a1c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8013a20:	9803      	ldr	r0, [sp, #12]
 8013a22:	4629      	mov	r1, r5
 8013a24:	f7ff fd12 	bl	801344c <_ZNK8touchgfx4Rect8includesERKS0_>
 8013a28:	b120      	cbz	r0, 8013a34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8013a2a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8013a2e:	9801      	ldr	r0, [sp, #4]
 8013a30:	f7ff feb0 	bl	8013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013a34:	9903      	ldr	r1, [sp, #12]
 8013a36:	4628      	mov	r0, r5
 8013a38:	f7ff fc96 	bl	8013368 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	f000 809c 	beq.w	8013b7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013a42:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8013a46:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013a4a:	fa1f f189 	uxth.w	r1, r9
 8013a4e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013a52:	9309      	str	r3, [sp, #36]	; 0x24
 8013a54:	eb01 0c03 	add.w	ip, r1, r3
 8013a58:	b283      	uxth	r3, r0
 8013a5a:	4548      	cmp	r0, r9
 8013a5c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8013a60:	fa1f fa8c 	uxth.w	sl, ip
 8013a64:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8013a68:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8013a6c:	eb03 050c 	add.w	r5, r3, ip
 8013a70:	b2ad      	uxth	r5, r5
 8013a72:	9505      	str	r5, [sp, #20]
 8013a74:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013a78:	9504      	str	r5, [sp, #16]
 8013a7a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8013a7e:	f340 8099 	ble.w	8013bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8013a82:	1a5b      	subs	r3, r3, r1
 8013a84:	4596      	cmp	lr, r2
 8013a86:	fa0f f08a 	sxth.w	r0, sl
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	b21e      	sxth	r6, r3
 8013a8e:	dd2e      	ble.n	8013aee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013a90:	9f02      	ldr	r7, [sp, #8]
 8013a92:	fa1f fe8e 	uxth.w	lr, lr
 8013a96:	b292      	uxth	r2, r2
 8013a98:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8013a9c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013aa0:	9f04      	ldr	r7, [sp, #16]
 8013aa2:	ebae 0102 	sub.w	r1, lr, r2
 8013aa6:	44a6      	add	lr, r4
 8013aa8:	1a3f      	subs	r7, r7, r0
 8013aaa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8013aae:	b289      	uxth	r1, r1
 8013ab0:	4402      	add	r2, r0
 8013ab2:	fa0f fe8e 	sxth.w	lr, lr
 8013ab6:	b20d      	sxth	r5, r1
 8013ab8:	b212      	sxth	r2, r2
 8013aba:	436f      	muls	r7, r5
 8013abc:	ebae 0202 	sub.w	r2, lr, r2
 8013ac0:	4372      	muls	r2, r6
 8013ac2:	4297      	cmp	r7, r2
 8013ac4:	db09      	blt.n	8013ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8013ac6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8013aca:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8013ace:	449c      	add	ip, r3
 8013ad0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013ad4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013ad8:	e686      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013ada:	4421      	add	r1, r4
 8013adc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8013ae0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8013ae4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013ae8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013aec:	e67c      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013aee:	9f04      	ldr	r7, [sp, #16]
 8013af0:	42b8      	cmp	r0, r7
 8013af2:	da27      	bge.n	8013b44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013af4:	9902      	ldr	r1, [sp, #8]
 8013af6:	1a3f      	subs	r7, r7, r0
 8013af8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8013afc:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013b00:	eb05 010e 	add.w	r1, r5, lr
 8013b04:	fa1f f881 	uxth.w	r8, r1
 8013b08:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8013b0c:	4411      	add	r1, r2
 8013b0e:	fa0f f988 	sxth.w	r9, r8
 8013b12:	eba2 020e 	sub.w	r2, r2, lr
 8013b16:	eba1 0108 	sub.w	r1, r1, r8
 8013b1a:	4372      	muls	r2, r6
 8013b1c:	b289      	uxth	r1, r1
 8013b1e:	fa0f f881 	sxth.w	r8, r1
 8013b22:	fb08 f707 	mul.w	r7, r8, r7
 8013b26:	42ba      	cmp	r2, r7
 8013b28:	dc06      	bgt.n	8013b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8013b2a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8013b2e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8013b32:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8013b36:	e7ca      	b.n	8013ace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8013b38:	4429      	add	r1, r5
 8013b3a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8013b3e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013b42:	e651      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013b44:	9805      	ldr	r0, [sp, #20]
 8013b46:	2d06      	cmp	r5, #6
 8013b48:	ebaa 0000 	sub.w	r0, sl, r0
 8013b4c:	b280      	uxth	r0, r0
 8013b4e:	fa0f fe80 	sxth.w	lr, r0
 8013b52:	d817      	bhi.n	8013b84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8013b54:	9b04      	ldr	r3, [sp, #16]
 8013b56:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013b5a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8013b5e:	1c6b      	adds	r3, r5, #1
 8013b60:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8013b64:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013b68:	9b01      	ldr	r3, [sp, #4]
 8013b6a:	9801      	ldr	r0, [sp, #4]
 8013b6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013b70:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013b74:	805a      	strh	r2, [r3, #2]
 8013b76:	809e      	strh	r6, [r3, #4]
 8013b78:	80d9      	strh	r1, [r3, #6]
 8013b7a:	9b02      	ldr	r3, [sp, #8]
 8013b7c:	3c08      	subs	r4, #8
 8013b7e:	3b01      	subs	r3, #1
 8013b80:	9302      	str	r3, [sp, #8]
 8013b82:	e747      	b.n	8013a14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8013b84:	9a02      	ldr	r2, [sp, #8]
 8013b86:	45b6      	cmp	lr, r6
 8013b88:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013b8c:	db0d      	blt.n	8013baa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013b8e:	449c      	add	ip, r3
 8013b90:	445a      	add	r2, fp
 8013b92:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8013b96:	fa1f fc8c 	uxth.w	ip, ip
 8013b9a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8013b9e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013ba2:	448c      	add	ip, r1
 8013ba4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8013ba8:	e61e      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013baa:	445a      	add	r2, fp
 8013bac:	4484      	add	ip, r0
 8013bae:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8013bb2:	e78f      	b.n	8013ad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013bb4:	fa1f f18e 	uxth.w	r1, lr
 8013bb8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8013bbc:	b293      	uxth	r3, r2
 8013bbe:	4596      	cmp	lr, r2
 8013bc0:	eb01 0806 	add.w	r8, r1, r6
 8013bc4:	9306      	str	r3, [sp, #24]
 8013bc6:	fa1f f888 	uxth.w	r8, r8
 8013bca:	9f06      	ldr	r7, [sp, #24]
 8013bcc:	fa0f f388 	sxth.w	r3, r8
 8013bd0:	9307      	str	r3, [sp, #28]
 8013bd2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8013bd6:	443b      	add	r3, r7
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	9308      	str	r3, [sp, #32]
 8013bdc:	da24      	bge.n	8013c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013bde:	9905      	ldr	r1, [sp, #20]
 8013be0:	eba3 0308 	sub.w	r3, r3, r8
 8013be4:	eba2 020e 	sub.w	r2, r2, lr
 8013be8:	eba9 0000 	sub.w	r0, r9, r0
 8013bec:	ebaa 0401 	sub.w	r4, sl, r1
 8013bf0:	b29b      	uxth	r3, r3
 8013bf2:	b2a4      	uxth	r4, r4
 8013bf4:	b219      	sxth	r1, r3
 8013bf6:	b225      	sxth	r5, r4
 8013bf8:	4348      	muls	r0, r1
 8013bfa:	436a      	muls	r2, r5
 8013bfc:	4282      	cmp	r2, r0
 8013bfe:	9a02      	ldr	r2, [sp, #8]
 8013c00:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013c04:	445a      	add	r2, fp
 8013c06:	dc06      	bgt.n	8013c16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013c08:	9b07      	ldr	r3, [sp, #28]
 8013c0a:	44a4      	add	ip, r4
 8013c0c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8013c10:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8013c14:	e75e      	b.n	8013ad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013c16:	9904      	ldr	r1, [sp, #16]
 8013c18:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8013c1c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8013c20:	4433      	add	r3, r6
 8013c22:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013c26:	e5df      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013c28:	9f06      	ldr	r7, [sp, #24]
 8013c2a:	9b04      	ldr	r3, [sp, #16]
 8013c2c:	1bc9      	subs	r1, r1, r7
 8013c2e:	fa0f f78a 	sxth.w	r7, sl
 8013c32:	b289      	uxth	r1, r1
 8013c34:	429f      	cmp	r7, r3
 8013c36:	fa0f fe81 	sxth.w	lr, r1
 8013c3a:	dd23      	ble.n	8013c84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8013c3c:	9a05      	ldr	r2, [sp, #20]
 8013c3e:	eba9 0000 	sub.w	r0, r9, r0
 8013c42:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013c46:	ebaa 0202 	sub.w	r2, sl, r2
 8013c4a:	9d07      	ldr	r5, [sp, #28]
 8013c4c:	fb0e f000 	mul.w	r0, lr, r0
 8013c50:	b292      	uxth	r2, r2
 8013c52:	eba5 0a03 	sub.w	sl, r5, r3
 8013c56:	9b02      	ldr	r3, [sp, #8]
 8013c58:	b214      	sxth	r4, r2
 8013c5a:	00db      	lsls	r3, r3, #3
 8013c5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8013c60:	445b      	add	r3, fp
 8013c62:	4550      	cmp	r0, sl
 8013c64:	db03      	blt.n	8013c6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8013c66:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8013c6a:	4494      	add	ip, r2
 8013c6c:	e732      	b.n	8013ad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013c6e:	9a04      	ldr	r2, [sp, #16]
 8013c70:	4431      	add	r1, r6
 8013c72:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8013c76:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013c7a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8013c7e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013c82:	e75c      	b.n	8013b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8013c84:	9b08      	ldr	r3, [sp, #32]
 8013c86:	2d06      	cmp	r5, #6
 8013c88:	eba3 0308 	sub.w	r3, r3, r8
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	b218      	sxth	r0, r3
 8013c90:	d813      	bhi.n	8013cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8013c92:	9b07      	ldr	r3, [sp, #28]
 8013c94:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8013c98:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8013c9c:	1c6b      	adds	r3, r5, #1
 8013c9e:	9901      	ldr	r1, [sp, #4]
 8013ca0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013ca4:	9b01      	ldr	r3, [sp, #4]
 8013ca6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013caa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013cae:	805a      	strh	r2, [r3, #2]
 8013cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cb2:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013cb6:	809a      	strh	r2, [r3, #4]
 8013cb8:	e75f      	b.n	8013b7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013cba:	9c02      	ldr	r4, [sp, #8]
 8013cbc:	4570      	cmp	r0, lr
 8013cbe:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013cc2:	db0d      	blt.n	8013ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8013cc4:	4431      	add	r1, r6
 8013cc6:	9b06      	ldr	r3, [sp, #24]
 8013cc8:	445c      	add	r4, fp
 8013cca:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013cce:	b289      	uxth	r1, r1
 8013cd0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8013cd4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013cd8:	4419      	add	r1, r3
 8013cda:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8013cde:	e583      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013ce0:	445c      	add	r4, fp
 8013ce2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8013ce6:	e79b      	b.n	8013c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013ce8:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8013cec:	2e07      	cmp	r6, #7
 8013cee:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013cf2:	d812      	bhi.n	8013d1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8013cf4:	1c75      	adds	r5, r6, #1
 8013cf6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013cfa:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8013cfe:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8013d02:	9d01      	ldr	r5, [sp, #4]
 8013d04:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8013d08:	442c      	add	r4, r5
 8013d0a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8013d0e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013d12:	8061      	strh	r1, [r4, #2]
 8013d14:	80a2      	strh	r2, [r4, #4]
 8013d16:	80e3      	strh	r3, [r4, #6]
 8013d18:	e5d0      	b.n	80138bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013d1a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013d1e:	3e01      	subs	r6, #1
 8013d20:	445c      	add	r4, fp
 8013d22:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013d26:	f04f 37ff 	mov.w	r7, #4294967295
 8013d2a:	2500      	movs	r5, #0
 8013d2c:	9305      	str	r3, [sp, #20]
 8013d2e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013d32:	1e72      	subs	r2, r6, #1
 8013d34:	9302      	str	r3, [sp, #8]
 8013d36:	4691      	mov	r9, r2
 8013d38:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8013d3c:	9304      	str	r3, [sp, #16]
 8013d3e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8013d42:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013d46:	6818      	ldr	r0, [r3, #0]
 8013d48:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013d4c:	9207      	str	r2, [sp, #28]
 8013d4e:	bf16      	itet	ne
 8013d50:	9905      	ldrne	r1, [sp, #20]
 8013d52:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013d56:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013d5a:	9306      	str	r3, [sp, #24]
 8013d5c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013d60:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013d64:	fb18 f801 	smulbb	r8, r8, r1
 8013d68:	6859      	ldr	r1, [r3, #4]
 8013d6a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013d6e:	4671      	mov	r1, lr
 8013d70:	a80c      	add	r0, sp, #48	; 0x30
 8013d72:	f7ff fb91 	bl	8013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013d76:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8013d7a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8013d7e:	f04f 0c08 	mov.w	ip, #8
 8013d82:	9b04      	ldr	r3, [sp, #16]
 8013d84:	9a02      	ldr	r2, [sp, #8]
 8013d86:	fb10 f001 	smulbb	r0, r0, r1
 8013d8a:	fb02 8803 	mla	r8, r2, r3, r8
 8013d8e:	eba0 0108 	sub.w	r1, r0, r8
 8013d92:	fb90 f0fc 	sdiv	r0, r0, ip
 8013d96:	4288      	cmp	r0, r1
 8013d98:	dc20      	bgt.n	8013ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8013d9a:	4551      	cmp	r1, sl
 8013d9c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013da0:	da03      	bge.n	8013daa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8013da2:	b1d9      	cbz	r1, 8013ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8013da4:	468a      	mov	sl, r1
 8013da6:	464f      	mov	r7, r9
 8013da8:	4635      	mov	r5, r6
 8013daa:	f109 39ff 	add.w	r9, r9, #4294967295
 8013dae:	f119 0f02 	cmn.w	r9, #2
 8013db2:	d1c6      	bne.n	8013d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8013db4:	4616      	mov	r6, r2
 8013db6:	3201      	adds	r2, #1
 8013db8:	f1a4 0408 	sub.w	r4, r4, #8
 8013dbc:	d1b7      	bne.n	8013d2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8013dbe:	9b01      	ldr	r3, [sp, #4]
 8013dc0:	b2ac      	uxth	r4, r5
 8013dc2:	00ed      	lsls	r5, r5, #3
 8013dc4:	1958      	adds	r0, r3, r5
 8013dc6:	1c7b      	adds	r3, r7, #1
 8013dc8:	d10b      	bne.n	8013de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8013dca:	4601      	mov	r1, r0
 8013dcc:	9803      	ldr	r0, [sp, #12]
 8013dce:	f7ff fb63 	bl	8013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013dd2:	4621      	mov	r1, r4
 8013dd4:	9801      	ldr	r0, [sp, #4]
 8013dd6:	f7ff fcdd 	bl	8013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013dda:	e505      	b.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013ddc:	464f      	mov	r7, r9
 8013dde:	4635      	mov	r5, r6
 8013de0:	e7ed      	b.n	8013dbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8013de2:	9b01      	ldr	r3, [sp, #4]
 8013de4:	00ff      	lsls	r7, r7, #3
 8013de6:	445d      	add	r5, fp
 8013de8:	19d9      	adds	r1, r3, r7
 8013dea:	445f      	add	r7, fp
 8013dec:	f7ff fb54 	bl	8013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	cb03      	ldmia	r3!, {r0, r1}
 8013df4:	9b03      	ldr	r3, [sp, #12]
 8013df6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8013dfa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8013dfe:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013e02:	6869      	ldr	r1, [r5, #4]
 8013e04:	c303      	stmia	r3!, {r0, r1}
 8013e06:	e7e4      	b.n	8013dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08013e08 <_ZN8touchgfx11Application10invalidateEv>:
 8013e08:	4b09      	ldr	r3, [pc, #36]	; (8013e30 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e12:	4b08      	ldr	r3, [pc, #32]	; (8013e34 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013e14:	9100      	str	r1, [sp, #0]
 8013e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e22:	ab02      	add	r3, sp, #8
 8013e24:	e913 0006 	ldmdb	r3, {r1, r2}
 8013e28:	b002      	add	sp, #8
 8013e2a:	f7ff bcc7 	b.w	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013e2e:	bf00      	nop
 8013e30:	2001190a 	.word	0x2001190a
 8013e34:	2001190c 	.word	0x2001190c

08013e38 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3c:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8013e40:	b09b      	sub	sp, #108	; 0x6c
 8013e42:	4604      	mov	r4, r0
 8013e44:	4630      	mov	r0, r6
 8013e46:	f7fc f95a 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e4a:	4605      	mov	r5, r0
 8013e4c:	b940      	cbnz	r0, 8013e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8013e4e:	4620      	mov	r0, r4
 8013e50:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013e54:	f7ff fcb2 	bl	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013e58:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013e5c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8013e60:	4bc8      	ldr	r3, [pc, #800]	; (8014184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d03e      	beq.n	8013ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013e68:	4dc7      	ldr	r5, [pc, #796]	; (8014188 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	f7fc f947 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e70:	4606      	mov	r6, r0
 8013e72:	2800      	cmp	r0, #0
 8013e74:	d137      	bne.n	8013ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013e76:	4628      	mov	r0, r5
 8013e78:	f7ff f9c4 	bl	8013204 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013e7c:	6829      	ldr	r1, [r5, #0]
 8013e7e:	686a      	ldr	r2, [r5, #4]
 8013e80:	4620      	mov	r0, r4
 8013e82:	f7ff fc9b 	bl	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013e86:	802e      	strh	r6, [r5, #0]
 8013e88:	806e      	strh	r6, [r5, #2]
 8013e8a:	80ae      	strh	r6, [r5, #4]
 8013e8c:	80ee      	strh	r6, [r5, #6]
 8013e8e:	ae09      	add	r6, sp, #36	; 0x24
 8013e90:	4630      	mov	r0, r6
 8013e92:	f7ff fc23 	bl	80136dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013e96:	4abd      	ldr	r2, [pc, #756]	; (801418c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8013e98:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8013e9c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013ea0:	8815      	ldrh	r5, [r2, #0]
 8013ea2:	9202      	str	r2, [sp, #8]
 8013ea4:	462b      	mov	r3, r5
 8013ea6:	429f      	cmp	r7, r3
 8013ea8:	d924      	bls.n	8013ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8013eaa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8013eae:	2907      	cmp	r1, #7
 8013eb0:	d816      	bhi.n	8013ee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8013eb2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013eb6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8013eba:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8013ebe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013ec2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013ec6:	1c4a      	adds	r2, r1, #1
 8013ec8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8013ecc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8013ed0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8013ed4:	f8a2 9002 	strh.w	r9, [r2, #2]
 8013ed8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013edc:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	e7df      	b.n	8013ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8013ee6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d1cf      	bne.n	8013e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8013eee:	b01b      	add	sp, #108	; 0x6c
 8013ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef4:	462f      	mov	r7, r5
 8013ef6:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8013efa:	42bb      	cmp	r3, r7
 8013efc:	d90b      	bls.n	8013f16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8013efe:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013f02:	3701      	adds	r7, #1
 8013f04:	4620      	mov	r0, r4
 8013f06:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8013f0a:	b2bf      	uxth	r7, r7
 8013f0c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8013f10:	f7ff fc54 	bl	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f14:	e7ef      	b.n	8013ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8013f16:	4a9e      	ldr	r2, [pc, #632]	; (8014190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013f18:	6813      	ldr	r3, [r2, #0]
 8013f1a:	4690      	mov	r8, r2
 8013f1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	f040 80e4 	bne.w	80140ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8013f26:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8013f30:	2500      	movs	r5, #0
 8013f32:	33ae      	adds	r3, #174	; 0xae
 8013f34:	428f      	cmp	r7, r1
 8013f36:	f103 0308 	add.w	r3, r3, #8
 8013f3a:	dd0a      	ble.n	8013f52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8013f3c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013f40:	3101      	adds	r1, #1
 8013f42:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8013f46:	4402      	add	r2, r0
 8013f48:	b212      	sxth	r2, r2
 8013f4a:	4295      	cmp	r5, r2
 8013f4c:	bfb8      	it	lt
 8013f4e:	4615      	movlt	r5, r2
 8013f50:	e7f0      	b.n	8013f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8013f52:	4b90      	ldr	r3, [pc, #576]	; (8014194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8013f54:	f8df b238 	ldr.w	fp, [pc, #568]	; 8014190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	46d8      	mov	r8, fp
 8013f5c:	2b0f      	cmp	r3, #15
 8013f5e:	bf8c      	ite	hi
 8013f60:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8013f64:	f04f 0a01 	movls.w	sl, #1
 8013f68:	2300      	movs	r3, #0
 8013f6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013f6e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8013f72:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013f76:	4438      	add	r0, r7
 8013f78:	b207      	sxth	r7, r0
 8013f7a:	f8db 0000 	ldr.w	r0, [fp]
 8013f7e:	42bd      	cmp	r5, r7
 8013f80:	6803      	ldr	r3, [r0, #0]
 8013f82:	f340 8084 	ble.w	801408e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013f8a:	4798      	blx	r3
 8013f8c:	eb07 030a 	add.w	r3, r7, sl
 8013f90:	4298      	cmp	r0, r3
 8013f92:	da07      	bge.n	8013fa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8013f94:	4285      	cmp	r5, r0
 8013f96:	dd05      	ble.n	8013fa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8013f98:	4287      	cmp	r7, r0
 8013f9a:	dd6d      	ble.n	8014078 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013f9c:	2f00      	cmp	r7, #0
 8013f9e:	dd6b      	ble.n	8014078 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	e004      	b.n	8013fae <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8013fa4:	4287      	cmp	r7, r0
 8013fa6:	dcfb      	bgt.n	8013fa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8013fa8:	42a8      	cmp	r0, r5
 8013faa:	bfa8      	it	ge
 8013fac:	4628      	movge	r0, r5
 8013fae:	4b7a      	ldr	r3, [pc, #488]	; (8014198 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8013fb0:	1bc0      	subs	r0, r0, r7
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013fc0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013fc4:	9b02      	ldr	r3, [sp, #8]
 8013fc6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013fca:	881f      	ldrh	r7, [r3, #0]
 8013fcc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8013fd0:	42bb      	cmp	r3, r7
 8013fd2:	d9cc      	bls.n	8013f6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8013fd4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8013fd8:	ab07      	add	r3, sp, #28
 8013fda:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013fde:	6851      	ldr	r1, [r2, #4]
 8013fe0:	c303      	stmia	r3!, {r0, r1}
 8013fe2:	a905      	add	r1, sp, #20
 8013fe4:	a807      	add	r0, sp, #28
 8013fe6:	f7ff f9bf 	bl	8013368 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d04c      	beq.n	8014088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8013fee:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013ff2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8013ff6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8013ffa:	4686      	mov	lr, r0
 8013ffc:	4290      	cmp	r0, r2
 8013ffe:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014002:	4448      	add	r0, r9
 8014004:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8014008:	bfb8      	it	lt
 801400a:	4696      	movlt	lr, r2
 801400c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014010:	444a      	add	r2, r9
 8014012:	b280      	uxth	r0, r0
 8014014:	4299      	cmp	r1, r3
 8014016:	468c      	mov	ip, r1
 8014018:	b292      	uxth	r2, r2
 801401a:	9303      	str	r3, [sp, #12]
 801401c:	bfb8      	it	lt
 801401e:	469c      	movlt	ip, r3
 8014020:	b203      	sxth	r3, r0
 8014022:	fa0f f982 	sxth.w	r9, r2
 8014026:	f8ad e01c 	strh.w	lr, [sp, #28]
 801402a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801402e:	454b      	cmp	r3, r9
 8014030:	bfb8      	it	lt
 8014032:	4602      	movlt	r2, r0
 8014034:	9b03      	ldr	r3, [sp, #12]
 8014036:	eba2 020e 	sub.w	r2, r2, lr
 801403a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801403e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8014042:	4411      	add	r1, r2
 8014044:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014048:	4413      	add	r3, r2
 801404a:	b289      	uxth	r1, r1
 801404c:	b29b      	uxth	r3, r3
 801404e:	b208      	sxth	r0, r1
 8014050:	b21a      	sxth	r2, r3
 8014052:	4290      	cmp	r0, r2
 8014054:	bfb8      	it	lt
 8014056:	460b      	movlt	r3, r1
 8014058:	eba3 030c 	sub.w	r3, r3, ip
 801405c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014060:	a807      	add	r0, sp, #28
 8014062:	f7fc f84c 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8014066:	b920      	cbnz	r0, 8014072 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	a907      	add	r1, sp, #28
 801406c:	4620      	mov	r0, r4
 801406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014070:	4798      	blx	r3
 8014072:	3701      	adds	r7, #1
 8014074:	b2bf      	uxth	r7, r7
 8014076:	e7a9      	b.n	8013fcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8014078:	f8d8 0000 	ldr.w	r0, [r8]
 801407c:	2101      	movs	r1, #1
 801407e:	6803      	ldr	r3, [r0, #0]
 8014080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014084:	4798      	blx	r3
 8014086:	e772      	b.n	8013f6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8014088:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801408c:	e7e8      	b.n	8014060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014090:	4798      	blx	r3
 8014092:	4b42      	ldr	r3, [pc, #264]	; (801419c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	f43f af29 	beq.w	8013eee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801409c:	2300      	movs	r3, #0
 801409e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80140a2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80140a6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80140aa:	9b02      	ldr	r3, [sp, #8]
 80140ac:	881b      	ldrh	r3, [r3, #0]
 80140ae:	429d      	cmp	r5, r3
 80140b0:	f67f af1d 	bls.w	8013eee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80140b4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80140b8:	2907      	cmp	r1, #7
 80140ba:	d815      	bhi.n	80140e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80140bc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80140c0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80140c4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80140c8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80140cc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80140d0:	1c4a      	adds	r2, r1, #1
 80140d2:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80140d6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80140da:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80140de:	f8a2 e002 	strh.w	lr, [r2, #2]
 80140e2:	f8a2 c004 	strh.w	ip, [r2, #4]
 80140e6:	80d7      	strh	r7, [r2, #6]
 80140e8:	3301      	adds	r3, #1
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	e7df      	b.n	80140ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	f040 8135 	bne.w	801435e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80140f4:	4b2a      	ldr	r3, [pc, #168]	; (80141a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80140f6:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	f000 809c 	beq.w	801423a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014102:	9b02      	ldr	r3, [sp, #8]
 8014104:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8014108:	f8b3 b000 	ldrh.w	fp, [r3]
 801410c:	f10b 0b01 	add.w	fp, fp, #1
 8014110:	fa1f fb8b 	uxth.w	fp, fp
 8014114:	2a00      	cmp	r2, #0
 8014116:	d0bc      	beq.n	8014092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014118:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801411c:	4659      	mov	r1, fp
 801411e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8014122:	f04f 0800 	mov.w	r8, #0
 8014126:	441d      	add	r5, r3
 8014128:	b22d      	sxth	r5, r5
 801412a:	b28b      	uxth	r3, r1
 801412c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8014130:	429a      	cmp	r2, r3
 8014132:	f240 80c0 	bls.w	80142b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8014136:	4427      	add	r7, r4
 8014138:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801413c:	4608      	mov	r0, r1
 801413e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8014142:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8014146:	4563      	cmp	r3, ip
 8014148:	f340 80a2 	ble.w	8014290 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801414c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8014150:	4465      	add	r5, ip
 8014152:	b22d      	sxth	r5, r5
 8014154:	429d      	cmp	r5, r3
 8014156:	bfa8      	it	ge
 8014158:	461d      	movge	r5, r3
 801415a:	3101      	adds	r1, #1
 801415c:	4680      	mov	r8, r0
 801415e:	e7e4      	b.n	801412a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8014160:	d10b      	bne.n	801417a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8014162:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8014166:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801416a:	458c      	cmp	ip, r1
 801416c:	bfb4      	ite	lt
 801416e:	469c      	movlt	ip, r3
 8014170:	46bc      	movge	ip, r7
 8014172:	4572      	cmp	r2, lr
 8014174:	bfb8      	it	lt
 8014176:	4672      	movlt	r2, lr
 8014178:	e087      	b.n	801428a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801417a:	428a      	cmp	r2, r1
 801417c:	46bc      	mov	ip, r7
 801417e:	bfb8      	it	lt
 8014180:	460a      	movlt	r2, r1
 8014182:	e082      	b.n	801428a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8014184:	20011950 	.word	0x20011950
 8014188:	2001195c 	.word	0x2001195c
 801418c:	20000040 	.word	0x20000040
 8014190:	20011918 	.word	0x20011918
 8014194:	2001190c 	.word	0x2001190c
 8014198:	2001190a 	.word	0x2001190a
 801419c:	20011914 	.word	0x20011914
 80141a0:	2001190e 	.word	0x2001190e
 80141a4:	1961      	adds	r1, r4, r5
 80141a6:	ab07      	add	r3, sp, #28
 80141a8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80141ac:	6849      	ldr	r1, [r1, #4]
 80141ae:	c303      	stmia	r3!, {r0, r1}
 80141b0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80141b4:	a807      	add	r0, sp, #28
 80141b6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80141ba:	2b13      	cmp	r3, #19
 80141bc:	440b      	add	r3, r1
 80141be:	bfd8      	it	le
 80141c0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80141c4:	1a9b      	subs	r3, r3, r2
 80141c6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80141ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 80141ce:	f7ff f833 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80141d2:	a807      	add	r0, sp, #28
 80141d4:	f7fb ff93 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80141d8:	bb78      	cbnz	r0, 801423a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80141da:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80141de:	4425      	add	r5, r4
 80141e0:	f8d8 0000 	ldr.w	r0, [r8]
 80141e4:	f1bc 0f14 	cmp.w	ip, #20
 80141e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80141ec:	f8d0 e000 	ldr.w	lr, [r0]
 80141f0:	bfa8      	it	ge
 80141f2:	f04f 0c14 	movge.w	ip, #20
 80141f6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80141fa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80141fe:	fa1f fc8c 	uxth.w	ip, ip
 8014202:	f8cd c000 	str.w	ip, [sp]
 8014206:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801420a:	47d0      	blx	sl
 801420c:	4682      	mov	sl, r0
 801420e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014212:	a807      	add	r0, sp, #28
 8014214:	f7fe fff6 	bl	8013204 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014218:	6823      	ldr	r3, [r4, #0]
 801421a:	4620      	mov	r0, r4
 801421c:	a907      	add	r1, sp, #28
 801421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014220:	4798      	blx	r3
 8014222:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8014226:	eba0 000a 	sub.w	r0, r0, sl
 801422a:	b200      	sxth	r0, r0
 801422c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8014230:	b918      	cbnz	r0, 801423a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8014232:	b2b9      	uxth	r1, r7
 8014234:	4648      	mov	r0, r9
 8014236:	f7ff faad 	bl	8013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801423a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801423e:	f1bb 0f00 	cmp.w	fp, #0
 8014242:	f43f af26 	beq.w	8014092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014246:	9b02      	ldr	r3, [sp, #8]
 8014248:	2700      	movs	r7, #0
 801424a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801424e:	881b      	ldrh	r3, [r3, #0]
 8014250:	3301      	adds	r3, #1
 8014252:	b29b      	uxth	r3, r3
 8014254:	b299      	uxth	r1, r3
 8014256:	00fd      	lsls	r5, r7, #3
 8014258:	458b      	cmp	fp, r1
 801425a:	d9a3      	bls.n	80141a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801425c:	4425      	add	r5, r4
 801425e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8014262:	469c      	mov	ip, r3
 8014264:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8014268:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801426c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8014270:	4408      	add	r0, r1
 8014272:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8014276:	4471      	add	r1, lr
 8014278:	b200      	sxth	r0, r0
 801427a:	b209      	sxth	r1, r1
 801427c:	4288      	cmp	r0, r1
 801427e:	f6bf af6f 	bge.w	8014160 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8014282:	4586      	cmp	lr, r0
 8014284:	4672      	mov	r2, lr
 8014286:	bfb8      	it	lt
 8014288:	4602      	movlt	r2, r0
 801428a:	3301      	adds	r3, #1
 801428c:	4667      	mov	r7, ip
 801428e:	e7e1      	b.n	8014254 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8014290:	d10c      	bne.n	80142ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8014292:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8014296:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801429a:	4287      	cmp	r7, r0
 801429c:	bfb4      	ite	lt
 801429e:	4608      	movlt	r0, r1
 80142a0:	4640      	movge	r0, r8
 80142a2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 80142a6:	443b      	add	r3, r7
 80142a8:	b21b      	sxth	r3, r3
 80142aa:	e753      	b.n	8014154 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80142ac:	4565      	cmp	r5, ip
 80142ae:	4640      	mov	r0, r8
 80142b0:	bfa8      	it	ge
 80142b2:	4665      	movge	r5, ip
 80142b4:	e751      	b.n	801415a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80142b6:	eb09 0007 	add.w	r0, r9, r7
 80142ba:	4427      	add	r7, r4
 80142bc:	9203      	str	r2, [sp, #12]
 80142be:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 80142c2:	f1ba 0f13 	cmp.w	sl, #19
 80142c6:	bfde      	ittt	le
 80142c8:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 80142cc:	4455      	addle	r5, sl
 80142ce:	b22d      	sxthle	r5, r5
 80142d0:	f7fb ff15 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80142d4:	9a03      	ldr	r2, [sp, #12]
 80142d6:	2800      	cmp	r0, #0
 80142d8:	f47f af1c 	bne.w	8014114 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 80142dc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80142e0:	fa1f fa8a 	uxth.w	sl, sl
 80142e4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80142e8:	1aad      	subs	r5, r5, r2
 80142ea:	4829      	ldr	r0, [pc, #164]	; (8014390 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 80142ec:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80142f0:	2d14      	cmp	r5, #20
 80142f2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80142f6:	6800      	ldr	r0, [r0, #0]
 80142f8:	bfa8      	it	ge
 80142fa:	2514      	movge	r5, #20
 80142fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014300:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014304:	b289      	uxth	r1, r1
 8014306:	f8ad 3020 	strh.w	r3, [sp, #32]
 801430a:	b2ad      	uxth	r5, r5
 801430c:	f8d0 c000 	ldr.w	ip, [r0]
 8014310:	b292      	uxth	r2, r2
 8014312:	4555      	cmp	r5, sl
 8014314:	bf94      	ite	ls
 8014316:	9500      	strls	r5, [sp, #0]
 8014318:	f8cd a000 	strhi.w	sl, [sp]
 801431c:	b29b      	uxth	r3, r3
 801431e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8014322:	47a8      	blx	r5
 8014324:	6823      	ldr	r3, [r4, #0]
 8014326:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801432a:	a907      	add	r1, sp, #28
 801432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801432e:	4620      	mov	r0, r4
 8014330:	4798      	blx	r3
 8014332:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014336:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801433a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801433e:	1a5b      	subs	r3, r3, r1
 8014340:	440a      	add	r2, r1
 8014342:	b21b      	sxth	r3, r3
 8014344:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8014348:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801434c:	2b00      	cmp	r3, #0
 801434e:	f47f aed8 	bne.w	8014102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8014352:	fa1f f188 	uxth.w	r1, r8
 8014356:	4648      	mov	r0, r9
 8014358:	f7ff fa1c 	bl	8013794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801435c:	e6d1      	b.n	8014102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801435e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014362:	42ab      	cmp	r3, r5
 8014364:	f67f ae95 	bls.w	8014092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014368:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801436c:	ab07      	add	r3, sp, #28
 801436e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014372:	6851      	ldr	r1, [r2, #4]
 8014374:	c303      	stmia	r3!, {r0, r1}
 8014376:	a807      	add	r0, sp, #28
 8014378:	f7fb fec1 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801437c:	b920      	cbnz	r0, 8014388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801437e:	6823      	ldr	r3, [r4, #0]
 8014380:	a907      	add	r1, sp, #28
 8014382:	4620      	mov	r0, r4
 8014384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014386:	4798      	blx	r3
 8014388:	3501      	adds	r5, #1
 801438a:	b2ad      	uxth	r5, r5
 801438c:	e7e7      	b.n	801435e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801438e:	bf00      	nop
 8014390:	20011918 	.word	0x20011918

08014394 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014394:	4b03      	ldr	r3, [pc, #12]	; (80143a4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014396:	2200      	movs	r2, #0
 8014398:	801a      	strh	r2, [r3, #0]
 801439a:	805a      	strh	r2, [r3, #2]
 801439c:	809a      	strh	r2, [r3, #4]
 801439e:	80da      	strh	r2, [r3, #6]
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop
 80143a4:	2001195c 	.word	0x2001195c

080143a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80143a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ac:	b09d      	sub	sp, #116	; 0x74
 80143ae:	4606      	mov	r6, r0
 80143b0:	4614      	mov	r4, r2
 80143b2:	468a      	mov	sl, r1
 80143b4:	a803      	add	r0, sp, #12
 80143b6:	461d      	mov	r5, r3
 80143b8:	f000 fda5 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 80143bc:	6833      	ldr	r3, [r6, #0]
 80143be:	4630      	mov	r0, r6
 80143c0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80143c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143c6:	4798      	blx	r3
 80143c8:	6833      	ldr	r3, [r6, #0]
 80143ca:	4607      	mov	r7, r0
 80143cc:	4630      	mov	r0, r6
 80143ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143d0:	4798      	blx	r3
 80143d2:	462a      	mov	r2, r5
 80143d4:	2500      	movs	r5, #0
 80143d6:	4621      	mov	r1, r4
 80143d8:	9000      	str	r0, [sp, #0]
 80143da:	463b      	mov	r3, r7
 80143dc:	462c      	mov	r4, r5
 80143de:	46a9      	mov	r9, r5
 80143e0:	46a8      	mov	r8, r5
 80143e2:	a803      	add	r0, sp, #12
 80143e4:	f000 fdea 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80143e8:	2300      	movs	r3, #0
 80143ea:	9302      	str	r3, [sp, #8]
 80143ec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80143f0:	429c      	cmp	r4, r3
 80143f2:	d002      	beq.n	80143fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80143f4:	455c      	cmp	r4, fp
 80143f6:	bf18      	it	ne
 80143f8:	4625      	movne	r5, r4
 80143fa:	ab02      	add	r3, sp, #8
 80143fc:	4632      	mov	r2, r6
 80143fe:	4651      	mov	r1, sl
 8014400:	a803      	add	r0, sp, #12
 8014402:	f001 f8e1 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014406:	4604      	mov	r4, r0
 8014408:	b108      	cbz	r0, 801440e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801440a:	280a      	cmp	r0, #10
 801440c:	d10a      	bne.n	8014424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801440e:	45c1      	cmp	r9, r8
 8014410:	bf38      	it	cc
 8014412:	46c1      	movcc	r9, r8
 8014414:	f04f 0800 	mov.w	r8, #0
 8014418:	2c00      	cmp	r4, #0
 801441a:	d1e5      	bne.n	80143e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801441c:	4648      	mov	r0, r9
 801441e:	b01d      	add	sp, #116	; 0x74
 8014420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014424:	9a02      	ldr	r2, [sp, #8]
 8014426:	2a00      	cmp	r2, #0
 8014428:	d0de      	beq.n	80143e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801442a:	7b57      	ldrb	r7, [r2, #13]
 801442c:	4629      	mov	r1, r5
 801442e:	6833      	ldr	r3, [r6, #0]
 8014430:	007f      	lsls	r7, r7, #1
 8014432:	8894      	ldrh	r4, [r2, #4]
 8014434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014436:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801443a:	7a97      	ldrb	r7, [r2, #10]
 801443c:	4307      	orrs	r7, r0
 801443e:	4630      	mov	r0, r6
 8014440:	4798      	blx	r3
 8014442:	4438      	add	r0, r7
 8014444:	4480      	add	r8, r0
 8014446:	fa1f f888 	uxth.w	r8, r8
 801444a:	e7e5      	b.n	8014418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801444c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801444c:	b508      	push	{r3, lr}
 801444e:	6803      	ldr	r3, [r0, #0]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	4798      	blx	r3
 8014454:	b128      	cbz	r0, 8014462 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014456:	7b43      	ldrb	r3, [r0, #13]
 8014458:	7a80      	ldrb	r0, [r0, #10]
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014460:	4318      	orrs	r0, r3
 8014462:	bd08      	pop	{r3, pc}

08014464 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014464:	b40e      	push	{r1, r2, r3}
 8014466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014468:	b09e      	sub	sp, #120	; 0x78
 801446a:	4605      	mov	r5, r0
 801446c:	ab23      	add	r3, sp, #140	; 0x8c
 801446e:	a805      	add	r0, sp, #20
 8014470:	f853 4b04 	ldr.w	r4, [r3], #4
 8014474:	9303      	str	r3, [sp, #12]
 8014476:	f000 fd46 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 801447a:	682b      	ldr	r3, [r5, #0]
 801447c:	4628      	mov	r0, r5
 801447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014480:	4798      	blx	r3
 8014482:	682b      	ldr	r3, [r5, #0]
 8014484:	4606      	mov	r6, r0
 8014486:	4628      	mov	r0, r5
 8014488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801448a:	4798      	blx	r3
 801448c:	4633      	mov	r3, r6
 801448e:	4621      	mov	r1, r4
 8014490:	ae1e      	add	r6, sp, #120	; 0x78
 8014492:	2400      	movs	r4, #0
 8014494:	9000      	str	r0, [sp, #0]
 8014496:	9a03      	ldr	r2, [sp, #12]
 8014498:	a805      	add	r0, sp, #20
 801449a:	f000 fd8f 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801449e:	f846 4d68 	str.w	r4, [r6, #-104]!
 80144a2:	462a      	mov	r2, r5
 80144a4:	4633      	mov	r3, r6
 80144a6:	4621      	mov	r1, r4
 80144a8:	a805      	add	r0, sp, #20
 80144aa:	f001 f88d 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144ae:	b300      	cbz	r0, 80144f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80144b0:	280a      	cmp	r0, #10
 80144b2:	d01a      	beq.n	80144ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80144b4:	9f04      	ldr	r7, [sp, #16]
 80144b6:	b1c7      	cbz	r7, 80144ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80144b8:	7b78      	ldrb	r0, [r7, #13]
 80144ba:	7a3b      	ldrb	r3, [r7, #8]
 80144bc:	00c1      	lsls	r1, r0, #3
 80144be:	88ea      	ldrh	r2, [r5, #6]
 80144c0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80144c4:	4319      	orrs	r1, r3
 80144c6:	0643      	lsls	r3, r0, #25
 80144c8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80144cc:	bf48      	it	mi
 80144ce:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80144d2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80144d6:	bf48      	it	mi
 80144d8:	b219      	sxthmi	r1, r3
 80144da:	79fb      	ldrb	r3, [r7, #7]
 80144dc:	4303      	orrs	r3, r0
 80144de:	4413      	add	r3, r2
 80144e0:	1a5b      	subs	r3, r3, r1
 80144e2:	b21b      	sxth	r3, r3
 80144e4:	429c      	cmp	r4, r3
 80144e6:	bfb8      	it	lt
 80144e8:	461c      	movlt	r4, r3
 80144ea:	4633      	mov	r3, r6
 80144ec:	462a      	mov	r2, r5
 80144ee:	2100      	movs	r1, #0
 80144f0:	e7da      	b.n	80144a8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80144f2:	b2a0      	uxth	r0, r4
 80144f4:	b01e      	add	sp, #120	; 0x78
 80144f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80144fa:	b003      	add	sp, #12
 80144fc:	4770      	bx	lr

080144fe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80144fe:	7a43      	ldrb	r3, [r0, #9]
 8014500:	8880      	ldrh	r0, [r0, #4]
 8014502:	4418      	add	r0, r3
 8014504:	b280      	uxth	r0, r0
 8014506:	4770      	bx	lr

08014508 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014508:	6803      	ldr	r3, [r0, #0]
 801450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801450c:	4718      	bx	r3

0801450e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801450e:	b40e      	push	{r1, r2, r3}
 8014510:	b570      	push	{r4, r5, r6, lr}
 8014512:	b09d      	sub	sp, #116	; 0x74
 8014514:	4604      	mov	r4, r0
 8014516:	ab21      	add	r3, sp, #132	; 0x84
 8014518:	a803      	add	r0, sp, #12
 801451a:	f853 5b04 	ldr.w	r5, [r3], #4
 801451e:	9302      	str	r3, [sp, #8]
 8014520:	f000 fcf1 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	4620      	mov	r0, r4
 8014528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801452a:	4798      	blx	r3
 801452c:	6823      	ldr	r3, [r4, #0]
 801452e:	4606      	mov	r6, r0
 8014530:	4620      	mov	r0, r4
 8014532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014534:	2401      	movs	r4, #1
 8014536:	4798      	blx	r3
 8014538:	4633      	mov	r3, r6
 801453a:	9000      	str	r0, [sp, #0]
 801453c:	4629      	mov	r1, r5
 801453e:	9a02      	ldr	r2, [sp, #8]
 8014540:	a803      	add	r0, sp, #12
 8014542:	f000 fd3b 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014546:	a803      	add	r0, sp, #12
 8014548:	f001 f90a 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801454c:	b2a3      	uxth	r3, r4
 801454e:	b138      	cbz	r0, 8014560 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8014550:	280a      	cmp	r0, #10
 8014552:	a803      	add	r0, sp, #12
 8014554:	bf04      	itt	eq
 8014556:	3301      	addeq	r3, #1
 8014558:	b21c      	sxtheq	r4, r3
 801455a:	f001 f901 	bl	8015760 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801455e:	e7f5      	b.n	801454c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014560:	4618      	mov	r0, r3
 8014562:	b01d      	add	sp, #116	; 0x74
 8014564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014568:	b003      	add	sp, #12
 801456a:	4770      	bx	lr

0801456c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801456c:	b40e      	push	{r1, r2, r3}
 801456e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014570:	b09e      	sub	sp, #120	; 0x78
 8014572:	4604      	mov	r4, r0
 8014574:	ab23      	add	r3, sp, #140	; 0x8c
 8014576:	a805      	add	r0, sp, #20
 8014578:	f853 5b04 	ldr.w	r5, [r3], #4
 801457c:	9303      	str	r3, [sp, #12]
 801457e:	f000 fcc2 	bl	8014f06 <_ZN8touchgfx12TextProviderC1Ev>
 8014582:	6823      	ldr	r3, [r4, #0]
 8014584:	4620      	mov	r0, r4
 8014586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014588:	4798      	blx	r3
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	4606      	mov	r6, r0
 801458e:	4620      	mov	r0, r4
 8014590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014592:	4798      	blx	r3
 8014594:	4633      	mov	r3, r6
 8014596:	4629      	mov	r1, r5
 8014598:	9000      	str	r0, [sp, #0]
 801459a:	9a03      	ldr	r2, [sp, #12]
 801459c:	a805      	add	r0, sp, #20
 801459e:	f000 fd0d 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80145a2:	ad1e      	add	r5, sp, #120	; 0x78
 80145a4:	2100      	movs	r1, #0
 80145a6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80145aa:	4622      	mov	r2, r4
 80145ac:	a805      	add	r0, sp, #20
 80145ae:	f845 1d68 	str.w	r1, [r5, #-104]!
 80145b2:	462b      	mov	r3, r5
 80145b4:	f001 f808 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80145b8:	b1d8      	cbz	r0, 80145f2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80145ba:	280a      	cmp	r0, #10
 80145bc:	d012      	beq.n	80145e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80145be:	9804      	ldr	r0, [sp, #16]
 80145c0:	b180      	cbz	r0, 80145e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80145c2:	7b47      	ldrb	r7, [r0, #13]
 80145c4:	88e2      	ldrh	r2, [r4, #6]
 80145c6:	00fb      	lsls	r3, r7, #3
 80145c8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80145cc:	7a03      	ldrb	r3, [r0, #8]
 80145ce:	430b      	orrs	r3, r1
 80145d0:	0679      	lsls	r1, r7, #25
 80145d2:	bf44      	itt	mi
 80145d4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80145d8:	b21b      	sxthmi	r3, r3
 80145da:	1ad3      	subs	r3, r2, r3
 80145dc:	b21b      	sxth	r3, r3
 80145de:	429e      	cmp	r6, r3
 80145e0:	bfa8      	it	ge
 80145e2:	461e      	movge	r6, r3
 80145e4:	462b      	mov	r3, r5
 80145e6:	4622      	mov	r2, r4
 80145e8:	2100      	movs	r1, #0
 80145ea:	a805      	add	r0, sp, #20
 80145ec:	f000 ffec 	bl	80155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80145f0:	e7e2      	b.n	80145b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80145f2:	4630      	mov	r0, r6
 80145f4:	b01e      	add	sp, #120	; 0x78
 80145f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145fa:	b003      	add	sp, #12
 80145fc:	4770      	bx	lr

080145fe <_ZNK8touchgfx8Drawable10invalidateEv>:
 80145fe:	b513      	push	{r0, r1, r4, lr}
 8014600:	6803      	ldr	r3, [r0, #0]
 8014602:	2400      	movs	r4, #0
 8014604:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014608:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801460c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014610:	4669      	mov	r1, sp
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	9400      	str	r4, [sp, #0]
 8014616:	f8ad 2006 	strh.w	r2, [sp, #6]
 801461a:	4798      	blx	r3
 801461c:	b002      	add	sp, #8
 801461e:	bd10      	pop	{r4, pc}

08014620 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	680b      	ldr	r3, [r1, #0]
 8014624:	460c      	mov	r4, r1
 8014626:	4605      	mov	r5, r0
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	4798      	blx	r3
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	4620      	mov	r0, r4
 8014630:	4629      	mov	r1, r5
 8014632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014634:	4798      	blx	r3
 8014636:	4628      	mov	r0, r5
 8014638:	bd38      	pop	{r3, r4, r5, pc}

0801463a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801463a:	b410      	push	{r4}
 801463c:	880a      	ldrh	r2, [r1, #0]
 801463e:	8884      	ldrh	r4, [r0, #4]
 8014640:	4422      	add	r2, r4
 8014642:	800a      	strh	r2, [r1, #0]
 8014644:	884a      	ldrh	r2, [r1, #2]
 8014646:	88c4      	ldrh	r4, [r0, #6]
 8014648:	4422      	add	r2, r4
 801464a:	804a      	strh	r2, [r1, #2]
 801464c:	6940      	ldr	r0, [r0, #20]
 801464e:	b120      	cbz	r0, 801465a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014650:	6803      	ldr	r3, [r0, #0]
 8014652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014658:	4718      	bx	r3
 801465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801465e:	4770      	bx	lr

08014660 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014660:	b570      	push	{r4, r5, r6, lr}
 8014662:	8882      	ldrh	r2, [r0, #4]
 8014664:	460c      	mov	r4, r1
 8014666:	880b      	ldrh	r3, [r1, #0]
 8014668:	4605      	mov	r5, r0
 801466a:	4413      	add	r3, r2
 801466c:	800b      	strh	r3, [r1, #0]
 801466e:	884b      	ldrh	r3, [r1, #2]
 8014670:	88c2      	ldrh	r2, [r0, #6]
 8014672:	4413      	add	r3, r2
 8014674:	804b      	strh	r3, [r1, #2]
 8014676:	1d01      	adds	r1, r0, #4
 8014678:	4620      	mov	r0, r4
 801467a:	f7fb fcfd 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 801467e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	dd0b      	ble.n	801469e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014686:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801468a:	2b00      	cmp	r3, #0
 801468c:	dd07      	ble.n	801469e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801468e:	6968      	ldr	r0, [r5, #20]
 8014690:	b128      	cbz	r0, 801469e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8014692:	6803      	ldr	r3, [r0, #0]
 8014694:	4621      	mov	r1, r4
 8014696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801469c:	4718      	bx	r3
 801469e:	bd70      	pop	{r4, r5, r6, pc}

080146a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	8882      	ldrh	r2, [r0, #4]
 80146a4:	460c      	mov	r4, r1
 80146a6:	880b      	ldrh	r3, [r1, #0]
 80146a8:	4605      	mov	r5, r0
 80146aa:	4413      	add	r3, r2
 80146ac:	800b      	strh	r3, [r1, #0]
 80146ae:	884b      	ldrh	r3, [r1, #2]
 80146b0:	88c2      	ldrh	r2, [r0, #6]
 80146b2:	4413      	add	r3, r2
 80146b4:	804b      	strh	r3, [r1, #2]
 80146b6:	1d01      	adds	r1, r0, #4
 80146b8:	4620      	mov	r0, r4
 80146ba:	f7fb fcdd 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 80146be:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	dd18      	ble.n	80146f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80146c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	dd14      	ble.n	80146f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80146ce:	6968      	ldr	r0, [r5, #20]
 80146d0:	b128      	cbz	r0, 80146de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80146d2:	6803      	ldr	r3, [r0, #0]
 80146d4:	4621      	mov	r1, r4
 80146d6:	691b      	ldr	r3, [r3, #16]
 80146d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146dc:	4718      	bx	r3
 80146de:	4b07      	ldr	r3, [pc, #28]	; (80146fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	3304      	adds	r3, #4
 80146e4:	429d      	cmp	r5, r3
 80146e6:	d107      	bne.n	80146f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80146e8:	f7fe ff1c 	bl	8013524 <_ZN8touchgfx11Application11getInstanceEv>
 80146ec:	6821      	ldr	r1, [r4, #0]
 80146ee:	6862      	ldr	r2, [r4, #4]
 80146f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146f4:	f7ff b862 	b.w	80137bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80146f8:	bd70      	pop	{r4, r5, r6, pc}
 80146fa:	bf00      	nop
 80146fc:	20011954 	.word	0x20011954

08014700 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014700:	b570      	push	{r4, r5, r6, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	4616      	mov	r6, r2
 8014706:	460d      	mov	r5, r1
 8014708:	b901      	cbnz	r1, 801470c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801470a:	b192      	cbz	r2, 8014732 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801470c:	6823      	ldr	r3, [r4, #0]
 801470e:	4620      	mov	r0, r4
 8014710:	699b      	ldr	r3, [r3, #24]
 8014712:	4798      	blx	r3
 8014714:	88e2      	ldrh	r2, [r4, #6]
 8014716:	88a1      	ldrh	r1, [r4, #4]
 8014718:	4620      	mov	r0, r4
 801471a:	4432      	add	r2, r6
 801471c:	4429      	add	r1, r5
 801471e:	b212      	sxth	r2, r2
 8014720:	b209      	sxth	r1, r1
 8014722:	f7f6 f9fd 	bl	800ab20 <_ZN8touchgfx8Drawable5setXYEss>
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	4620      	mov	r0, r4
 801472a:	699b      	ldr	r3, [r3, #24]
 801472c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014730:	4718      	bx	r3
 8014732:	bd70      	pop	{r4, r5, r6, pc}

08014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014734:	b510      	push	{r4, lr}
 8014736:	2300      	movs	r3, #0
 8014738:	4604      	mov	r4, r0
 801473a:	4608      	mov	r0, r1
 801473c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014740:	8023      	strh	r3, [r4, #0]
 8014742:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014746:	8063      	strh	r3, [r4, #2]
 8014748:	6803      	ldr	r3, [r0, #0]
 801474a:	80a1      	strh	r1, [r4, #4]
 801474c:	4621      	mov	r1, r4
 801474e:	80e2      	strh	r2, [r4, #6]
 8014750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014752:	4798      	blx	r3
 8014754:	4620      	mov	r0, r4
 8014756:	bd10      	pop	{r4, pc}

08014758 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014758:	b530      	push	{r4, r5, lr}
 801475a:	8083      	strh	r3, [r0, #4]
 801475c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014760:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014764:	80c3      	strh	r3, [r0, #6]
 8014766:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801476a:	6141      	str	r1, [r0, #20]
 801476c:	7203      	strb	r3, [r0, #8]
 801476e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014772:	8302      	strh	r2, [r0, #24]
 8014774:	7243      	strb	r3, [r0, #9]
 8014776:	7a83      	ldrb	r3, [r0, #10]
 8014778:	f365 0306 	bfi	r3, r5, #0, #7
 801477c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014780:	f365 13c7 	bfi	r3, r5, #7, #1
 8014784:	7283      	strb	r3, [r0, #10]
 8014786:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801478a:	72c3      	strb	r3, [r0, #11]
 801478c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014790:	7303      	strb	r3, [r0, #12]
 8014792:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014796:	81c3      	strh	r3, [r0, #14]
 8014798:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801479c:	8203      	strh	r3, [r0, #16]
 801479e:	4b01      	ldr	r3, [pc, #4]	; (80147a4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80147a0:	6003      	str	r3, [r0, #0]
 80147a2:	bd30      	pop	{r4, r5, pc}
 80147a4:	08021920 	.word	0x08021920

080147a8 <_ZNK8touchgfx9ConstFont4findEt>:
 80147a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147aa:	6944      	ldr	r4, [r0, #20]
 80147ac:	b3bc      	cbz	r4, 801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147ae:	88a3      	ldrh	r3, [r4, #4]
 80147b0:	8b02      	ldrh	r2, [r0, #24]
 80147b2:	1acb      	subs	r3, r1, r3
 80147b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80147b8:	d431      	bmi.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147ba:	4293      	cmp	r3, r2
 80147bc:	dd0c      	ble.n	80147d8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80147be:	230e      	movs	r3, #14
 80147c0:	fb03 4302 	mla	r3, r3, r2, r4
 80147c4:	889b      	ldrh	r3, [r3, #4]
 80147c6:	1a5b      	subs	r3, r3, r1
 80147c8:	1ad3      	subs	r3, r2, r3
 80147ca:	429a      	cmp	r2, r3
 80147cc:	db27      	blt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	bfbc      	itt	lt
 80147d2:	2302      	movlt	r3, #2
 80147d4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80147d8:	2500      	movs	r5, #0
 80147da:	260e      	movs	r6, #14
 80147dc:	4295      	cmp	r5, r2
 80147de:	dc1e      	bgt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147e0:	fb06 4003 	mla	r0, r6, r3, r4
 80147e4:	8887      	ldrh	r7, [r0, #4]
 80147e6:	42b9      	cmp	r1, r7
 80147e8:	d01a      	beq.n	8014820 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80147ea:	d20d      	bcs.n	8014808 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80147ec:	1e5a      	subs	r2, r3, #1
 80147ee:	4295      	cmp	r5, r2
 80147f0:	dc15      	bgt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147f2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80147f6:	1a5b      	subs	r3, r3, r1
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	429a      	cmp	r2, r3
 80147fc:	db0f      	blt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80147fe:	429d      	cmp	r5, r3
 8014800:	ddec      	ble.n	80147dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014802:	1953      	adds	r3, r2, r5
 8014804:	105b      	asrs	r3, r3, #1
 8014806:	e7e9      	b.n	80147dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014808:	1c5d      	adds	r5, r3, #1
 801480a:	42aa      	cmp	r2, r5
 801480c:	db07      	blt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801480e:	8a43      	ldrh	r3, [r0, #18]
 8014810:	1acb      	subs	r3, r1, r3
 8014812:	442b      	add	r3, r5
 8014814:	429d      	cmp	r5, r3
 8014816:	dc02      	bgt.n	801481e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014818:	429a      	cmp	r2, r3
 801481a:	dadf      	bge.n	80147dc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801481c:	e7f1      	b.n	8014802 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801481e:	2000      	movs	r0, #0
 8014820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014822 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014824:	4604      	mov	r4, r0
 8014826:	4617      	mov	r7, r2
 8014828:	461e      	mov	r6, r3
 801482a:	b911      	cbnz	r1, 8014832 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801482c:	2500      	movs	r5, #0
 801482e:	4628      	mov	r0, r5
 8014830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014832:	290a      	cmp	r1, #10
 8014834:	d0fa      	beq.n	801482c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014836:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801483a:	4291      	cmp	r1, r2
 801483c:	d0f6      	beq.n	801482c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801483e:	f242 020b 	movw	r2, #8203	; 0x200b
 8014842:	4291      	cmp	r1, r2
 8014844:	d0f2      	beq.n	801482c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014846:	f7ff ffaf 	bl	80147a8 <_ZNK8touchgfx9ConstFont4findEt>
 801484a:	4605      	mov	r5, r0
 801484c:	b950      	cbnz	r0, 8014864 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	4620      	mov	r0, r4
 8014852:	691b      	ldr	r3, [r3, #16]
 8014854:	4798      	blx	r3
 8014856:	4601      	mov	r1, r0
 8014858:	4620      	mov	r0, r4
 801485a:	f7ff ffa5 	bl	80147a8 <_ZNK8touchgfx9ConstFont4findEt>
 801485e:	4605      	mov	r5, r0
 8014860:	2800      	cmp	r0, #0
 8014862:	d0e3      	beq.n	801482c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	4629      	mov	r1, r5
 8014868:	4620      	mov	r0, r4
 801486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801486c:	4798      	blx	r3
 801486e:	6038      	str	r0, [r7, #0]
 8014870:	6823      	ldr	r3, [r4, #0]
 8014872:	4620      	mov	r0, r4
 8014874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014876:	4798      	blx	r3
 8014878:	7030      	strb	r0, [r6, #0]
 801487a:	e7d8      	b.n	801482e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801487c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801487c:	2000      	movs	r0, #0
 801487e:	4770      	bx	lr

08014880 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014880:	2001      	movs	r0, #1
 8014882:	4770      	bx	lr

08014884 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8014884:	2002      	movs	r0, #2
 8014886:	4770      	bx	lr

08014888 <_ZN8touchgfx12GestureEventD1Ev>:
 8014888:	4770      	bx	lr

0801488a <_ZN8touchgfx9DragEventD1Ev>:
 801488a:	4770      	bx	lr

0801488c <_ZN8touchgfx10ClickEventD1Ev>:
 801488c:	4770      	bx	lr

0801488e <_ZN8touchgfx10ClickEventD0Ev>:
 801488e:	b510      	push	{r4, lr}
 8014890:	4604      	mov	r4, r0
 8014892:	210c      	movs	r1, #12
 8014894:	f00a f84b 	bl	801e92e <_ZdlPvj>
 8014898:	4620      	mov	r0, r4
 801489a:	bd10      	pop	{r4, pc}

0801489c <_ZN8touchgfx9DragEventD0Ev>:
 801489c:	b510      	push	{r4, lr}
 801489e:	4604      	mov	r4, r0
 80148a0:	2110      	movs	r1, #16
 80148a2:	f00a f844 	bl	801e92e <_ZdlPvj>
 80148a6:	4620      	mov	r0, r4
 80148a8:	bd10      	pop	{r4, pc}

080148aa <_ZN8touchgfx12GestureEventD0Ev>:
 80148aa:	b510      	push	{r4, lr}
 80148ac:	4604      	mov	r4, r0
 80148ae:	210c      	movs	r1, #12
 80148b0:	f00a f83d 	bl	801e92e <_ZdlPvj>
 80148b4:	4620      	mov	r0, r4
 80148b6:	bd10      	pop	{r4, pc}

080148b8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80148b8:	b530      	push	{r4, r5, lr}
 80148ba:	460d      	mov	r5, r1
 80148bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80148be:	b087      	sub	sp, #28
 80148c0:	4604      	mov	r4, r0
 80148c2:	b301      	cbz	r1, 8014906 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80148c4:	a801      	add	r0, sp, #4
 80148c6:	f7ff ff35 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80148ca:	892a      	ldrh	r2, [r5, #8]
 80148cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80148d0:	7928      	ldrb	r0, [r5, #4]
 80148d2:	1ad2      	subs	r2, r2, r3
 80148d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80148d6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80148da:	441a      	add	r2, r3
 80148dc:	896b      	ldrh	r3, [r5, #10]
 80148de:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80148e2:	f88d 0010 	strb.w	r0, [sp, #16]
 80148e6:	1b5b      	subs	r3, r3, r5
 80148e8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80148ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80148ec:	442b      	add	r3, r5
 80148ee:	4d07      	ldr	r5, [pc, #28]	; (801490c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80148f0:	f8ad 1012 	strh.w	r1, [sp, #18]
 80148f4:	a903      	add	r1, sp, #12
 80148f6:	9503      	str	r5, [sp, #12]
 80148f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80148fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014900:	6803      	ldr	r3, [r0, #0]
 8014902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014904:	4798      	blx	r3
 8014906:	b007      	add	sp, #28
 8014908:	bd30      	pop	{r4, r5, pc}
 801490a:	bf00      	nop
 801490c:	080219a8 	.word	0x080219a8

08014910 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014916:	b08a      	sub	sp, #40	; 0x28
 8014918:	4604      	mov	r4, r0
 801491a:	460d      	mov	r5, r1
 801491c:	b113      	cbz	r3, 8014924 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801491e:	790b      	ldrb	r3, [r1, #4]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d044      	beq.n	80149ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014924:	f104 0804 	add.w	r8, r4, #4
 8014928:	a803      	add	r0, sp, #12
 801492a:	4641      	mov	r1, r8
 801492c:	f7ff ff02 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014930:	792b      	ldrb	r3, [r5, #4]
 8014932:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014936:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801493a:	b983      	cbnz	r3, 801495e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801493c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8014940:	892a      	ldrh	r2, [r5, #8]
 8014942:	88e9      	ldrh	r1, [r5, #6]
 8014944:	4640      	mov	r0, r8
 8014946:	1b92      	subs	r2, r2, r6
 8014948:	9301      	str	r3, [sp, #4]
 801494a:	1bc9      	subs	r1, r1, r7
 801494c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8014950:	b212      	sxth	r2, r2
 8014952:	9300      	str	r3, [sp, #0]
 8014954:	b209      	sxth	r1, r1
 8014956:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801495a:	f7fb faab 	bl	800feb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801495e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014960:	b329      	cbz	r1, 80149ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014962:	a805      	add	r0, sp, #20
 8014964:	f7ff fee6 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014968:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801496c:	792b      	ldrb	r3, [r5, #4]
 801496e:	a907      	add	r1, sp, #28
 8014970:	1abf      	subs	r7, r7, r2
 8014972:	88ea      	ldrh	r2, [r5, #6]
 8014974:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014976:	4417      	add	r7, r2
 8014978:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801497a:	f88d 3020 	strb.w	r3, [sp, #32]
 801497e:	4417      	add	r7, r2
 8014980:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014984:	1ab6      	subs	r6, r6, r2
 8014986:	892a      	ldrh	r2, [r5, #8]
 8014988:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801498c:	4416      	add	r6, r2
 801498e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014990:	4416      	add	r6, r2
 8014992:	4a08      	ldr	r2, [pc, #32]	; (80149b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014994:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014998:	2600      	movs	r6, #0
 801499a:	9207      	str	r2, [sp, #28]
 801499c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80149a0:	6803      	ldr	r3, [r0, #0]
 80149a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149a4:	4798      	blx	r3
 80149a6:	792b      	ldrb	r3, [r5, #4]
 80149a8:	b10b      	cbz	r3, 80149ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80149aa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80149ae:	b00a      	add	sp, #40	; 0x28
 80149b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b4:	08021980 	.word	0x08021980

080149b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80149b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149bc:	460c      	mov	r4, r1
 80149be:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80149c0:	b088      	sub	sp, #32
 80149c2:	4605      	mov	r5, r0
 80149c4:	2900      	cmp	r1, #0
 80149c6:	d06d      	beq.n	8014aa4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80149c8:	4668      	mov	r0, sp
 80149ca:	f7ff feb3 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80149ce:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80149d0:	88e3      	ldrh	r3, [r4, #6]
 80149d2:	f9bd 8000 	ldrsh.w	r8, [sp]
 80149d6:	440b      	add	r3, r1
 80149d8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80149dc:	b21b      	sxth	r3, r3
 80149de:	4543      	cmp	r3, r8
 80149e0:	db31      	blt.n	8014a46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80149e2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80149e6:	44c4      	add	ip, r8
 80149e8:	fa0f fc8c 	sxth.w	ip, ip
 80149ec:	4563      	cmp	r3, ip
 80149ee:	da2a      	bge.n	8014a46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80149f0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80149f2:	8926      	ldrh	r6, [r4, #8]
 80149f4:	4416      	add	r6, r2
 80149f6:	b236      	sxth	r6, r6
 80149f8:	42be      	cmp	r6, r7
 80149fa:	db24      	blt.n	8014a46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80149fc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014a00:	4438      	add	r0, r7
 8014a02:	b200      	sxth	r0, r0
 8014a04:	4286      	cmp	r6, r0
 8014a06:	da1e      	bge.n	8014a46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014a08:	8963      	ldrh	r3, [r4, #10]
 8014a0a:	4419      	add	r1, r3
 8014a0c:	b209      	sxth	r1, r1
 8014a0e:	4541      	cmp	r1, r8
 8014a10:	db08      	blt.n	8014a24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014a12:	4561      	cmp	r1, ip
 8014a14:	da06      	bge.n	8014a24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014a16:	89a3      	ldrh	r3, [r4, #12]
 8014a18:	441a      	add	r2, r3
 8014a1a:	b212      	sxth	r2, r2
 8014a1c:	42ba      	cmp	r2, r7
 8014a1e:	db01      	blt.n	8014a24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014a20:	4282      	cmp	r2, r0
 8014a22:	db10      	blt.n	8014a46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014a24:	4b21      	ldr	r3, [pc, #132]	; (8014aac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014a26:	a904      	add	r1, sp, #16
 8014a28:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014a2a:	9304      	str	r3, [sp, #16]
 8014a2c:	2302      	movs	r3, #2
 8014a2e:	f88d 3014 	strb.w	r3, [sp, #20]
 8014a32:	2300      	movs	r3, #0
 8014a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a38:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a40:	6803      	ldr	r3, [r0, #0]
 8014a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a44:	4798      	blx	r3
 8014a46:	1d29      	adds	r1, r5, #4
 8014a48:	a802      	add	r0, sp, #8
 8014a4a:	f7ff fe73 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014a52:	88e0      	ldrh	r0, [r4, #6]
 8014a54:	eba3 0808 	sub.w	r8, r3, r8
 8014a58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014a5c:	7921      	ldrb	r1, [r4, #4]
 8014a5e:	fa1f f888 	uxth.w	r8, r8
 8014a62:	1bdf      	subs	r7, r3, r7
 8014a64:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8014a68:	b2bb      	uxth	r3, r7
 8014a6a:	4440      	add	r0, r8
 8014a6c:	8922      	ldrh	r2, [r4, #8]
 8014a6e:	8967      	ldrh	r7, [r4, #10]
 8014a70:	4460      	add	r0, ip
 8014a72:	89a4      	ldrh	r4, [r4, #12]
 8014a74:	441a      	add	r2, r3
 8014a76:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8014a78:	44b8      	add	r8, r7
 8014a7a:	4423      	add	r3, r4
 8014a7c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014a80:	4432      	add	r2, r6
 8014a82:	44e0      	add	r8, ip
 8014a84:	4433      	add	r3, r6
 8014a86:	4c0a      	ldr	r4, [pc, #40]	; (8014ab0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014a88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014a8a:	f88d 1014 	strb.w	r1, [sp, #20]
 8014a8e:	a904      	add	r1, sp, #16
 8014a90:	9404      	str	r4, [sp, #16]
 8014a92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014a96:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014a9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a9e:	6803      	ldr	r3, [r0, #0]
 8014aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014aa2:	4798      	blx	r3
 8014aa4:	b008      	add	sp, #32
 8014aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aaa:	bf00      	nop
 8014aac:	08021980 	.word	0x08021980
 8014ab0:	08021994 	.word	0x08021994

08014ab4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014abc:	3201      	adds	r2, #1
 8014abe:	d112      	bne.n	8014ae6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014ac0:	2500      	movs	r5, #0
 8014ac2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014ac6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014aca:	6803      	ldr	r3, [r0, #0]
 8014acc:	9500      	str	r5, [sp, #0]
 8014ace:	466d      	mov	r5, sp
 8014ad0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014ad4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014ad8:	4629      	mov	r1, r5
 8014ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014adc:	4798      	blx	r3
 8014ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ae2:	e884 0003 	stmia.w	r4, {r0, r1}
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	b003      	add	sp, #12
 8014aea:	bd30      	pop	{r4, r5, pc}

08014aec <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014aec:	b513      	push	{r0, r1, r4, lr}
 8014aee:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014af2:	4604      	mov	r4, r0
 8014af4:	3301      	adds	r3, #1
 8014af6:	d109      	bne.n	8014b0c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014af8:	4601      	mov	r1, r0
 8014afa:	4668      	mov	r0, sp
 8014afc:	f7ff fe1a 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b00:	f8bd 3000 	ldrh.w	r3, [sp]
 8014b04:	8423      	strh	r3, [r4, #32]
 8014b06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014b0a:	8463      	strh	r3, [r4, #34]	; 0x22
 8014b0c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014b10:	b002      	add	sp, #8
 8014b12:	bd10      	pop	{r4, pc}

08014b14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014b14:	b513      	push	{r0, r1, r4, lr}
 8014b16:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014b1a:	4604      	mov	r4, r0
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	d109      	bne.n	8014b34 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014b20:	4601      	mov	r1, r0
 8014b22:	4668      	mov	r0, sp
 8014b24:	f7ff fe06 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b28:	f8bd 3000 	ldrh.w	r3, [sp]
 8014b2c:	8423      	strh	r3, [r4, #32]
 8014b2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014b32:	8463      	strh	r3, [r4, #34]	; 0x22
 8014b34:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8014b38:	b002      	add	sp, #8
 8014b3a:	bd10      	pop	{r4, pc}

08014b3c <_ZN8touchgfx6ScreenC1Ev>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	4b17      	ldr	r3, [pc, #92]	; (8014b9c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014b40:	4605      	mov	r5, r0
 8014b42:	4a17      	ldr	r2, [pc, #92]	; (8014ba0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014b44:	2101      	movs	r1, #1
 8014b46:	f845 3b04 	str.w	r3, [r5], #4
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	6042      	str	r2, [r0, #4]
 8014b4e:	4604      	mov	r4, r0
 8014b50:	8103      	strh	r3, [r0, #8]
 8014b52:	8143      	strh	r3, [r0, #10]
 8014b54:	8183      	strh	r3, [r0, #12]
 8014b56:	81c3      	strh	r3, [r0, #14]
 8014b58:	8203      	strh	r3, [r0, #16]
 8014b5a:	8243      	strh	r3, [r0, #18]
 8014b5c:	8283      	strh	r3, [r0, #20]
 8014b5e:	82c3      	strh	r3, [r0, #22]
 8014b60:	6203      	str	r3, [r0, #32]
 8014b62:	8483      	strh	r3, [r0, #36]	; 0x24
 8014b64:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014b66:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014b6a:	6343      	str	r3, [r0, #52]	; 0x34
 8014b6c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8014b70:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014b74:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014b78:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8014b7c:	4b09      	ldr	r3, [pc, #36]	; (8014ba4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014b84:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8014b86:	4a08      	ldr	r2, [pc, #32]	; (8014ba8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014b88:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014b8c:	4798      	blx	r3
 8014b8e:	6863      	ldr	r3, [r4, #4]
 8014b90:	4628      	mov	r0, r5
 8014b92:	4631      	mov	r1, r6
 8014b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b96:	4798      	blx	r3
 8014b98:	4620      	mov	r0, r4
 8014b9a:	bd70      	pop	{r4, r5, r6, pc}
 8014b9c:	080219bc 	.word	0x080219bc
 8014ba0:	08021350 	.word	0x08021350
 8014ba4:	2001190c 	.word	0x2001190c
 8014ba8:	2001190a 	.word	0x2001190a

08014bac <_ZN8touchgfx6Screen4drawEv>:
 8014bac:	4b09      	ldr	r3, [pc, #36]	; (8014bd4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014bae:	b507      	push	{r0, r1, r2, lr}
 8014bb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	4b08      	ldr	r3, [pc, #32]	; (8014bd8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014bb8:	9100      	str	r1, [sp, #0]
 8014bba:	4669      	mov	r1, sp
 8014bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bc0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014bc4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014bc8:	6803      	ldr	r3, [r0, #0]
 8014bca:	689b      	ldr	r3, [r3, #8]
 8014bcc:	4798      	blx	r3
 8014bce:	b003      	add	sp, #12
 8014bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bd4:	2001190a 	.word	0x2001190a
 8014bd8:	2001190c 	.word	0x2001190c

08014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014be4:	b089      	sub	sp, #36	; 0x24
 8014be6:	4680      	mov	r8, r0
 8014be8:	460c      	mov	r4, r1
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	4615      	mov	r5, r2
 8014bee:	dd0e      	ble.n	8014c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014bf0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	dd0a      	ble.n	8014c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7ff ff5b 	bl	8014ab4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014bfe:	4621      	mov	r1, r4
 8014c00:	f7fe fbb2 	bl	8013368 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014c04:	69eb      	ldr	r3, [r5, #28]
 8014c06:	b928      	cbnz	r0, 8014c14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014c08:	461d      	mov	r5, r3
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d1f4      	bne.n	8014bf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014c0e:	b009      	add	sp, #36	; 0x24
 8014c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c14:	ae04      	add	r6, sp, #16
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	f000 80b5 	beq.w	8014d86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014c1c:	682b      	ldr	r3, [r5, #0]
 8014c1e:	4629      	mov	r1, r5
 8014c20:	a802      	add	r0, sp, #8
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	4798      	blx	r3
 8014c26:	4628      	mov	r0, r5
 8014c28:	f7ff ff60 	bl	8014aec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014c2c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014c30:	4407      	add	r7, r0
 8014c32:	4628      	mov	r0, r5
 8014c34:	f7ff ff6e 	bl	8014b14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014c38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014c3c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014c40:	b23f      	sxth	r7, r7
 8014c42:	4418      	add	r0, r3
 8014c44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014c48:	4621      	mov	r1, r4
 8014c4a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014c4e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014c52:	4630      	mov	r0, r6
 8014c54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014c58:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014c5c:	f7fb fa0c 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8014c60:	4628      	mov	r0, r5
 8014c62:	f7ff ff27 	bl	8014ab4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014c66:	ab06      	add	r3, sp, #24
 8014c68:	4602      	mov	r2, r0
 8014c6a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014c6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014c72:	4611      	mov	r1, r2
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fb f9ff 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8014c7a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014c7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014c82:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014c86:	4299      	cmp	r1, r3
 8014c88:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014c8c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014c90:	d10b      	bne.n	8014caa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014c92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014c96:	4552      	cmp	r2, sl
 8014c98:	d107      	bne.n	8014caa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014c9a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014c9e:	455a      	cmp	r2, fp
 8014ca0:	d103      	bne.n	8014caa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014ca2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014ca6:	454a      	cmp	r2, r9
 8014ca8:	d06d      	beq.n	8014d86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014caa:	f1bb 0f00 	cmp.w	fp, #0
 8014cae:	dd65      	ble.n	8014d7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014cb0:	f1b9 0f00 	cmp.w	r9, #0
 8014cb4:	dd62      	ble.n	8014d7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014cb6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014cba:	fa1f f08a 	uxth.w	r0, sl
 8014cbe:	4552      	cmp	r2, sl
 8014cc0:	9000      	str	r0, [sp, #0]
 8014cc2:	da12      	bge.n	8014cea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	9b00      	ldr	r3, [sp, #0]
 8014cc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014ccc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014cd0:	1a9a      	subs	r2, r3, r2
 8014cd2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014cd6:	4631      	mov	r1, r6
 8014cd8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014cdc:	4640      	mov	r0, r8
 8014cde:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014ce2:	69ea      	ldr	r2, [r5, #28]
 8014ce4:	f7ff ff7a 	bl	8014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014ce8:	9b01      	ldr	r3, [sp, #4]
 8014cea:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014cee:	b29f      	uxth	r7, r3
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	da0d      	bge.n	8014d10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014cf4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014cf8:	1aba      	subs	r2, r7, r2
 8014cfa:	f8ad a012 	strh.w	sl, [sp, #18]
 8014cfe:	4631      	mov	r1, r6
 8014d00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014d04:	4640      	mov	r0, r8
 8014d06:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014d0a:	69ea      	ldr	r2, [r5, #28]
 8014d0c:	f7ff ff66 	bl	8014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014d10:	8822      	ldrh	r2, [r4, #0]
 8014d12:	445f      	add	r7, fp
 8014d14:	88a3      	ldrh	r3, [r4, #4]
 8014d16:	b2bf      	uxth	r7, r7
 8014d18:	4413      	add	r3, r2
 8014d1a:	b23a      	sxth	r2, r7
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	b219      	sxth	r1, r3
 8014d20:	4291      	cmp	r1, r2
 8014d22:	dd0d      	ble.n	8014d40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014d24:	1bdb      	subs	r3, r3, r7
 8014d26:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014d2a:	f8ad a012 	strh.w	sl, [sp, #18]
 8014d2e:	4631      	mov	r1, r6
 8014d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014d34:	4640      	mov	r0, r8
 8014d36:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014d3a:	69ea      	ldr	r2, [r5, #28]
 8014d3c:	f7ff ff4e 	bl	8014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014d40:	88e2      	ldrh	r2, [r4, #6]
 8014d42:	8863      	ldrh	r3, [r4, #2]
 8014d44:	4413      	add	r3, r2
 8014d46:	9a00      	ldr	r2, [sp, #0]
 8014d48:	444a      	add	r2, r9
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	fa1f f982 	uxth.w	r9, r2
 8014d50:	b219      	sxth	r1, r3
 8014d52:	fa0f f289 	sxth.w	r2, r9
 8014d56:	428a      	cmp	r2, r1
 8014d58:	da15      	bge.n	8014d86 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014d5a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014d5e:	eba3 0309 	sub.w	r3, r3, r9
 8014d62:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014d66:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014d6a:	4631      	mov	r1, r6
 8014d6c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014d70:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014d74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014d78:	69ea      	ldr	r2, [r5, #28]
 8014d7a:	e001      	b.n	8014d80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014d7c:	69ea      	ldr	r2, [r5, #28]
 8014d7e:	4621      	mov	r1, r4
 8014d80:	4640      	mov	r0, r8
 8014d82:	f7ff ff2b 	bl	8014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014d86:	4628      	mov	r0, r5
 8014d88:	f7ff fe94 	bl	8014ab4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014d8c:	6861      	ldr	r1, [r4, #4]
 8014d8e:	4602      	mov	r2, r0
 8014d90:	4633      	mov	r3, r6
 8014d92:	6820      	ldr	r0, [r4, #0]
 8014d94:	c303      	stmia	r3!, {r0, r1}
 8014d96:	4611      	mov	r1, r2
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f7fb f96d 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8014d9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f77f af33 	ble.w	8014c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014da8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f77f af2e 	ble.w	8014c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014db2:	4628      	mov	r0, r5
 8014db4:	f7ff fe9a 	bl	8014aec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014db8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014dbc:	1a18      	subs	r0, r3, r0
 8014dbe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	f7ff fea6 	bl	8014b14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014dc8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014dcc:	4631      	mov	r1, r6
 8014dce:	1a18      	subs	r0, r3, r0
 8014dd0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	682b      	ldr	r3, [r5, #0]
 8014dd8:	689b      	ldr	r3, [r3, #8]
 8014dda:	4798      	blx	r3
 8014ddc:	e717      	b.n	8014c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014dde <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014dde:	b570      	push	{r4, r5, r6, lr}
 8014de0:	1d06      	adds	r6, r0, #4
 8014de2:	b086      	sub	sp, #24
 8014de4:	460c      	mov	r4, r1
 8014de6:	2300      	movs	r3, #0
 8014de8:	4631      	mov	r1, r6
 8014dea:	4605      	mov	r5, r0
 8014dec:	a802      	add	r0, sp, #8
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	f7ff fca0 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014df4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014df8:	8822      	ldrh	r2, [r4, #0]
 8014dfa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014dfe:	1ad2      	subs	r2, r2, r3
 8014e00:	8863      	ldrh	r3, [r4, #2]
 8014e02:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014e06:	1a5b      	subs	r3, r3, r1
 8014e08:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014e0c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e10:	aa01      	add	r2, sp, #4
 8014e12:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014e16:	4630      	mov	r0, r6
 8014e18:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014e1c:	a904      	add	r1, sp, #16
 8014e1e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014e22:	f7fb fa01 	bl	8010228 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014e26:	9a01      	ldr	r2, [sp, #4]
 8014e28:	b11a      	cbz	r2, 8014e32 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014e2a:	4621      	mov	r1, r4
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	f7ff fed5 	bl	8014bdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e32:	b006      	add	sp, #24
 8014e34:	bd70      	pop	{r4, r5, r6, pc}

08014e36 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014e36:	4602      	mov	r2, r0
 8014e38:	b530      	push	{r4, r5, lr}
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	b085      	sub	sp, #20
 8014e3e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014e42:	460d      	mov	r5, r1
 8014e44:	466b      	mov	r3, sp
 8014e46:	6851      	ldr	r1, [r2, #4]
 8014e48:	c303      	stmia	r3!, {r0, r1}
 8014e4a:	4629      	mov	r1, r5
 8014e4c:	4668      	mov	r0, sp
 8014e4e:	f7fb f913 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8014e52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014e56:	b12b      	cbz	r3, 8014e64 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014e58:	4669      	mov	r1, sp
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7ff ffbf 	bl	8014dde <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014e60:	b005      	add	sp, #20
 8014e62:	bd30      	pop	{r4, r5, pc}
 8014e64:	3404      	adds	r4, #4
 8014e66:	a802      	add	r0, sp, #8
 8014e68:	4621      	mov	r1, r4
 8014e6a:	f7ff fc63 	bl	8014734 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014e72:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014e76:	4669      	mov	r1, sp
 8014e78:	4620      	mov	r0, r4
 8014e7a:	1a9b      	subs	r3, r3, r2
 8014e7c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014e80:	f8ad 3000 	strh.w	r3, [sp]
 8014e84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014e88:	1a9b      	subs	r3, r3, r2
 8014e8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014e8e:	f7fb f992 	bl	80101b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014e92:	e7e5      	b.n	8014e60 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014e94 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014e94:	460b      	mov	r3, r1
 8014e96:	680a      	ldr	r2, [r1, #0]
 8014e98:	1d01      	adds	r1, r0, #4
 8014e9a:	6992      	ldr	r2, [r2, #24]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	4710      	bx	r2

08014ea0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8014ea0:	4298      	cmp	r0, r3
 8014ea2:	d200      	bcs.n	8014ea6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8014ea4:	b913      	cbnz	r3, 8014eac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8014ea6:	440a      	add	r2, r1
 8014ea8:	b210      	sxth	r0, r2
 8014eaa:	4770      	bx	lr
 8014eac:	ee07 0a90 	vmov	s15, r0
 8014eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014eb4:	ee07 3a90 	vmov	s15, r3
 8014eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014ec0:	ee07 2a90 	vmov	s15, r2
 8014ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ec8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014ecc:	ee07 1a90 	vmov	s15, r1
 8014ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ed4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014ed8:	ee67 5a07 	vmul.f32	s11, s14, s14
 8014edc:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014ee0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014ee4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef0:	bfcc      	ite	gt
 8014ef2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8014ef6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8014efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014efe:	ee17 3a90 	vmov	r3, s15
 8014f02:	b218      	sxth	r0, r3
 8014f04:	4770      	bx	lr

08014f06 <_ZN8touchgfx12TextProviderC1Ev>:
 8014f06:	b538      	push	{r3, r4, r5, lr}
 8014f08:	2500      	movs	r5, #0
 8014f0a:	2302      	movs	r3, #2
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	220e      	movs	r2, #14
 8014f10:	7403      	strb	r3, [r0, #16]
 8014f12:	4629      	mov	r1, r5
 8014f14:	6145      	str	r5, [r0, #20]
 8014f16:	7605      	strb	r5, [r0, #24]
 8014f18:	83c5      	strh	r5, [r0, #30]
 8014f1a:	8405      	strh	r5, [r0, #32]
 8014f1c:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014f1e:	8705      	strh	r5, [r0, #56]	; 0x38
 8014f20:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8014f22:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8014f26:	e9c0 5500 	strd	r5, r5, [r0]
 8014f2a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8014f2e:	304c      	adds	r0, #76	; 0x4c
 8014f30:	f009 feb2 	bl	801ec98 <memset>
 8014f34:	2301      	movs	r3, #1
 8014f36:	4620      	mov	r0, r4
 8014f38:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8014f3c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014f40:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8014f44:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8014f48:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8014f4c:	f7f8 fca4 	bl	800d898 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014f50:	4620      	mov	r0, r4
 8014f52:	bd38      	pop	{r3, r4, r5, pc}

08014f54 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8014f54:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014f56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014f5a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8014f5c:	fab0 f080 	clz	r0, r0
 8014f60:	0940      	lsrs	r0, r0, #5
 8014f62:	4770      	bx	lr

08014f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014f64:	b530      	push	{r4, r5, lr}
 8014f66:	2500      	movs	r5, #0
 8014f68:	2401      	movs	r4, #1
 8014f6a:	6843      	ldr	r3, [r0, #4]
 8014f6c:	b913      	cbnz	r3, 8014f74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014f6e:	6803      	ldr	r3, [r0, #0]
 8014f70:	b313      	cbz	r3, 8014fb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014f72:	6043      	str	r3, [r0, #4]
 8014f74:	7e03      	ldrb	r3, [r0, #24]
 8014f76:	b143      	cbz	r3, 8014f8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014f78:	6943      	ldr	r3, [r0, #20]
 8014f7a:	b12b      	cbz	r3, 8014f88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014f7c:	881a      	ldrh	r2, [r3, #0]
 8014f7e:	b11a      	cbz	r2, 8014f88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014f80:	1c9a      	adds	r2, r3, #2
 8014f82:	6142      	str	r2, [r0, #20]
 8014f84:	8818      	ldrh	r0, [r3, #0]
 8014f86:	bd30      	pop	{r4, r5, pc}
 8014f88:	7605      	strb	r5, [r0, #24]
 8014f8a:	6843      	ldr	r3, [r0, #4]
 8014f8c:	8819      	ldrh	r1, [r3, #0]
 8014f8e:	b199      	cbz	r1, 8014fb8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014f90:	1c9a      	adds	r2, r3, #2
 8014f92:	2902      	cmp	r1, #2
 8014f94:	6042      	str	r2, [r0, #4]
 8014f96:	d1f5      	bne.n	8014f84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014f98:	7c03      	ldrb	r3, [r0, #16]
 8014f9a:	2b01      	cmp	r3, #1
 8014f9c:	d8e5      	bhi.n	8014f6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014f9e:	1c5a      	adds	r2, r3, #1
 8014fa0:	3302      	adds	r3, #2
 8014fa2:	7402      	strb	r2, [r0, #16]
 8014fa4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014fa8:	6143      	str	r3, [r0, #20]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d0dd      	beq.n	8014f6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fae:	881b      	ldrh	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d0da      	beq.n	8014f6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fb4:	7604      	strb	r4, [r0, #24]
 8014fb6:	e7d8      	b.n	8014f6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	e7e4      	b.n	8014f86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014fbc:	6001      	str	r1, [r0, #0]
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	b430      	push	{r4, r5}
 8014fc2:	6041      	str	r1, [r0, #4]
 8014fc4:	6815      	ldr	r5, [r2, #0]
 8014fc6:	6085      	str	r5, [r0, #8]
 8014fc8:	6852      	ldr	r2, [r2, #4]
 8014fca:	6443      	str	r3, [r0, #68]	; 0x44
 8014fcc:	9b02      	ldr	r3, [sp, #8]
 8014fce:	60c2      	str	r2, [r0, #12]
 8014fd0:	7401      	strb	r1, [r0, #16]
 8014fd2:	6141      	str	r1, [r0, #20]
 8014fd4:	7601      	strb	r1, [r0, #24]
 8014fd6:	8701      	strh	r1, [r0, #56]	; 0x38
 8014fd8:	8401      	strh	r1, [r0, #32]
 8014fda:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8014fde:	6483      	str	r3, [r0, #72]	; 0x48
 8014fe0:	bc30      	pop	{r4, r5}
 8014fe2:	f7f8 bc59 	b.w	800d898 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014fe6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8014fe6:	b408      	push	{r3}
 8014fe8:	b510      	push	{r4, lr}
 8014fea:	b085      	sub	sp, #20
 8014fec:	ac07      	add	r4, sp, #28
 8014fee:	f854 3b04 	ldr.w	r3, [r4], #4
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	4622      	mov	r2, r4
 8014ff8:	9403      	str	r4, [sp, #12]
 8014ffa:	f7ff ffdf 	bl	8014fbc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014ffe:	b005      	add	sp, #20
 8015000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015004:	b001      	add	sp, #4
 8015006:	4770      	bx	lr

08015008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8015008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801500a:	4605      	mov	r5, r0
 801500c:	4608      	mov	r0, r1
 801500e:	b1f1      	cbz	r1, 801504e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8015010:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8015014:	460b      	mov	r3, r1
 8015016:	f101 0708 	add.w	r7, r1, #8
 801501a:	4622      	mov	r2, r4
 801501c:	6818      	ldr	r0, [r3, #0]
 801501e:	3308      	adds	r3, #8
 8015020:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015024:	4626      	mov	r6, r4
 8015026:	42bb      	cmp	r3, r7
 8015028:	c603      	stmia	r6!, {r0, r1}
 801502a:	4634      	mov	r4, r6
 801502c:	d1f6      	bne.n	801501c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801502e:	6818      	ldr	r0, [r3, #0]
 8015030:	6030      	str	r0, [r6, #0]
 8015032:	4610      	mov	r0, r2
 8015034:	889b      	ldrh	r3, [r3, #4]
 8015036:	80b3      	strh	r3, [r6, #4]
 8015038:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801503c:	015b      	lsls	r3, r3, #5
 801503e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015042:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8015046:	430b      	orrs	r3, r1
 8015048:	425b      	negs	r3, r3
 801504a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801504e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015050 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015050:	b538      	push	{r3, r4, r5, lr}
 8015052:	460c      	mov	r4, r1
 8015054:	6811      	ldr	r1, [r2, #0]
 8015056:	4610      	mov	r0, r2
 8015058:	68cd      	ldr	r5, [r1, #12]
 801505a:	4619      	mov	r1, r3
 801505c:	47a8      	blx	r5
 801505e:	2800      	cmp	r0, #0
 8015060:	bf08      	it	eq
 8015062:	4620      	moveq	r0, r4
 8015064:	bd38      	pop	{r3, r4, r5, pc}
	...

08015068 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506a:	4604      	mov	r4, r0
 801506c:	4615      	mov	r5, r2
 801506e:	4608      	mov	r0, r1
 8015070:	b93a      	cbnz	r2, 8015082 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015072:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015076:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801507a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801507e:	4628      	mov	r0, r5
 8015080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015082:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8015086:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801508a:	8893      	ldrh	r3, [r2, #4]
 801508c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015090:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015094:	79ee      	ldrb	r6, [r5, #7]
 8015096:	4316      	orrs	r6, r2
 8015098:	19da      	adds	r2, r3, r7
 801509a:	b291      	uxth	r1, r2
 801509c:	b2b7      	uxth	r7, r6
 801509e:	291d      	cmp	r1, #29
 80150a0:	d87b      	bhi.n	801519a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80150a2:	2201      	movs	r2, #1
 80150a4:	10f6      	asrs	r6, r6, #3
 80150a6:	408a      	lsls	r2, r1
 80150a8:	4974      	ldr	r1, [pc, #464]	; (801527c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80150aa:	420a      	tst	r2, r1
 80150ac:	d12e      	bne.n	801510c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80150ae:	f412 7f60 	tst.w	r2, #896	; 0x380
 80150b2:	d072      	beq.n	801519a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80150b4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80150b8:	462b      	mov	r3, r5
 80150ba:	f105 0e08 	add.w	lr, r5, #8
 80150be:	4615      	mov	r5, r2
 80150c0:	6818      	ldr	r0, [r3, #0]
 80150c2:	3308      	adds	r3, #8
 80150c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80150c8:	4694      	mov	ip, r2
 80150ca:	4573      	cmp	r3, lr
 80150cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80150d0:	4662      	mov	r2, ip
 80150d2:	d1f5      	bne.n	80150c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80150d4:	6818      	ldr	r0, [r3, #0]
 80150d6:	f8cc 0000 	str.w	r0, [ip]
 80150da:	889b      	ldrh	r3, [r3, #4]
 80150dc:	f8ac 3004 	strh.w	r3, [ip, #4]
 80150e0:	b2b3      	uxth	r3, r6
 80150e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80150e6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80150ea:	1aca      	subs	r2, r1, r3
 80150ec:	1bcf      	subs	r7, r1, r7
 80150ee:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80150f2:	b292      	uxth	r2, r2
 80150f4:	1afb      	subs	r3, r7, r3
 80150f6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80150fa:	10d2      	asrs	r2, r2, #3
 80150fc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8015100:	4302      	orrs	r2, r0
 8015102:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8015106:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801510a:	e7b8      	b.n	801507e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801510c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801510e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015112:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8015114:	f640 6333 	movw	r3, #3635	; 0xe33
 8015118:	4299      	cmp	r1, r3
 801511a:	d110      	bne.n	801513e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801511c:	6803      	ldr	r3, [r0, #0]
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	4798      	blx	r3
 8015122:	7b41      	ldrb	r1, [r0, #13]
 8015124:	00cb      	lsls	r3, r1, #3
 8015126:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801512a:	7a03      	ldrb	r3, [r0, #8]
 801512c:	0648      	lsls	r0, r1, #25
 801512e:	ea43 0302 	orr.w	r3, r3, r2
 8015132:	bf44      	itt	mi
 8015134:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015138:	b21b      	sxthmi	r3, r3
 801513a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801513e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015142:	462a      	mov	r2, r5
 8015144:	f105 0c08 	add.w	ip, r5, #8
 8015148:	443b      	add	r3, r7
 801514a:	4433      	add	r3, r6
 801514c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8015150:	b29b      	uxth	r3, r3
 8015152:	4635      	mov	r5, r6
 8015154:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015158:	6810      	ldr	r0, [r2, #0]
 801515a:	3208      	adds	r2, #8
 801515c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8015160:	4637      	mov	r7, r6
 8015162:	4562      	cmp	r2, ip
 8015164:	c703      	stmia	r7!, {r0, r1}
 8015166:	463e      	mov	r6, r7
 8015168:	d1f6      	bne.n	8015158 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801516a:	6810      	ldr	r0, [r2, #0]
 801516c:	6038      	str	r0, [r7, #0]
 801516e:	8892      	ldrh	r2, [r2, #4]
 8015170:	80ba      	strh	r2, [r7, #4]
 8015172:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015176:	10db      	asrs	r3, r3, #3
 8015178:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801517c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015180:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015184:	4313      	orrs	r3, r2
 8015186:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801518a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801518e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8015192:	1a9b      	subs	r3, r3, r2
 8015194:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015198:	e771      	b.n	801507e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801519a:	f023 0204 	bic.w	r2, r3, #4
 801519e:	f640 611b 	movw	r1, #3611	; 0xe1b
 80151a2:	428a      	cmp	r2, r1
 80151a4:	d003      	beq.n	80151ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80151a6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d120      	bne.n	80151f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80151ae:	3b01      	subs	r3, #1
 80151b0:	4602      	mov	r2, r0
 80151b2:	4629      	mov	r1, r5
 80151b4:	4620      	mov	r0, r4
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	f7ff ff4a 	bl	8015050 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80151bc:	7b41      	ldrb	r1, [r0, #13]
 80151be:	00cb      	lsls	r3, r1, #3
 80151c0:	0649      	lsls	r1, r1, #25
 80151c2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80151c6:	7a03      	ldrb	r3, [r0, #8]
 80151c8:	ea43 0302 	orr.w	r3, r3, r2
 80151cc:	bf44      	itt	mi
 80151ce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80151d2:	b21b      	sxthmi	r3, r3
 80151d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80151d8:	7b6b      	ldrb	r3, [r5, #13]
 80151da:	7aaa      	ldrb	r2, [r5, #10]
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151e2:	4313      	orrs	r3, r2
 80151e4:	115a      	asrs	r2, r3, #5
 80151e6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80151ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80151ee:	e035      	b.n	801525c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80151f0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80151f4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80151f8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80151fc:	7a2a      	ldrb	r2, [r5, #8]
 80151fe:	ea42 0201 	orr.w	r2, r2, r1
 8015202:	f640 6109 	movw	r1, #3593	; 0xe09
 8015206:	bf1c      	itt	ne
 8015208:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801520c:	b212      	sxthne	r2, r2
 801520e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015212:	f023 0210 	bic.w	r2, r3, #16
 8015216:	428a      	cmp	r2, r1
 8015218:	d003      	beq.n	8015222 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801521a:	f640 6213 	movw	r2, #3603	; 0xe13
 801521e:	4293      	cmp	r3, r2
 8015220:	d129      	bne.n	8015276 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8015222:	7b6e      	ldrb	r6, [r5, #13]
 8015224:	4629      	mov	r1, r5
 8015226:	0076      	lsls	r6, r6, #1
 8015228:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801522c:	7aae      	ldrb	r6, [r5, #10]
 801522e:	4316      	orrs	r6, r2
 8015230:	f640 6213 	movw	r2, #3603	; 0xe13
 8015234:	4293      	cmp	r3, r2
 8015236:	4602      	mov	r2, r0
 8015238:	4620      	mov	r0, r4
 801523a:	bf16      	itet	ne
 801523c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015240:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015244:	b29b      	uxthne	r3, r3
 8015246:	f7ff ff03 	bl	8015050 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801524a:	7b43      	ldrb	r3, [r0, #13]
 801524c:	7a82      	ldrb	r2, [r0, #10]
 801524e:	005b      	lsls	r3, r3, #1
 8015250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015254:	4313      	orrs	r3, r2
 8015256:	1af6      	subs	r6, r6, r3
 8015258:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801525c:	7b69      	ldrb	r1, [r5, #13]
 801525e:	00cb      	lsls	r3, r1, #3
 8015260:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015264:	7a2b      	ldrb	r3, [r5, #8]
 8015266:	4313      	orrs	r3, r2
 8015268:	064a      	lsls	r2, r1, #25
 801526a:	bf44      	itt	mi
 801526c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015270:	b21b      	sxthmi	r3, r3
 8015272:	1bdb      	subs	r3, r3, r7
 8015274:	e747      	b.n	8015106 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8015276:	2300      	movs	r3, #0
 8015278:	e7b7      	b.n	80151ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801527a:	bf00      	nop
 801527c:	3fc00079 	.word	0x3fc00079

08015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8015280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015284:	4604      	mov	r4, r0
 8015286:	b942      	cbnz	r2, 801529a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801528c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8015290:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015294:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015298:	e047      	b.n	801532a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801529a:	7b51      	ldrb	r1, [r2, #13]
 801529c:	8893      	ldrh	r3, [r2, #4]
 801529e:	010d      	lsls	r5, r1, #4
 80152a0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80152a4:	79d5      	ldrb	r5, [r2, #7]
 80152a6:	4305      	orrs	r5, r0
 80152a8:	2d04      	cmp	r5, #4
 80152aa:	bfcc      	ite	gt
 80152ac:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80152b0:	f04f 0e01 	movle.w	lr, #1
 80152b4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80152b8:	f200 80ab 	bhi.w	8015412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80152bc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80152c0:	4283      	cmp	r3, r0
 80152c2:	d216      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152c4:	f240 605b 	movw	r0, #1627	; 0x65b
 80152c8:	4283      	cmp	r3, r0
 80152ca:	d859      	bhi.n	8015380 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80152cc:	f240 6057 	movw	r0, #1623	; 0x657
 80152d0:	4283      	cmp	r3, r0
 80152d2:	d20e      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152d4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80152d8:	d24a      	bcs.n	8015370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80152da:	f240 604e 	movw	r0, #1614	; 0x64e
 80152de:	4283      	cmp	r3, r0
 80152e0:	d207      	bcs.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80152e2:	f240 601a 	movw	r0, #1562	; 0x61a
 80152e6:	4283      	cmp	r3, r0
 80152e8:	d02a      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80152ea:	d821      	bhi.n	8015330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80152ec:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80152f0:	d35b      	bcc.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80152f2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80152f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80152fa:	f040 80d0 	bne.w	801549e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80152fe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8015302:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015306:	f040 80ca 	bne.w	801549e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801530a:	00cb      	lsls	r3, r1, #3
 801530c:	0649      	lsls	r1, r1, #25
 801530e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015312:	7a13      	ldrb	r3, [r2, #8]
 8015314:	ea43 0300 	orr.w	r3, r3, r0
 8015318:	bf44      	itt	mi
 801531a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801531e:	b21b      	sxthmi	r3, r3
 8015320:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015324:	1b5d      	subs	r5, r3, r5
 8015326:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801532a:	4610      	mov	r0, r2
 801532c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015330:	f240 604b 	movw	r0, #1611	; 0x64b
 8015334:	4283      	cmp	r3, r0
 8015336:	d338      	bcc.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015338:	f240 604c 	movw	r0, #1612	; 0x64c
 801533c:	4283      	cmp	r3, r0
 801533e:	d9d8      	bls.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015340:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015344:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015348:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801534c:	f040 80f3 	bne.w	8015536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015350:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015354:	f040 80ef 	bne.w	8015536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015358:	00cb      	lsls	r3, r1, #3
 801535a:	064e      	lsls	r6, r1, #25
 801535c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8015360:	7a13      	ldrb	r3, [r2, #8]
 8015362:	ea43 0300 	orr.w	r3, r3, r0
 8015366:	bf44      	itt	mi
 8015368:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801536c:	b21b      	sxthmi	r3, r3
 801536e:	e7d9      	b.n	8015324 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8015370:	f240 6054 	movw	r0, #1620	; 0x654
 8015374:	4283      	cmp	r3, r0
 8015376:	d8e3      	bhi.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015378:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801537c:	d9e0      	bls.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801537e:	e7b8      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015380:	f240 6074 	movw	r0, #1652	; 0x674
 8015384:	4283      	cmp	r3, r0
 8015386:	d0b4      	beq.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015388:	d82d      	bhi.n	80153e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801538a:	f240 605e 	movw	r0, #1630	; 0x65e
 801538e:	4283      	cmp	r3, r0
 8015390:	d804      	bhi.n	801539c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8015392:	f240 605d 	movw	r0, #1629	; 0x65d
 8015396:	4283      	cmp	r3, r0
 8015398:	d3d2      	bcc.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801539a:	e7aa      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801539c:	f240 605f 	movw	r0, #1631	; 0x65f
 80153a0:	4283      	cmp	r3, r0
 80153a2:	d0cd      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80153a4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80153a8:	d0a3      	beq.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153aa:	00cb      	lsls	r3, r1, #3
 80153ac:	0649      	lsls	r1, r1, #25
 80153ae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80153b2:	7a13      	ldrb	r3, [r2, #8]
 80153b4:	ea43 0300 	orr.w	r3, r3, r0
 80153b8:	bf44      	itt	mi
 80153ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80153be:	b21b      	sxthmi	r3, r3
 80153c0:	1b5d      	subs	r5, r3, r5
 80153c2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80153c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80153ca:	7b53      	ldrb	r3, [r2, #13]
 80153cc:	015b      	lsls	r3, r3, #5
 80153ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80153d2:	7993      	ldrb	r3, [r2, #6]
 80153d4:	430b      	orrs	r3, r1
 80153d6:	2105      	movs	r1, #5
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	fb93 f3f1 	sdiv	r3, r3, r1
 80153de:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80153e2:	440b      	add	r3, r1
 80153e4:	e756      	b.n	8015294 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80153e6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80153ea:	4283      	cmp	r3, r0
 80153ec:	d809      	bhi.n	8015402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80153ee:	f240 60df 	movw	r0, #1759	; 0x6df
 80153f2:	4283      	cmp	r3, r0
 80153f4:	f4bf af7d 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153f8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80153fc:	2b05      	cmp	r3, #5
 80153fe:	d8d4      	bhi.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015400:	e777      	b.n	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015402:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8015406:	4283      	cmp	r3, r0
 8015408:	d09a      	beq.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801540a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801540e:	4283      	cmp	r3, r0
 8015410:	e7ca      	b.n	80153a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8015412:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8015416:	d22b      	bcs.n	8015470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015418:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801541c:	4283      	cmp	r3, r0
 801541e:	d28f      	bcs.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015420:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015424:	4283      	cmp	r3, r0
 8015426:	d816      	bhi.n	8015456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015428:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801542c:	4283      	cmp	r3, r0
 801542e:	f4bf af60 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015432:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015436:	4283      	cmp	r3, r0
 8015438:	d80a      	bhi.n	8015450 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801543a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801543e:	4283      	cmp	r3, r0
 8015440:	f4bf af57 	bcs.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015444:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8015448:	4283      	cmp	r3, r0
 801544a:	f43f af79 	beq.w	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801544e:	e7ac      	b.n	80153aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015450:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015454:	e7f8      	b.n	8015448 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015456:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801545a:	4283      	cmp	r3, r0
 801545c:	d802      	bhi.n	8015464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801545e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015462:	e798      	b.n	8015396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015464:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8015468:	4283      	cmp	r3, r0
 801546a:	f47f af42 	bne.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801546e:	e767      	b.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015470:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8015474:	4283      	cmp	r3, r0
 8015476:	f43f af63 	beq.w	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801547a:	d802      	bhi.n	8015482 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801547c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8015480:	e7f2      	b.n	8015468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8015482:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8015486:	4283      	cmp	r3, r0
 8015488:	d805      	bhi.n	8015496 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801548a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801548e:	4283      	cmp	r3, r0
 8015490:	f4ff af2f 	bcc.w	80152f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015494:	e754      	b.n	8015340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015496:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801549a:	4283      	cmp	r3, r0
 801549c:	e7af      	b.n	80153fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801549e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80154a2:	4617      	mov	r7, r2
 80154a4:	f102 0808 	add.w	r8, r2, #8
 80154a8:	4666      	mov	r6, ip
 80154aa:	6838      	ldr	r0, [r7, #0]
 80154ac:	3708      	adds	r7, #8
 80154ae:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80154b2:	46e6      	mov	lr, ip
 80154b4:	4547      	cmp	r7, r8
 80154b6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80154ba:	46f4      	mov	ip, lr
 80154bc:	d1f5      	bne.n	80154aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80154be:	6838      	ldr	r0, [r7, #0]
 80154c0:	f8ce 0000 	str.w	r0, [lr]
 80154c4:	88b9      	ldrh	r1, [r7, #4]
 80154c6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80154ca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80154ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80154d2:	d009      	beq.n	80154e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80154d4:	7b51      	ldrb	r1, [r2, #13]
 80154d6:	7992      	ldrb	r2, [r2, #6]
 80154d8:	0149      	lsls	r1, r1, #5
 80154da:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80154de:	4311      	orrs	r1, r2
 80154e0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80154e4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80154e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80154ec:	b2ad      	uxth	r5, r5
 80154ee:	d00d      	beq.n	801550c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80154f0:	442b      	add	r3, r5
 80154f2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80154fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015500:	10db      	asrs	r3, r3, #3
 8015502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015506:	4313      	orrs	r3, r2
 8015508:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801550c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015510:	00cb      	lsls	r3, r1, #3
 8015512:	064f      	lsls	r7, r1, #25
 8015514:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015518:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801551c:	ea43 0302 	orr.w	r3, r3, r2
 8015520:	bf44      	itt	mi
 8015522:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015526:	b21b      	sxthmi	r3, r3
 8015528:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801552c:	1b5b      	subs	r3, r3, r5
 801552e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8015532:	4632      	mov	r2, r6
 8015534:	e6f9      	b.n	801532a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015536:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801553a:	4617      	mov	r7, r2
 801553c:	f102 0908 	add.w	r9, r2, #8
 8015540:	4666      	mov	r6, ip
 8015542:	6838      	ldr	r0, [r7, #0]
 8015544:	3708      	adds	r7, #8
 8015546:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801554a:	46e0      	mov	r8, ip
 801554c:	454f      	cmp	r7, r9
 801554e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015552:	46c4      	mov	ip, r8
 8015554:	d1f5      	bne.n	8015542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8015556:	6838      	ldr	r0, [r7, #0]
 8015558:	f8c8 0000 	str.w	r0, [r8]
 801555c:	88b9      	ldrh	r1, [r7, #4]
 801555e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015562:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015566:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801556a:	d009      	beq.n	8015580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801556c:	7b51      	ldrb	r1, [r2, #13]
 801556e:	7992      	ldrb	r2, [r2, #6]
 8015570:	0149      	lsls	r1, r1, #5
 8015572:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015576:	4311      	orrs	r1, r2
 8015578:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801557c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015580:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015584:	d00e      	beq.n	80155a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8015586:	eba3 030e 	sub.w	r3, r3, lr
 801558a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801558e:	b29b      	uxth	r3, r3
 8015590:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015594:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015598:	10db      	asrs	r3, r3, #3
 801559a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801559e:	4313      	orrs	r3, r2
 80155a0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80155a4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80155a8:	00cb      	lsls	r3, r1, #3
 80155aa:	0648      	lsls	r0, r1, #25
 80155ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80155b0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80155b4:	ea43 0302 	orr.w	r3, r3, r2
 80155b8:	bf44      	itt	mi
 80155ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80155be:	b21b      	sxthmi	r3, r3
 80155c0:	1b5d      	subs	r5, r3, r5
 80155c2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80155c6:	e7b4      	b.n	8015532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080155c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80155c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155cc:	461e      	mov	r6, r3
 80155ce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80155d0:	4604      	mov	r4, r0
 80155d2:	4617      	mov	r7, r2
 80155d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80155d8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80155dc:	f7f8 f8b6 	bl	800d74c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80155e0:	4605      	mov	r5, r0
 80155e2:	b918      	cbnz	r0, 80155ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80155e4:	6030      	str	r0, [r6, #0]
 80155e6:	4628      	mov	r0, r5
 80155e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	4601      	mov	r1, r0
 80155f0:	4638      	mov	r0, r7
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	4798      	blx	r3
 80155f6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80155fa:	4602      	mov	r2, r0
 80155fc:	6030      	str	r0, [r6, #0]
 80155fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015602:	d213      	bcs.n	801562c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015604:	4643      	mov	r3, r8
 8015606:	4639      	mov	r1, r7
 8015608:	4620      	mov	r0, r4
 801560a:	f7ff fe39 	bl	8015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801560e:	6030      	str	r0, [r6, #0]
 8015610:	6833      	ldr	r3, [r6, #0]
 8015612:	b143      	cbz	r3, 8015626 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015614:	7b5a      	ldrb	r2, [r3, #13]
 8015616:	7a9b      	ldrb	r3, [r3, #10]
 8015618:	0052      	lsls	r2, r2, #1
 801561a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801561e:	4313      	orrs	r3, r2
 8015620:	bf0c      	ite	eq
 8015622:	2301      	moveq	r3, #1
 8015624:	2300      	movne	r3, #0
 8015626:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801562a:	e7dc      	b.n	80155e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801562c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8015630:	b29b      	uxth	r3, r3
 8015632:	2b7f      	cmp	r3, #127	; 0x7f
 8015634:	d804      	bhi.n	8015640 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015636:	4639      	mov	r1, r7
 8015638:	4620      	mov	r0, r4
 801563a:	f7ff fd15 	bl	8015068 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801563e:	e7e6      	b.n	801560e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015640:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015644:	2b00      	cmp	r3, #0
 8015646:	d0e3      	beq.n	8015610 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015648:	f640 1302 	movw	r3, #2306	; 0x902
 801564c:	429d      	cmp	r5, r3
 801564e:	d1df      	bne.n	8015610 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015650:	4601      	mov	r1, r0
 8015652:	4620      	mov	r0, r4
 8015654:	f7ff fcd8 	bl	8015008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015658:	e7d9      	b.n	801560e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801565a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801565a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801565e:	461e      	mov	r6, r3
 8015660:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015662:	4604      	mov	r4, r0
 8015664:	4617      	mov	r7, r2
 8015666:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801566a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801566e:	f7f8 f86d 	bl	800d74c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015672:	4605      	mov	r5, r0
 8015674:	b918      	cbnz	r0, 801567e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8015676:	6030      	str	r0, [r6, #0]
 8015678:	4628      	mov	r0, r5
 801567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	4601      	mov	r1, r0
 8015682:	4638      	mov	r0, r7
 8015684:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015688:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801568c:	47c8      	blx	r9
 801568e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8015692:	4602      	mov	r2, r0
 8015694:	6030      	str	r0, [r6, #0]
 8015696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801569a:	d213      	bcs.n	80156c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801569c:	4643      	mov	r3, r8
 801569e:	4639      	mov	r1, r7
 80156a0:	4620      	mov	r0, r4
 80156a2:	f7ff fded 	bl	8015280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80156a6:	6030      	str	r0, [r6, #0]
 80156a8:	6833      	ldr	r3, [r6, #0]
 80156aa:	b143      	cbz	r3, 80156be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80156ac:	7b5a      	ldrb	r2, [r3, #13]
 80156ae:	7a9b      	ldrb	r3, [r3, #10]
 80156b0:	0052      	lsls	r2, r2, #1
 80156b2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80156b6:	4313      	orrs	r3, r2
 80156b8:	bf0c      	ite	eq
 80156ba:	2301      	moveq	r3, #1
 80156bc:	2300      	movne	r3, #0
 80156be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80156c2:	e7d9      	b.n	8015678 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80156c4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	2b7f      	cmp	r3, #127	; 0x7f
 80156cc:	d804      	bhi.n	80156d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80156ce:	4639      	mov	r1, r7
 80156d0:	4620      	mov	r0, r4
 80156d2:	f7ff fcc9 	bl	8015068 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80156d6:	e7e6      	b.n	80156a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80156d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d0e3      	beq.n	80156a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80156e0:	f640 1302 	movw	r3, #2306	; 0x902
 80156e4:	429d      	cmp	r5, r3
 80156e6:	d1df      	bne.n	80156a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80156e8:	4601      	mov	r1, r0
 80156ea:	4620      	mov	r0, r4
 80156ec:	f7ff fc8c 	bl	8015008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80156f0:	e7d9      	b.n	80156a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080156f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80156f2:	b510      	push	{r4, lr}
 80156f4:	4604      	mov	r4, r0
 80156f6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80156fa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80156fc:	b1e1      	cbz	r1, 8015738 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80156fe:	2b0a      	cmp	r3, #10
 8015700:	d02d      	beq.n	801575e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015702:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015704:	3901      	subs	r1, #1
 8015706:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801570a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801570c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8015710:	1c51      	adds	r1, r2, #1
 8015712:	b289      	uxth	r1, r1
 8015714:	2901      	cmp	r1, #1
 8015716:	bf8a      	itet	hi
 8015718:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801571c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801571e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8015720:	1c5a      	adds	r2, r3, #1
 8015722:	8722      	strh	r2, [r4, #56]	; 0x38
 8015724:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015726:	4413      	add	r3, r2
 8015728:	b29b      	uxth	r3, r3
 801572a:	2b09      	cmp	r3, #9
 801572c:	bf88      	it	hi
 801572e:	3b0a      	subhi	r3, #10
 8015730:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015734:	8458      	strh	r0, [r3, #34]	; 0x22
 8015736:	e7de      	b.n	80156f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015738:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801573a:	2b0a      	cmp	r3, #10
 801573c:	d00f      	beq.n	801575e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801573e:	4620      	mov	r0, r4
 8015740:	f7ff fc10 	bl	8014f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015744:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015746:	1c5a      	adds	r2, r3, #1
 8015748:	8722      	strh	r2, [r4, #56]	; 0x38
 801574a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801574c:	4413      	add	r3, r2
 801574e:	b29b      	uxth	r3, r3
 8015750:	2b09      	cmp	r3, #9
 8015752:	bf88      	it	hi
 8015754:	3b0a      	subhi	r3, #10
 8015756:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801575a:	8458      	strh	r0, [r3, #34]	; 0x22
 801575c:	e7ec      	b.n	8015738 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801575e:	bd10      	pop	{r4, pc}

08015760 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015764:	4604      	mov	r4, r0
 8015766:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801576a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801576c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801576e:	3a01      	subs	r2, #1
 8015770:	8702      	strh	r2, [r0, #56]	; 0x38
 8015772:	1c5a      	adds	r2, r3, #1
 8015774:	b292      	uxth	r2, r2
 8015776:	2a09      	cmp	r2, #9
 8015778:	bf8a      	itet	hi
 801577a:	3b09      	subhi	r3, #9
 801577c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801577e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8015780:	f7ff ffb7 	bl	80156f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015784:	8c23      	ldrh	r3, [r4, #32]
 8015786:	2b01      	cmp	r3, #1
 8015788:	bf9c      	itt	ls
 801578a:	3301      	addls	r3, #1
 801578c:	8423      	strhls	r3, [r4, #32]
 801578e:	8be3      	ldrh	r3, [r4, #30]
 8015790:	b90b      	cbnz	r3, 8015796 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015792:	2302      	movs	r3, #2
 8015794:	83e3      	strh	r3, [r4, #30]
 8015796:	8be3      	ldrh	r3, [r4, #30]
 8015798:	4628      	mov	r0, r5
 801579a:	3b01      	subs	r3, #1
 801579c:	b29b      	uxth	r3, r3
 801579e:	83e3      	strh	r3, [r4, #30]
 80157a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80157a4:	8365      	strh	r5, [r4, #26]
 80157a6:	bd38      	pop	{r3, r4, r5, pc}

080157a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80157a8:	428a      	cmp	r2, r1
 80157aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80157b0:	d932      	bls.n	8015818 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80157b2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80157b4:	1a54      	subs	r4, r2, r1
 80157b6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80157ba:	19ee      	adds	r6, r5, r7
 80157bc:	fa1f fe84 	uxth.w	lr, r4
 80157c0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80157c4:	3e01      	subs	r6, #1
 80157c6:	b2b4      	uxth	r4, r6
 80157c8:	eba4 090e 	sub.w	r9, r4, lr
 80157cc:	fa1f f989 	uxth.w	r9, r9
 80157d0:	2c09      	cmp	r4, #9
 80157d2:	4626      	mov	r6, r4
 80157d4:	bf88      	it	hi
 80157d6:	f1a4 060a 	subhi.w	r6, r4, #10
 80157da:	f1bc 0f00 	cmp.w	ip, #0
 80157de:	f104 34ff 	add.w	r4, r4, #4294967295
 80157e2:	bf08      	it	eq
 80157e4:	f04f 0c02 	moveq.w	ip, #2
 80157e8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80157ec:	b2a4      	uxth	r4, r4
 80157ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80157f2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80157f6:	454c      	cmp	r4, r9
 80157f8:	fa1f fc8c 	uxth.w	ip, ip
 80157fc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015800:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8015804:	d1e4      	bne.n	80157d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015806:	eba5 050e 	sub.w	r5, r5, lr
 801580a:	eb0e 0408 	add.w	r4, lr, r8
 801580e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8015812:	8705      	strh	r5, [r0, #56]	; 0x38
 8015814:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8015818:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801581a:	250a      	movs	r5, #10
 801581c:	1a64      	subs	r4, r4, r1
 801581e:	4439      	add	r1, r7
 8015820:	b289      	uxth	r1, r1
 8015822:	8704      	strh	r4, [r0, #56]	; 0x38
 8015824:	2909      	cmp	r1, #9
 8015826:	bf88      	it	hi
 8015828:	390a      	subhi	r1, #10
 801582a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801582c:	b18a      	cbz	r2, 8015852 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801582e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8015830:	3a01      	subs	r2, #1
 8015832:	3101      	adds	r1, #1
 8015834:	b292      	uxth	r2, r2
 8015836:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801583a:	8701      	strh	r1, [r0, #56]	; 0x38
 801583c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801583e:	b901      	cbnz	r1, 8015842 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8015840:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015842:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015844:	3901      	subs	r1, #1
 8015846:	b289      	uxth	r1, r1
 8015848:	86c1      	strh	r1, [r0, #54]	; 0x36
 801584a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801584e:	844c      	strh	r4, [r1, #34]	; 0x22
 8015850:	e7ec      	b.n	801582c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8015852:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015856:	f7ff bf4c 	b.w	80156f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801585a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801585a:	b570      	push	{r4, r5, r6, lr}
 801585c:	2500      	movs	r5, #0
 801585e:	4295      	cmp	r5, r2
 8015860:	d011      	beq.n	8015886 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015862:	8bc4      	ldrh	r4, [r0, #30]
 8015864:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015868:	4414      	add	r4, r2
 801586a:	3c01      	subs	r4, #1
 801586c:	1b64      	subs	r4, r4, r5
 801586e:	b2a4      	uxth	r4, r4
 8015870:	2c01      	cmp	r4, #1
 8015872:	bf88      	it	hi
 8015874:	3c02      	subhi	r4, #2
 8015876:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801587a:	8b64      	ldrh	r4, [r4, #26]
 801587c:	42b4      	cmp	r4, r6
 801587e:	d117      	bne.n	80158b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015880:	3501      	adds	r5, #1
 8015882:	b2ad      	uxth	r5, r5
 8015884:	e7eb      	b.n	801585e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015886:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801588a:	2400      	movs	r4, #0
 801588c:	4413      	add	r3, r2
 801588e:	b2a2      	uxth	r2, r4
 8015890:	429a      	cmp	r2, r3
 8015892:	da0f      	bge.n	80158b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015894:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8015896:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801589a:	3401      	adds	r4, #1
 801589c:	4432      	add	r2, r6
 801589e:	b292      	uxth	r2, r2
 80158a0:	2a09      	cmp	r2, #9
 80158a2:	bf88      	it	hi
 80158a4:	3a0a      	subhi	r2, #10
 80158a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80158aa:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80158ac:	42aa      	cmp	r2, r5
 80158ae:	d0ee      	beq.n	801588e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80158b0:	2000      	movs	r0, #0
 80158b2:	bd70      	pop	{r4, r5, r6, pc}
 80158b4:	2001      	movs	r0, #1
 80158b6:	e7fc      	b.n	80158b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080158b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80158b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158bc:	4605      	mov	r5, r0
 80158be:	4616      	mov	r6, r2
 80158c0:	1c8c      	adds	r4, r1, #2
 80158c2:	8809      	ldrh	r1, [r1, #0]
 80158c4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80158c8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80158cc:	42b3      	cmp	r3, r6
 80158ce:	d124      	bne.n	801591a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80158d0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80158d4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80158d8:	f001 070f 	and.w	r7, r1, #15
 80158dc:	4652      	mov	r2, sl
 80158de:	f8cd 8000 	str.w	r8, [sp]
 80158e2:	464b      	mov	r3, r9
 80158e4:	4621      	mov	r1, r4
 80158e6:	4628      	mov	r0, r5
 80158e8:	f7ff ffb7 	bl	801585a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80158ec:	4683      	mov	fp, r0
 80158ee:	b168      	cbz	r0, 801590c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80158f0:	eb0a 0109 	add.w	r1, sl, r9
 80158f4:	463a      	mov	r2, r7
 80158f6:	4628      	mov	r0, r5
 80158f8:	4441      	add	r1, r8
 80158fa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80158fe:	4649      	mov	r1, r9
 8015900:	f7ff ff52 	bl	80157a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015904:	4658      	mov	r0, fp
 8015906:	b003      	add	sp, #12
 8015908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590c:	eb07 010a 	add.w	r1, r7, sl
 8015910:	4449      	add	r1, r9
 8015912:	4441      	add	r1, r8
 8015914:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015918:	e7d2      	b.n	80158c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801591a:	f04f 0b00 	mov.w	fp, #0
 801591e:	e7f1      	b.n	8015904 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015920:	b570      	push	{r4, r5, r6, lr}
 8015922:	8810      	ldrh	r0, [r2, #0]
 8015924:	4298      	cmp	r0, r3
 8015926:	d817      	bhi.n	8015958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015928:	1e48      	subs	r0, r1, #1
 801592a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801592e:	4298      	cmp	r0, r3
 8015930:	d312      	bcc.n	8015958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015932:	2400      	movs	r4, #0
 8015934:	428c      	cmp	r4, r1
 8015936:	d20f      	bcs.n	8015958 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015938:	1860      	adds	r0, r4, r1
 801593a:	1040      	asrs	r0, r0, #1
 801593c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015940:	0085      	lsls	r5, r0, #2
 8015942:	42b3      	cmp	r3, r6
 8015944:	d902      	bls.n	801594c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015946:	3001      	adds	r0, #1
 8015948:	b284      	uxth	r4, r0
 801594a:	e7f3      	b.n	8015934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801594c:	d201      	bcs.n	8015952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801594e:	b281      	uxth	r1, r0
 8015950:	e7f0      	b.n	8015934 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015952:	442a      	add	r2, r5
 8015954:	8850      	ldrh	r0, [r2, #2]
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	2000      	movs	r0, #0
 801595a:	e7fc      	b.n	8015956 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801595c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015960:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8015962:	4604      	mov	r4, r0
 8015964:	260b      	movs	r6, #11
 8015966:	886f      	ldrh	r7, [r5, #2]
 8015968:	087f      	lsrs	r7, r7, #1
 801596a:	3e01      	subs	r6, #1
 801596c:	d013      	beq.n	8015996 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801596e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015970:	462a      	mov	r2, r5
 8015972:	4639      	mov	r1, r7
 8015974:	4620      	mov	r0, r4
 8015976:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801597a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801597e:	4643      	mov	r3, r8
 8015980:	f7ff ffce 	bl	8015920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015984:	b138      	cbz	r0, 8015996 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015986:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801598a:	4642      	mov	r2, r8
 801598c:	4620      	mov	r0, r4
 801598e:	f7ff ff93 	bl	80158b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015992:	2800      	cmp	r0, #0
 8015994:	d1e9      	bne.n	801596a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801599c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801599c:	b570      	push	{r4, r5, r6, lr}
 801599e:	694a      	ldr	r2, [r1, #20]
 80159a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80159a2:	684b      	ldr	r3, [r1, #4]
 80159a4:	1b54      	subs	r4, r2, r5
 80159a6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80159a8:	f000 8106 	beq.w	8015bb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80159ac:	1b9b      	subs	r3, r3, r6
 80159ae:	d003      	beq.n	80159b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80159b0:	4363      	muls	r3, r4
 80159b2:	2210      	movs	r2, #16
 80159b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80159b8:	680c      	ldr	r4, [r1, #0]
 80159ba:	698a      	ldr	r2, [r1, #24]
 80159bc:	1b65      	subs	r5, r4, r5
 80159be:	f000 80fd 	beq.w	8015bbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80159c2:	1b92      	subs	r2, r2, r6
 80159c4:	d003      	beq.n	80159ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80159c6:	436a      	muls	r2, r5
 80159c8:	2410      	movs	r4, #16
 80159ca:	fb92 f2f4 	sdiv	r2, r2, r4
 80159ce:	1a9b      	subs	r3, r3, r2
 80159d0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015bf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80159d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159d8:	460a      	mov	r2, r1
 80159da:	ee07 3a90 	vmov	s15, r3
 80159de:	f100 040c 	add.w	r4, r0, #12
 80159e2:	4603      	mov	r3, r0
 80159e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80159ec:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80159f0:	eeb1 6a43 	vneg.f32	s12, s6
 80159f4:	edd2 7a02 	vldr	s15, [r2, #8]
 80159f8:	3214      	adds	r2, #20
 80159fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80159fe:	ece3 6a01 	vstmia	r3!, {s13}
 8015a02:	429c      	cmp	r4, r3
 8015a04:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015a08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a0c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015a10:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a18:	edc3 7a05 	vstr	s15, [r3, #20]
 8015a1c:	d1ea      	bne.n	80159f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015a1e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015a20:	698b      	ldr	r3, [r1, #24]
 8015a22:	edd0 4a02 	vldr	s9, [r0, #8]
 8015a26:	1a9b      	subs	r3, r3, r2
 8015a28:	edd0 3a00 	vldr	s7, [r0]
 8015a2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8015a30:	ee07 3a90 	vmov	s15, r3
 8015a34:	684b      	ldr	r3, [r1, #4]
 8015a36:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015a3a:	ed90 5a05 	vldr	s10, [r0, #20]
 8015a3e:	1a9b      	subs	r3, r3, r2
 8015a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a44:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015a48:	ed90 2a03 	vldr	s4, [r0, #12]
 8015a4c:	ee07 3a10 	vmov	s14, r3
 8015a50:	edd0 5a04 	vldr	s11, [r0, #16]
 8015a54:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015a58:	ed90 1a07 	vldr	s2, [r0, #28]
 8015a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a60:	edd0 2a06 	vldr	s5, [r0, #24]
 8015a64:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015a68:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015a6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a70:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015a74:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015a78:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015a7c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8015a80:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015a82:	694a      	ldr	r2, [r1, #20]
 8015a84:	1b13      	subs	r3, r2, r4
 8015a86:	ee07 3a10 	vmov	s14, r3
 8015a8a:	680b      	ldr	r3, [r1, #0]
 8015a8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a90:	1b1b      	subs	r3, r3, r4
 8015a92:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a96:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015a9a:	ee07 3a10 	vmov	s14, r3
 8015a9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015aa2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015aa6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015aaa:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015aae:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8015ab2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015ab4:	698b      	ldr	r3, [r1, #24]
 8015ab6:	1a9b      	subs	r3, r3, r2
 8015ab8:	ee06 3a90 	vmov	s13, r3
 8015abc:	684b      	ldr	r3, [r1, #4]
 8015abe:	1a9b      	subs	r3, r3, r2
 8015ac0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ac4:	ee07 3a10 	vmov	s14, r3
 8015ac8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ad0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015ad4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015ad8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015adc:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015ae0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015ae4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015ae6:	694a      	ldr	r2, [r1, #20]
 8015ae8:	1b13      	subs	r3, r2, r4
 8015aea:	ee07 3a10 	vmov	s14, r3
 8015aee:	680b      	ldr	r3, [r1, #0]
 8015af0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015af4:	1b1b      	subs	r3, r3, r4
 8015af6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015afa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015afe:	ee07 3a10 	vmov	s14, r3
 8015b02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b0a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015b0e:	edd0 5a08 	vldr	s11, [r0, #32]
 8015b12:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015b16:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015b1a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015b1e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015b22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015b24:	698b      	ldr	r3, [r1, #24]
 8015b26:	1a9b      	subs	r3, r3, r2
 8015b28:	ee07 3a10 	vmov	s14, r3
 8015b2c:	684b      	ldr	r3, [r1, #4]
 8015b2e:	1a9b      	subs	r3, r3, r2
 8015b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b34:	ee01 3a90 	vmov	s3, r3
 8015b38:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b3c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015b40:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015b44:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015b48:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015b4c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015b50:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015b54:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015b56:	694a      	ldr	r2, [r1, #20]
 8015b58:	1b13      	subs	r3, r2, r4
 8015b5a:	ee03 3a10 	vmov	s6, r3
 8015b5e:	680b      	ldr	r3, [r1, #0]
 8015b60:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015b64:	1b1b      	subs	r3, r3, r4
 8015b66:	ee23 3a04 	vmul.f32	s6, s6, s8
 8015b6a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8015b6e:	ee03 3a10 	vmov	s6, r3
 8015b72:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015b76:	ee23 4a04 	vmul.f32	s8, s6, s8
 8015b7a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8015b7e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015b82:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015b86:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8015b8a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015b8e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b96:	dd13      	ble.n	8015bc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b9c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015ba0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015ba2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bae:	dd15      	ble.n	8015bdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bb4:	6403      	str	r3, [r0, #64]	; 0x40
 8015bb6:	bd70      	pop	{r4, r5, r6, pc}
 8015bb8:	4623      	mov	r3, r4
 8015bba:	e6fd      	b.n	80159b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015bbc:	462a      	mov	r2, r5
 8015bbe:	e706      	b.n	80159ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015bc0:	d502      	bpl.n	8015bc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015bc2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015bc6:	e7e9      	b.n	8015b9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015bc8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015bcc:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015bd0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd8:	dade      	bge.n	8015b98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8015bda:	e7f2      	b.n	8015bc2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015bdc:	d502      	bpl.n	8015be4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8015bde:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015be2:	e7e7      	b.n	8015bb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015be4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015be8:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015bec:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf4:	dadc      	bge.n	8015bb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015bf6:	e7f2      	b.n	8015bde <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015bf8:	3d800000 	.word	0x3d800000

08015bfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c00:	2714      	movs	r7, #20
 8015c02:	435f      	muls	r7, r3
 8015c04:	eb02 0c07 	add.w	ip, r2, r7
 8015c08:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015c0c:	f115 0e0f 	adds.w	lr, r5, #15
 8015c10:	f100 80a2 	bmi.w	8015d58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015c14:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015c18:	9c08      	ldr	r4, [sp, #32]
 8015c1a:	2614      	movs	r6, #20
 8015c1c:	f8c0 e014 	str.w	lr, [r0, #20]
 8015c20:	4366      	muls	r6, r4
 8015c22:	eb02 0806 	add.w	r8, r2, r6
 8015c26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c2a:	f115 040f 	adds.w	r4, r5, #15
 8015c2e:	f100 809f 	bmi.w	8015d70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015c32:	1124      	asrs	r4, r4, #4
 8015c34:	eba4 040e 	sub.w	r4, r4, lr
 8015c38:	6184      	str	r4, [r0, #24]
 8015c3a:	2c00      	cmp	r4, #0
 8015c3c:	f000 808a 	beq.w	8015d54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8015c40:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015c44:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015c48:	5995      	ldr	r5, [r2, r6]
 8015c4a:	eba4 0809 	sub.w	r8, r4, r9
 8015c4e:	59d4      	ldr	r4, [r2, r7]
 8015c50:	eba5 0a04 	sub.w	sl, r5, r4
 8015c54:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8015c58:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8015c5c:	fb0e fe05 	mul.w	lr, lr, r5
 8015c60:	fb0a ee19 	mls	lr, sl, r9, lr
 8015c64:	fb08 e404 	mla	r4, r8, r4, lr
 8015c68:	3c01      	subs	r4, #1
 8015c6a:	19a4      	adds	r4, r4, r6
 8015c6c:	f100 808c 	bmi.w	8015d88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8015c70:	fb94 fef6 	sdiv	lr, r4, r6
 8015c74:	fb06 441e 	mls	r4, r6, lr, r4
 8015c78:	f8c0 e000 	str.w	lr, [r0]
 8015c7c:	6104      	str	r4, [r0, #16]
 8015c7e:	2d00      	cmp	r5, #0
 8015c80:	f2c0 8095 	blt.w	8015dae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015c84:	fb95 f4f6 	sdiv	r4, r5, r6
 8015c88:	fb06 5514 	mls	r5, r6, r4, r5
 8015c8c:	6044      	str	r4, [r0, #4]
 8015c8e:	6085      	str	r5, [r0, #8]
 8015c90:	60c6      	str	r6, [r0, #12]
 8015c92:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015c96:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015c9a:	6945      	ldr	r5, [r0, #20]
 8015c9c:	59d2      	ldr	r2, [r2, r7]
 8015c9e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015ca2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8015dd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8015ca6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015caa:	ee07 4a10 	vmov	s14, r4
 8015cae:	6804      	ldr	r4, [r0, #0]
 8015cb0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015cb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cb8:	ee07 2a90 	vmov	s15, r2
 8015cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015cc8:	edd3 6a00 	vldr	s13, [r3]
 8015ccc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015cd0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8015cd4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015cd8:	edc0 6a07 	vstr	s13, [r0, #28]
 8015cdc:	edd0 6a01 	vldr	s13, [r0, #4]
 8015ce0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8015ce4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ce8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015cec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015cf0:	ed80 6a08 	vstr	s12, [r0, #32]
 8015cf4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8015cf6:	6242      	str	r2, [r0, #36]	; 0x24
 8015cf8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8015cfc:	ed93 6a03 	vldr	s12, [r3, #12]
 8015d00:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d04:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d08:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015d0c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8015d10:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d14:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8015d18:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015d1c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8015d20:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015d22:	6302      	str	r2, [r0, #48]	; 0x30
 8015d24:	ed93 6a06 	vldr	s12, [r3, #24]
 8015d28:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8015d2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d30:	eeb0 7a46 	vmov.f32	s14, s12
 8015d34:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8015d38:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015d3c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015d40:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8015d44:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8015d48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015d4c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8015d50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8015d52:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d58:	2410      	movs	r4, #16
 8015d5a:	f1c5 0501 	rsb	r5, r5, #1
 8015d5e:	fb9e fef4 	sdiv	lr, lr, r4
 8015d62:	f015 050f 	ands.w	r5, r5, #15
 8015d66:	bf18      	it	ne
 8015d68:	2501      	movne	r5, #1
 8015d6a:	ebae 0e05 	sub.w	lr, lr, r5
 8015d6e:	e753      	b.n	8015c18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015d70:	f04f 0910 	mov.w	r9, #16
 8015d74:	f1c5 0501 	rsb	r5, r5, #1
 8015d78:	fb94 f4f9 	sdiv	r4, r4, r9
 8015d7c:	f015 050f 	ands.w	r5, r5, #15
 8015d80:	bf18      	it	ne
 8015d82:	2501      	movne	r5, #1
 8015d84:	1b64      	subs	r4, r4, r5
 8015d86:	e755      	b.n	8015c34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015d88:	4264      	negs	r4, r4
 8015d8a:	fb94 fef6 	sdiv	lr, r4, r6
 8015d8e:	f1ce 0800 	rsb	r8, lr, #0
 8015d92:	fb06 441e 	mls	r4, r6, lr, r4
 8015d96:	f8c0 8000 	str.w	r8, [r0]
 8015d9a:	6104      	str	r4, [r0, #16]
 8015d9c:	2c00      	cmp	r4, #0
 8015d9e:	f43f af6e 	beq.w	8015c7e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015da2:	ea6f 0e0e 	mvn.w	lr, lr
 8015da6:	1b34      	subs	r4, r6, r4
 8015da8:	f8c0 e000 	str.w	lr, [r0]
 8015dac:	e766      	b.n	8015c7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8015dae:	426d      	negs	r5, r5
 8015db0:	fb95 f4f6 	sdiv	r4, r5, r6
 8015db4:	f1c4 0e00 	rsb	lr, r4, #0
 8015db8:	fb06 5514 	mls	r5, r6, r4, r5
 8015dbc:	f8c0 e004 	str.w	lr, [r0, #4]
 8015dc0:	6085      	str	r5, [r0, #8]
 8015dc2:	2d00      	cmp	r5, #0
 8015dc4:	f43f af64 	beq.w	8015c90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015dc8:	43e4      	mvns	r4, r4
 8015dca:	1b75      	subs	r5, r6, r5
 8015dcc:	6044      	str	r4, [r0, #4]
 8015dce:	e75e      	b.n	8015c8e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015dd0:	3d800000 	.word	0x3d800000

08015dd4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	b148      	cbz	r0, 8015dec <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8015dd8:	2300      	movs	r3, #0
 8015dda:	b298      	uxth	r0, r3
 8015ddc:	3301      	adds	r3, #1
 8015dde:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015de2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8015de6:	2900      	cmp	r1, #0
 8015de8:	d1f7      	bne.n	8015dda <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8015dea:	4770      	bx	lr
 8015dec:	4770      	bx	lr

08015dee <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8015dee:	b530      	push	{r4, r5, lr}
 8015df0:	4604      	mov	r4, r0
 8015df2:	b159      	cbz	r1, 8015e0c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8015df4:	b148      	cbz	r0, 8015e0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8015df6:	2300      	movs	r3, #0
 8015df8:	b298      	uxth	r0, r3
 8015dfa:	4282      	cmp	r2, r0
 8015dfc:	d905      	bls.n	8015e0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8015dfe:	5ccd      	ldrb	r5, [r1, r3]
 8015e00:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8015e04:	3301      	adds	r3, #1
 8015e06:	2d00      	cmp	r5, #0
 8015e08:	d1f6      	bne.n	8015df8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8015e0a:	bd30      	pop	{r4, r5, pc}
 8015e0c:	4608      	mov	r0, r1
 8015e0e:	e7fc      	b.n	8015e0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08015e10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8015e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e12:	468c      	mov	ip, r1
 8015e14:	b08b      	sub	sp, #44	; 0x2c
 8015e16:	2100      	movs	r1, #0
 8015e18:	ae01      	add	r6, sp, #4
 8015e1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8015e1e:	211f      	movs	r1, #31
 8015e20:	fbb0 f7f3 	udiv	r7, r0, r3
 8015e24:	fb03 0517 	mls	r5, r3, r7, r0
 8015e28:	4638      	mov	r0, r7
 8015e2a:	b2ec      	uxtb	r4, r5
 8015e2c:	2d09      	cmp	r5, #9
 8015e2e:	bfd4      	ite	le
 8015e30:	3430      	addle	r4, #48	; 0x30
 8015e32:	3457      	addgt	r4, #87	; 0x57
 8015e34:	b2e4      	uxtb	r4, r4
 8015e36:	558c      	strb	r4, [r1, r6]
 8015e38:	1e4c      	subs	r4, r1, #1
 8015e3a:	b92f      	cbnz	r7, 8015e48 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8015e3c:	4431      	add	r1, r6
 8015e3e:	4660      	mov	r0, ip
 8015e40:	f7ff ffd5 	bl	8015dee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8015e44:	b00b      	add	sp, #44	; 0x2c
 8015e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e48:	4621      	mov	r1, r4
 8015e4a:	e7e9      	b.n	8015e20 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08015e4c <_ZN8touchgfx7Unicode4itoaElPtti>:
 8015e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e4e:	4607      	mov	r7, r0
 8015e50:	b08b      	sub	sp, #44	; 0x2c
 8015e52:	4608      	mov	r0, r1
 8015e54:	b341      	cbz	r1, 8015ea8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8015e56:	1e99      	subs	r1, r3, #2
 8015e58:	2922      	cmp	r1, #34	; 0x22
 8015e5a:	d825      	bhi.n	8015ea8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8015e5c:	2100      	movs	r1, #0
 8015e5e:	463c      	mov	r4, r7
 8015e60:	261f      	movs	r6, #31
 8015e62:	f10d 0c04 	add.w	ip, sp, #4
 8015e66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8015e6a:	1e71      	subs	r1, r6, #1
 8015e6c:	fb94 fef3 	sdiv	lr, r4, r3
 8015e70:	fb03 441e 	mls	r4, r3, lr, r4
 8015e74:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8015e78:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8015e7c:	b2ec      	uxtb	r4, r5
 8015e7e:	2d09      	cmp	r5, #9
 8015e80:	bfd4      	ite	le
 8015e82:	3430      	addle	r4, #48	; 0x30
 8015e84:	3457      	addgt	r4, #87	; 0x57
 8015e86:	b2e4      	uxtb	r4, r4
 8015e88:	f80c 4006 	strb.w	r4, [ip, r6]
 8015e8c:	4674      	mov	r4, lr
 8015e8e:	b96c      	cbnz	r4, 8015eac <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8015e90:	2f00      	cmp	r7, #0
 8015e92:	da05      	bge.n	8015ea0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8015e94:	ab0a      	add	r3, sp, #40	; 0x28
 8015e96:	4419      	add	r1, r3
 8015e98:	232d      	movs	r3, #45	; 0x2d
 8015e9a:	f801 3c24 	strb.w	r3, [r1, #-36]
 8015e9e:	1eb1      	subs	r1, r6, #2
 8015ea0:	3101      	adds	r1, #1
 8015ea2:	4461      	add	r1, ip
 8015ea4:	f7ff ffa3 	bl	8015dee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8015ea8:	b00b      	add	sp, #44	; 0x2c
 8015eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eac:	460e      	mov	r6, r1
 8015eae:	e7dc      	b.n	8015e6a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08015eb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8015eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	b085      	sub	sp, #20
 8015eb6:	4691      	mov	r9, r2
 8015eb8:	6802      	ldr	r2, [r0, #0]
 8015eba:	4688      	mov	r8, r1
 8015ebc:	461c      	mov	r4, r3
 8015ebe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8015ec2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015ec6:	4683      	mov	fp, r0
 8015ec8:	4610      	mov	r0, r2
 8015eca:	9103      	str	r1, [sp, #12]
 8015ecc:	9302      	str	r3, [sp, #8]
 8015ece:	9201      	str	r2, [sp, #4]
 8015ed0:	f7ff ff80 	bl	8015dd4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8015ed4:	f1b8 0f00 	cmp.w	r8, #0
 8015ed8:	bf0c      	ite	eq
 8015eda:	4684      	moveq	ip, r0
 8015edc:	f100 0c01 	addne.w	ip, r0, #1
 8015ee0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8015ee4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8015ee8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015eea:	fa1f fc8c 	uxth.w	ip, ip
 8015eee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015ef0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8015ef4:	9903      	ldr	r1, [sp, #12]
 8015ef6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015efa:	d041      	beq.n	8015f80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8015efc:	d834      	bhi.n	8015f68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8015efe:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8015f02:	d059      	beq.n	8015fb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8015f04:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8015f08:	d03a      	beq.n	8015f80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8015f0a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8015f0e:	d034      	beq.n	8015f7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8015f10:	2400      	movs	r4, #0
 8015f12:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8015f16:	3a01      	subs	r2, #1
 8015f18:	b169      	cbz	r1, 8015f36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015f1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015f1c:	458c      	cmp	ip, r1
 8015f1e:	da09      	bge.n	8015f34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8015f20:	eba1 010c 	sub.w	r1, r1, ip
 8015f24:	b289      	uxth	r1, r1
 8015f26:	b933      	cbnz	r3, 8015f36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015f28:	2e00      	cmp	r6, #0
 8015f2a:	d051      	beq.n	8015fd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d04f      	beq.n	8015fd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8015f30:	440c      	add	r4, r1
 8015f32:	b2a4      	uxth	r4, r4
 8015f34:	2100      	movs	r1, #0
 8015f36:	682b      	ldr	r3, [r5, #0]
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	da07      	bge.n	8015f4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8015f3c:	f1b8 0f00 	cmp.w	r8, #0
 8015f40:	d004      	beq.n	8015f4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8015f42:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8015f46:	682b      	ldr	r3, [r5, #0]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	602b      	str	r3, [r5, #0]
 8015f4c:	2730      	movs	r7, #48	; 0x30
 8015f4e:	2c00      	cmp	r4, #0
 8015f50:	d04e      	beq.n	8015ff0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015f52:	682e      	ldr	r6, [r5, #0]
 8015f54:	3c01      	subs	r4, #1
 8015f56:	42b2      	cmp	r2, r6
 8015f58:	b2a4      	uxth	r4, r4
 8015f5a:	dd49      	ble.n	8015ff0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015f5c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8015f60:	682b      	ldr	r3, [r5, #0]
 8015f62:	3301      	adds	r3, #1
 8015f64:	602b      	str	r3, [r5, #0]
 8015f66:	e7f2      	b.n	8015f4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8015f68:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8015f6c:	d01d      	beq.n	8015faa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8015f6e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8015f72:	d002      	beq.n	8015f7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8015f74:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8015f78:	e7c9      	b.n	8015f0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8015f7a:	4684      	mov	ip, r0
 8015f7c:	f04f 0800 	mov.w	r8, #0
 8015f80:	2c00      	cmp	r4, #0
 8015f82:	d0c6      	beq.n	8015f12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015f84:	b947      	cbnz	r7, 8015f98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8015f86:	2801      	cmp	r0, #1
 8015f88:	d106      	bne.n	8015f98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8015f8a:	8814      	ldrh	r4, [r2, #0]
 8015f8c:	2c30      	cmp	r4, #48	; 0x30
 8015f8e:	bf02      	ittt	eq
 8015f90:	3202      	addeq	r2, #2
 8015f92:	4638      	moveq	r0, r7
 8015f94:	f8cb 2000 	streq.w	r2, [fp]
 8015f98:	45bc      	cmp	ip, r7
 8015f9a:	da14      	bge.n	8015fc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8015f9c:	b2bf      	uxth	r7, r7
 8015f9e:	eba7 040c 	sub.w	r4, r7, ip
 8015fa2:	46bc      	mov	ip, r7
 8015fa4:	b2a4      	uxth	r4, r4
 8015fa6:	2600      	movs	r6, #0
 8015fa8:	e7b3      	b.n	8015f12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015faa:	4684      	mov	ip, r0
 8015fac:	b16c      	cbz	r4, 8015fca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8015fae:	42b8      	cmp	r0, r7
 8015fb0:	dd00      	ble.n	8015fb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8015fb2:	b2b8      	uxth	r0, r7
 8015fb4:	2400      	movs	r4, #0
 8015fb6:	e003      	b.n	8015fc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8015fb8:	f04f 0c01 	mov.w	ip, #1
 8015fbc:	2400      	movs	r4, #0
 8015fbe:	4660      	mov	r0, ip
 8015fc0:	4626      	mov	r6, r4
 8015fc2:	46a0      	mov	r8, r4
 8015fc4:	e7a5      	b.n	8015f12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015fc6:	2400      	movs	r4, #0
 8015fc8:	e7ed      	b.n	8015fa6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8015fca:	4626      	mov	r6, r4
 8015fcc:	46a0      	mov	r8, r4
 8015fce:	e7a0      	b.n	8015f12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015fd0:	2900      	cmp	r1, #0
 8015fd2:	d0b0      	beq.n	8015f36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015fd4:	2720      	movs	r7, #32
 8015fd6:	682e      	ldr	r6, [r5, #0]
 8015fd8:	2900      	cmp	r1, #0
 8015fda:	d0ac      	beq.n	8015f36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015fdc:	3901      	subs	r1, #1
 8015fde:	4296      	cmp	r6, r2
 8015fe0:	b289      	uxth	r1, r1
 8015fe2:	daa7      	bge.n	8015f34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8015fe4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8015fe8:	682b      	ldr	r3, [r5, #0]
 8015fea:	3301      	adds	r3, #1
 8015fec:	602b      	str	r3, [r5, #0]
 8015fee:	e7f2      	b.n	8015fd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8015ff0:	b188      	cbz	r0, 8016016 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8015ff2:	682b      	ldr	r3, [r5, #0]
 8015ff4:	3801      	subs	r0, #1
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	b280      	uxth	r0, r0
 8015ffa:	dd0c      	ble.n	8016016 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8015ffc:	f8db 3000 	ldr.w	r3, [fp]
 8016000:	1c9c      	adds	r4, r3, #2
 8016002:	f8cb 4000 	str.w	r4, [fp]
 8016006:	881c      	ldrh	r4, [r3, #0]
 8016008:	682b      	ldr	r3, [r5, #0]
 801600a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801600e:	682b      	ldr	r3, [r5, #0]
 8016010:	3301      	adds	r3, #1
 8016012:	602b      	str	r3, [r5, #0]
 8016014:	e7ec      	b.n	8015ff0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8016016:	2620      	movs	r6, #32
 8016018:	b151      	cbz	r1, 8016030 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801601a:	6828      	ldr	r0, [r5, #0]
 801601c:	3901      	subs	r1, #1
 801601e:	4282      	cmp	r2, r0
 8016020:	b289      	uxth	r1, r1
 8016022:	dd05      	ble.n	8016030 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8016024:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8016028:	682b      	ldr	r3, [r5, #0]
 801602a:	3301      	adds	r3, #1
 801602c:	602b      	str	r3, [r5, #0]
 801602e:	e7f3      	b.n	8016018 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8016030:	b005      	add	sp, #20
 8016032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8016036:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801603a:	2400      	movs	r4, #0
 801603c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8016040:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8016044:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8016048:	8014      	strh	r4, [r2, #0]
 801604a:	701c      	strb	r4, [r3, #0]
 801604c:	f888 4000 	strb.w	r4, [r8]
 8016050:	f88c 4000 	strb.w	r4, [ip]
 8016054:	f88e 4000 	strb.w	r4, [lr]
 8016058:	703c      	strb	r4, [r7, #0]
 801605a:	6804      	ldr	r4, [r0, #0]
 801605c:	b1a4      	cbz	r4, 8016088 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801605e:	8824      	ldrh	r4, [r4, #0]
 8016060:	f04f 0901 	mov.w	r9, #1
 8016064:	b314      	cbz	r4, 80160ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8016066:	2c2b      	cmp	r4, #43	; 0x2b
 8016068:	d001      	beq.n	801606e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801606a:	2c20      	cmp	r4, #32
 801606c:	d110      	bne.n	8016090 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801606e:	8014      	strh	r4, [r2, #0]
 8016070:	6804      	ldr	r4, [r0, #0]
 8016072:	b10c      	cbz	r4, 8016078 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8016074:	3402      	adds	r4, #2
 8016076:	6004      	str	r4, [r0, #0]
 8016078:	680c      	ldr	r4, [r1, #0]
 801607a:	b10c      	cbz	r4, 8016080 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801607c:	3401      	adds	r4, #1
 801607e:	600c      	str	r4, [r1, #0]
 8016080:	6804      	ldr	r4, [r0, #0]
 8016082:	b17c      	cbz	r4, 80160a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8016084:	8824      	ldrh	r4, [r4, #0]
 8016086:	e7ed      	b.n	8016064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8016088:	680c      	ldr	r4, [r1, #0]
 801608a:	b17c      	cbz	r4, 80160ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801608c:	7824      	ldrb	r4, [r4, #0]
 801608e:	e7e7      	b.n	8016060 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8016090:	2c2d      	cmp	r4, #45	; 0x2d
 8016092:	d102      	bne.n	801609a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8016094:	f883 9000 	strb.w	r9, [r3]
 8016098:	e7ea      	b.n	8016070 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801609a:	2c23      	cmp	r4, #35	; 0x23
 801609c:	d107      	bne.n	80160ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801609e:	f888 9000 	strb.w	r9, [r8]
 80160a2:	e7e5      	b.n	8016070 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80160a4:	680c      	ldr	r4, [r1, #0]
 80160a6:	b10c      	cbz	r4, 80160ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80160a8:	7824      	ldrb	r4, [r4, #0]
 80160aa:	e7db      	b.n	8016064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80160ac:	2400      	movs	r4, #0
 80160ae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80160b2:	2b09      	cmp	r3, #9
 80160b4:	d901      	bls.n	80160ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80160b6:	2c2a      	cmp	r4, #42	; 0x2a
 80160b8:	d122      	bne.n	8016100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80160ba:	2301      	movs	r3, #1
 80160bc:	2c30      	cmp	r4, #48	; 0x30
 80160be:	f88e 3000 	strb.w	r3, [lr]
 80160c2:	d10d      	bne.n	80160e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80160c4:	f88c 3000 	strb.w	r3, [ip]
 80160c8:	6803      	ldr	r3, [r0, #0]
 80160ca:	b10b      	cbz	r3, 80160d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80160cc:	3302      	adds	r3, #2
 80160ce:	6003      	str	r3, [r0, #0]
 80160d0:	680b      	ldr	r3, [r1, #0]
 80160d2:	b10b      	cbz	r3, 80160d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80160d4:	3301      	adds	r3, #1
 80160d6:	600b      	str	r3, [r1, #0]
 80160d8:	6803      	ldr	r3, [r0, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d02f      	beq.n	801613e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80160de:	881c      	ldrh	r4, [r3, #0]
 80160e0:	2c2a      	cmp	r4, #42	; 0x2a
 80160e2:	d135      	bne.n	8016150 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80160e4:	f04f 33ff 	mov.w	r3, #4294967295
 80160e8:	6033      	str	r3, [r6, #0]
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	b10b      	cbz	r3, 80160f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80160ee:	3302      	adds	r3, #2
 80160f0:	6003      	str	r3, [r0, #0]
 80160f2:	680b      	ldr	r3, [r1, #0]
 80160f4:	b10b      	cbz	r3, 80160fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80160f6:	3301      	adds	r3, #1
 80160f8:	600b      	str	r3, [r1, #0]
 80160fa:	6803      	ldr	r3, [r0, #0]
 80160fc:	b31b      	cbz	r3, 8016146 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80160fe:	881c      	ldrh	r4, [r3, #0]
 8016100:	2c2e      	cmp	r4, #46	; 0x2e
 8016102:	d11a      	bne.n	801613a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016104:	2301      	movs	r3, #1
 8016106:	703b      	strb	r3, [r7, #0]
 8016108:	6803      	ldr	r3, [r0, #0]
 801610a:	b10b      	cbz	r3, 8016110 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801610c:	3302      	adds	r3, #2
 801610e:	6003      	str	r3, [r0, #0]
 8016110:	680b      	ldr	r3, [r1, #0]
 8016112:	b10b      	cbz	r3, 8016118 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8016114:	3301      	adds	r3, #1
 8016116:	600b      	str	r3, [r1, #0]
 8016118:	6803      	ldr	r3, [r0, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d036      	beq.n	801618c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801611e:	881b      	ldrh	r3, [r3, #0]
 8016120:	2b2a      	cmp	r3, #42	; 0x2a
 8016122:	d137      	bne.n	8016194 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016124:	f04f 33ff 	mov.w	r3, #4294967295
 8016128:	602b      	str	r3, [r5, #0]
 801612a:	6803      	ldr	r3, [r0, #0]
 801612c:	b10b      	cbz	r3, 8016132 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801612e:	3302      	adds	r3, #2
 8016130:	6003      	str	r3, [r0, #0]
 8016132:	680b      	ldr	r3, [r1, #0]
 8016134:	b10b      	cbz	r3, 801613a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8016136:	3301      	adds	r3, #1
 8016138:	600b      	str	r3, [r1, #0]
 801613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801613e:	680c      	ldr	r4, [r1, #0]
 8016140:	b134      	cbz	r4, 8016150 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8016142:	7824      	ldrb	r4, [r4, #0]
 8016144:	e7cc      	b.n	80160e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8016146:	680b      	ldr	r3, [r1, #0]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d0f6      	beq.n	801613a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801614c:	781c      	ldrb	r4, [r3, #0]
 801614e:	e7d7      	b.n	8016100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016150:	2300      	movs	r3, #0
 8016152:	220a      	movs	r2, #10
 8016154:	6033      	str	r3, [r6, #0]
 8016156:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801615a:	fa1f f38c 	uxth.w	r3, ip
 801615e:	2b09      	cmp	r3, #9
 8016160:	d8ce      	bhi.n	8016100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8016162:	6833      	ldr	r3, [r6, #0]
 8016164:	fb02 c303 	mla	r3, r2, r3, ip
 8016168:	6033      	str	r3, [r6, #0]
 801616a:	6803      	ldr	r3, [r0, #0]
 801616c:	b10b      	cbz	r3, 8016172 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801616e:	3302      	adds	r3, #2
 8016170:	6003      	str	r3, [r0, #0]
 8016172:	680b      	ldr	r3, [r1, #0]
 8016174:	b10b      	cbz	r3, 801617a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8016176:	3301      	adds	r3, #1
 8016178:	600b      	str	r3, [r1, #0]
 801617a:	6803      	ldr	r3, [r0, #0]
 801617c:	b10b      	cbz	r3, 8016182 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801617e:	881c      	ldrh	r4, [r3, #0]
 8016180:	e7e9      	b.n	8016156 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016182:	680c      	ldr	r4, [r1, #0]
 8016184:	2c00      	cmp	r4, #0
 8016186:	d0e6      	beq.n	8016156 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8016188:	7824      	ldrb	r4, [r4, #0]
 801618a:	e7e4      	b.n	8016156 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801618c:	680b      	ldr	r3, [r1, #0]
 801618e:	b10b      	cbz	r3, 8016194 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	e7c5      	b.n	8016120 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8016194:	2200      	movs	r2, #0
 8016196:	240a      	movs	r4, #10
 8016198:	602a      	str	r2, [r5, #0]
 801619a:	3b30      	subs	r3, #48	; 0x30
 801619c:	682a      	ldr	r2, [r5, #0]
 801619e:	b29e      	uxth	r6, r3
 80161a0:	2e09      	cmp	r6, #9
 80161a2:	d813      	bhi.n	80161cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80161a4:	fb04 3302 	mla	r3, r4, r2, r3
 80161a8:	602b      	str	r3, [r5, #0]
 80161aa:	6803      	ldr	r3, [r0, #0]
 80161ac:	b10b      	cbz	r3, 80161b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80161ae:	3302      	adds	r3, #2
 80161b0:	6003      	str	r3, [r0, #0]
 80161b2:	680b      	ldr	r3, [r1, #0]
 80161b4:	b10b      	cbz	r3, 80161ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80161b6:	3301      	adds	r3, #1
 80161b8:	600b      	str	r3, [r1, #0]
 80161ba:	6803      	ldr	r3, [r0, #0]
 80161bc:	b10b      	cbz	r3, 80161c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	e7eb      	b.n	801619a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80161c2:	680b      	ldr	r3, [r1, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d0e8      	beq.n	801619a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	e7e6      	b.n	801619a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80161cc:	2a06      	cmp	r2, #6
 80161ce:	bfa8      	it	ge
 80161d0:	2206      	movge	r2, #6
 80161d2:	602a      	str	r2, [r5, #0]
 80161d4:	e7b1      	b.n	801613a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080161d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80161d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161da:	b0a3      	sub	sp, #140	; 0x8c
 80161dc:	2600      	movs	r6, #0
 80161de:	4607      	mov	r7, r0
 80161e0:	4688      	mov	r8, r1
 80161e2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80161e6:	4631      	mov	r1, r6
 80161e8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80161ea:	4648      	mov	r0, r9
 80161ec:	960d      	str	r6, [sp, #52]	; 0x34
 80161ee:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80161f2:	2242      	movs	r2, #66	; 0x42
 80161f4:	f008 fd50 	bl	801ec98 <memset>
 80161f8:	b15f      	cbz	r7, 8016212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80161fa:	f108 3aff 	add.w	sl, r8, #4294967295
 80161fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016202:	b152      	cbz	r2, 801621a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8016204:	8812      	ldrh	r2, [r2, #0]
 8016206:	b10a      	cbz	r2, 801620c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016208:	459a      	cmp	sl, r3
 801620a:	dc2e      	bgt.n	801626a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801620c:	2200      	movs	r2, #0
 801620e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016212:	4638      	mov	r0, r7
 8016214:	b023      	add	sp, #140	; 0x8c
 8016216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621a:	9a08      	ldr	r2, [sp, #32]
 801621c:	2a00      	cmp	r2, #0
 801621e:	d0f5      	beq.n	801620c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8016220:	7812      	ldrb	r2, [r2, #0]
 8016222:	e7f0      	b.n	8016206 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8016224:	2d00      	cmp	r5, #0
 8016226:	d0ea      	beq.n	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016228:	782a      	ldrb	r2, [r5, #0]
 801622a:	b142      	cbz	r2, 801623e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801622c:	2a25      	cmp	r2, #37	; 0x25
 801622e:	d001      	beq.n	8016234 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8016230:	459a      	cmp	sl, r3
 8016232:	dc08      	bgt.n	8016246 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8016234:	f1bb 0f00 	cmp.w	fp, #0
 8016238:	d121      	bne.n	801627e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801623a:	2d00      	cmp	r5, #0
 801623c:	d0df      	beq.n	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801623e:	782a      	ldrb	r2, [r5, #0]
 8016240:	f04f 0b00 	mov.w	fp, #0
 8016244:	e01d      	b.n	8016282 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8016246:	f1bb 0f00 	cmp.w	fp, #0
 801624a:	d077      	beq.n	801633c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801624c:	f8bb 2000 	ldrh.w	r2, [fp]
 8016250:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8016254:	f1bb 0f00 	cmp.w	fp, #0
 8016258:	d002      	beq.n	8016260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801625a:	f10b 0202 	add.w	r2, fp, #2
 801625e:	9209      	str	r2, [sp, #36]	; 0x24
 8016260:	b10d      	cbz	r5, 8016266 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8016262:	3501      	adds	r5, #1
 8016264:	9508      	str	r5, [sp, #32]
 8016266:	3301      	adds	r3, #1
 8016268:	930d      	str	r3, [sp, #52]	; 0x34
 801626a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801626c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8016270:	f1bb 0f00 	cmp.w	fp, #0
 8016274:	d0d6      	beq.n	8016224 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8016276:	f8bb 2000 	ldrh.w	r2, [fp]
 801627a:	2a00      	cmp	r2, #0
 801627c:	d1d6      	bne.n	801622c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801627e:	f8bb 2000 	ldrh.w	r2, [fp]
 8016282:	2a00      	cmp	r2, #0
 8016284:	d0bb      	beq.n	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8016286:	459a      	cmp	sl, r3
 8016288:	ddb9      	ble.n	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801628a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801628e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8016292:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8016296:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801629a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801629e:	960e      	str	r6, [sp, #56]	; 0x38
 80162a0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80162a4:	960f      	str	r6, [sp, #60]	; 0x3c
 80162a6:	f1bb 0f00 	cmp.w	fp, #0
 80162aa:	d002      	beq.n	80162b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80162ac:	f10b 0302 	add.w	r3, fp, #2
 80162b0:	9309      	str	r3, [sp, #36]	; 0x24
 80162b2:	b10d      	cbz	r5, 80162b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80162b4:	1c6b      	adds	r3, r5, #1
 80162b6:	9308      	str	r3, [sp, #32]
 80162b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80162ba:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80162be:	a908      	add	r1, sp, #32
 80162c0:	a809      	add	r0, sp, #36	; 0x24
 80162c2:	9305      	str	r3, [sp, #20]
 80162c4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80162c8:	9304      	str	r3, [sp, #16]
 80162ca:	ab0e      	add	r3, sp, #56	; 0x38
 80162cc:	9303      	str	r3, [sp, #12]
 80162ce:	ab0c      	add	r3, sp, #48	; 0x30
 80162d0:	9302      	str	r3, [sp, #8]
 80162d2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80162d6:	9301      	str	r3, [sp, #4]
 80162d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80162dc:	9300      	str	r3, [sp, #0]
 80162de:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80162e2:	f7ff fea8 	bl	8016036 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80162e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	bfbf      	itttt	lt
 80162ec:	6823      	ldrlt	r3, [r4, #0]
 80162ee:	3404      	addlt	r4, #4
 80162f0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80162f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80162f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	bfbe      	ittt	lt
 80162fc:	6823      	ldrlt	r3, [r4, #0]
 80162fe:	3404      	addlt	r4, #4
 8016300:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8016304:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8016308:	bfb8      	it	lt
 801630a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801630c:	b1d9      	cbz	r1, 8016346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801630e:	880b      	ldrh	r3, [r1, #0]
 8016310:	2b69      	cmp	r3, #105	; 0x69
 8016312:	d01f      	beq.n	8016354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016314:	d82f      	bhi.n	8016376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8016316:	2b58      	cmp	r3, #88	; 0x58
 8016318:	d01c      	beq.n	8016354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801631a:	d818      	bhi.n	801634e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801631c:	2b25      	cmp	r3, #37	; 0x25
 801631e:	d034      	beq.n	801638a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8016320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016322:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8016326:	f1bb 0f00 	cmp.w	fp, #0
 801632a:	f000 80b7 	beq.w	801649c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801632e:	f8bb 5000 	ldrh.w	r5, [fp]
 8016332:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8016336:	3301      	adds	r3, #1
 8016338:	930d      	str	r3, [sp, #52]	; 0x34
 801633a:	e029      	b.n	8016390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801633c:	b10d      	cbz	r5, 8016342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801633e:	782a      	ldrb	r2, [r5, #0]
 8016340:	e786      	b.n	8016250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016342:	462a      	mov	r2, r5
 8016344:	e784      	b.n	8016250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8016346:	2a00      	cmp	r2, #0
 8016348:	d0ea      	beq.n	8016320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801634a:	7813      	ldrb	r3, [r2, #0]
 801634c:	e7e0      	b.n	8016310 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801634e:	3b63      	subs	r3, #99	; 0x63
 8016350:	2b01      	cmp	r3, #1
 8016352:	d8e5      	bhi.n	8016320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016354:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8016358:	b329      	cbz	r1, 80163a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801635a:	880b      	ldrh	r3, [r1, #0]
 801635c:	2b69      	cmp	r3, #105	; 0x69
 801635e:	d063      	beq.n	8016428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8016360:	d825      	bhi.n	80163ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8016362:	2b63      	cmp	r3, #99	; 0x63
 8016364:	d038      	beq.n	80163d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8016366:	2b64      	cmp	r3, #100	; 0x64
 8016368:	d05e      	beq.n	8016428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801636a:	2b58      	cmp	r3, #88	; 0x58
 801636c:	d07a      	beq.n	8016464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801636e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8016372:	4625      	mov	r5, r4
 8016374:	e036      	b.n	80163e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016376:	2b73      	cmp	r3, #115	; 0x73
 8016378:	d0ec      	beq.n	8016354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801637a:	d802      	bhi.n	8016382 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801637c:	2b6f      	cmp	r3, #111	; 0x6f
 801637e:	d1cf      	bne.n	8016320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8016380:	e7e8      	b.n	8016354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016382:	2b75      	cmp	r3, #117	; 0x75
 8016384:	d0e6      	beq.n	8016354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8016386:	2b78      	cmp	r3, #120	; 0x78
 8016388:	e7f9      	b.n	801637e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801638a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801638c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8016390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016392:	b10b      	cbz	r3, 8016398 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8016394:	3302      	adds	r3, #2
 8016396:	9309      	str	r3, [sp, #36]	; 0x24
 8016398:	9b08      	ldr	r3, [sp, #32]
 801639a:	2b00      	cmp	r3, #0
 801639c:	f43f af2f 	beq.w	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80163a0:	3301      	adds	r3, #1
 80163a2:	9308      	str	r3, [sp, #32]
 80163a4:	e72b      	b.n	80161fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80163a6:	2a00      	cmp	r2, #0
 80163a8:	d0e1      	beq.n	801636e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80163aa:	7813      	ldrb	r3, [r2, #0]
 80163ac:	e7d6      	b.n	801635c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80163ae:	2b73      	cmp	r3, #115	; 0x73
 80163b0:	d036      	beq.n	8016420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80163b2:	d807      	bhi.n	80163c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80163b4:	2b6f      	cmp	r3, #111	; 0x6f
 80163b6:	d1da      	bne.n	801636e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80163b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163ba:	1d25      	adds	r5, r4, #4
 80163bc:	2308      	movs	r3, #8
 80163be:	eba8 0202 	sub.w	r2, r8, r2
 80163c2:	e049      	b.n	8016458 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80163c4:	2b75      	cmp	r3, #117	; 0x75
 80163c6:	d042      	beq.n	801644e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80163c8:	2b78      	cmp	r3, #120	; 0x78
 80163ca:	d1d0      	bne.n	801636e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80163cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163ce:	1d25      	adds	r5, r4, #4
 80163d0:	2310      	movs	r3, #16
 80163d2:	eba8 0202 	sub.w	r2, r8, r2
 80163d6:	e03f      	b.n	8016458 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	1d25      	adds	r5, r4, #4
 80163dc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80163e0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80163e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163e6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d051      	beq.n	8016492 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80163ee:	881a      	ldrh	r2, [r3, #0]
 80163f0:	a80d      	add	r0, sp, #52	; 0x34
 80163f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80163f6:	462c      	mov	r4, r5
 80163f8:	9005      	str	r0, [sp, #20]
 80163fa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80163fe:	9004      	str	r0, [sp, #16]
 8016400:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016402:	9003      	str	r0, [sp, #12]
 8016404:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8016408:	9002      	str	r0, [sp, #8]
 801640a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801640c:	9001      	str	r0, [sp, #4]
 801640e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8016412:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8016416:	9000      	str	r0, [sp, #0]
 8016418:	a810      	add	r0, sp, #64	; 0x40
 801641a:	f7ff fd49 	bl	8015eb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801641e:	e7b7      	b.n	8016390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8016420:	1d25      	adds	r5, r4, #4
 8016422:	6823      	ldr	r3, [r4, #0]
 8016424:	9310      	str	r3, [sp, #64]	; 0x40
 8016426:	e7dd      	b.n	80163e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801642a:	230a      	movs	r3, #10
 801642c:	4649      	mov	r1, r9
 801642e:	6820      	ldr	r0, [r4, #0]
 8016430:	eba8 0202 	sub.w	r2, r8, r2
 8016434:	1d25      	adds	r5, r4, #4
 8016436:	b292      	uxth	r2, r2
 8016438:	f7ff fd08 	bl	8015e4c <_ZN8touchgfx7Unicode4itoaElPtti>
 801643c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016440:	2b2d      	cmp	r3, #45	; 0x2d
 8016442:	d1cf      	bne.n	80163e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016444:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801644a:	3302      	adds	r3, #2
 801644c:	e7ea      	b.n	8016424 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801644e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016450:	1d25      	adds	r5, r4, #4
 8016452:	230a      	movs	r3, #10
 8016454:	eba8 0202 	sub.w	r2, r8, r2
 8016458:	b292      	uxth	r2, r2
 801645a:	4649      	mov	r1, r9
 801645c:	6820      	ldr	r0, [r4, #0]
 801645e:	f7ff fcd7 	bl	8015e10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8016462:	e7bf      	b.n	80163e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016466:	2310      	movs	r3, #16
 8016468:	4649      	mov	r1, r9
 801646a:	6820      	ldr	r0, [r4, #0]
 801646c:	eba8 0202 	sub.w	r2, r8, r2
 8016470:	1d25      	adds	r5, r4, #4
 8016472:	b292      	uxth	r2, r2
 8016474:	f7ff fccc 	bl	8015e10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8016478:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801647c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016480:	2b00      	cmp	r3, #0
 8016482:	d0af      	beq.n	80163e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8016484:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8016488:	2919      	cmp	r1, #25
 801648a:	d8f7      	bhi.n	801647c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801648c:	3b20      	subs	r3, #32
 801648e:	8013      	strh	r3, [r2, #0]
 8016490:	e7f4      	b.n	801647c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8016492:	9a08      	ldr	r2, [sp, #32]
 8016494:	2a00      	cmp	r2, #0
 8016496:	d0ab      	beq.n	80163f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8016498:	7812      	ldrb	r2, [r2, #0]
 801649a:	e7a9      	b.n	80163f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801649c:	2d00      	cmp	r5, #0
 801649e:	f43f af48 	beq.w	8016332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80164a2:	782d      	ldrb	r5, [r5, #0]
 80164a4:	e745      	b.n	8016332 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080164a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80164a6:	b507      	push	{r0, r1, r2, lr}
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	4613      	mov	r3, r2
 80164ac:	2200      	movs	r2, #0
 80164ae:	f7ff fe92 	bl	80161d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80164b2:	b003      	add	sp, #12
 80164b4:	f85d fb04 	ldr.w	pc, [sp], #4

080164b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80164b8:	b40c      	push	{r2, r3}
 80164ba:	b507      	push	{r0, r1, r2, lr}
 80164bc:	ab04      	add	r3, sp, #16
 80164be:	f853 2b04 	ldr.w	r2, [r3], #4
 80164c2:	9301      	str	r3, [sp, #4]
 80164c4:	f7ff ffef 	bl	80164a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80164c8:	b003      	add	sp, #12
 80164ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80164ce:	b002      	add	sp, #8
 80164d0:	4770      	bx	lr
	...

080164d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80164d4:	4b01      	ldr	r3, [pc, #4]	; (80164dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80164d6:	6018      	str	r0, [r3, #0]
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop
 80164dc:	20011978 	.word	0x20011978

080164e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80164e0:	4b06      	ldr	r3, [pc, #24]	; (80164fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80164e2:	881a      	ldrh	r2, [r3, #0]
 80164e4:	4282      	cmp	r2, r0
 80164e6:	d807      	bhi.n	80164f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80164e8:	4b05      	ldr	r3, [pc, #20]	; (8016500 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80164ea:	881b      	ldrh	r3, [r3, #0]
 80164ec:	4413      	add	r3, r2
 80164ee:	4298      	cmp	r0, r3
 80164f0:	bfac      	ite	ge
 80164f2:	2000      	movge	r0, #0
 80164f4:	2001      	movlt	r0, #1
 80164f6:	4770      	bx	lr
 80164f8:	2000      	movs	r0, #0
 80164fa:	4770      	bx	lr
 80164fc:	20011998 	.word	0x20011998
 8016500:	2001199c 	.word	0x2001199c

08016504 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8016504:	b508      	push	{r3, lr}
 8016506:	4601      	mov	r1, r0
 8016508:	f7ff ffea 	bl	80164e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801650c:	b118      	cbz	r0, 8016516 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801650e:	4b02      	ldr	r3, [pc, #8]	; (8016518 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8016516:	bd08      	pop	{r3, pc}
 8016518:	2001197c 	.word	0x2001197c

0801651c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801651c:	b538      	push	{r3, r4, r5, lr}
 801651e:	4604      	mov	r4, r0
 8016520:	f7ff ffde 	bl	80164e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016524:	b188      	cbz	r0, 801654a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8016526:	4b09      	ldr	r3, [pc, #36]	; (801654c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8016528:	881a      	ldrh	r2, [r3, #0]
 801652a:	4b09      	ldr	r3, [pc, #36]	; (8016550 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801652c:	1aa4      	subs	r4, r4, r2
 801652e:	220e      	movs	r2, #14
 8016530:	681d      	ldr	r5, [r3, #0]
 8016532:	4362      	muls	r2, r4
 8016534:	18ac      	adds	r4, r5, r2
 8016536:	7b23      	ldrb	r3, [r4, #12]
 8016538:	f013 0320 	ands.w	r3, r3, #32
 801653c:	bf17      	itett	ne
 801653e:	680b      	ldrne	r3, [r1, #0]
 8016540:	4618      	moveq	r0, r3
 8016542:	50ab      	strne	r3, [r5, r2]
 8016544:	684b      	ldrne	r3, [r1, #4]
 8016546:	bf18      	it	ne
 8016548:	6063      	strne	r3, [r4, #4]
 801654a:	bd38      	pop	{r3, r4, r5, pc}
 801654c:	20011998 	.word	0x20011998
 8016550:	20011980 	.word	0x20011980

08016554 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8016554:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016558:	4606      	mov	r6, r0
 801655a:	460c      	mov	r4, r1
 801655c:	f7ff ffc0 	bl	80164e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016560:	b918      	cbnz	r0, 801656a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8016562:	2000      	movs	r0, #0
 8016564:	b002      	add	sp, #8
 8016566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656a:	4608      	mov	r0, r1
 801656c:	f7f9 fdc7 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016570:	2800      	cmp	r0, #0
 8016572:	d1f6      	bne.n	8016562 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016574:	4b3f      	ldr	r3, [pc, #252]	; (8016674 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8016576:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8016678 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801657a:	881d      	ldrh	r5, [r3, #0]
 801657c:	f8d9 a000 	ldr.w	sl, [r9]
 8016580:	46c8      	mov	r8, r9
 8016582:	1b73      	subs	r3, r6, r5
 8016584:	250e      	movs	r5, #14
 8016586:	435d      	muls	r5, r3
 8016588:	eb0a 0705 	add.w	r7, sl, r5
 801658c:	7b3b      	ldrb	r3, [r7, #12]
 801658e:	f013 0f20 	tst.w	r3, #32
 8016592:	d0e6      	beq.n	8016562 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016594:	4621      	mov	r1, r4
 8016596:	4638      	mov	r0, r7
 8016598:	f7fc ff58 	bl	801344c <_ZNK8touchgfx4Rect8includesERKS0_>
 801659c:	2800      	cmp	r0, #0
 801659e:	d1e1      	bne.n	8016564 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80165a0:	4639      	mov	r1, r7
 80165a2:	4620      	mov	r0, r4
 80165a4:	f7fc ff52 	bl	801344c <_ZNK8touchgfx4Rect8includesERKS0_>
 80165a8:	b108      	cbz	r0, 80165ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80165aa:	4621      	mov	r1, r4
 80165ac:	e020      	b.n	80165f0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80165ae:	f9b4 2000 	ldrsh.w	r2, [r4]
 80165b2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80165b6:	429a      	cmp	r2, r3
 80165b8:	d11e      	bne.n	80165f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80165ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80165be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d118      	bne.n	80165f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80165c6:	6820      	ldr	r0, [r4, #0]
 80165c8:	466b      	mov	r3, sp
 80165ca:	6861      	ldr	r1, [r4, #4]
 80165cc:	c303      	stmia	r3!, {r0, r1}
 80165ce:	4639      	mov	r1, r7
 80165d0:	4668      	mov	r0, sp
 80165d2:	f7fc ff61 	bl	8013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80165d6:	f8d9 3000 	ldr.w	r3, [r9]
 80165da:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80165de:	442b      	add	r3, r5
 80165e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80165e4:	4413      	add	r3, r2
 80165e6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80165ea:	4293      	cmp	r3, r2
 80165ec:	dc04      	bgt.n	80165f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80165ee:	4669      	mov	r1, sp
 80165f0:	4630      	mov	r0, r6
 80165f2:	f7ff ff93 	bl	801651c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80165f6:	e7b5      	b.n	8016564 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80165f8:	f8d8 3000 	ldr.w	r3, [r8]
 80165fc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016600:	442b      	add	r3, r5
 8016602:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016606:	4291      	cmp	r1, r2
 8016608:	d119      	bne.n	801663e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801660a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801660e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8016612:	4291      	cmp	r1, r2
 8016614:	d113      	bne.n	801663e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8016616:	6820      	ldr	r0, [r4, #0]
 8016618:	466a      	mov	r2, sp
 801661a:	6861      	ldr	r1, [r4, #4]
 801661c:	c203      	stmia	r2!, {r0, r1}
 801661e:	4619      	mov	r1, r3
 8016620:	4668      	mov	r0, sp
 8016622:	f7fc ff39 	bl	8013498 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016626:	f8d8 3000 	ldr.w	r3, [r8]
 801662a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801662e:	442b      	add	r3, r5
 8016630:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016634:	4413      	add	r3, r2
 8016636:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801663a:	4293      	cmp	r3, r2
 801663c:	ddd7      	ble.n	80165ee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801663e:	4620      	mov	r0, r4
 8016640:	f7f9 fd5d 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8016644:	b990      	cbnz	r0, 801666c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8016646:	88a7      	ldrh	r7, [r4, #4]
 8016648:	88e3      	ldrh	r3, [r4, #6]
 801664a:	fb17 f703 	smulbb	r7, r7, r3
 801664e:	f8d8 3000 	ldr.w	r3, [r8]
 8016652:	441d      	add	r5, r3
 8016654:	4628      	mov	r0, r5
 8016656:	f7f9 fd52 	bl	80100fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801665a:	b948      	cbnz	r0, 8016670 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801665c:	88ab      	ldrh	r3, [r5, #4]
 801665e:	88ea      	ldrh	r2, [r5, #6]
 8016660:	fb13 f302 	smulbb	r3, r3, r2
 8016664:	42bb      	cmp	r3, r7
 8016666:	f6bf af7c 	bge.w	8016562 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801666a:	e79e      	b.n	80165aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801666c:	2700      	movs	r7, #0
 801666e:	e7ee      	b.n	801664e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8016670:	2300      	movs	r3, #0
 8016672:	e7f7      	b.n	8016664 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8016674:	20011998 	.word	0x20011998
 8016678:	20011980 	.word	0x20011980

0801667c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801667e:	4c24      	ldr	r4, [pc, #144]	; (8016710 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d042      	beq.n	801670c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8016686:	4a23      	ldr	r2, [pc, #140]	; (8016714 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016688:	4d23      	ldr	r5, [pc, #140]	; (8016718 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801668a:	8811      	ldrh	r1, [r2, #0]
 801668c:	f8b5 c000 	ldrh.w	ip, [r5]
 8016690:	4822      	ldr	r0, [pc, #136]	; (801671c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8016692:	4461      	add	r1, ip
 8016694:	1c4a      	adds	r2, r1, #1
 8016696:	008f      	lsls	r7, r1, #2
 8016698:	f022 0201 	bic.w	r2, r2, #1
 801669c:	19de      	adds	r6, r3, r7
 801669e:	0412      	lsls	r2, r2, #16
 80166a0:	6006      	str	r6, [r0, #0]
 80166a2:	4e1f      	ldr	r6, [pc, #124]	; (8016720 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80166a4:	0c12      	lsrs	r2, r2, #16
 80166a6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80166aa:	19da      	adds	r2, r3, r7
 80166ac:	6032      	str	r2, [r6, #0]
 80166ae:	220e      	movs	r2, #14
 80166b0:	fb02 f20c 	mul.w	r2, r2, ip
 80166b4:	3203      	adds	r2, #3
 80166b6:	f022 0203 	bic.w	r2, r2, #3
 80166ba:	443a      	add	r2, r7
 80166bc:	4f19      	ldr	r7, [pc, #100]	; (8016724 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80166be:	4413      	add	r3, r2
 80166c0:	603b      	str	r3, [r7, #0]
 80166c2:	2300      	movs	r3, #0
 80166c4:	4f18      	ldr	r7, [pc, #96]	; (8016728 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80166c6:	469c      	mov	ip, r3
 80166c8:	803b      	strh	r3, [r7, #0]
 80166ca:	4f18      	ldr	r7, [pc, #96]	; (801672c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80166cc:	683f      	ldr	r7, [r7, #0]
 80166ce:	1aba      	subs	r2, r7, r2
 80166d0:	4f17      	ldr	r7, [pc, #92]	; (8016730 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80166d2:	603a      	str	r2, [r7, #0]
 80166d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80166d8:	4a16      	ldr	r2, [pc, #88]	; (8016734 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80166da:	8013      	strh	r3, [r2, #0]
 80166dc:	428b      	cmp	r3, r1
 80166de:	d10d      	bne.n	80166fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80166e0:	882d      	ldrh	r5, [r5, #0]
 80166e2:	2300      	movs	r3, #0
 80166e4:	6830      	ldr	r0, [r6, #0]
 80166e6:	240e      	movs	r4, #14
 80166e8:	429d      	cmp	r5, r3
 80166ea:	d90f      	bls.n	801670c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80166ec:	fb04 0203 	mla	r2, r4, r3, r0
 80166f0:	3301      	adds	r3, #1
 80166f2:	7b11      	ldrb	r1, [r2, #12]
 80166f4:	f36f 1145 	bfc	r1, #5, #1
 80166f8:	7311      	strb	r1, [r2, #12]
 80166fa:	e7f5      	b.n	80166e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80166fc:	6822      	ldr	r2, [r4, #0]
 80166fe:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8016702:	6802      	ldr	r2, [r0, #0]
 8016704:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016708:	3301      	adds	r3, #1
 801670a:	e7e7      	b.n	80166dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801670c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801670e:	bf00      	nop
 8016710:	2001197c 	.word	0x2001197c
 8016714:	20011998 	.word	0x20011998
 8016718:	2001199c 	.word	0x2001199c
 801671c:	20011990 	.word	0x20011990
 8016720:	20011980 	.word	0x20011980
 8016724:	20011988 	.word	0x20011988
 8016728:	2001199a 	.word	0x2001199a
 801672c:	20011984 	.word	0x20011984
 8016730:	20011994 	.word	0x20011994
 8016734:	2001198c 	.word	0x2001198c

08016738 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8016738:	4b06      	ldr	r3, [pc, #24]	; (8016754 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	b943      	cbnz	r3, 8016750 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801673e:	b139      	cbz	r1, 8016750 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8016740:	4b05      	ldr	r3, [pc, #20]	; (8016758 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8016742:	801a      	strh	r2, [r3, #0]
 8016744:	4b05      	ldr	r3, [pc, #20]	; (801675c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8016746:	6019      	str	r1, [r3, #0]
 8016748:	4b05      	ldr	r3, [pc, #20]	; (8016760 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801674a:	6018      	str	r0, [r3, #0]
 801674c:	f7ff bf96 	b.w	801667c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016750:	4770      	bx	lr
 8016752:	bf00      	nop
 8016754:	20011988 	.word	0x20011988
 8016758:	2001199c 	.word	0x2001199c
 801675c:	20011984 	.word	0x20011984
 8016760:	2001197c 	.word	0x2001197c

08016764 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8016764:	b470      	push	{r4, r5, r6}
 8016766:	4c07      	ldr	r4, [pc, #28]	; (8016784 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016768:	4605      	mov	r5, r0
 801676a:	4610      	mov	r0, r2
 801676c:	9a03      	ldr	r2, [sp, #12]
 801676e:	6826      	ldr	r6, [r4, #0]
 8016770:	b936      	cbnz	r6, 8016780 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8016772:	6025      	str	r5, [r4, #0]
 8016774:	4c04      	ldr	r4, [pc, #16]	; (8016788 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8016776:	8021      	strh	r1, [r4, #0]
 8016778:	4619      	mov	r1, r3
 801677a:	bc70      	pop	{r4, r5, r6}
 801677c:	f7ff bfdc 	b.w	8016738 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016780:	bc70      	pop	{r4, r5, r6}
 8016782:	4770      	bx	lr
 8016784:	200119a0 	.word	0x200119a0
 8016788:	20011998 	.word	0x20011998

0801678c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801678c:	4a12      	ldr	r2, [pc, #72]	; (80167d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801678e:	8803      	ldrh	r3, [r0, #0]
 8016790:	8812      	ldrh	r2, [r2, #0]
 8016792:	4293      	cmp	r3, r2
 8016794:	d207      	bcs.n	80167a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8016796:	4a11      	ldr	r2, [pc, #68]	; (80167dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8016798:	2114      	movs	r1, #20
 801679a:	6812      	ldr	r2, [r2, #0]
 801679c:	fb01 2303 	mla	r3, r1, r3, r2
 80167a0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80167a4:	4770      	bx	lr
 80167a6:	490e      	ldr	r1, [pc, #56]	; (80167e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80167a8:	8809      	ldrh	r1, [r1, #0]
 80167aa:	4411      	add	r1, r2
 80167ac:	428b      	cmp	r3, r1
 80167ae:	da04      	bge.n	80167ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80167b0:	1a9b      	subs	r3, r3, r2
 80167b2:	4a0c      	ldr	r2, [pc, #48]	; (80167e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80167b4:	210e      	movs	r1, #14
 80167b6:	6812      	ldr	r2, [r2, #0]
 80167b8:	e7f0      	b.n	801679c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80167ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80167be:	4293      	cmp	r3, r2
 80167c0:	d108      	bne.n	80167d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80167c2:	4b09      	ldr	r3, [pc, #36]	; (80167e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	b91b      	cbnz	r3, 80167d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80167c8:	4b08      	ldr	r3, [pc, #32]	; (80167ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80167ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 80167ce:	4770      	bx	lr
 80167d0:	4b07      	ldr	r3, [pc, #28]	; (80167f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80167d2:	e7fa      	b.n	80167ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80167d4:	2000      	movs	r0, #0
 80167d6:	4770      	bx	lr
 80167d8:	20011998 	.word	0x20011998
 80167dc:	200119a0 	.word	0x200119a0
 80167e0:	2001199c 	.word	0x2001199c
 80167e4:	20011980 	.word	0x20011980
 80167e8:	2001190e 	.word	0x2001190e
 80167ec:	20011910 	.word	0x20011910
 80167f0:	20011912 	.word	0x20011912

080167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80167f4:	4a12      	ldr	r2, [pc, #72]	; (8016840 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80167f6:	8803      	ldrh	r3, [r0, #0]
 80167f8:	8812      	ldrh	r2, [r2, #0]
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d207      	bcs.n	801680e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80167fe:	4a11      	ldr	r2, [pc, #68]	; (8016844 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8016800:	2114      	movs	r1, #20
 8016802:	6812      	ldr	r2, [r2, #0]
 8016804:	fb01 2303 	mla	r3, r1, r3, r2
 8016808:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801680c:	4770      	bx	lr
 801680e:	490e      	ldr	r1, [pc, #56]	; (8016848 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8016810:	8809      	ldrh	r1, [r1, #0]
 8016812:	4411      	add	r1, r2
 8016814:	428b      	cmp	r3, r1
 8016816:	da04      	bge.n	8016822 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8016818:	1a9b      	subs	r3, r3, r2
 801681a:	4a0c      	ldr	r2, [pc, #48]	; (801684c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801681c:	210e      	movs	r1, #14
 801681e:	6812      	ldr	r2, [r2, #0]
 8016820:	e7f0      	b.n	8016804 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8016822:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016826:	4293      	cmp	r3, r2
 8016828:	d108      	bne.n	801683c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801682a:	4b09      	ldr	r3, [pc, #36]	; (8016850 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	b91b      	cbnz	r3, 8016838 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8016830:	4b08      	ldr	r3, [pc, #32]	; (8016854 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8016832:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016836:	4770      	bx	lr
 8016838:	4b07      	ldr	r3, [pc, #28]	; (8016858 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801683a:	e7fa      	b.n	8016832 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801683c:	2000      	movs	r0, #0
 801683e:	4770      	bx	lr
 8016840:	20011998 	.word	0x20011998
 8016844:	200119a0 	.word	0x200119a0
 8016848:	2001199c 	.word	0x2001199c
 801684c:	20011980 	.word	0x20011980
 8016850:	2001190e 	.word	0x2001190e
 8016854:	20011912 	.word	0x20011912
 8016858:	20011910 	.word	0x20011910

0801685c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801685c:	4a1f      	ldr	r2, [pc, #124]	; (80168dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801685e:	b510      	push	{r4, lr}
 8016860:	880b      	ldrh	r3, [r1, #0]
 8016862:	8812      	ldrh	r2, [r2, #0]
 8016864:	4293      	cmp	r3, r2
 8016866:	d213      	bcs.n	8016890 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8016868:	4a1d      	ldr	r2, [pc, #116]	; (80168e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801686a:	2114      	movs	r1, #20
 801686c:	6812      	ldr	r2, [r2, #0]
 801686e:	fb01 2303 	mla	r3, r1, r3, r2
 8016872:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8016876:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801687a:	8a1a      	ldrh	r2, [r3, #16]
 801687c:	8a5b      	ldrh	r3, [r3, #18]
 801687e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016882:	8004      	strh	r4, [r0, #0]
 8016884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016888:	8041      	strh	r1, [r0, #2]
 801688a:	8082      	strh	r2, [r0, #4]
 801688c:	80c3      	strh	r3, [r0, #6]
 801688e:	e00e      	b.n	80168ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016890:	4914      	ldr	r1, [pc, #80]	; (80168e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8016892:	8809      	ldrh	r1, [r1, #0]
 8016894:	4411      	add	r1, r2
 8016896:	428b      	cmp	r3, r1
 8016898:	da0a      	bge.n	80168b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801689a:	1a9b      	subs	r3, r3, r2
 801689c:	4a12      	ldr	r2, [pc, #72]	; (80168e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801689e:	210e      	movs	r1, #14
 80168a0:	6812      	ldr	r2, [r2, #0]
 80168a2:	fb01 2303 	mla	r3, r1, r3, r2
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	6002      	str	r2, [r0, #0]
 80168aa:	685a      	ldr	r2, [r3, #4]
 80168ac:	6042      	str	r2, [r0, #4]
 80168ae:	bd10      	pop	{r4, pc}
 80168b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80168b4:	4293      	cmp	r3, r2
 80168b6:	d10b      	bne.n	80168d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80168b8:	4b0c      	ldr	r3, [pc, #48]	; (80168ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80168ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80168be:	4b0c      	ldr	r3, [pc, #48]	; (80168f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80168c0:	8081      	strh	r1, [r0, #4]
 80168c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168c6:	2300      	movs	r3, #0
 80168c8:	80c2      	strh	r2, [r0, #6]
 80168ca:	8003      	strh	r3, [r0, #0]
 80168cc:	8043      	strh	r3, [r0, #2]
 80168ce:	e7ee      	b.n	80168ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80168d0:	2300      	movs	r3, #0
 80168d2:	8003      	strh	r3, [r0, #0]
 80168d4:	8043      	strh	r3, [r0, #2]
 80168d6:	8083      	strh	r3, [r0, #4]
 80168d8:	e7d8      	b.n	801688c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80168da:	bf00      	nop
 80168dc:	20011998 	.word	0x20011998
 80168e0:	200119a0 	.word	0x200119a0
 80168e4:	2001199c 	.word	0x2001199c
 80168e8:	20011980 	.word	0x20011980
 80168ec:	2001190a 	.word	0x2001190a
 80168f0:	2001190c 	.word	0x2001190c

080168f4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80168f4:	4a12      	ldr	r2, [pc, #72]	; (8016940 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80168f6:	8803      	ldrh	r3, [r0, #0]
 80168f8:	8811      	ldrh	r1, [r2, #0]
 80168fa:	428b      	cmp	r3, r1
 80168fc:	d20b      	bcs.n	8016916 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80168fe:	4a11      	ldr	r2, [pc, #68]	; (8016944 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016900:	6812      	ldr	r2, [r2, #0]
 8016902:	b112      	cbz	r2, 801690a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016904:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016908:	b9c0      	cbnz	r0, 801693c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801690a:	4a0f      	ldr	r2, [pc, #60]	; (8016948 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801690c:	6811      	ldr	r1, [r2, #0]
 801690e:	2214      	movs	r2, #20
 8016910:	4353      	muls	r3, r2
 8016912:	58c8      	ldr	r0, [r1, r3]
 8016914:	4770      	bx	lr
 8016916:	4a0d      	ldr	r2, [pc, #52]	; (801694c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016918:	8812      	ldrh	r2, [r2, #0]
 801691a:	440a      	add	r2, r1
 801691c:	4293      	cmp	r3, r2
 801691e:	da04      	bge.n	801692a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016920:	4a08      	ldr	r2, [pc, #32]	; (8016944 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016922:	6812      	ldr	r2, [r2, #0]
 8016924:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016928:	4770      	bx	lr
 801692a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801692e:	4293      	cmp	r3, r2
 8016930:	d103      	bne.n	801693a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016932:	4b07      	ldr	r3, [pc, #28]	; (8016950 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8016938:	4770      	bx	lr
 801693a:	2000      	movs	r0, #0
 801693c:	4770      	bx	lr
 801693e:	bf00      	nop
 8016940:	20011998 	.word	0x20011998
 8016944:	2001197c 	.word	0x2001197c
 8016948:	200119a0 	.word	0x200119a0
 801694c:	2001199c 	.word	0x2001199c
 8016950:	20011918 	.word	0x20011918

08016954 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016954:	4b24      	ldr	r3, [pc, #144]	; (80169e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8016956:	8802      	ldrh	r2, [r0, #0]
 8016958:	8818      	ldrh	r0, [r3, #0]
 801695a:	4282      	cmp	r2, r0
 801695c:	d221      	bcs.n	80169a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801695e:	4b23      	ldr	r3, [pc, #140]	; (80169ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016960:	6819      	ldr	r1, [r3, #0]
 8016962:	2314      	movs	r3, #20
 8016964:	fb03 1302 	mla	r3, r3, r2, r1
 8016968:	6858      	ldr	r0, [r3, #4]
 801696a:	2800      	cmp	r0, #0
 801696c:	d03a      	beq.n	80169e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801696e:	4920      	ldr	r1, [pc, #128]	; (80169f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016970:	6809      	ldr	r1, [r1, #0]
 8016972:	2900      	cmp	r1, #0
 8016974:	d036      	beq.n	80169e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016976:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801697a:	2900      	cmp	r1, #0
 801697c:	d032      	beq.n	80169e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801697e:	891a      	ldrh	r2, [r3, #8]
 8016980:	8958      	ldrh	r0, [r3, #10]
 8016982:	4350      	muls	r0, r2
 8016984:	7c5a      	ldrb	r2, [r3, #17]
 8016986:	7cdb      	ldrb	r3, [r3, #19]
 8016988:	0952      	lsrs	r2, r2, #5
 801698a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801698e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8016992:	2b0b      	cmp	r3, #11
 8016994:	bf18      	it	ne
 8016996:	0040      	lslne	r0, r0, #1
 8016998:	3003      	adds	r0, #3
 801699a:	f020 0003 	bic.w	r0, r0, #3
 801699e:	4408      	add	r0, r1
 80169a0:	4770      	bx	lr
 80169a2:	4b14      	ldr	r3, [pc, #80]	; (80169f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80169a4:	881b      	ldrh	r3, [r3, #0]
 80169a6:	4403      	add	r3, r0
 80169a8:	429a      	cmp	r2, r3
 80169aa:	da1a      	bge.n	80169e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80169ac:	4b12      	ldr	r3, [pc, #72]	; (80169f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80169ae:	1a10      	subs	r0, r2, r0
 80169b0:	210e      	movs	r1, #14
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	fb01 3000 	mla	r0, r1, r0, r3
 80169b8:	7b03      	ldrb	r3, [r0, #12]
 80169ba:	f003 031f 	and.w	r3, r3, #31
 80169be:	2b0b      	cmp	r3, #11
 80169c0:	d10b      	bne.n	80169da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80169c2:	8903      	ldrh	r3, [r0, #8]
 80169c4:	8940      	ldrh	r0, [r0, #10]
 80169c6:	4358      	muls	r0, r3
 80169c8:	4b09      	ldr	r3, [pc, #36]	; (80169f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80169ca:	3003      	adds	r0, #3
 80169cc:	6819      	ldr	r1, [r3, #0]
 80169ce:	f020 0303 	bic.w	r3, r0, #3
 80169d2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80169d6:	4418      	add	r0, r3
 80169d8:	4770      	bx	lr
 80169da:	2b0d      	cmp	r3, #13
 80169dc:	d101      	bne.n	80169e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80169de:	300d      	adds	r0, #13
 80169e0:	4770      	bx	lr
 80169e2:	2000      	movs	r0, #0
 80169e4:	4770      	bx	lr
 80169e6:	bf00      	nop
 80169e8:	20011998 	.word	0x20011998
 80169ec:	200119a0 	.word	0x200119a0
 80169f0:	2001197c 	.word	0x2001197c
 80169f4:	2001199c 	.word	0x2001199c
 80169f8:	20011980 	.word	0x20011980

080169fc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80169fc:	4a17      	ldr	r2, [pc, #92]	; (8016a5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80169fe:	b510      	push	{r4, lr}
 8016a00:	8803      	ldrh	r3, [r0, #0]
 8016a02:	8812      	ldrh	r2, [r2, #0]
 8016a04:	4293      	cmp	r3, r2
 8016a06:	d20c      	bcs.n	8016a22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8016a08:	4a15      	ldr	r2, [pc, #84]	; (8016a60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8016a0a:	2114      	movs	r1, #20
 8016a0c:	6812      	ldr	r2, [r2, #0]
 8016a0e:	fb01 2303 	mla	r3, r1, r3, r2
 8016a12:	7c58      	ldrb	r0, [r3, #17]
 8016a14:	0942      	lsrs	r2, r0, #5
 8016a16:	7cd8      	ldrb	r0, [r3, #19]
 8016a18:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8016a1c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016a20:	bd10      	pop	{r4, pc}
 8016a22:	4910      	ldr	r1, [pc, #64]	; (8016a64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016a24:	8809      	ldrh	r1, [r1, #0]
 8016a26:	4411      	add	r1, r2
 8016a28:	428b      	cmp	r3, r1
 8016a2a:	da09      	bge.n	8016a40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8016a2c:	1a9b      	subs	r3, r3, r2
 8016a2e:	4a0e      	ldr	r2, [pc, #56]	; (8016a68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016a30:	210e      	movs	r1, #14
 8016a32:	6812      	ldr	r2, [r2, #0]
 8016a34:	fb01 2303 	mla	r3, r1, r3, r2
 8016a38:	7b18      	ldrb	r0, [r3, #12]
 8016a3a:	f000 001f 	and.w	r0, r0, #31
 8016a3e:	e7ef      	b.n	8016a20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016a40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016a44:	4293      	cmp	r3, r2
 8016a46:	d106      	bne.n	8016a56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8016a48:	f7f4 fa24 	bl	800ae94 <_ZN8touchgfx3HAL3lcdEv>
 8016a4c:	6803      	ldr	r3, [r0, #0]
 8016a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a54:	4718      	bx	r3
 8016a56:	2000      	movs	r0, #0
 8016a58:	e7e2      	b.n	8016a20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016a5a:	bf00      	nop
 8016a5c:	20011998 	.word	0x20011998
 8016a60:	200119a0 	.word	0x200119a0
 8016a64:	2001199c 	.word	0x2001199c
 8016a68:	20011980 	.word	0x20011980

08016a6c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8016a6c:	2018      	movs	r0, #24
 8016a6e:	4770      	bx	lr

08016a70 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8016a70:	2001      	movs	r0, #1
 8016a72:	4770      	bx	lr

08016a74 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8016a74:	4b02      	ldr	r3, [pc, #8]	; (8016a80 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8016a76:	8818      	ldrh	r0, [r3, #0]
 8016a78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016a7c:	b280      	uxth	r0, r0
 8016a7e:	4770      	bx	lr
 8016a80:	20011910 	.word	0x20011910

08016a84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016a84:	2bff      	cmp	r3, #255	; 0xff
 8016a86:	d040      	beq.n	8016b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8016a88:	2a2c      	cmp	r2, #44	; 0x2c
 8016a8a:	d02a      	beq.n	8016ae2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8016a8c:	d80f      	bhi.n	8016aae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8016a8e:	2a08      	cmp	r2, #8
 8016a90:	d037      	beq.n	8016b02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8016a92:	d805      	bhi.n	8016aa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8016a94:	2a04      	cmp	r2, #4
 8016a96:	d032      	beq.n	8016afe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8016a98:	2a05      	cmp	r2, #5
 8016a9a:	d02e      	beq.n	8016afa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	4770      	bx	lr
 8016aa0:	2a0a      	cmp	r2, #10
 8016aa2:	d02e      	beq.n	8016b02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8016aa4:	d301      	bcc.n	8016aaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8016aa6:	2a0b      	cmp	r2, #11
 8016aa8:	d1f8      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016aaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016aac:	4770      	bx	lr
 8016aae:	2a30      	cmp	r2, #48	; 0x30
 8016ab0:	d029      	beq.n	8016b06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8016ab2:	d808      	bhi.n	8016ac6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8016ab4:	2a2e      	cmp	r2, #46	; 0x2e
 8016ab6:	684b      	ldr	r3, [r1, #4]
 8016ab8:	d01a      	beq.n	8016af0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8016aba:	d90b      	bls.n	8016ad4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d1ec      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016ac2:	6a00      	ldr	r0, [r0, #32]
 8016ac4:	4770      	bx	lr
 8016ac6:	2a32      	cmp	r2, #50	; 0x32
 8016ac8:	d01d      	beq.n	8016b06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8016aca:	d301      	bcc.n	8016ad0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8016acc:	2a33      	cmp	r2, #51	; 0x33
 8016ace:	d1e5      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016ad0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8016ad2:	4770      	bx	lr
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d0f3      	beq.n	8016ac2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8016ada:	2b01      	cmp	r3, #1
 8016adc:	d1de      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016ade:	6900      	ldr	r0, [r0, #16]
 8016ae0:	4770      	bx	lr
 8016ae2:	684b      	ldr	r3, [r1, #4]
 8016ae4:	781b      	ldrb	r3, [r3, #0]
 8016ae6:	b133      	cbz	r3, 8016af6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d1d7      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016aec:	6880      	ldr	r0, [r0, #8]
 8016aee:	4770      	bx	lr
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1d2      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016af6:	6980      	ldr	r0, [r0, #24]
 8016af8:	4770      	bx	lr
 8016afa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016afc:	4770      	bx	lr
 8016afe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016b00:	4770      	bx	lr
 8016b02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016b04:	4770      	bx	lr
 8016b06:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016b08:	4770      	bx	lr
 8016b0a:	2a2c      	cmp	r2, #44	; 0x2c
 8016b0c:	d02a      	beq.n	8016b64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8016b0e:	d80f      	bhi.n	8016b30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8016b10:	2a08      	cmp	r2, #8
 8016b12:	d035      	beq.n	8016b80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8016b14:	d805      	bhi.n	8016b22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8016b16:	2a04      	cmp	r2, #4
 8016b18:	d030      	beq.n	8016b7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8016b1a:	2a05      	cmp	r2, #5
 8016b1c:	d1be      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b1e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016b20:	4770      	bx	lr
 8016b22:	2a0a      	cmp	r2, #10
 8016b24:	d02c      	beq.n	8016b80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8016b26:	d301      	bcc.n	8016b2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8016b28:	2a0b      	cmp	r2, #11
 8016b2a:	d1b7      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b2c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016b2e:	4770      	bx	lr
 8016b30:	2a30      	cmp	r2, #48	; 0x30
 8016b32:	d027      	beq.n	8016b84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8016b34:	d808      	bhi.n	8016b48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8016b36:	2a2e      	cmp	r2, #46	; 0x2e
 8016b38:	684b      	ldr	r3, [r1, #4]
 8016b3a:	d01a      	beq.n	8016b72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8016b3c:	d90b      	bls.n	8016b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d1ab      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b44:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016b46:	4770      	bx	lr
 8016b48:	2a32      	cmp	r2, #50	; 0x32
 8016b4a:	d01b      	beq.n	8016b84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8016b4c:	d301      	bcc.n	8016b52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8016b4e:	2a33      	cmp	r2, #51	; 0x33
 8016b50:	d1a4      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b52:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016b54:	4770      	bx	lr
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d0f3      	beq.n	8016b44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d19d      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b60:	6940      	ldr	r0, [r0, #20]
 8016b62:	4770      	bx	lr
 8016b64:	684b      	ldr	r3, [r1, #4]
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	b133      	cbz	r3, 8016b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d196      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b6e:	68c0      	ldr	r0, [r0, #12]
 8016b70:	4770      	bx	lr
 8016b72:	781b      	ldrb	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d191      	bne.n	8016a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016b78:	69c0      	ldr	r0, [r0, #28]
 8016b7a:	4770      	bx	lr
 8016b7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016b7e:	4770      	bx	lr
 8016b80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016b82:	4770      	bx	lr
 8016b84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016b86:	4770      	bx	lr

08016b88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	b085      	sub	sp, #20
 8016b8e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016b90:	9203      	str	r2, [sp, #12]
 8016b92:	6870      	ldr	r0, [r6, #4]
 8016b94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016b98:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8016b9c:	9101      	str	r1, [sp, #4]
 8016b9e:	fa1f f885 	uxth.w	r8, r5
 8016ba2:	43ed      	mvns	r5, r5
 8016ba4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016ba8:	b2ed      	uxtb	r5, r5
 8016baa:	fb00 2404 	mla	r4, r0, r4, r2
 8016bae:	6832      	ldr	r2, [r6, #0]
 8016bb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016bb4:	4414      	add	r4, r2
 8016bb6:	f8dc 2000 	ldr.w	r2, [ip]
 8016bba:	9202      	str	r2, [sp, #8]
 8016bbc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016bc0:	f102 0e04 	add.w	lr, r2, #4
 8016bc4:	9a01      	ldr	r2, [sp, #4]
 8016bc6:	2a00      	cmp	r2, #0
 8016bc8:	dc03      	bgt.n	8016bd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016bca:	9a03      	ldr	r2, [sp, #12]
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	f340 8116 	ble.w	8016dfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bd4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016bd8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016bde:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016be2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	dd0e      	ble.n	8016c08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016bea:	1406      	asrs	r6, r0, #16
 8016bec:	d405      	bmi.n	8016bfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016bee:	4556      	cmp	r6, sl
 8016bf0:	da03      	bge.n	8016bfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016bf2:	1416      	asrs	r6, r2, #16
 8016bf4:	d401      	bmi.n	8016bfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016bf6:	454e      	cmp	r6, r9
 8016bf8:	db07      	blt.n	8016c0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016bfa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	3403      	adds	r4, #3
 8016c00:	4430      	add	r0, r6
 8016c02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016c04:	4432      	add	r2, r6
 8016c06:	e7ee      	b.n	8016be6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016c08:	d063      	beq.n	8016cd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016c0a:	1e5e      	subs	r6, r3, #1
 8016c0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016c0e:	fb07 0706 	mla	r7, r7, r6, r0
 8016c12:	143f      	asrs	r7, r7, #16
 8016c14:	d454      	bmi.n	8016cc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016c16:	4557      	cmp	r7, sl
 8016c18:	da52      	bge.n	8016cc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016c1a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8016c1c:	fb07 2606 	mla	r6, r7, r6, r2
 8016c20:	1436      	asrs	r6, r6, #16
 8016c22:	d44d      	bmi.n	8016cc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016c24:	454e      	cmp	r6, r9
 8016c26:	da4b      	bge.n	8016cc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016c28:	1ce6      	adds	r6, r4, #3
 8016c2a:	4699      	mov	r9, r3
 8016c2c:	f1b9 0f00 	cmp.w	r9, #0
 8016c30:	f106 0603 	add.w	r6, r6, #3
 8016c34:	dd48      	ble.n	8016cc8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8016c36:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016c3a:	1417      	asrs	r7, r2, #16
 8016c3c:	9902      	ldr	r1, [sp, #8]
 8016c3e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016c42:	f109 39ff 	add.w	r9, r9, #4294967295
 8016c46:	fb0b 1707 	mla	r7, fp, r7, r1
 8016c4a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016c4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016c50:	f817 700a 	ldrb.w	r7, [r7, sl]
 8016c54:	fb1b fb05 	smulbb	fp, fp, r5
 8016c58:	4408      	add	r0, r1
 8016c5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016c60:	440a      	add	r2, r1
 8016c62:	eb0e 0a07 	add.w	sl, lr, r7
 8016c66:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8016c6a:	fb07 b708 	mla	r7, r7, r8, fp
 8016c6e:	b2bf      	uxth	r7, r7
 8016c70:	f107 0b01 	add.w	fp, r7, #1
 8016c74:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016c78:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016c7c:	fb1b fb05 	smulbb	fp, fp, r5
 8016c80:	123f      	asrs	r7, r7, #8
 8016c82:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016c86:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016c8a:	fb07 b708 	mla	r7, r7, r8, fp
 8016c8e:	b2bf      	uxth	r7, r7
 8016c90:	f107 0b01 	add.w	fp, r7, #1
 8016c94:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016c98:	123f      	asrs	r7, r7, #8
 8016c9a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016c9e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016ca2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016ca6:	fb1a fa05 	smulbb	sl, sl, r5
 8016caa:	fb07 a708 	mla	r7, r7, r8, sl
 8016cae:	b2bf      	uxth	r7, r7
 8016cb0:	f107 0a01 	add.w	sl, r7, #1
 8016cb4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016cb8:	123f      	asrs	r7, r7, #8
 8016cba:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016cbe:	e7b5      	b.n	8016c2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8016cc0:	2700      	movs	r7, #0
 8016cc2:	1bde      	subs	r6, r3, r7
 8016cc4:	2e00      	cmp	r6, #0
 8016cc6:	dc42      	bgt.n	8016d4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8016cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016cd0:	441c      	add	r4, r3
 8016cd2:	9b01      	ldr	r3, [sp, #4]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f340 8092 	ble.w	8016dfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016ce4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ce8:	eef0 6a62 	vmov.f32	s13, s5
 8016cec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016cf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016cf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016cf8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8016cfc:	eef0 6a43 	vmov.f32	s13, s6
 8016d00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016d04:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8016d08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016d18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016d20:	ee12 2a90 	vmov	r2, s5
 8016d24:	eef0 2a47 	vmov.f32	s5, s14
 8016d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d2c:	ee13 2a10 	vmov	r2, s6
 8016d30:	9311      	str	r3, [sp, #68]	; 0x44
 8016d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d34:	eeb0 3a67 	vmov.f32	s6, s15
 8016d38:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d3c:	9312      	str	r3, [sp, #72]	; 0x48
 8016d3e:	9b01      	ldr	r3, [sp, #4]
 8016d40:	9a03      	ldr	r2, [sp, #12]
 8016d42:	3b01      	subs	r3, #1
 8016d44:	9301      	str	r3, [sp, #4]
 8016d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d48:	bf08      	it	eq
 8016d4a:	4613      	moveq	r3, r2
 8016d4c:	e73a      	b.n	8016bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016d4e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8016d52:	d44e      	bmi.n	8016df2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016d54:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016d58:	4556      	cmp	r6, sl
 8016d5a:	dd4a      	ble.n	8016df2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016d5c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016d60:	d447      	bmi.n	8016df2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016d62:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8016d66:	4559      	cmp	r1, fp
 8016d68:	dd43      	ble.n	8016df2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016d6a:	fa0f f986 	sxth.w	r9, r6
 8016d6e:	9902      	ldr	r1, [sp, #8]
 8016d70:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016d74:	fb0b 1909 	mla	r9, fp, r9, r1
 8016d78:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016d7c:	f819 900a 	ldrb.w	r9, [r9, sl]
 8016d80:	fb1b fb05 	smulbb	fp, fp, r5
 8016d84:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016d88:	eb0e 0a09 	add.w	sl, lr, r9
 8016d8c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8016d90:	fb09 b908 	mla	r9, r9, r8, fp
 8016d94:	fa1f f989 	uxth.w	r9, r9
 8016d98:	f109 0b01 	add.w	fp, r9, #1
 8016d9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016da0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016da4:	f804 9006 	strb.w	r9, [r4, r6]
 8016da8:	4426      	add	r6, r4
 8016daa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016dae:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016db2:	fb1b fb05 	smulbb	fp, fp, r5
 8016db6:	fb09 b908 	mla	r9, r9, r8, fp
 8016dba:	fa1f f989 	uxth.w	r9, r9
 8016dbe:	f109 0b01 	add.w	fp, r9, #1
 8016dc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016dc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016dca:	f886 9001 	strb.w	r9, [r6, #1]
 8016dce:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016dd2:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016dd6:	fb1a fa05 	smulbb	sl, sl, r5
 8016dda:	fb09 a908 	mla	r9, r9, r8, sl
 8016dde:	fa1f f989 	uxth.w	r9, r9
 8016de2:	f109 0a01 	add.w	sl, r9, #1
 8016de6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016dea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016dee:	f886 9002 	strb.w	r9, [r6, #2]
 8016df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016df4:	3701      	adds	r7, #1
 8016df6:	4408      	add	r0, r1
 8016df8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016dfa:	440a      	add	r2, r1
 8016dfc:	e761      	b.n	8016cc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016dfe:	b005      	add	sp, #20
 8016e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016e0a:	4693      	mov	fp, r2
 8016e0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e12:	6868      	ldr	r0, [r5, #4]
 8016e14:	6877      	ldr	r7, [r6, #4]
 8016e16:	9100      	str	r1, [sp, #0]
 8016e18:	3704      	adds	r7, #4
 8016e1a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016e1e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8016e22:	fb00 2404 	mla	r4, r0, r4, r2
 8016e26:	682a      	ldr	r2, [r5, #0]
 8016e28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016e2c:	4414      	add	r4, r2
 8016e2e:	6832      	ldr	r2, [r6, #0]
 8016e30:	9201      	str	r2, [sp, #4]
 8016e32:	9a00      	ldr	r2, [sp, #0]
 8016e34:	2a00      	cmp	r2, #0
 8016e36:	dc03      	bgt.n	8016e40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016e38:	f1bb 0f00 	cmp.w	fp, #0
 8016e3c:	f340 80bc 	ble.w	8016fb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016e40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e42:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8016e46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e4c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016e50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	dd0c      	ble.n	8016e72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016e58:	1405      	asrs	r5, r0, #16
 8016e5a:	d405      	bmi.n	8016e68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016e5c:	4555      	cmp	r5, sl
 8016e5e:	da03      	bge.n	8016e68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016e60:	1415      	asrs	r5, r2, #16
 8016e62:	d401      	bmi.n	8016e68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016e64:	454d      	cmp	r5, r9
 8016e66:	db05      	blt.n	8016e74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016e68:	4440      	add	r0, r8
 8016e6a:	4472      	add	r2, lr
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	3403      	adds	r4, #3
 8016e70:	e7f0      	b.n	8016e54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016e72:	d03f      	beq.n	8016ef4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8016e74:	1e5d      	subs	r5, r3, #1
 8016e76:	fb08 0c05 	mla	ip, r8, r5, r0
 8016e7a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8016e7e:	d42e      	bmi.n	8016ede <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016e80:	45d4      	cmp	ip, sl
 8016e82:	da2c      	bge.n	8016ede <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016e84:	fb0e 2505 	mla	r5, lr, r5, r2
 8016e88:	142d      	asrs	r5, r5, #16
 8016e8a:	d428      	bmi.n	8016ede <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016e8c:	454d      	cmp	r5, r9
 8016e8e:	da26      	bge.n	8016ede <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016e90:	1ce5      	adds	r5, r4, #3
 8016e92:	469c      	mov	ip, r3
 8016e94:	f1bc 0f00 	cmp.w	ip, #0
 8016e98:	f105 0503 	add.w	r5, r5, #3
 8016e9c:	dd25      	ble.n	8016eea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8016e9e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016ea2:	ea4f 4922 	mov.w	r9, r2, asr #16
 8016ea6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016eaa:	4472      	add	r2, lr
 8016eac:	468a      	mov	sl, r1
 8016eae:	9901      	ldr	r1, [sp, #4]
 8016eb0:	fb0a 1909 	mla	r9, sl, r9, r1
 8016eb4:	1401      	asrs	r1, r0, #16
 8016eb6:	4440      	add	r0, r8
 8016eb8:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016ebc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016ec0:	eb07 0a09 	add.w	sl, r7, r9
 8016ec4:	f817 9009 	ldrb.w	r9, [r7, r9]
 8016ec8:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016ecc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016ed0:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016ed4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016ed8:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016edc:	e7da      	b.n	8016e94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016ede:	2500      	movs	r5, #0
 8016ee0:	eba3 0c05 	sub.w	ip, r3, r5
 8016ee4:	f1bc 0f00 	cmp.w	ip, #0
 8016ee8:	dc3b      	bgt.n	8016f62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8016eea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ef2:	441c      	add	r4, r3
 8016ef4:	9b00      	ldr	r3, [sp, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	dd5e      	ble.n	8016fb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016efa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f04:	eeb0 6a62 	vmov.f32	s12, s5
 8016f08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016f0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f14:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016f18:	eeb0 6a43 	vmov.f32	s12, s6
 8016f1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f20:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016f24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016f3c:	ee12 2a90 	vmov	r2, s5
 8016f40:	eef0 2a47 	vmov.f32	s5, s14
 8016f44:	fb92 f8f3 	sdiv	r8, r2, r3
 8016f48:	ee13 2a10 	vmov	r2, s6
 8016f4c:	eeb0 3a67 	vmov.f32	s6, s15
 8016f50:	fb92 fef3 	sdiv	lr, r2, r3
 8016f54:	9b00      	ldr	r3, [sp, #0]
 8016f56:	3b01      	subs	r3, #1
 8016f58:	9300      	str	r3, [sp, #0]
 8016f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f5c:	bf08      	it	eq
 8016f5e:	465b      	moveq	r3, fp
 8016f60:	e767      	b.n	8016e32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016f62:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016f66:	d423      	bmi.n	8016fb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016f68:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8016f6c:	45cc      	cmp	ip, r9
 8016f6e:	dd1f      	ble.n	8016fb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016f70:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016f74:	d41c      	bmi.n	8016fb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016f76:	68f1      	ldr	r1, [r6, #12]
 8016f78:	4551      	cmp	r1, sl
 8016f7a:	dd19      	ble.n	8016fb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016f7c:	fa0f fc8c 	sxth.w	ip, ip
 8016f80:	9901      	ldr	r1, [sp, #4]
 8016f82:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8016f86:	f81c c009 	ldrb.w	ip, [ip, r9]
 8016f8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016f8e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8016f92:	eb07 090c 	add.w	r9, r7, ip
 8016f96:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016f9a:	f804 a00c 	strb.w	sl, [r4, ip]
 8016f9e:	44a4      	add	ip, r4
 8016fa0:	f899 a001 	ldrb.w	sl, [r9, #1]
 8016fa4:	f88c a001 	strb.w	sl, [ip, #1]
 8016fa8:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016fac:	f88c 9002 	strb.w	r9, [ip, #2]
 8016fb0:	4440      	add	r0, r8
 8016fb2:	4472      	add	r2, lr
 8016fb4:	3501      	adds	r5, #1
 8016fb6:	e793      	b.n	8016ee0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8016fb8:	b003      	add	sp, #12
 8016fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc2:	b085      	sub	sp, #20
 8016fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016fc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016fca:	9202      	str	r2, [sp, #8]
 8016fcc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016fd0:	6860      	ldr	r0, [r4, #4]
 8016fd2:	9203      	str	r2, [sp, #12]
 8016fd4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016fd8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016fdc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016fe0:	fb00 2505 	mla	r5, r0, r5, r2
 8016fe4:	6822      	ldr	r2, [r4, #0]
 8016fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fea:	4415      	add	r5, r2
 8016fec:	f8dc 2000 	ldr.w	r2, [ip]
 8016ff0:	9200      	str	r2, [sp, #0]
 8016ff2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016ff6:	3204      	adds	r2, #4
 8016ff8:	9201      	str	r2, [sp, #4]
 8016ffa:	2900      	cmp	r1, #0
 8016ffc:	dc03      	bgt.n	8017006 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016ffe:	9a02      	ldr	r2, [sp, #8]
 8017000:	2a00      	cmp	r2, #0
 8017002:	f340 8127 	ble.w	8017254 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017008:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801700c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8017010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017012:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017016:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801701a:	2b00      	cmp	r3, #0
 801701c:	dd0d      	ble.n	801703a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801701e:	1422      	asrs	r2, r4, #16
 8017020:	d405      	bmi.n	801702e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017022:	4542      	cmp	r2, r8
 8017024:	da03      	bge.n	801702e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017026:	1402      	asrs	r2, r0, #16
 8017028:	d401      	bmi.n	801702e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801702a:	42ba      	cmp	r2, r7
 801702c:	db06      	blt.n	801703c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801702e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017030:	4474      	add	r4, lr
 8017032:	3b01      	subs	r3, #1
 8017034:	3503      	adds	r5, #3
 8017036:	4410      	add	r0, r2
 8017038:	e7ef      	b.n	801701a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801703a:	d075      	beq.n	8017128 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801703c:	1e5a      	subs	r2, r3, #1
 801703e:	fb0e 4602 	mla	r6, lr, r2, r4
 8017042:	1436      	asrs	r6, r6, #16
 8017044:	d465      	bmi.n	8017112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017046:	4546      	cmp	r6, r8
 8017048:	da63      	bge.n	8017112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801704a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801704c:	fb06 0202 	mla	r2, r6, r2, r0
 8017050:	1412      	asrs	r2, r2, #16
 8017052:	d45e      	bmi.n	8017112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017054:	42ba      	cmp	r2, r7
 8017056:	da5c      	bge.n	8017112 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017058:	1cef      	adds	r7, r5, #3
 801705a:	4699      	mov	r9, r3
 801705c:	f1b9 0f00 	cmp.w	r9, #0
 8017060:	dd5d      	ble.n	801711e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8017062:	1402      	asrs	r2, r0, #16
 8017064:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017068:	1426      	asrs	r6, r4, #16
 801706a:	4692      	mov	sl, r2
 801706c:	9a00      	ldr	r2, [sp, #0]
 801706e:	fb08 220a 	mla	r2, r8, sl, r2
 8017072:	5d92      	ldrb	r2, [r2, r6]
 8017074:	9e01      	ldr	r6, [sp, #4]
 8017076:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801707a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801707e:	d041      	beq.n	8017104 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017080:	9a03      	ldr	r2, [sp, #12]
 8017082:	fa5f fb86 	uxtb.w	fp, r6
 8017086:	fb02 f808 	mul.w	r8, r2, r8
 801708a:	f108 0201 	add.w	r2, r8, #1
 801708e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8017092:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8017096:	1212      	asrs	r2, r2, #8
 8017098:	fa1f fa82 	uxth.w	sl, r2
 801709c:	43d2      	mvns	r2, r2
 801709e:	fb1b fb0a 	smulbb	fp, fp, sl
 80170a2:	b2d2      	uxtb	r2, r2
 80170a4:	fb08 b802 	mla	r8, r8, r2, fp
 80170a8:	fa1f f888 	uxth.w	r8, r8
 80170ac:	f108 0b01 	add.w	fp, r8, #1
 80170b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80170b4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80170b8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80170bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80170c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80170c4:	fb16 fa0a 	smulbb	sl, r6, sl
 80170c8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80170cc:	f807 8c03 	strb.w	r8, [r7, #-3]
 80170d0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80170d4:	fb06 aa02 	mla	sl, r6, r2, sl
 80170d8:	fb08 b802 	mla	r8, r8, r2, fp
 80170dc:	fa1f fa8a 	uxth.w	sl, sl
 80170e0:	fa1f f888 	uxth.w	r8, r8
 80170e4:	f10a 0601 	add.w	r6, sl, #1
 80170e8:	f108 0b01 	add.w	fp, r8, #1
 80170ec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80170f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80170f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80170f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80170fc:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017100:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017106:	4474      	add	r4, lr
 8017108:	3703      	adds	r7, #3
 801710a:	f109 39ff 	add.w	r9, r9, #4294967295
 801710e:	4410      	add	r0, r2
 8017110:	e7a4      	b.n	801705c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017112:	f04f 0800 	mov.w	r8, #0
 8017116:	eba3 0208 	sub.w	r2, r3, r8
 801711a:	2a00      	cmp	r2, #0
 801711c:	dc3b      	bgt.n	8017196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801711e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017126:	441d      	add	r5, r3
 8017128:	2900      	cmp	r1, #0
 801712a:	f340 8093 	ble.w	8017254 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801712e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017134:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017138:	3901      	subs	r1, #1
 801713a:	eeb0 6a62 	vmov.f32	s12, s5
 801713e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017142:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017146:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801714a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801714e:	eeb0 6a43 	vmov.f32	s12, s6
 8017152:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017156:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801715a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801715e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017162:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017166:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801716a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801716e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017172:	ee12 2a90 	vmov	r2, s5
 8017176:	eef0 2a47 	vmov.f32	s5, s14
 801717a:	fb92 fef3 	sdiv	lr, r2, r3
 801717e:	ee13 2a10 	vmov	r2, s6
 8017182:	eeb0 3a67 	vmov.f32	s6, s15
 8017186:	fb92 f3f3 	sdiv	r3, r2, r3
 801718a:	9a02      	ldr	r2, [sp, #8]
 801718c:	9312      	str	r3, [sp, #72]	; 0x48
 801718e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017190:	bf08      	it	eq
 8017192:	4613      	moveq	r3, r2
 8017194:	e731      	b.n	8016ffa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017196:	1427      	asrs	r7, r4, #16
 8017198:	d456      	bmi.n	8017248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801719a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801719e:	42be      	cmp	r6, r7
 80171a0:	dd52      	ble.n	8017248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80171a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80171a6:	d44f      	bmi.n	8017248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80171a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80171ac:	454a      	cmp	r2, r9
 80171ae:	dd4b      	ble.n	8017248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80171b0:	9a00      	ldr	r2, [sp, #0]
 80171b2:	b236      	sxth	r6, r6
 80171b4:	fb09 2606 	mla	r6, r9, r6, r2
 80171b8:	5df2      	ldrb	r2, [r6, r7]
 80171ba:	9e01      	ldr	r6, [sp, #4]
 80171bc:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80171c0:	0e3a      	lsrs	r2, r7, #24
 80171c2:	d041      	beq.n	8017248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80171c4:	9e03      	ldr	r6, [sp, #12]
 80171c6:	fa5f fb87 	uxtb.w	fp, r7
 80171ca:	4372      	muls	r2, r6
 80171cc:	1c56      	adds	r6, r2, #1
 80171ce:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80171d2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80171d6:	1212      	asrs	r2, r2, #8
 80171d8:	f815 9006 	ldrb.w	r9, [r5, r6]
 80171dc:	fa1f fa82 	uxth.w	sl, r2
 80171e0:	43d2      	mvns	r2, r2
 80171e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80171e6:	b2d2      	uxtb	r2, r2
 80171e8:	fb09 b902 	mla	r9, r9, r2, fp
 80171ec:	fa1f f989 	uxth.w	r9, r9
 80171f0:	f109 0b01 	add.w	fp, r9, #1
 80171f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80171f8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80171fc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017200:	fb1b fb0a 	smulbb	fp, fp, sl
 8017204:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017208:	fb17 fa0a 	smulbb	sl, r7, sl
 801720c:	f805 9006 	strb.w	r9, [r5, r6]
 8017210:	442e      	add	r6, r5
 8017212:	78b7      	ldrb	r7, [r6, #2]
 8017214:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017218:	fb07 aa02 	mla	sl, r7, r2, sl
 801721c:	fb09 b902 	mla	r9, r9, r2, fp
 8017220:	fa1f fa8a 	uxth.w	sl, sl
 8017224:	fa1f f989 	uxth.w	r9, r9
 8017228:	f10a 0701 	add.w	r7, sl, #1
 801722c:	f109 0b01 	add.w	fp, r9, #1
 8017230:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017234:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017238:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801723c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017240:	f886 a002 	strb.w	sl, [r6, #2]
 8017244:	f886 9001 	strb.w	r9, [r6, #1]
 8017248:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801724a:	4474      	add	r4, lr
 801724c:	f108 0801 	add.w	r8, r8, #1
 8017250:	4410      	add	r0, r2
 8017252:	e760      	b.n	8017116 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8017254:	b005      	add	sp, #20
 8017256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801725a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801725a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801725e:	b085      	sub	sp, #20
 8017260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017264:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017266:	9203      	str	r2, [sp, #12]
 8017268:	6868      	ldr	r0, [r5, #4]
 801726a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801726e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8017272:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017276:	fb00 2404 	mla	r4, r0, r4, r2
 801727a:	682a      	ldr	r2, [r5, #0]
 801727c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017280:	4414      	add	r4, r2
 8017282:	f8dc 2000 	ldr.w	r2, [ip]
 8017286:	9201      	str	r2, [sp, #4]
 8017288:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801728c:	3204      	adds	r2, #4
 801728e:	9202      	str	r2, [sp, #8]
 8017290:	2900      	cmp	r1, #0
 8017292:	dc03      	bgt.n	801729c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017294:	9a03      	ldr	r2, [sp, #12]
 8017296:	2a00      	cmp	r2, #0
 8017298:	f340 8137 	ble.w	801750a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801729c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801729e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80172a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80172a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80172a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80172ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	dd0d      	ble.n	80172d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80172b4:	1405      	asrs	r5, r0, #16
 80172b6:	d405      	bmi.n	80172c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80172b8:	4545      	cmp	r5, r8
 80172ba:	da03      	bge.n	80172c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80172bc:	1415      	asrs	r5, r2, #16
 80172be:	d401      	bmi.n	80172c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80172c0:	42bd      	cmp	r5, r7
 80172c2:	db06      	blt.n	80172d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80172c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80172c6:	4470      	add	r0, lr
 80172c8:	3b01      	subs	r3, #1
 80172ca:	3403      	adds	r4, #3
 80172cc:	442a      	add	r2, r5
 80172ce:	e7ef      	b.n	80172b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80172d0:	d070      	beq.n	80173b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80172d2:	1e5d      	subs	r5, r3, #1
 80172d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80172d8:	1436      	asrs	r6, r6, #16
 80172da:	d462      	bmi.n	80173a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80172dc:	4546      	cmp	r6, r8
 80172de:	da60      	bge.n	80173a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80172e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80172e2:	fb06 2505 	mla	r5, r6, r5, r2
 80172e6:	142d      	asrs	r5, r5, #16
 80172e8:	d45b      	bmi.n	80173a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80172ea:	42bd      	cmp	r5, r7
 80172ec:	da59      	bge.n	80173a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80172ee:	1ce5      	adds	r5, r4, #3
 80172f0:	469a      	mov	sl, r3
 80172f2:	f1ba 0f00 	cmp.w	sl, #0
 80172f6:	dd58      	ble.n	80173aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80172f8:	1416      	asrs	r6, r2, #16
 80172fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80172fe:	1407      	asrs	r7, r0, #16
 8017300:	46b1      	mov	r9, r6
 8017302:	9e01      	ldr	r6, [sp, #4]
 8017304:	fb08 6609 	mla	r6, r8, r9, r6
 8017308:	5df6      	ldrb	r6, [r6, r7]
 801730a:	9f02      	ldr	r7, [sp, #8]
 801730c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8017310:	0e37      	lsrs	r7, r6, #24
 8017312:	2fff      	cmp	r7, #255	; 0xff
 8017314:	f000 80f0 	beq.w	80174f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017318:	fa5f f887 	uxtb.w	r8, r7
 801731c:	b3d7      	cbz	r7, 8017394 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801731e:	fa1f f788 	uxth.w	r7, r8
 8017322:	ea6f 0808 	mvn.w	r8, r8
 8017326:	fa5f fb86 	uxtb.w	fp, r6
 801732a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801732e:	fa5f f888 	uxtb.w	r8, r8
 8017332:	fb1b fb07 	smulbb	fp, fp, r7
 8017336:	fb09 b908 	mla	r9, r9, r8, fp
 801733a:	fa1f f989 	uxth.w	r9, r9
 801733e:	f109 0b01 	add.w	fp, r9, #1
 8017342:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017346:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801734a:	fb1b fb08 	smulbb	fp, fp, r8
 801734e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017352:	f805 9c03 	strb.w	r9, [r5, #-3]
 8017356:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801735a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801735e:	fb09 b907 	mla	r9, r9, r7, fp
 8017362:	fa1f f989 	uxth.w	r9, r9
 8017366:	f109 0b01 	add.w	fp, r9, #1
 801736a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801736e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017372:	f805 9c02 	strb.w	r9, [r5, #-2]
 8017376:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801737a:	fb19 f808 	smulbb	r8, r9, r8
 801737e:	fb06 8607 	mla	r6, r6, r7, r8
 8017382:	b2b6      	uxth	r6, r6
 8017384:	f106 0801 	add.w	r8, r6, #1
 8017388:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801738c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017390:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017394:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017396:	4470      	add	r0, lr
 8017398:	3503      	adds	r5, #3
 801739a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801739e:	4432      	add	r2, r6
 80173a0:	e7a7      	b.n	80172f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80173a2:	2600      	movs	r6, #0
 80173a4:	1b9d      	subs	r5, r3, r6
 80173a6:	2d00      	cmp	r5, #0
 80173a8:	dc3b      	bgt.n	8017422 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80173aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173b2:	441c      	add	r4, r3
 80173b4:	2900      	cmp	r1, #0
 80173b6:	f340 80a8 	ble.w	801750a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80173be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80173c4:	3901      	subs	r1, #1
 80173c6:	eeb0 6a62 	vmov.f32	s12, s5
 80173ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80173ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80173d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80173d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80173da:	eeb0 6a43 	vmov.f32	s12, s6
 80173de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80173e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80173e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80173ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80173ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80173f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80173f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80173fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80173fe:	ee12 2a90 	vmov	r2, s5
 8017402:	eef0 2a47 	vmov.f32	s5, s14
 8017406:	fb92 fef3 	sdiv	lr, r2, r3
 801740a:	ee13 2a10 	vmov	r2, s6
 801740e:	eeb0 3a67 	vmov.f32	s6, s15
 8017412:	fb92 f3f3 	sdiv	r3, r2, r3
 8017416:	9a03      	ldr	r2, [sp, #12]
 8017418:	9312      	str	r3, [sp, #72]	; 0x48
 801741a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801741c:	bf08      	it	eq
 801741e:	4613      	moveq	r3, r2
 8017420:	e736      	b.n	8017290 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017422:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017426:	d457      	bmi.n	80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017428:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801742c:	4547      	cmp	r7, r8
 801742e:	dd53      	ble.n	80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017430:	ea5f 4922 	movs.w	r9, r2, asr #16
 8017434:	d450      	bmi.n	80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017436:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801743a:	454d      	cmp	r5, r9
 801743c:	dd4c      	ble.n	80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801743e:	9d01      	ldr	r5, [sp, #4]
 8017440:	b23f      	sxth	r7, r7
 8017442:	fb09 5707 	mla	r7, r9, r7, r5
 8017446:	f817 5008 	ldrb.w	r5, [r7, r8]
 801744a:	9f02      	ldr	r7, [sp, #8]
 801744c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017450:	0e2f      	lsrs	r7, r5, #24
 8017452:	2fff      	cmp	r7, #255	; 0xff
 8017454:	d045      	beq.n	80174e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017456:	fa5f f987 	uxtb.w	r9, r7
 801745a:	b3ef      	cbz	r7, 80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801745c:	fa1f f889 	uxth.w	r8, r9
 8017460:	ea6f 0909 	mvn.w	r9, r9
 8017464:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017468:	fa5f fb85 	uxtb.w	fp, r5
 801746c:	f814 a007 	ldrb.w	sl, [r4, r7]
 8017470:	fa5f f989 	uxtb.w	r9, r9
 8017474:	fb1b fb08 	smulbb	fp, fp, r8
 8017478:	fb0a ba09 	mla	sl, sl, r9, fp
 801747c:	fa1f fa8a 	uxth.w	sl, sl
 8017480:	f10a 0b01 	add.w	fp, sl, #1
 8017484:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017488:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801748c:	f804 a007 	strb.w	sl, [r4, r7]
 8017490:	4427      	add	r7, r4
 8017492:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017496:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801749a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801749e:	fb1b fb09 	smulbb	fp, fp, r9
 80174a2:	fb0a ba08 	mla	sl, sl, r8, fp
 80174a6:	fa1f fa8a 	uxth.w	sl, sl
 80174aa:	f10a 0b01 	add.w	fp, sl, #1
 80174ae:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80174b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80174b6:	f887 a001 	strb.w	sl, [r7, #1]
 80174ba:	f897 a002 	ldrb.w	sl, [r7, #2]
 80174be:	fb1a f909 	smulbb	r9, sl, r9
 80174c2:	fb05 9508 	mla	r5, r5, r8, r9
 80174c6:	b2ad      	uxth	r5, r5
 80174c8:	f105 0901 	add.w	r9, r5, #1
 80174cc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80174d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80174d4:	f887 9002 	strb.w	r9, [r7, #2]
 80174d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80174da:	4470      	add	r0, lr
 80174dc:	3601      	adds	r6, #1
 80174de:	442a      	add	r2, r5
 80174e0:	e760      	b.n	80173a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80174e2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80174e6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80174ea:	55e5      	strb	r5, [r4, r7]
 80174ec:	4427      	add	r7, r4
 80174ee:	0c2d      	lsrs	r5, r5, #16
 80174f0:	f887 8001 	strb.w	r8, [r7, #1]
 80174f4:	70bd      	strb	r5, [r7, #2]
 80174f6:	e7ef      	b.n	80174d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80174f8:	0a37      	lsrs	r7, r6, #8
 80174fa:	f805 6c03 	strb.w	r6, [r5, #-3]
 80174fe:	0c36      	lsrs	r6, r6, #16
 8017500:	f805 7c02 	strb.w	r7, [r5, #-2]
 8017504:	f805 6c01 	strb.w	r6, [r5, #-1]
 8017508:	e744      	b.n	8017394 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801750a:	b005      	add	sp, #20
 801750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017510 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017514:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017516:	9201      	str	r2, [sp, #4]
 8017518:	6870      	ldr	r0, [r6, #4]
 801751a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801751e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8017522:	fa1f fe85 	uxth.w	lr, r5
 8017526:	43ed      	mvns	r5, r5
 8017528:	f8dc 8000 	ldr.w	r8, [ip]
 801752c:	b2ed      	uxtb	r5, r5
 801752e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8017532:	fb00 2404 	mla	r4, r0, r4, r2
 8017536:	6832      	ldr	r2, [r6, #0]
 8017538:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801753c:	4414      	add	r4, r2
 801753e:	2900      	cmp	r1, #0
 8017540:	dc03      	bgt.n	801754a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017542:	9a01      	ldr	r2, [sp, #4]
 8017544:	2a00      	cmp	r2, #0
 8017546:	f340 810d 	ble.w	8017764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801754a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801754c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8017550:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017556:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801755a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801755e:	2b00      	cmp	r3, #0
 8017560:	dd0e      	ble.n	8017580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017562:	1406      	asrs	r6, r0, #16
 8017564:	d405      	bmi.n	8017572 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8017566:	4556      	cmp	r6, sl
 8017568:	da03      	bge.n	8017572 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801756a:	1416      	asrs	r6, r2, #16
 801756c:	d401      	bmi.n	8017572 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801756e:	454e      	cmp	r6, r9
 8017570:	db07      	blt.n	8017582 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017572:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017574:	3b01      	subs	r3, #1
 8017576:	3403      	adds	r4, #3
 8017578:	4430      	add	r0, r6
 801757a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801757c:	4432      	add	r2, r6
 801757e:	e7ee      	b.n	801755e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8017580:	d060      	beq.n	8017644 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8017582:	1e5e      	subs	r6, r3, #1
 8017584:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017586:	fb07 0706 	mla	r7, r7, r6, r0
 801758a:	143f      	asrs	r7, r7, #16
 801758c:	d451      	bmi.n	8017632 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801758e:	4557      	cmp	r7, sl
 8017590:	da4f      	bge.n	8017632 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017592:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8017594:	fb07 2606 	mla	r6, r7, r6, r2
 8017598:	1436      	asrs	r6, r6, #16
 801759a:	d44a      	bmi.n	8017632 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801759c:	454e      	cmp	r6, r9
 801759e:	da48      	bge.n	8017632 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80175a0:	1ce6      	adds	r6, r4, #3
 80175a2:	4699      	mov	r9, r3
 80175a4:	f1b9 0f00 	cmp.w	r9, #0
 80175a8:	f106 0603 	add.w	r6, r6, #3
 80175ac:	dd45      	ble.n	801763a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80175ae:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80175b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80175b6:	1417      	asrs	r7, r2, #16
 80175b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80175bc:	fb0b a707 	mla	r7, fp, r7, sl
 80175c0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80175c4:	fb1b fb05 	smulbb	fp, fp, r5
 80175c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80175cc:	eb08 0a07 	add.w	sl, r8, r7
 80175d0:	f818 7007 	ldrb.w	r7, [r8, r7]
 80175d4:	fb07 b70e 	mla	r7, r7, lr, fp
 80175d8:	b2bf      	uxth	r7, r7
 80175da:	f107 0b01 	add.w	fp, r7, #1
 80175de:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80175e2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80175e6:	fb1b fb05 	smulbb	fp, fp, r5
 80175ea:	123f      	asrs	r7, r7, #8
 80175ec:	f806 7c06 	strb.w	r7, [r6, #-6]
 80175f0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80175f4:	fb07 b70e 	mla	r7, r7, lr, fp
 80175f8:	b2bf      	uxth	r7, r7
 80175fa:	f107 0b01 	add.w	fp, r7, #1
 80175fe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017602:	123f      	asrs	r7, r7, #8
 8017604:	f806 7c05 	strb.w	r7, [r6, #-5]
 8017608:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801760c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8017610:	fb1a fa05 	smulbb	sl, sl, r5
 8017614:	fb07 a70e 	mla	r7, r7, lr, sl
 8017618:	b2bf      	uxth	r7, r7
 801761a:	f107 0a01 	add.w	sl, r7, #1
 801761e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017622:	123f      	asrs	r7, r7, #8
 8017624:	f806 7c04 	strb.w	r7, [r6, #-4]
 8017628:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801762a:	4438      	add	r0, r7
 801762c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801762e:	443a      	add	r2, r7
 8017630:	e7b8      	b.n	80175a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017632:	2700      	movs	r7, #0
 8017634:	1bde      	subs	r6, r3, r7
 8017636:	2e00      	cmp	r6, #0
 8017638:	dc3f      	bgt.n	80176ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801763a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801763e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017642:	441c      	add	r4, r3
 8017644:	2900      	cmp	r1, #0
 8017646:	f340 808d 	ble.w	8017764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801764a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801764e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017650:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017654:	3901      	subs	r1, #1
 8017656:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801765a:	eef0 6a62 	vmov.f32	s13, s5
 801765e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017662:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017666:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801766a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801766e:	eef0 6a43 	vmov.f32	s13, s6
 8017672:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017676:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801767a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801767e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017682:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017686:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801768a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801768e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017692:	ee12 2a90 	vmov	r2, s5
 8017696:	eef0 2a47 	vmov.f32	s5, s14
 801769a:	fb92 f3f3 	sdiv	r3, r2, r3
 801769e:	ee13 2a10 	vmov	r2, s6
 80176a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80176a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176a6:	eeb0 3a67 	vmov.f32	s6, s15
 80176aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80176ae:	9a01      	ldr	r2, [sp, #4]
 80176b0:	9310      	str	r3, [sp, #64]	; 0x40
 80176b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b4:	bf08      	it	eq
 80176b6:	4613      	moveq	r3, r2
 80176b8:	e741      	b.n	801753e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80176ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 80176be:	d44b      	bmi.n	8017758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80176c0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80176c4:	45cb      	cmp	fp, r9
 80176c6:	dd47      	ble.n	8017758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80176c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80176cc:	d444      	bmi.n	8017758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80176ce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80176d2:	4556      	cmp	r6, sl
 80176d4:	dd40      	ble.n	8017758 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80176d6:	fa0f f68b 	sxth.w	r6, fp
 80176da:	fb0a 9906 	mla	r9, sl, r6, r9
 80176de:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80176e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80176e6:	f814 b006 	ldrb.w	fp, [r4, r6]
 80176ea:	fb1b fb05 	smulbb	fp, fp, r5
 80176ee:	eb08 0a09 	add.w	sl, r8, r9
 80176f2:	f818 9009 	ldrb.w	r9, [r8, r9]
 80176f6:	fb09 b90e 	mla	r9, r9, lr, fp
 80176fa:	fa1f f989 	uxth.w	r9, r9
 80176fe:	f109 0b01 	add.w	fp, r9, #1
 8017702:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017706:	ea4f 2929 	mov.w	r9, r9, asr #8
 801770a:	f804 9006 	strb.w	r9, [r4, r6]
 801770e:	4426      	add	r6, r4
 8017710:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8017714:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017718:	fb1b fb05 	smulbb	fp, fp, r5
 801771c:	fb09 b90e 	mla	r9, r9, lr, fp
 8017720:	fa1f f989 	uxth.w	r9, r9
 8017724:	f109 0b01 	add.w	fp, r9, #1
 8017728:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801772c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017730:	f886 9001 	strb.w	r9, [r6, #1]
 8017734:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017738:	f896 a002 	ldrb.w	sl, [r6, #2]
 801773c:	fb1a fa05 	smulbb	sl, sl, r5
 8017740:	fb09 a90e 	mla	r9, r9, lr, sl
 8017744:	fa1f f989 	uxth.w	r9, r9
 8017748:	f109 0a01 	add.w	sl, r9, #1
 801774c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017750:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017754:	f886 9002 	strb.w	r9, [r6, #2]
 8017758:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801775a:	3701      	adds	r7, #1
 801775c:	4430      	add	r0, r6
 801775e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017760:	4432      	add	r2, r6
 8017762:	e767      	b.n	8017634 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8017764:	b003      	add	sp, #12
 8017766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801776a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801776a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801776e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017774:	9201      	str	r2, [sp, #4]
 8017776:	6868      	ldr	r0, [r5, #4]
 8017778:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801777a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801777e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8017782:	fb00 2404 	mla	r4, r0, r4, r2
 8017786:	682a      	ldr	r2, [r5, #0]
 8017788:	f8d7 8000 	ldr.w	r8, [r7]
 801778c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017790:	4414      	add	r4, r2
 8017792:	2900      	cmp	r1, #0
 8017794:	dc03      	bgt.n	801779e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8017796:	9a01      	ldr	r2, [sp, #4]
 8017798:	2a00      	cmp	r2, #0
 801779a:	f340 80af 	ble.w	80178fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801779e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177a0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80177a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80177a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177aa:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80177ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	dd0c      	ble.n	80177d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80177b6:	1405      	asrs	r5, r0, #16
 80177b8:	d405      	bmi.n	80177c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80177ba:	4555      	cmp	r5, sl
 80177bc:	da03      	bge.n	80177c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80177be:	1415      	asrs	r5, r2, #16
 80177c0:	d401      	bmi.n	80177c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80177c2:	454d      	cmp	r5, r9
 80177c4:	db05      	blt.n	80177d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80177c6:	4470      	add	r0, lr
 80177c8:	4462      	add	r2, ip
 80177ca:	3b01      	subs	r3, #1
 80177cc:	3403      	adds	r4, #3
 80177ce:	e7f0      	b.n	80177b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80177d0:	d038      	beq.n	8017844 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80177d2:	1e5d      	subs	r5, r3, #1
 80177d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80177d8:	1436      	asrs	r6, r6, #16
 80177da:	d42a      	bmi.n	8017832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80177dc:	4556      	cmp	r6, sl
 80177de:	da28      	bge.n	8017832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80177e0:	fb0c 2505 	mla	r5, ip, r5, r2
 80177e4:	142d      	asrs	r5, r5, #16
 80177e6:	d424      	bmi.n	8017832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80177e8:	454d      	cmp	r5, r9
 80177ea:	da22      	bge.n	8017832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80177ec:	1ce6      	adds	r6, r4, #3
 80177ee:	4699      	mov	r9, r3
 80177f0:	f1b9 0f00 	cmp.w	r9, #0
 80177f4:	f106 0603 	add.w	r6, r6, #3
 80177f8:	dd1f      	ble.n	801783a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80177fa:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80177fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017802:	1415      	asrs	r5, r2, #16
 8017804:	4470      	add	r0, lr
 8017806:	4462      	add	r2, ip
 8017808:	f109 39ff 	add.w	r9, r9, #4294967295
 801780c:	fb0b a505 	mla	r5, fp, r5, sl
 8017810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017814:	eb08 0a05 	add.w	sl, r8, r5
 8017818:	f818 5005 	ldrb.w	r5, [r8, r5]
 801781c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8017820:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8017824:	f806 5c05 	strb.w	r5, [r6, #-5]
 8017828:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801782c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8017830:	e7de      	b.n	80177f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017832:	2600      	movs	r6, #0
 8017834:	1b9d      	subs	r5, r3, r6
 8017836:	2d00      	cmp	r5, #0
 8017838:	dc38      	bgt.n	80178ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801783a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801783e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017842:	441c      	add	r4, r3
 8017844:	2900      	cmp	r1, #0
 8017846:	dd59      	ble.n	80178fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8017848:	ee30 0a04 	vadd.f32	s0, s0, s8
 801784c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801784e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017852:	3901      	subs	r1, #1
 8017854:	eeb0 6a62 	vmov.f32	s12, s5
 8017858:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801785c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017860:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017864:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8017868:	eeb0 6a43 	vmov.f32	s12, s6
 801786c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017870:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8017874:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017878:	ee61 7a27 	vmul.f32	s15, s2, s15
 801787c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017880:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017884:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017888:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801788c:	ee12 2a90 	vmov	r2, s5
 8017890:	eef0 2a47 	vmov.f32	s5, s14
 8017894:	fb92 fef3 	sdiv	lr, r2, r3
 8017898:	ee13 2a10 	vmov	r2, s6
 801789c:	eeb0 3a67 	vmov.f32	s6, s15
 80178a0:	fb92 fcf3 	sdiv	ip, r2, r3
 80178a4:	9a01      	ldr	r2, [sp, #4]
 80178a6:	bf08      	it	eq
 80178a8:	4613      	moveq	r3, r2
 80178aa:	e772      	b.n	8017792 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80178ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 80178b0:	d420      	bmi.n	80178f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80178b2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80178b6:	45cb      	cmp	fp, r9
 80178b8:	dd1c      	ble.n	80178f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80178ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80178be:	d419      	bmi.n	80178f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80178c0:	68fd      	ldr	r5, [r7, #12]
 80178c2:	4555      	cmp	r5, sl
 80178c4:	dd16      	ble.n	80178f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80178c6:	fa0f f58b 	sxth.w	r5, fp
 80178ca:	fb0a 9505 	mla	r5, sl, r5, r9
 80178ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178d2:	f818 9005 	ldrb.w	r9, [r8, r5]
 80178d6:	eb08 0b05 	add.w	fp, r8, r5
 80178da:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80178de:	f804 9005 	strb.w	r9, [r4, r5]
 80178e2:	4425      	add	r5, r4
 80178e4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80178e8:	f885 9001 	strb.w	r9, [r5, #1]
 80178ec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80178f0:	f885 9002 	strb.w	r9, [r5, #2]
 80178f4:	4470      	add	r0, lr
 80178f6:	4462      	add	r2, ip
 80178f8:	3601      	adds	r6, #1
 80178fa:	e79b      	b.n	8017834 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80178fc:	b003      	add	sp, #12
 80178fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017902 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017906:	b085      	sub	sp, #20
 8017908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801790c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801790e:	9202      	str	r2, [sp, #8]
 8017910:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8017914:	6860      	ldr	r0, [r4, #4]
 8017916:	9203      	str	r2, [sp, #12]
 8017918:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801791c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8017920:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8017924:	fb00 2505 	mla	r5, r0, r5, r2
 8017928:	6822      	ldr	r2, [r4, #0]
 801792a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801792e:	4415      	add	r5, r2
 8017930:	f8dc 2000 	ldr.w	r2, [ip]
 8017934:	9201      	str	r2, [sp, #4]
 8017936:	2900      	cmp	r1, #0
 8017938:	dc03      	bgt.n	8017942 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801793a:	9a02      	ldr	r2, [sp, #8]
 801793c:	2a00      	cmp	r2, #0
 801793e:	f340 8122 	ble.w	8017b86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017942:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017944:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017948:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801794c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801794e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017952:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017956:	2b00      	cmp	r3, #0
 8017958:	dd0d      	ble.n	8017976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801795a:	1422      	asrs	r2, r4, #16
 801795c:	d405      	bmi.n	801796a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801795e:	4542      	cmp	r2, r8
 8017960:	da03      	bge.n	801796a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017962:	1402      	asrs	r2, r0, #16
 8017964:	d401      	bmi.n	801796a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017966:	42ba      	cmp	r2, r7
 8017968:	db06      	blt.n	8017978 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801796a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801796c:	4474      	add	r4, lr
 801796e:	3b01      	subs	r3, #1
 8017970:	3503      	adds	r5, #3
 8017972:	4410      	add	r0, r2
 8017974:	e7ef      	b.n	8017956 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8017976:	d072      	beq.n	8017a5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017978:	1e5a      	subs	r2, r3, #1
 801797a:	fb0e 4602 	mla	r6, lr, r2, r4
 801797e:	1436      	asrs	r6, r6, #16
 8017980:	d462      	bmi.n	8017a48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017982:	4546      	cmp	r6, r8
 8017984:	da60      	bge.n	8017a48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017986:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8017988:	fb06 0202 	mla	r2, r6, r2, r0
 801798c:	1412      	asrs	r2, r2, #16
 801798e:	d45b      	bmi.n	8017a48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017990:	42ba      	cmp	r2, r7
 8017992:	da59      	bge.n	8017a48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017994:	1cef      	adds	r7, r5, #3
 8017996:	4699      	mov	r9, r3
 8017998:	f1b9 0f00 	cmp.w	r9, #0
 801799c:	dd5a      	ble.n	8017a54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801799e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80179a2:	1426      	asrs	r6, r4, #16
 80179a4:	1402      	asrs	r2, r0, #16
 80179a6:	fb08 6202 	mla	r2, r8, r2, r6
 80179aa:	9e01      	ldr	r6, [sp, #4]
 80179ac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80179b0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80179b4:	d041      	beq.n	8017a3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80179b6:	9a03      	ldr	r2, [sp, #12]
 80179b8:	fa5f fb86 	uxtb.w	fp, r6
 80179bc:	fb02 f808 	mul.w	r8, r2, r8
 80179c0:	f108 0201 	add.w	r2, r8, #1
 80179c4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80179c8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80179cc:	1212      	asrs	r2, r2, #8
 80179ce:	fa1f fa82 	uxth.w	sl, r2
 80179d2:	43d2      	mvns	r2, r2
 80179d4:	fb1b fb0a 	smulbb	fp, fp, sl
 80179d8:	b2d2      	uxtb	r2, r2
 80179da:	fb08 b802 	mla	r8, r8, r2, fp
 80179de:	fa1f f888 	uxth.w	r8, r8
 80179e2:	f108 0b01 	add.w	fp, r8, #1
 80179e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80179ea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80179ee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80179f2:	fb1b fb0a 	smulbb	fp, fp, sl
 80179f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80179fa:	fb16 fa0a 	smulbb	sl, r6, sl
 80179fe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017a02:	f807 8c03 	strb.w	r8, [r7, #-3]
 8017a06:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017a0a:	fb06 aa02 	mla	sl, r6, r2, sl
 8017a0e:	fb08 b802 	mla	r8, r8, r2, fp
 8017a12:	fa1f fa8a 	uxth.w	sl, sl
 8017a16:	fa1f f888 	uxth.w	r8, r8
 8017a1a:	f10a 0601 	add.w	r6, sl, #1
 8017a1e:	f108 0b01 	add.w	fp, r8, #1
 8017a22:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8017a26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017a2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017a2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017a32:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017a36:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a3c:	4474      	add	r4, lr
 8017a3e:	3703      	adds	r7, #3
 8017a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8017a44:	4410      	add	r0, r2
 8017a46:	e7a7      	b.n	8017998 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017a48:	f04f 0800 	mov.w	r8, #0
 8017a4c:	eba3 0208 	sub.w	r2, r3, r8
 8017a50:	2a00      	cmp	r2, #0
 8017a52:	dc3b      	bgt.n	8017acc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8017a54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a5c:	441d      	add	r5, r3
 8017a5e:	2900      	cmp	r1, #0
 8017a60:	f340 8091 	ble.w	8017b86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8017a64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017a6e:	3901      	subs	r1, #1
 8017a70:	eeb0 6a62 	vmov.f32	s12, s5
 8017a74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017a78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017a7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a80:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017a84:	eeb0 6a43 	vmov.f32	s12, s6
 8017a88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a8c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017a90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017a94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017a98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017a9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017aa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017aa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017aa8:	ee12 2a90 	vmov	r2, s5
 8017aac:	eef0 2a47 	vmov.f32	s5, s14
 8017ab0:	fb92 fef3 	sdiv	lr, r2, r3
 8017ab4:	ee13 2a10 	vmov	r2, s6
 8017ab8:	eeb0 3a67 	vmov.f32	s6, s15
 8017abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ac0:	9a02      	ldr	r2, [sp, #8]
 8017ac2:	9312      	str	r3, [sp, #72]	; 0x48
 8017ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac6:	bf08      	it	eq
 8017ac8:	4613      	moveq	r3, r2
 8017aca:	e734      	b.n	8017936 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8017acc:	1427      	asrs	r7, r4, #16
 8017ace:	d454      	bmi.n	8017b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017ad0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017ad4:	42be      	cmp	r6, r7
 8017ad6:	dd50      	ble.n	8017b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017ad8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017adc:	d44d      	bmi.n	8017b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017ade:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017ae2:	454a      	cmp	r2, r9
 8017ae4:	dd49      	ble.n	8017b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017ae6:	b236      	sxth	r6, r6
 8017ae8:	9a01      	ldr	r2, [sp, #4]
 8017aea:	fb09 7606 	mla	r6, r9, r6, r7
 8017aee:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017af2:	0e3a      	lsrs	r2, r7, #24
 8017af4:	d041      	beq.n	8017b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017af6:	9e03      	ldr	r6, [sp, #12]
 8017af8:	fa5f fb87 	uxtb.w	fp, r7
 8017afc:	4372      	muls	r2, r6
 8017afe:	1c56      	adds	r6, r2, #1
 8017b00:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017b04:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017b08:	1212      	asrs	r2, r2, #8
 8017b0a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017b0e:	fa1f fa82 	uxth.w	sl, r2
 8017b12:	43d2      	mvns	r2, r2
 8017b14:	fb1b fb0a 	smulbb	fp, fp, sl
 8017b18:	b2d2      	uxtb	r2, r2
 8017b1a:	fb09 b902 	mla	r9, r9, r2, fp
 8017b1e:	fa1f f989 	uxth.w	r9, r9
 8017b22:	f109 0b01 	add.w	fp, r9, #1
 8017b26:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b2a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017b2e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017b32:	fb1b fb0a 	smulbb	fp, fp, sl
 8017b36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b3a:	fb17 fa0a 	smulbb	sl, r7, sl
 8017b3e:	f805 9006 	strb.w	r9, [r5, r6]
 8017b42:	442e      	add	r6, r5
 8017b44:	78b7      	ldrb	r7, [r6, #2]
 8017b46:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017b4a:	fb07 aa02 	mla	sl, r7, r2, sl
 8017b4e:	fb09 b902 	mla	r9, r9, r2, fp
 8017b52:	fa1f fa8a 	uxth.w	sl, sl
 8017b56:	fa1f f989 	uxth.w	r9, r9
 8017b5a:	f10a 0701 	add.w	r7, sl, #1
 8017b5e:	f109 0b01 	add.w	fp, r9, #1
 8017b62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017b66:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017b6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b72:	f886 a002 	strb.w	sl, [r6, #2]
 8017b76:	f886 9001 	strb.w	r9, [r6, #1]
 8017b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b7c:	4474      	add	r4, lr
 8017b7e:	f108 0801 	add.w	r8, r8, #1
 8017b82:	4410      	add	r0, r2
 8017b84:	e762      	b.n	8017a4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017b86:	b005      	add	sp, #20
 8017b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017b96:	9201      	str	r2, [sp, #4]
 8017b98:	6860      	ldr	r0, [r4, #4]
 8017b9a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8017b9e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8017ba2:	fb00 2505 	mla	r5, r0, r5, r2
 8017ba6:	6822      	ldr	r2, [r4, #0]
 8017ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bac:	4415      	add	r5, r2
 8017bae:	f8dc 2000 	ldr.w	r2, [ip]
 8017bb2:	9200      	str	r2, [sp, #0]
 8017bb4:	2900      	cmp	r1, #0
 8017bb6:	dc03      	bgt.n	8017bc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8017bb8:	9a01      	ldr	r2, [sp, #4]
 8017bba:	2a00      	cmp	r2, #0
 8017bbc:	f340 812b 	ble.w	8017e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017bc2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017bc6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8017bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017bcc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017bd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	dd0e      	ble.n	8017bf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017bd8:	1422      	asrs	r2, r4, #16
 8017bda:	d405      	bmi.n	8017be8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017bdc:	4572      	cmp	r2, lr
 8017bde:	da03      	bge.n	8017be8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017be0:	1402      	asrs	r2, r0, #16
 8017be2:	d401      	bmi.n	8017be8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017be4:	42ba      	cmp	r2, r7
 8017be6:	db07      	blt.n	8017bf8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017bea:	3b01      	subs	r3, #1
 8017bec:	3503      	adds	r5, #3
 8017bee:	4414      	add	r4, r2
 8017bf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017bf2:	4410      	add	r0, r2
 8017bf4:	e7ee      	b.n	8017bd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017bf6:	d06f      	beq.n	8017cd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017bf8:	1e5a      	subs	r2, r3, #1
 8017bfa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017bfc:	fb06 4602 	mla	r6, r6, r2, r4
 8017c00:	1436      	asrs	r6, r6, #16
 8017c02:	d45e      	bmi.n	8017cc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017c04:	4576      	cmp	r6, lr
 8017c06:	da5c      	bge.n	8017cc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017c08:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017c0a:	fb06 0202 	mla	r2, r6, r2, r0
 8017c0e:	1412      	asrs	r2, r2, #16
 8017c10:	d457      	bmi.n	8017cc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017c12:	42ba      	cmp	r2, r7
 8017c14:	da55      	bge.n	8017cc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017c16:	1cee      	adds	r6, r5, #3
 8017c18:	469a      	mov	sl, r3
 8017c1a:	f1ba 0f00 	cmp.w	sl, #0
 8017c1e:	dd56      	ble.n	8017cce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017c20:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017c24:	1427      	asrs	r7, r4, #16
 8017c26:	1402      	asrs	r2, r0, #16
 8017c28:	fb0e 7202 	mla	r2, lr, r2, r7
 8017c2c:	9f00      	ldr	r7, [sp, #0]
 8017c2e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8017c32:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8017c36:	d03c      	beq.n	8017cb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017c38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017c3c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017c40:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017c44:	fa5f f28e 	uxtb.w	r2, lr
 8017c48:	b2ff      	uxtb	r7, r7
 8017c4a:	f000 80dd 	beq.w	8017e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8017c4e:	fa1f f882 	uxth.w	r8, r2
 8017c52:	43d2      	mvns	r2, r2
 8017c54:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8017c58:	fb17 f708 	smulbb	r7, r7, r8
 8017c5c:	b2d2      	uxtb	r2, r2
 8017c5e:	fb19 f908 	smulbb	r9, r9, r8
 8017c62:	fb0e 7702 	mla	r7, lr, r2, r7
 8017c66:	fb1b f808 	smulbb	r8, fp, r8
 8017c6a:	b2bf      	uxth	r7, r7
 8017c6c:	f107 0e01 	add.w	lr, r7, #1
 8017c70:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017c74:	123f      	asrs	r7, r7, #8
 8017c76:	f806 7c03 	strb.w	r7, [r6, #-3]
 8017c7a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8017c7e:	fb07 9902 	mla	r9, r7, r2, r9
 8017c82:	fa1f f989 	uxth.w	r9, r9
 8017c86:	f109 0701 	add.w	r7, r9, #1
 8017c8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017c8e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017c92:	fb07 8802 	mla	r8, r7, r2, r8
 8017c96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c9a:	fa1f f888 	uxth.w	r8, r8
 8017c9e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017ca2:	f108 0201 	add.w	r2, r8, #1
 8017ca6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017caa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017cae:	f806 8c01 	strb.w	r8, [r6, #-1]
 8017cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017cb4:	3603      	adds	r6, #3
 8017cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cba:	4414      	add	r4, r2
 8017cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017cbe:	4410      	add	r0, r2
 8017cc0:	e7ab      	b.n	8017c1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017cc2:	f04f 0e00 	mov.w	lr, #0
 8017cc6:	eba3 020e 	sub.w	r2, r3, lr
 8017cca:	2a00      	cmp	r2, #0
 8017ccc:	dc3d      	bgt.n	8017d4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8017cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017cd6:	441d      	add	r5, r3
 8017cd8:	2900      	cmp	r1, #0
 8017cda:	f340 809c 	ble.w	8017e16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017cde:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ce4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017ce8:	3901      	subs	r1, #1
 8017cea:	eeb0 6a62 	vmov.f32	s12, s5
 8017cee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017cf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017cf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cfa:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8017cfe:	eeb0 6a43 	vmov.f32	s12, s6
 8017d02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d06:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8017d0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d22:	ee12 2a90 	vmov	r2, s5
 8017d26:	eef0 2a47 	vmov.f32	s5, s14
 8017d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d2e:	ee13 2a10 	vmov	r2, s6
 8017d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d36:	eeb0 3a67 	vmov.f32	s6, s15
 8017d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d3e:	9a01      	ldr	r2, [sp, #4]
 8017d40:	9310      	str	r3, [sp, #64]	; 0x40
 8017d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d44:	bf08      	it	eq
 8017d46:	4613      	moveq	r3, r2
 8017d48:	e734      	b.n	8017bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8017d4a:	1427      	asrs	r7, r4, #16
 8017d4c:	d44d      	bmi.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017d4e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017d52:	42be      	cmp	r6, r7
 8017d54:	dd49      	ble.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017d56:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017d5a:	d446      	bmi.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017d5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017d60:	4542      	cmp	r2, r8
 8017d62:	dd42      	ble.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017d64:	b236      	sxth	r6, r6
 8017d66:	9a00      	ldr	r2, [sp, #0]
 8017d68:	fb08 7606 	mla	r6, r8, r6, r7
 8017d6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017d70:	0e3a      	lsrs	r2, r7, #24
 8017d72:	d03a      	beq.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017d74:	2aff      	cmp	r2, #255	; 0xff
 8017d76:	b2d6      	uxtb	r6, r2
 8017d78:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017d7c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017d80:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017d84:	b2ff      	uxtb	r7, r7
 8017d86:	d037      	beq.n	8017df8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8017d88:	fa1f f986 	uxth.w	r9, r6
 8017d8c:	4472      	add	r2, lr
 8017d8e:	43f6      	mvns	r6, r6
 8017d90:	f815 8002 	ldrb.w	r8, [r5, r2]
 8017d94:	fb17 f709 	smulbb	r7, r7, r9
 8017d98:	fb1a fa09 	smulbb	sl, sl, r9
 8017d9c:	b2f6      	uxtb	r6, r6
 8017d9e:	fb1b f909 	smulbb	r9, fp, r9
 8017da2:	fb08 7706 	mla	r7, r8, r6, r7
 8017da6:	b2bf      	uxth	r7, r7
 8017da8:	f107 0801 	add.w	r8, r7, #1
 8017dac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8017db0:	123f      	asrs	r7, r7, #8
 8017db2:	54af      	strb	r7, [r5, r2]
 8017db4:	442a      	add	r2, r5
 8017db6:	7857      	ldrb	r7, [r2, #1]
 8017db8:	fb07 aa06 	mla	sl, r7, r6, sl
 8017dbc:	fa1f fa8a 	uxth.w	sl, sl
 8017dc0:	f10a 0701 	add.w	r7, sl, #1
 8017dc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017dc8:	7897      	ldrb	r7, [r2, #2]
 8017dca:	fb07 9906 	mla	r9, r7, r6, r9
 8017dce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017dd2:	fa1f f989 	uxth.w	r9, r9
 8017dd6:	f882 a001 	strb.w	sl, [r2, #1]
 8017dda:	f109 0601 	add.w	r6, r9, #1
 8017dde:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017de2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017de6:	f882 9002 	strb.w	r9, [r2, #2]
 8017dea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017dec:	f10e 0e01 	add.w	lr, lr, #1
 8017df0:	4414      	add	r4, r2
 8017df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017df4:	4410      	add	r0, r2
 8017df6:	e766      	b.n	8017cc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017df8:	4472      	add	r2, lr
 8017dfa:	54af      	strb	r7, [r5, r2]
 8017dfc:	442a      	add	r2, r5
 8017dfe:	f882 a001 	strb.w	sl, [r2, #1]
 8017e02:	f882 b002 	strb.w	fp, [r2, #2]
 8017e06:	e7f0      	b.n	8017dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017e08:	f806 7c03 	strb.w	r7, [r6, #-3]
 8017e0c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017e10:	f806 bc01 	strb.w	fp, [r6, #-1]
 8017e14:	e74d      	b.n	8017cb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017e16:	b003      	add	sp, #12
 8017e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e20:	b087      	sub	sp, #28
 8017e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017e28:	9204      	str	r2, [sp, #16]
 8017e2a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017e2e:	6860      	ldr	r0, [r4, #4]
 8017e30:	9205      	str	r2, [sp, #20]
 8017e32:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017e36:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8017e3a:	9101      	str	r1, [sp, #4]
 8017e3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8017e40:	fb00 2505 	mla	r5, r0, r5, r2
 8017e44:	6822      	ldr	r2, [r4, #0]
 8017e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e4a:	4415      	add	r5, r2
 8017e4c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017e50:	3201      	adds	r2, #1
 8017e52:	f022 0201 	bic.w	r2, r2, #1
 8017e56:	9202      	str	r2, [sp, #8]
 8017e58:	f8dc 2000 	ldr.w	r2, [ip]
 8017e5c:	9203      	str	r2, [sp, #12]
 8017e5e:	9a01      	ldr	r2, [sp, #4]
 8017e60:	2a00      	cmp	r2, #0
 8017e62:	dc03      	bgt.n	8017e6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017e64:	9a04      	ldr	r2, [sp, #16]
 8017e66:	2a00      	cmp	r2, #0
 8017e68:	f340 8135 	ble.w	80180d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017e6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017e72:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8017e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e78:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017e7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	dd0d      	ble.n	8017ea0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017e84:	1422      	asrs	r2, r4, #16
 8017e86:	d405      	bmi.n	8017e94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017e88:	4542      	cmp	r2, r8
 8017e8a:	da03      	bge.n	8017e94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017e8c:	1402      	asrs	r2, r0, #16
 8017e8e:	d401      	bmi.n	8017e94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017e90:	42ba      	cmp	r2, r7
 8017e92:	db06      	blt.n	8017ea2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e96:	4474      	add	r4, lr
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	3503      	adds	r5, #3
 8017e9c:	4410      	add	r0, r2
 8017e9e:	e7ef      	b.n	8017e80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017ea0:	d077      	beq.n	8017f92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8017ea2:	1e5a      	subs	r2, r3, #1
 8017ea4:	fb0e 4602 	mla	r6, lr, r2, r4
 8017ea8:	1436      	asrs	r6, r6, #16
 8017eaa:	d469      	bmi.n	8017f80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017eac:	4546      	cmp	r6, r8
 8017eae:	da67      	bge.n	8017f80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017eb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017eb2:	fb06 0202 	mla	r2, r6, r2, r0
 8017eb6:	1412      	asrs	r2, r2, #16
 8017eb8:	d462      	bmi.n	8017f80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017eba:	42ba      	cmp	r2, r7
 8017ebc:	da60      	bge.n	8017f80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017ebe:	1cee      	adds	r6, r5, #3
 8017ec0:	4699      	mov	r9, r3
 8017ec2:	f1b9 0f00 	cmp.w	r9, #0
 8017ec6:	dd5f      	ble.n	8017f88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017ec8:	1422      	asrs	r2, r4, #16
 8017eca:	9902      	ldr	r1, [sp, #8]
 8017ecc:	1407      	asrs	r7, r0, #16
 8017ece:	fb01 2707 	mla	r7, r1, r7, r2
 8017ed2:	9903      	ldr	r1, [sp, #12]
 8017ed4:	087a      	lsrs	r2, r7, #1
 8017ed6:	5c8a      	ldrb	r2, [r1, r2]
 8017ed8:	07f9      	lsls	r1, r7, #31
 8017eda:	bf54      	ite	pl
 8017edc:	f002 020f 	andpl.w	r2, r2, #15
 8017ee0:	1112      	asrmi	r2, r2, #4
 8017ee2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017ee6:	b2d2      	uxtb	r2, r2
 8017ee8:	2a00      	cmp	r2, #0
 8017eea:	d042      	beq.n	8017f72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017eec:	497b      	ldr	r1, [pc, #492]	; (80180dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017eee:	680f      	ldr	r7, [r1, #0]
 8017ef0:	9905      	ldr	r1, [sp, #20]
 8017ef2:	fa5f fb87 	uxtb.w	fp, r7
 8017ef6:	434a      	muls	r2, r1
 8017ef8:	f102 0801 	add.w	r8, r2, #1
 8017efc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8017f00:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8017f04:	1212      	asrs	r2, r2, #8
 8017f06:	fa1f fa82 	uxth.w	sl, r2
 8017f0a:	43d2      	mvns	r2, r2
 8017f0c:	fb1b fb0a 	smulbb	fp, fp, sl
 8017f10:	b2d2      	uxtb	r2, r2
 8017f12:	fb08 b802 	mla	r8, r8, r2, fp
 8017f16:	fa1f f888 	uxth.w	r8, r8
 8017f1a:	f108 0b01 	add.w	fp, r8, #1
 8017f1e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017f22:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017f26:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017f2a:	fb1b fb0a 	smulbb	fp, fp, sl
 8017f2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f32:	fb17 fa0a 	smulbb	sl, r7, sl
 8017f36:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017f3a:	f806 8c03 	strb.w	r8, [r6, #-3]
 8017f3e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8017f42:	fb07 aa02 	mla	sl, r7, r2, sl
 8017f46:	fb08 b802 	mla	r8, r8, r2, fp
 8017f4a:	fa1f fa8a 	uxth.w	sl, sl
 8017f4e:	fa1f f888 	uxth.w	r8, r8
 8017f52:	f10a 0701 	add.w	r7, sl, #1
 8017f56:	f108 0b01 	add.w	fp, r8, #1
 8017f5a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017f5e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017f62:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017f66:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f6a:	f806 ac01 	strb.w	sl, [r6, #-1]
 8017f6e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8017f72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f74:	4474      	add	r4, lr
 8017f76:	3603      	adds	r6, #3
 8017f78:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f7c:	4410      	add	r0, r2
 8017f7e:	e7a0      	b.n	8017ec2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017f80:	2700      	movs	r7, #0
 8017f82:	1bda      	subs	r2, r3, r7
 8017f84:	2a00      	cmp	r2, #0
 8017f86:	dc3e      	bgt.n	8018006 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017f88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f90:	441d      	add	r5, r3
 8017f92:	9b01      	ldr	r3, [sp, #4]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f340 809e 	ble.w	80180d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017f9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fa0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017fa4:	eeb0 6a62 	vmov.f32	s12, s5
 8017fa8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017fac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017fb8:	eeb0 6a43 	vmov.f32	s12, s6
 8017fbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fc0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017fc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017fc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017fd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fdc:	ee12 2a90 	vmov	r2, s5
 8017fe0:	eef0 2a47 	vmov.f32	s5, s14
 8017fe4:	fb92 fef3 	sdiv	lr, r2, r3
 8017fe8:	ee13 2a10 	vmov	r2, s6
 8017fec:	eeb0 3a67 	vmov.f32	s6, s15
 8017ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ff4:	9314      	str	r3, [sp, #80]	; 0x50
 8017ff6:	9b01      	ldr	r3, [sp, #4]
 8017ff8:	9a04      	ldr	r2, [sp, #16]
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	9301      	str	r3, [sp, #4]
 8017ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018000:	bf08      	it	eq
 8018002:	4613      	moveq	r3, r2
 8018004:	e72b      	b.n	8017e5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018006:	1426      	asrs	r6, r4, #16
 8018008:	d460      	bmi.n	80180cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801800a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801800e:	42b2      	cmp	r2, r6
 8018010:	dd5c      	ble.n	80180cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018012:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018016:	d459      	bmi.n	80180cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018018:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801801c:	4542      	cmp	r2, r8
 801801e:	dd55      	ble.n	80180cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018020:	9a02      	ldr	r2, [sp, #8]
 8018022:	9903      	ldr	r1, [sp, #12]
 8018024:	fb08 6602 	mla	r6, r8, r2, r6
 8018028:	0872      	lsrs	r2, r6, #1
 801802a:	07f6      	lsls	r6, r6, #31
 801802c:	5c8a      	ldrb	r2, [r1, r2]
 801802e:	bf54      	ite	pl
 8018030:	f002 020f 	andpl.w	r2, r2, #15
 8018034:	1112      	asrmi	r2, r2, #4
 8018036:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801803a:	b2d2      	uxtb	r2, r2
 801803c:	2a00      	cmp	r2, #0
 801803e:	d045      	beq.n	80180cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018040:	4926      	ldr	r1, [pc, #152]	; (80180dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018042:	f8d1 8000 	ldr.w	r8, [r1]
 8018046:	9905      	ldr	r1, [sp, #20]
 8018048:	fa5f fb88 	uxtb.w	fp, r8
 801804c:	434a      	muls	r2, r1
 801804e:	1c56      	adds	r6, r2, #1
 8018050:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018054:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018058:	1212      	asrs	r2, r2, #8
 801805a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801805e:	fa1f fa82 	uxth.w	sl, r2
 8018062:	43d2      	mvns	r2, r2
 8018064:	fb1b fb0a 	smulbb	fp, fp, sl
 8018068:	b2d2      	uxtb	r2, r2
 801806a:	fb09 b902 	mla	r9, r9, r2, fp
 801806e:	fa1f f989 	uxth.w	r9, r9
 8018072:	f109 0b01 	add.w	fp, r9, #1
 8018076:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801807a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801807e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8018082:	fb1b fb0a 	smulbb	fp, fp, sl
 8018086:	ea4f 2929 	mov.w	r9, r9, asr #8
 801808a:	fb18 fa0a 	smulbb	sl, r8, sl
 801808e:	f805 9006 	strb.w	r9, [r5, r6]
 8018092:	442e      	add	r6, r5
 8018094:	f896 8002 	ldrb.w	r8, [r6, #2]
 8018098:	f896 9001 	ldrb.w	r9, [r6, #1]
 801809c:	fb08 aa02 	mla	sl, r8, r2, sl
 80180a0:	fb09 b902 	mla	r9, r9, r2, fp
 80180a4:	fa1f fa8a 	uxth.w	sl, sl
 80180a8:	fa1f f989 	uxth.w	r9, r9
 80180ac:	f10a 0801 	add.w	r8, sl, #1
 80180b0:	f109 0b01 	add.w	fp, r9, #1
 80180b4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80180b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80180bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80180c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80180c4:	f886 a002 	strb.w	sl, [r6, #2]
 80180c8:	f886 9001 	strb.w	r9, [r6, #1]
 80180cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180ce:	4474      	add	r4, lr
 80180d0:	3701      	adds	r7, #1
 80180d2:	4410      	add	r0, r2
 80180d4:	e755      	b.n	8017f82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80180d6:	b007      	add	sp, #28
 80180d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180dc:	20011920 	.word	0x20011920

080180e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e4:	b085      	sub	sp, #20
 80180e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80180ec:	9203      	str	r2, [sp, #12]
 80180ee:	6860      	ldr	r0, [r4, #4]
 80180f0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80180f4:	9100      	str	r1, [sp, #0]
 80180f6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80180fa:	fb00 2606 	mla	r6, r0, r6, r2
 80180fe:	6822      	ldr	r2, [r4, #0]
 8018100:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018104:	4416      	add	r6, r2
 8018106:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801810a:	3201      	adds	r2, #1
 801810c:	f022 0201 	bic.w	r2, r2, #1
 8018110:	9201      	str	r2, [sp, #4]
 8018112:	f8dc 2000 	ldr.w	r2, [ip]
 8018116:	9202      	str	r2, [sp, #8]
 8018118:	9a00      	ldr	r2, [sp, #0]
 801811a:	2a00      	cmp	r2, #0
 801811c:	dc03      	bgt.n	8018126 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801811e:	9a03      	ldr	r2, [sp, #12]
 8018120:	2a00      	cmp	r2, #0
 8018122:	f340 8140 	ble.w	80183a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018128:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801812c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8018130:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018132:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018136:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801813a:	2b00      	cmp	r3, #0
 801813c:	dd0e      	ble.n	801815c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801813e:	142a      	asrs	r2, r5, #16
 8018140:	d405      	bmi.n	801814e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018142:	4572      	cmp	r2, lr
 8018144:	da03      	bge.n	801814e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018146:	1422      	asrs	r2, r4, #16
 8018148:	d401      	bmi.n	801814e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801814a:	42ba      	cmp	r2, r7
 801814c:	db07      	blt.n	801815e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801814e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018150:	3b01      	subs	r3, #1
 8018152:	3603      	adds	r6, #3
 8018154:	4415      	add	r5, r2
 8018156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018158:	4414      	add	r4, r2
 801815a:	e7ee      	b.n	801813a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801815c:	d072      	beq.n	8018244 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801815e:	1e5a      	subs	r2, r3, #1
 8018160:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018162:	fb00 5002 	mla	r0, r0, r2, r5
 8018166:	1400      	asrs	r0, r0, #16
 8018168:	d463      	bmi.n	8018232 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801816a:	4570      	cmp	r0, lr
 801816c:	da61      	bge.n	8018232 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801816e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018170:	fb00 4202 	mla	r2, r0, r2, r4
 8018174:	1412      	asrs	r2, r2, #16
 8018176:	d45c      	bmi.n	8018232 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018178:	42ba      	cmp	r2, r7
 801817a:	da5a      	bge.n	8018232 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801817c:	1cf0      	adds	r0, r6, #3
 801817e:	469a      	mov	sl, r3
 8018180:	f1ba 0f00 	cmp.w	sl, #0
 8018184:	dd59      	ble.n	801823a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018186:	142a      	asrs	r2, r5, #16
 8018188:	9901      	ldr	r1, [sp, #4]
 801818a:	1427      	asrs	r7, r4, #16
 801818c:	fb01 2707 	mla	r7, r1, r7, r2
 8018190:	9902      	ldr	r1, [sp, #8]
 8018192:	087a      	lsrs	r2, r7, #1
 8018194:	5c8a      	ldrb	r2, [r1, r2]
 8018196:	07f9      	lsls	r1, r7, #31
 8018198:	bf54      	ite	pl
 801819a:	f002 020f 	andpl.w	r2, r2, #15
 801819e:	1112      	asrmi	r2, r2, #4
 80181a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80181a4:	b2d2      	uxtb	r2, r2
 80181a6:	2a00      	cmp	r2, #0
 80181a8:	d03b      	beq.n	8018222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80181aa:	4980      	ldr	r1, [pc, #512]	; (80183ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80181ac:	2aff      	cmp	r2, #255	; 0xff
 80181ae:	680f      	ldr	r7, [r1, #0]
 80181b0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80181b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80181b8:	b2ff      	uxtb	r7, r7
 80181ba:	f000 80ed 	beq.w	8018398 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80181be:	fa1f f882 	uxth.w	r8, r2
 80181c2:	43d2      	mvns	r2, r2
 80181c4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80181c8:	fb17 f708 	smulbb	r7, r7, r8
 80181cc:	b2d2      	uxtb	r2, r2
 80181ce:	fb19 f908 	smulbb	r9, r9, r8
 80181d2:	fb0e 7702 	mla	r7, lr, r2, r7
 80181d6:	fb1b f808 	smulbb	r8, fp, r8
 80181da:	b2bf      	uxth	r7, r7
 80181dc:	f107 0e01 	add.w	lr, r7, #1
 80181e0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80181e4:	123f      	asrs	r7, r7, #8
 80181e6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80181ea:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80181ee:	fb07 9902 	mla	r9, r7, r2, r9
 80181f2:	fa1f f989 	uxth.w	r9, r9
 80181f6:	f109 0701 	add.w	r7, r9, #1
 80181fa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80181fe:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8018202:	fb07 8802 	mla	r8, r7, r2, r8
 8018206:	ea4f 2929 	mov.w	r9, r9, asr #8
 801820a:	fa1f f888 	uxth.w	r8, r8
 801820e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018212:	f108 0201 	add.w	r2, r8, #1
 8018216:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801821a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801821e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8018222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018224:	3003      	adds	r0, #3
 8018226:	f10a 3aff 	add.w	sl, sl, #4294967295
 801822a:	4415      	add	r5, r2
 801822c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801822e:	4414      	add	r4, r2
 8018230:	e7a6      	b.n	8018180 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018232:	2700      	movs	r7, #0
 8018234:	1bda      	subs	r2, r3, r7
 8018236:	2a00      	cmp	r2, #0
 8018238:	dc40      	bgt.n	80182bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801823a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801823e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018242:	441e      	add	r6, r3
 8018244:	9b00      	ldr	r3, [sp, #0]
 8018246:	2b00      	cmp	r3, #0
 8018248:	f340 80ad 	ble.w	80183a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801824c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018252:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018256:	eeb0 6a62 	vmov.f32	s12, s5
 801825a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801825e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018262:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018266:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801826a:	eeb0 6a43 	vmov.f32	s12, s6
 801826e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018272:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018276:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801827a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801827e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018282:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018286:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801828a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801828e:	ee12 2a90 	vmov	r2, s5
 8018292:	eef0 2a47 	vmov.f32	s5, s14
 8018296:	fb92 f3f3 	sdiv	r3, r2, r3
 801829a:	ee13 2a10 	vmov	r2, s6
 801829e:	9311      	str	r3, [sp, #68]	; 0x44
 80182a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182a2:	eeb0 3a67 	vmov.f32	s6, s15
 80182a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80182aa:	9312      	str	r3, [sp, #72]	; 0x48
 80182ac:	9b00      	ldr	r3, [sp, #0]
 80182ae:	9a03      	ldr	r2, [sp, #12]
 80182b0:	3b01      	subs	r3, #1
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182b6:	bf08      	it	eq
 80182b8:	4613      	moveq	r3, r2
 80182ba:	e72d      	b.n	8018118 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80182bc:	1428      	asrs	r0, r5, #16
 80182be:	d45c      	bmi.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80182c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80182c4:	4282      	cmp	r2, r0
 80182c6:	dd58      	ble.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80182c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80182cc:	d455      	bmi.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80182ce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80182d2:	4572      	cmp	r2, lr
 80182d4:	dd51      	ble.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80182d6:	9a01      	ldr	r2, [sp, #4]
 80182d8:	9902      	ldr	r1, [sp, #8]
 80182da:	fb0e 0002 	mla	r0, lr, r2, r0
 80182de:	0842      	lsrs	r2, r0, #1
 80182e0:	07c0      	lsls	r0, r0, #31
 80182e2:	5c8a      	ldrb	r2, [r1, r2]
 80182e4:	bf54      	ite	pl
 80182e6:	f002 020f 	andpl.w	r2, r2, #15
 80182ea:	1112      	asrmi	r2, r2, #4
 80182ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80182f0:	b2d2      	uxtb	r2, r2
 80182f2:	2a00      	cmp	r2, #0
 80182f4:	d041      	beq.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80182f6:	492d      	ldr	r1, [pc, #180]	; (80183ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80182f8:	2aff      	cmp	r2, #255	; 0xff
 80182fa:	6808      	ldr	r0, [r1, #0]
 80182fc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018300:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018304:	fa5f fe80 	uxtb.w	lr, r0
 8018308:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801830c:	d03b      	beq.n	8018386 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801830e:	fa1f f982 	uxth.w	r9, r2
 8018312:	4438      	add	r0, r7
 8018314:	43d2      	mvns	r2, r2
 8018316:	f816 8000 	ldrb.w	r8, [r6, r0]
 801831a:	fb1e fe09 	smulbb	lr, lr, r9
 801831e:	fb1a fa09 	smulbb	sl, sl, r9
 8018322:	b2d2      	uxtb	r2, r2
 8018324:	fb1b f909 	smulbb	r9, fp, r9
 8018328:	fb08 ee02 	mla	lr, r8, r2, lr
 801832c:	fa1f fe8e 	uxth.w	lr, lr
 8018330:	f10e 0801 	add.w	r8, lr, #1
 8018334:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8018338:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801833c:	f806 e000 	strb.w	lr, [r6, r0]
 8018340:	4430      	add	r0, r6
 8018342:	f890 e001 	ldrb.w	lr, [r0, #1]
 8018346:	fb0e aa02 	mla	sl, lr, r2, sl
 801834a:	fa1f fa8a 	uxth.w	sl, sl
 801834e:	f10a 0e01 	add.w	lr, sl, #1
 8018352:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8018356:	f890 e002 	ldrb.w	lr, [r0, #2]
 801835a:	fb0e 9902 	mla	r9, lr, r2, r9
 801835e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018362:	fa1f f989 	uxth.w	r9, r9
 8018366:	f880 a001 	strb.w	sl, [r0, #1]
 801836a:	f109 0201 	add.w	r2, r9, #1
 801836e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018372:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018376:	f880 9002 	strb.w	r9, [r0, #2]
 801837a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801837c:	3701      	adds	r7, #1
 801837e:	4415      	add	r5, r2
 8018380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018382:	4414      	add	r4, r2
 8018384:	e756      	b.n	8018234 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018386:	4438      	add	r0, r7
 8018388:	f806 e000 	strb.w	lr, [r6, r0]
 801838c:	4430      	add	r0, r6
 801838e:	f880 a001 	strb.w	sl, [r0, #1]
 8018392:	f880 b002 	strb.w	fp, [r0, #2]
 8018396:	e7f0      	b.n	801837a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018398:	f800 7c03 	strb.w	r7, [r0, #-3]
 801839c:	f800 9c02 	strb.w	r9, [r0, #-2]
 80183a0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80183a4:	e73d      	b.n	8018222 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80183a6:	b005      	add	sp, #20
 80183a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183ac:	20011920 	.word	0x20011920

080183b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80183b0:	4770      	bx	lr

080183b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80183b2:	4770      	bx	lr

080183b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80183b4:	4770      	bx	lr

080183b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80183b6:	4770      	bx	lr

080183b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80183b8:	4770      	bx	lr

080183ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80183ba:	4770      	bx	lr

080183bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80183bc:	4770      	bx	lr

080183be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80183be:	4770      	bx	lr

080183c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80183c0:	4770      	bx	lr

080183c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80183c2:	4770      	bx	lr

080183c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80183c4:	4770      	bx	lr

080183c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80183c6:	4770      	bx	lr

080183c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80183c8:	4770      	bx	lr

080183ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80183ca:	4770      	bx	lr

080183cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80183cc:	4770      	bx	lr

080183ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80183ce:	4770      	bx	lr

080183d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80183d0:	4770      	bx	lr

080183d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80183d2:	4770      	bx	lr

080183d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80183d4:	4770      	bx	lr

080183d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80183d6:	4770      	bx	lr

080183d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80183d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183da:	4606      	mov	r6, r0
 80183dc:	b087      	sub	sp, #28
 80183de:	4615      	mov	r5, r2
 80183e0:	461f      	mov	r7, r3
 80183e2:	b353      	cbz	r3, 801843a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80183e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	dd26      	ble.n	801843a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80183ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	dd22      	ble.n	801843a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80183f4:	6808      	ldr	r0, [r1, #0]
 80183f6:	aa04      	add	r2, sp, #16
 80183f8:	6849      	ldr	r1, [r1, #4]
 80183fa:	4c1b      	ldr	r4, [pc, #108]	; (8018468 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80183fc:	c203      	stmia	r2!, {r0, r1}
 80183fe:	a804      	add	r0, sp, #16
 8018400:	f7fa ff1a 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018404:	6820      	ldr	r0, [r4, #0]
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801840a:	4798      	blx	r3
 801840c:	2fff      	cmp	r7, #255	; 0xff
 801840e:	d016      	beq.n	801843e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018410:	f010 0f08 	tst.w	r0, #8
 8018414:	6820      	ldr	r0, [r4, #0]
 8018416:	d015      	beq.n	8018444 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8018418:	2400      	movs	r4, #0
 801841a:	6801      	ldr	r1, [r0, #0]
 801841c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018420:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018424:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8018428:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801842c:	9401      	str	r4, [sp, #4]
 801842e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018432:	9400      	str	r4, [sp, #0]
 8018434:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8018436:	4629      	mov	r1, r5
 8018438:	47a0      	blx	r4
 801843a:	b007      	add	sp, #28
 801843c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801843e:	f010 0f02 	tst.w	r0, #2
 8018442:	e7e7      	b.n	8018414 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8018444:	6803      	ldr	r3, [r0, #0]
 8018446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018448:	4798      	blx	r3
 801844a:	4b08      	ldr	r3, [pc, #32]	; (801846c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801844c:	4601      	mov	r1, r0
 801844e:	4630      	mov	r0, r6
 8018450:	881a      	ldrh	r2, [r3, #0]
 8018452:	6833      	ldr	r3, [r6, #0]
 8018454:	e9cd 5700 	strd	r5, r7, [sp]
 8018458:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801845a:	ab04      	add	r3, sp, #16
 801845c:	47a8      	blx	r5
 801845e:	6820      	ldr	r0, [r4, #0]
 8018460:	6803      	ldr	r3, [r0, #0]
 8018462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018464:	4798      	blx	r3
 8018466:	e7e8      	b.n	801843a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018468:	20011918 	.word	0x20011918
 801846c:	20011910 	.word	0x20011910

08018470 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018474:	b08b      	sub	sp, #44	; 0x2c
 8018476:	460d      	mov	r5, r1
 8018478:	4616      	mov	r6, r2
 801847a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801847e:	f1b8 0f00 	cmp.w	r8, #0
 8018482:	d047      	beq.n	8018514 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018484:	6810      	ldr	r0, [r2, #0]
 8018486:	ac06      	add	r4, sp, #24
 8018488:	6851      	ldr	r1, [r2, #4]
 801848a:	4f51      	ldr	r7, [pc, #324]	; (80185d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801848c:	c403      	stmia	r4!, {r0, r1}
 801848e:	6818      	ldr	r0, [r3, #0]
 8018490:	ac08      	add	r4, sp, #32
 8018492:	6859      	ldr	r1, [r3, #4]
 8018494:	c403      	stmia	r4!, {r0, r1}
 8018496:	a806      	add	r0, sp, #24
 8018498:	f7fa fece 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801849c:	4631      	mov	r1, r6
 801849e:	a808      	add	r0, sp, #32
 80184a0:	f7fa fef2 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80184a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80184a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80184ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80184b0:	6838      	ldr	r0, [r7, #0]
 80184b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80184b6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80184ba:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80184be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80184c2:	440d      	add	r5, r1
 80184c4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80184c8:	440a      	add	r2, r1
 80184ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80184ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80184d2:	4413      	add	r3, r2
 80184d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80184d8:	6803      	ldr	r3, [r0, #0]
 80184da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184dc:	4798      	blx	r3
 80184de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80184e2:	d01a      	beq.n	801851a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80184e4:	f010 0f04 	tst.w	r0, #4
 80184e8:	6838      	ldr	r0, [r7, #0]
 80184ea:	d019      	beq.n	8018520 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80184ec:	2100      	movs	r1, #0
 80184ee:	6807      	ldr	r7, [r0, #0]
 80184f0:	b2a4      	uxth	r4, r4
 80184f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80184f6:	b2b6      	uxth	r6, r6
 80184f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80184fc:	9401      	str	r4, [sp, #4]
 80184fe:	9600      	str	r6, [sp, #0]
 8018500:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018504:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8018508:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801850c:	9102      	str	r1, [sp, #8]
 801850e:	4629      	mov	r1, r5
 8018510:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8018512:	47a0      	blx	r4
 8018514:	b00b      	add	sp, #44	; 0x2c
 8018516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801851a:	f010 0f01 	tst.w	r0, #1
 801851e:	e7e3      	b.n	80184e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8018520:	6803      	ldr	r3, [r0, #0]
 8018522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018524:	4798      	blx	r3
 8018526:	4a2b      	ldr	r2, [pc, #172]	; (80185d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8018528:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801852c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018530:	8813      	ldrh	r3, [r2, #0]
 8018532:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8018536:	fb03 f404 	mul.w	r4, r3, r4
 801853a:	fb03 c101 	mla	r1, r3, r1, ip
 801853e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018542:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018546:	4408      	add	r0, r1
 8018548:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801854c:	4404      	add	r4, r0
 801854e:	d02e      	beq.n	80185ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8018550:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8018554:	1b9b      	subs	r3, r3, r6
 8018556:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801855a:	1b96      	subs	r6, r2, r6
 801855c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018560:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018564:	42a0      	cmp	r0, r4
 8018566:	d22d      	bcs.n	80185c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018568:	eb00 0e01 	add.w	lr, r0, r1
 801856c:	4570      	cmp	r0, lr
 801856e:	d210      	bcs.n	8018592 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8018570:	f890 9000 	ldrb.w	r9, [r0]
 8018574:	f815 2b01 	ldrb.w	r2, [r5], #1
 8018578:	fb19 f90c 	smulbb	r9, r9, ip
 801857c:	fb02 9208 	mla	r2, r2, r8, r9
 8018580:	b292      	uxth	r2, r2
 8018582:	f102 0901 	add.w	r9, r2, #1
 8018586:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801858a:	1212      	asrs	r2, r2, #8
 801858c:	f800 2b01 	strb.w	r2, [r0], #1
 8018590:	e7ec      	b.n	801856c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8018592:	4418      	add	r0, r3
 8018594:	4435      	add	r5, r6
 8018596:	e7e5      	b.n	8018564 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8018598:	8813      	ldrh	r3, [r2, #0]
 801859a:	1b9b      	subs	r3, r3, r6
 801859c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185a0:	4418      	add	r0, r3
 80185a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80185a6:	1b9b      	subs	r3, r3, r6
 80185a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185ac:	441d      	add	r5, r3
 80185ae:	42a0      	cmp	r0, r4
 80185b0:	d208      	bcs.n	80185c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80185b2:	eb00 0c01 	add.w	ip, r0, r1
 80185b6:	4560      	cmp	r0, ip
 80185b8:	d2ee      	bcs.n	8018598 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80185ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80185be:	f800 3b01 	strb.w	r3, [r0], #1
 80185c2:	e7f8      	b.n	80185b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80185c4:	6838      	ldr	r0, [r7, #0]
 80185c6:	6803      	ldr	r3, [r0, #0]
 80185c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ca:	4798      	blx	r3
 80185cc:	e7a2      	b.n	8018514 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80185ce:	bf00      	nop
 80185d0:	20011918 	.word	0x20011918
 80185d4:	20011910 	.word	0x20011910

080185d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80185d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185da:	2300      	movs	r3, #0
 80185dc:	b085      	sub	sp, #20
 80185de:	9300      	str	r3, [sp, #0]
 80185e0:	4b41      	ldr	r3, [pc, #260]	; (80186e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80185e2:	781b      	ldrb	r3, [r3, #0]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d136      	bne.n	8018656 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80185e8:	4a40      	ldr	r2, [pc, #256]	; (80186ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80185ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80185ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d131      	bne.n	801865a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80185f6:	4b3e      	ldr	r3, [pc, #248]	; (80186f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80185f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185fc:	ac02      	add	r4, sp, #8
 80185fe:	6808      	ldr	r0, [r1, #0]
 8018600:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018604:	ab02      	add	r3, sp, #8
 8018606:	6849      	ldr	r1, [r1, #4]
 8018608:	4d3a      	ldr	r5, [pc, #232]	; (80186f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801860a:	c303      	stmia	r3!, {r0, r1}
 801860c:	4669      	mov	r1, sp
 801860e:	4620      	mov	r0, r4
 8018610:	f7fa fe3a 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018614:	4668      	mov	r0, sp
 8018616:	f7fa fe0f 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801861a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801861e:	f8bd 2000 	ldrh.w	r2, [sp]
 8018622:	462e      	mov	r6, r5
 8018624:	6828      	ldr	r0, [r5, #0]
 8018626:	4413      	add	r3, r2
 8018628:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801862c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8018630:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018634:	4413      	add	r3, r2
 8018636:	f8ad 300a 	strh.w	r3, [sp, #10]
 801863a:	6803      	ldr	r3, [r0, #0]
 801863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801863e:	4798      	blx	r3
 8018640:	f010 0f01 	tst.w	r0, #1
 8018644:	d00b      	beq.n	801865e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8018646:	6828      	ldr	r0, [r5, #0]
 8018648:	6803      	ldr	r3, [r0, #0]
 801864a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801864e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018650:	4798      	blx	r3
 8018652:	b005      	add	sp, #20
 8018654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018656:	4a26      	ldr	r2, [pc, #152]	; (80186f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8018658:	e7c7      	b.n	80185ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801865a:	4b24      	ldr	r3, [pc, #144]	; (80186ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801865c:	e7cc      	b.n	80185f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801865e:	6830      	ldr	r0, [r6, #0]
 8018660:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8018664:	6803      	ldr	r3, [r0, #0]
 8018666:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801866c:	4798      	blx	r3
 801866e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8018672:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018676:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801867a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801867e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018682:	4404      	add	r4, r0
 8018684:	6830      	ldr	r0, [r6, #0]
 8018686:	6803      	ldr	r3, [r0, #0]
 8018688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801868a:	4798      	blx	r3
 801868c:	4917      	ldr	r1, [pc, #92]	; (80186ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801868e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8018692:	880b      	ldrh	r3, [r1, #0]
 8018694:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8018698:	fb03 c202 	mla	r2, r3, r2, ip
 801869c:	437b      	muls	r3, r7
 801869e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80186a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80186a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186aa:	4410      	add	r0, r2
 80186ac:	18c2      	adds	r2, r0, r3
 80186ae:	4290      	cmp	r0, r2
 80186b0:	d214      	bcs.n	80186dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80186b2:	eb00 0c07 	add.w	ip, r0, r7
 80186b6:	4560      	cmp	r0, ip
 80186b8:	d204      	bcs.n	80186c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80186ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80186be:	f800 3b01 	strb.w	r3, [r0], #1
 80186c2:	e7f8      	b.n	80186b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80186c4:	880b      	ldrh	r3, [r1, #0]
 80186c6:	1b5b      	subs	r3, r3, r5
 80186c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186cc:	4418      	add	r0, r3
 80186ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80186d2:	1b5b      	subs	r3, r3, r5
 80186d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186d8:	441c      	add	r4, r3
 80186da:	e7e8      	b.n	80186ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80186dc:	6830      	ldr	r0, [r6, #0]
 80186de:	6803      	ldr	r3, [r0, #0]
 80186e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186e2:	4798      	blx	r3
 80186e4:	e7b5      	b.n	8018652 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80186e6:	bf00      	nop
 80186e8:	2001190e 	.word	0x2001190e
 80186ec:	20011910 	.word	0x20011910
 80186f0:	20011912 	.word	0x20011912
 80186f4:	20011918 	.word	0x20011918

080186f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	b089      	sub	sp, #36	; 0x24
 80186fe:	4607      	mov	r7, r0
 8018700:	4689      	mov	r9, r1
 8018702:	4692      	mov	sl, r2
 8018704:	ac08      	add	r4, sp, #32
 8018706:	461e      	mov	r6, r3
 8018708:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801870c:	4620      	mov	r0, r4
 801870e:	f7fe f8f1 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	4605      	mov	r5, r0
 8018716:	4620      	mov	r0, r4
 8018718:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801871c:	f7fe f836 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018720:	4683      	mov	fp, r0
 8018722:	4620      	mov	r0, r4
 8018724:	f7fe f866 	bl	80167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018728:	4653      	mov	r3, sl
 801872a:	464a      	mov	r2, r9
 801872c:	4639      	mov	r1, r7
 801872e:	9500      	str	r5, [sp, #0]
 8018730:	e9cd b001 	strd	fp, r0, [sp, #4]
 8018734:	a806      	add	r0, sp, #24
 8018736:	47c0      	blx	r8
 8018738:	a906      	add	r1, sp, #24
 801873a:	4630      	mov	r0, r6
 801873c:	f7fd ff0a 	bl	8016554 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8018740:	4628      	mov	r0, r5
 8018742:	b009      	add	sp, #36	; 0x24
 8018744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018748 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018748:	b510      	push	{r4, lr}
 801874a:	4604      	mov	r4, r0
 801874c:	2104      	movs	r1, #4
 801874e:	f006 f8ee 	bl	801e92e <_ZdlPvj>
 8018752:	4620      	mov	r0, r4
 8018754:	bd10      	pop	{r4, pc}

08018756 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8018756:	b510      	push	{r4, lr}
 8018758:	4604      	mov	r4, r0
 801875a:	2104      	movs	r1, #4
 801875c:	f006 f8e7 	bl	801e92e <_ZdlPvj>
 8018760:	4620      	mov	r0, r4
 8018762:	bd10      	pop	{r4, pc}

08018764 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018764:	b510      	push	{r4, lr}
 8018766:	4604      	mov	r4, r0
 8018768:	2104      	movs	r1, #4
 801876a:	f006 f8e0 	bl	801e92e <_ZdlPvj>
 801876e:	4620      	mov	r0, r4
 8018770:	bd10      	pop	{r4, pc}

08018772 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8018772:	b510      	push	{r4, lr}
 8018774:	4604      	mov	r4, r0
 8018776:	2104      	movs	r1, #4
 8018778:	f006 f8d9 	bl	801e92e <_ZdlPvj>
 801877c:	4620      	mov	r0, r4
 801877e:	bd10      	pop	{r4, pc}

08018780 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018780:	b510      	push	{r4, lr}
 8018782:	4604      	mov	r4, r0
 8018784:	2104      	movs	r1, #4
 8018786:	f006 f8d2 	bl	801e92e <_ZdlPvj>
 801878a:	4620      	mov	r0, r4
 801878c:	bd10      	pop	{r4, pc}

0801878e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801878e:	b510      	push	{r4, lr}
 8018790:	4604      	mov	r4, r0
 8018792:	2104      	movs	r1, #4
 8018794:	f006 f8cb 	bl	801e92e <_ZdlPvj>
 8018798:	4620      	mov	r0, r4
 801879a:	bd10      	pop	{r4, pc}

0801879c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801879c:	b510      	push	{r4, lr}
 801879e:	4604      	mov	r4, r0
 80187a0:	2104      	movs	r1, #4
 80187a2:	f006 f8c4 	bl	801e92e <_ZdlPvj>
 80187a6:	4620      	mov	r0, r4
 80187a8:	bd10      	pop	{r4, pc}

080187aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80187aa:	b510      	push	{r4, lr}
 80187ac:	4604      	mov	r4, r0
 80187ae:	2104      	movs	r1, #4
 80187b0:	f006 f8bd 	bl	801e92e <_ZdlPvj>
 80187b4:	4620      	mov	r0, r4
 80187b6:	bd10      	pop	{r4, pc}

080187b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80187b8:	b510      	push	{r4, lr}
 80187ba:	4604      	mov	r4, r0
 80187bc:	2104      	movs	r1, #4
 80187be:	f006 f8b6 	bl	801e92e <_ZdlPvj>
 80187c2:	4620      	mov	r0, r4
 80187c4:	bd10      	pop	{r4, pc}

080187c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80187c6:	b510      	push	{r4, lr}
 80187c8:	4604      	mov	r4, r0
 80187ca:	2104      	movs	r1, #4
 80187cc:	f006 f8af 	bl	801e92e <_ZdlPvj>
 80187d0:	4620      	mov	r0, r4
 80187d2:	bd10      	pop	{r4, pc}

080187d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80187d4:	b510      	push	{r4, lr}
 80187d6:	4604      	mov	r4, r0
 80187d8:	2104      	movs	r1, #4
 80187da:	f006 f8a8 	bl	801e92e <_ZdlPvj>
 80187de:	4620      	mov	r0, r4
 80187e0:	bd10      	pop	{r4, pc}

080187e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80187e2:	b510      	push	{r4, lr}
 80187e4:	4604      	mov	r4, r0
 80187e6:	2104      	movs	r1, #4
 80187e8:	f006 f8a1 	bl	801e92e <_ZdlPvj>
 80187ec:	4620      	mov	r0, r4
 80187ee:	bd10      	pop	{r4, pc}

080187f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80187f0:	b510      	push	{r4, lr}
 80187f2:	4604      	mov	r4, r0
 80187f4:	2104      	movs	r1, #4
 80187f6:	f006 f89a 	bl	801e92e <_ZdlPvj>
 80187fa:	4620      	mov	r0, r4
 80187fc:	bd10      	pop	{r4, pc}

080187fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80187fe:	b510      	push	{r4, lr}
 8018800:	4604      	mov	r4, r0
 8018802:	2104      	movs	r1, #4
 8018804:	f006 f893 	bl	801e92e <_ZdlPvj>
 8018808:	4620      	mov	r0, r4
 801880a:	bd10      	pop	{r4, pc}

0801880c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801880c:	b510      	push	{r4, lr}
 801880e:	4604      	mov	r4, r0
 8018810:	2104      	movs	r1, #4
 8018812:	f006 f88c 	bl	801e92e <_ZdlPvj>
 8018816:	4620      	mov	r0, r4
 8018818:	bd10      	pop	{r4, pc}

0801881a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801881a:	b510      	push	{r4, lr}
 801881c:	4604      	mov	r4, r0
 801881e:	2104      	movs	r1, #4
 8018820:	f006 f885 	bl	801e92e <_ZdlPvj>
 8018824:	4620      	mov	r0, r4
 8018826:	bd10      	pop	{r4, pc}

08018828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8018828:	b510      	push	{r4, lr}
 801882a:	4604      	mov	r4, r0
 801882c:	2104      	movs	r1, #4
 801882e:	f006 f87e 	bl	801e92e <_ZdlPvj>
 8018832:	4620      	mov	r0, r4
 8018834:	bd10      	pop	{r4, pc}

08018836 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8018836:	b510      	push	{r4, lr}
 8018838:	4604      	mov	r4, r0
 801883a:	2104      	movs	r1, #4
 801883c:	f006 f877 	bl	801e92e <_ZdlPvj>
 8018840:	4620      	mov	r0, r4
 8018842:	bd10      	pop	{r4, pc}

08018844 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8018844:	b510      	push	{r4, lr}
 8018846:	4604      	mov	r4, r0
 8018848:	2104      	movs	r1, #4
 801884a:	f006 f870 	bl	801e92e <_ZdlPvj>
 801884e:	4620      	mov	r0, r4
 8018850:	bd10      	pop	{r4, pc}

08018852 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8018852:	b510      	push	{r4, lr}
 8018854:	4604      	mov	r4, r0
 8018856:	2104      	movs	r1, #4
 8018858:	f006 f869 	bl	801e92e <_ZdlPvj>
 801885c:	4620      	mov	r0, r4
 801885e:	bd10      	pop	{r4, pc}

08018860 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018864:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018868:	9c06      	ldr	r4, [sp, #24]
 801886a:	2800      	cmp	r0, #0
 801886c:	d06e      	beq.n	801894c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801886e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018872:	2d00      	cmp	r5, #0
 8018874:	dd6a      	ble.n	801894c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018876:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801887a:	f1bc 0f00 	cmp.w	ip, #0
 801887e:	dd65      	ble.n	801894c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018880:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8018884:	28ff      	cmp	r0, #255	; 0xff
 8018886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801888a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801888e:	fb02 3306 	mla	r3, r2, r6, r3
 8018892:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8018896:	b2e4      	uxtb	r4, r4
 8018898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801889c:	4419      	add	r1, r3
 801889e:	fb02 f30c 	mul.w	r3, r2, ip
 80188a2:	eba2 0205 	sub.w	r2, r2, r5
 80188a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188b2:	440b      	add	r3, r1
 80188b4:	d03e      	beq.n	8018934 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80188b6:	fa1f fc80 	uxth.w	ip, r0
 80188ba:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80188be:	fb06 f60c 	mul.w	r6, r6, ip
 80188c2:	b280      	uxth	r0, r0
 80188c4:	fb07 f70c 	mul.w	r7, r7, ip
 80188c8:	fb04 f40c 	mul.w	r4, r4, ip
 80188cc:	4299      	cmp	r1, r3
 80188ce:	d23d      	bcs.n	801894c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80188d0:	eb01 0c05 	add.w	ip, r1, r5
 80188d4:	458c      	cmp	ip, r1
 80188d6:	f101 0e03 	add.w	lr, r1, #3
 80188da:	d928      	bls.n	801892e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80188dc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80188e0:	fb11 f100 	smulbb	r1, r1, r0
 80188e4:	4421      	add	r1, r4
 80188e6:	b289      	uxth	r1, r1
 80188e8:	f101 0801 	add.w	r8, r1, #1
 80188ec:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80188f0:	1209      	asrs	r1, r1, #8
 80188f2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80188f6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80188fa:	fb11 f100 	smulbb	r1, r1, r0
 80188fe:	4439      	add	r1, r7
 8018900:	b289      	uxth	r1, r1
 8018902:	f101 0801 	add.w	r8, r1, #1
 8018906:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801890a:	1209      	asrs	r1, r1, #8
 801890c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018910:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8018914:	fb11 f100 	smulbb	r1, r1, r0
 8018918:	4431      	add	r1, r6
 801891a:	b289      	uxth	r1, r1
 801891c:	f101 0801 	add.w	r8, r1, #1
 8018920:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018924:	1209      	asrs	r1, r1, #8
 8018926:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801892a:	4671      	mov	r1, lr
 801892c:	e7d2      	b.n	80188d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801892e:	4411      	add	r1, r2
 8018930:	e7cc      	b.n	80188cc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8018932:	4411      	add	r1, r2
 8018934:	4299      	cmp	r1, r3
 8018936:	d209      	bcs.n	801894c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018938:	1948      	adds	r0, r1, r5
 801893a:	4281      	cmp	r1, r0
 801893c:	d2f9      	bcs.n	8018932 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801893e:	700c      	strb	r4, [r1, #0]
 8018940:	3103      	adds	r1, #3
 8018942:	f801 7c02 	strb.w	r7, [r1, #-2]
 8018946:	f801 6c01 	strb.w	r6, [r1, #-1]
 801894a:	e7f6      	b.n	801893a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018954:	b093      	sub	sp, #76	; 0x4c
 8018956:	4699      	mov	r9, r3
 8018958:	4617      	mov	r7, r2
 801895a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801895e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8018962:	4604      	mov	r4, r0
 8018964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018968:	a80c      	add	r0, sp, #48	; 0x30
 801896a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801896e:	460d      	mov	r5, r1
 8018970:	4649      	mov	r1, r9
 8018972:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8018976:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801897a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801897e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8018982:	f7f7 fb79 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 8018986:	4639      	mov	r1, r7
 8018988:	a80c      	add	r0, sp, #48	; 0x30
 801898a:	f7f7 fb75 	bl	8010078 <_ZN8touchgfx4RectaNERKS0_>
 801898e:	4b78      	ldr	r3, [pc, #480]	; (8018b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018990:	8818      	ldrh	r0, [r3, #0]
 8018992:	4b78      	ldr	r3, [pc, #480]	; (8018b74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8018994:	b202      	sxth	r2, r0
 8018996:	8819      	ldrh	r1, [r3, #0]
 8018998:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801899c:	b20f      	sxth	r7, r1
 801899e:	2b00      	cmp	r3, #0
 80189a0:	da07      	bge.n	80189b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80189a2:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 80189a6:	4463      	add	r3, ip
 80189a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80189ac:	2300      	movs	r3, #0
 80189ae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80189b2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80189b6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80189ba:	1ad2      	subs	r2, r2, r3
 80189bc:	4594      	cmp	ip, r2
 80189be:	bfc4      	itt	gt
 80189c0:	1ac2      	subgt	r2, r0, r3
 80189c2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 80189c6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80189ca:	2a00      	cmp	r2, #0
 80189cc:	da07      	bge.n	80189de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80189ce:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80189d2:	4462      	add	r2, ip
 80189d4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80189d8:	2200      	movs	r2, #0
 80189da:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80189de:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80189e2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80189e6:	1abf      	subs	r7, r7, r2
 80189e8:	45bc      	cmp	ip, r7
 80189ea:	f8df c190 	ldr.w	ip, [pc, #400]	; 8018b7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80189ee:	bfc8      	it	gt
 80189f0:	1a8f      	subgt	r7, r1, r2
 80189f2:	f89c c000 	ldrb.w	ip, [ip]
 80189f6:	bfc8      	it	gt
 80189f8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80189fc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8018a00:	f1bc 0f00 	cmp.w	ip, #0
 8018a04:	d176      	bne.n	8018af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8018a06:	4287      	cmp	r7, r0
 8018a08:	bf14      	ite	ne
 8018a0a:	2100      	movne	r1, #0
 8018a0c:	2101      	moveq	r1, #1
 8018a0e:	2f00      	cmp	r7, #0
 8018a10:	9107      	str	r1, [sp, #28]
 8018a12:	dd73      	ble.n	8018afc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018a14:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8018a18:	2900      	cmp	r1, #0
 8018a1a:	9104      	str	r1, [sp, #16]
 8018a1c:	dd6e      	ble.n	8018afc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018a1e:	f8b9 1000 	ldrh.w	r1, [r9]
 8018a22:	a80e      	add	r0, sp, #56	; 0x38
 8018a24:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8018a28:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8018a2c:	1a5b      	subs	r3, r3, r1
 8018a2e:	a910      	add	r1, sp, #64	; 0x40
 8018a30:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8018a34:	b21b      	sxth	r3, r3
 8018a36:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8018a3a:	f8df a144 	ldr.w	sl, [pc, #324]	; 8018b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018a3e:	9305      	str	r3, [sp, #20]
 8018a40:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8018a44:	1ad2      	subs	r2, r2, r3
 8018a46:	b213      	sxth	r3, r2
 8018a48:	9306      	str	r3, [sp, #24]
 8018a4a:	9b05      	ldr	r3, [sp, #20]
 8018a4c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018a50:	9b06      	ldr	r3, [sp, #24]
 8018a52:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018a56:	9b04      	ldr	r3, [sp, #16]
 8018a58:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	9310      	str	r3, [sp, #64]	; 0x40
 8018a60:	f7fa fc12 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018a64:	4640      	mov	r0, r8
 8018a66:	f7fa fbe7 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018a6a:	a810      	add	r0, sp, #64	; 0x40
 8018a6c:	f7fa fbe4 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018a70:	4b41      	ldr	r3, [pc, #260]	; (8018b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8018a72:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8018a76:	4628      	mov	r0, r5
 8018a78:	881b      	ldrh	r3, [r3, #0]
 8018a7a:	9308      	str	r3, [sp, #32]
 8018a7c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8018a80:	b21b      	sxth	r3, r3
 8018a82:	9303      	str	r3, [sp, #12]
 8018a84:	682b      	ldr	r3, [r5, #0]
 8018a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a88:	4798      	blx	r3
 8018a8a:	9a03      	ldr	r2, [sp, #12]
 8018a8c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018a90:	4681      	mov	r9, r0
 8018a92:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018a96:	fb13 f302 	smulbb	r3, r3, r2
 8018a9a:	2203      	movs	r2, #3
 8018a9c:	f8da 0000 	ldr.w	r0, [sl]
 8018aa0:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018aa4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8018aa6:	920b      	str	r2, [sp, #44]	; 0x2c
 8018aa8:	441d      	add	r5, r3
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aae:	4798      	blx	r3
 8018ab0:	9009      	str	r0, [sp, #36]	; 0x24
 8018ab2:	f8da 0000 	ldr.w	r0, [sl]
 8018ab6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018aba:	6803      	ldr	r3, [r0, #0]
 8018abc:	910a      	str	r1, [sp, #40]	; 0x28
 8018abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ac0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8018ac4:	4798      	blx	r3
 8018ac6:	f010 0f01 	tst.w	r0, #1
 8018aca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8018ace:	d01e      	beq.n	8018b0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8018ad0:	f8da 0000 	ldr.w	r0, [sl]
 8018ad4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8018ad8:	6803      	ldr	r3, [r0, #0]
 8018ada:	9200      	str	r2, [sp, #0]
 8018adc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8018ade:	462b      	mov	r3, r5
 8018ae0:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018ae4:	47b0      	blx	r6
 8018ae6:	9b05      	ldr	r3, [sp, #20]
 8018ae8:	80a7      	strh	r7, [r4, #4]
 8018aea:	8023      	strh	r3, [r4, #0]
 8018aec:	9b06      	ldr	r3, [sp, #24]
 8018aee:	8063      	strh	r3, [r4, #2]
 8018af0:	9b04      	ldr	r3, [sp, #16]
 8018af2:	e007      	b.n	8018b04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8018af4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8018af8:	4288      	cmp	r0, r1
 8018afa:	e785      	b.n	8018a08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8018afc:	2300      	movs	r3, #0
 8018afe:	8023      	strh	r3, [r4, #0]
 8018b00:	8063      	strh	r3, [r4, #2]
 8018b02:	80a3      	strh	r3, [r4, #4]
 8018b04:	4620      	mov	r0, r4
 8018b06:	80e3      	strh	r3, [r4, #6]
 8018b08:	b013      	add	sp, #76	; 0x4c
 8018b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b0e:	fb09 f606 	mul.w	r6, r9, r6
 8018b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b14:	fb11 6602 	smlabb	r6, r1, r2, r6
 8018b18:	9a07      	ldr	r2, [sp, #28]
 8018b1a:	4433      	add	r3, r6
 8018b1c:	461e      	mov	r6, r3
 8018b1e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018b22:	b16a      	cbz	r2, 8018b40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018b24:	9a08      	ldr	r2, [sp, #32]
 8018b26:	4593      	cmp	fp, r2
 8018b28:	d10a      	bne.n	8018b40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018b2a:	f8da 0000 	ldr.w	r0, [sl]
 8018b2e:	fb09 f303 	mul.w	r3, r9, r3
 8018b32:	4629      	mov	r1, r5
 8018b34:	6802      	ldr	r2, [r0, #0]
 8018b36:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8018b3a:	4632      	mov	r2, r6
 8018b3c:	47d0      	blx	sl
 8018b3e:	e7d2      	b.n	8018ae6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018b40:	9a03      	ldr	r2, [sp, #12]
 8018b42:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8018b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018b46:	fb02 5803 	mla	r8, r2, r3, r5
 8018b4a:	4545      	cmp	r5, r8
 8018b4c:	d2cb      	bcs.n	8018ae6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018b4e:	f8db 0000 	ldr.w	r0, [fp]
 8018b52:	4629      	mov	r1, r5
 8018b54:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8018b58:	6802      	ldr	r2, [r0, #0]
 8018b5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b5e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8018b62:	4632      	mov	r2, r6
 8018b64:	47d0      	blx	sl
 8018b66:	9b03      	ldr	r3, [sp, #12]
 8018b68:	444e      	add	r6, r9
 8018b6a:	441d      	add	r5, r3
 8018b6c:	e7ed      	b.n	8018b4a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8018b6e:	bf00      	nop
 8018b70:	2001190a 	.word	0x2001190a
 8018b74:	2001190c 	.word	0x2001190c
 8018b78:	20011910 	.word	0x20011910
 8018b7c:	2001190e 	.word	0x2001190e
 8018b80:	20011918 	.word	0x20011918

08018b84 <_ZN8touchgfx8LCD24bppC1Ev>:
 8018b84:	2200      	movs	r2, #0
 8018b86:	490c      	ldr	r1, [pc, #48]	; (8018bb8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8018b88:	6042      	str	r2, [r0, #4]
 8018b8a:	6001      	str	r1, [r0, #0]
 8018b8c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8018b90:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8018b94:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8018b98:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8018b9c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8018ba0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8018ba4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8018ba8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8018bac:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8018bb0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8018bb4:	4770      	bx	lr
 8018bb6:	bf00      	nop
 8018bb8:	08021b80 	.word	0x08021b80

08018bbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8018bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bc0:	b091      	sub	sp, #68	; 0x44
 8018bc2:	4607      	mov	r7, r0
 8018bc4:	4688      	mov	r8, r1
 8018bc6:	6810      	ldr	r0, [r2, #0]
 8018bc8:	6851      	ldr	r1, [r2, #4]
 8018bca:	ac0c      	add	r4, sp, #48	; 0x30
 8018bcc:	4616      	mov	r6, r2
 8018bce:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8018bd2:	4d64      	ldr	r5, [pc, #400]	; (8018d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018bd4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8018d68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8018bd8:	c403      	stmia	r4!, {r0, r1}
 8018bda:	6818      	ldr	r0, [r3, #0]
 8018bdc:	ac0e      	add	r4, sp, #56	; 0x38
 8018bde:	6859      	ldr	r1, [r3, #4]
 8018be0:	c403      	stmia	r4!, {r0, r1}
 8018be2:	a80c      	add	r0, sp, #48	; 0x30
 8018be4:	f7fa fb28 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018be8:	4631      	mov	r1, r6
 8018bea:	a80e      	add	r0, sp, #56	; 0x38
 8018bec:	f7fa fb4c 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018bf0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018bf4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018bf8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018bfc:	6828      	ldr	r0, [r5, #0]
 8018bfe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018c02:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8018c06:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8018c0a:	440f      	add	r7, r1
 8018c0c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018c10:	440a      	add	r2, r1
 8018c12:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018c16:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018c1a:	4413      	add	r3, r2
 8018c1c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018c20:	6803      	ldr	r3, [r0, #0]
 8018c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c24:	4798      	blx	r3
 8018c26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018c2a:	6828      	ldr	r0, [r5, #0]
 8018c2c:	d01f      	beq.n	8018c6e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8018c2e:	2201      	movs	r2, #1
 8018c30:	2500      	movs	r5, #0
 8018c32:	6801      	ldr	r1, [r0, #0]
 8018c34:	b2a4      	uxth	r4, r4
 8018c36:	b2b6      	uxth	r6, r6
 8018c38:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018c3c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8018c40:	250b      	movs	r5, #11
 8018c42:	9507      	str	r5, [sp, #28]
 8018c44:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c48:	f8cd 9010 	str.w	r9, [sp, #16]
 8018c4c:	9602      	str	r6, [sp, #8]
 8018c4e:	9401      	str	r4, [sp, #4]
 8018c50:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8018c54:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8018c58:	9203      	str	r2, [sp, #12]
 8018c5a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018c5e:	9200      	str	r2, [sp, #0]
 8018c60:	4642      	mov	r2, r8
 8018c62:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8018c64:	4639      	mov	r1, r7
 8018c66:	47a0      	blx	r4
 8018c68:	b011      	add	sp, #68	; 0x44
 8018c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c6e:	6803      	ldr	r3, [r0, #0]
 8018c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c72:	4798      	blx	r3
 8018c74:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c78:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018c7c:	f04f 0e04 	mov.w	lr, #4
 8018c80:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018c84:	436e      	muls	r6, r5
 8018c86:	fb05 2303 	mla	r3, r5, r3, r2
 8018c8a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018c8e:	1b2d      	subs	r5, r5, r4
 8018c90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c98:	4418      	add	r0, r3
 8018c9a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018c9e:	1982      	adds	r2, r0, r6
 8018ca0:	1b1b      	subs	r3, r3, r4
 8018ca2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ca8:	4290      	cmp	r0, r2
 8018caa:	d254      	bcs.n	8018d56 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018cac:	eb00 0a04 	add.w	sl, r0, r4
 8018cb0:	4550      	cmp	r0, sl
 8018cb2:	d24c      	bcs.n	8018d4e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8018cb4:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018cb8:	fb1e e101 	smlabb	r1, lr, r1, lr
 8018cbc:	eb08 0c01 	add.w	ip, r8, r1
 8018cc0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018cc4:	b173      	cbz	r3, 8018ce4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018cc6:	2bff      	cmp	r3, #255	; 0xff
 8018cc8:	f818 b001 	ldrb.w	fp, [r8, r1]
 8018ccc:	d10c      	bne.n	8018ce8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018cce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018cd2:	d109      	bne.n	8018ce8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018cd4:	f880 b000 	strb.w	fp, [r0]
 8018cd8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018cdc:	7043      	strb	r3, [r0, #1]
 8018cde:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018ce2:	7083      	strb	r3, [r0, #2]
 8018ce4:	3003      	adds	r0, #3
 8018ce6:	e7e3      	b.n	8018cb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8018ce8:	fb09 f103 	mul.w	r1, r9, r3
 8018cec:	1c4b      	adds	r3, r1, #1
 8018cee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018cf2:	7801      	ldrb	r1, [r0, #0]
 8018cf4:	121b      	asrs	r3, r3, #8
 8018cf6:	b29e      	uxth	r6, r3
 8018cf8:	43db      	mvns	r3, r3
 8018cfa:	fb1b fb06 	smulbb	fp, fp, r6
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	fb01 b103 	mla	r1, r1, r3, fp
 8018d04:	b289      	uxth	r1, r1
 8018d06:	f101 0b01 	add.w	fp, r1, #1
 8018d0a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018d0e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018d12:	fb1b fb03 	smulbb	fp, fp, r3
 8018d16:	1209      	asrs	r1, r1, #8
 8018d18:	7001      	strb	r1, [r0, #0]
 8018d1a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018d1e:	fb01 b106 	mla	r1, r1, r6, fp
 8018d22:	b289      	uxth	r1, r1
 8018d24:	f101 0b01 	add.w	fp, r1, #1
 8018d28:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018d2c:	1209      	asrs	r1, r1, #8
 8018d2e:	7041      	strb	r1, [r0, #1]
 8018d30:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8018d34:	f890 c002 	ldrb.w	ip, [r0, #2]
 8018d38:	fb1c f303 	smulbb	r3, ip, r3
 8018d3c:	fb01 3606 	mla	r6, r1, r6, r3
 8018d40:	b2b6      	uxth	r6, r6
 8018d42:	1c73      	adds	r3, r6, #1
 8018d44:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018d48:	1236      	asrs	r6, r6, #8
 8018d4a:	7086      	strb	r6, [r0, #2]
 8018d4c:	e7ca      	b.n	8018ce4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d50:	4428      	add	r0, r5
 8018d52:	441f      	add	r7, r3
 8018d54:	e7a8      	b.n	8018ca8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8018d56:	4b03      	ldr	r3, [pc, #12]	; (8018d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018d58:	6818      	ldr	r0, [r3, #0]
 8018d5a:	6803      	ldr	r3, [r0, #0]
 8018d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d5e:	4798      	blx	r3
 8018d60:	e782      	b.n	8018c68 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8018d62:	bf00      	nop
 8018d64:	20011918 	.word	0x20011918
 8018d68:	20011910 	.word	0x20011910

08018d6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8018d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d70:	b091      	sub	sp, #68	; 0x44
 8018d72:	4680      	mov	r8, r0
 8018d74:	460e      	mov	r6, r1
 8018d76:	6810      	ldr	r0, [r2, #0]
 8018d78:	6851      	ldr	r1, [r2, #4]
 8018d7a:	ad0c      	add	r5, sp, #48	; 0x30
 8018d7c:	4614      	mov	r4, r2
 8018d7e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8018d82:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8018f1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8018d86:	f8df a198 	ldr.w	sl, [pc, #408]	; 8018f20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8018d8a:	c503      	stmia	r5!, {r0, r1}
 8018d8c:	6818      	ldr	r0, [r3, #0]
 8018d8e:	ad0e      	add	r5, sp, #56	; 0x38
 8018d90:	6859      	ldr	r1, [r3, #4]
 8018d92:	c503      	stmia	r5!, {r0, r1}
 8018d94:	a80c      	add	r0, sp, #48	; 0x30
 8018d96:	f7fa fa4f 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018d9a:	4621      	mov	r1, r4
 8018d9c:	a80e      	add	r0, sp, #56	; 0x38
 8018d9e:	f7fa fa73 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018da2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8018da6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018daa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8018dae:	f8d9 0000 	ldr.w	r0, [r9]
 8018db2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018db6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8018dba:	eb08 0401 	add.w	r4, r8, r1
 8018dbe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018dc2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8018dc6:	440a      	add	r2, r1
 8018dc8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018dcc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018dd0:	4413      	add	r3, r2
 8018dd2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018dd6:	6803      	ldr	r3, [r0, #0]
 8018dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dda:	4798      	blx	r3
 8018ddc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018de0:	f8d9 0000 	ldr.w	r0, [r9]
 8018de4:	d022      	beq.n	8018e2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8018de6:	2200      	movs	r2, #0
 8018de8:	f04f 0c01 	mov.w	ip, #1
 8018dec:	6801      	ldr	r1, [r0, #0]
 8018dee:	b2ad      	uxth	r5, r5
 8018df0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018df4:	e9cd c208 	strd	ip, r2, [sp, #32]
 8018df8:	f04f 0c0b 	mov.w	ip, #11
 8018dfc:	f8cd c01c 	str.w	ip, [sp, #28]
 8018e00:	f8ba c000 	ldrh.w	ip, [sl]
 8018e04:	9704      	str	r7, [sp, #16]
 8018e06:	9502      	str	r5, [sp, #8]
 8018e08:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8018e0c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8018e10:	9203      	str	r2, [sp, #12]
 8018e12:	fa1f f288 	uxth.w	r2, r8
 8018e16:	9201      	str	r2, [sp, #4]
 8018e18:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018e1c:	9200      	str	r2, [sp, #0]
 8018e1e:	4632      	mov	r2, r6
 8018e20:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8018e22:	4621      	mov	r1, r4
 8018e24:	47a8      	blx	r5
 8018e26:	b011      	add	sp, #68	; 0x44
 8018e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2c:	6803      	ldr	r3, [r0, #0]
 8018e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e30:	4798      	blx	r3
 8018e32:	f8ba 2000 	ldrh.w	r2, [sl]
 8018e36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018e3a:	f04f 0e03 	mov.w	lr, #3
 8018e3e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8018e42:	4355      	muls	r5, r2
 8018e44:	fa1f fc87 	uxth.w	ip, r7
 8018e48:	fb02 1303 	mla	r3, r2, r3, r1
 8018e4c:	eba2 0208 	sub.w	r2, r2, r8
 8018e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e5c:	4418      	add	r0, r3
 8018e5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8018e60:	1943      	adds	r3, r0, r5
 8018e62:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018e66:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8018e6a:	eba2 0208 	sub.w	r2, r2, r8
 8018e6e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018e72:	b2ad      	uxth	r5, r5
 8018e74:	4298      	cmp	r0, r3
 8018e76:	d24a      	bcs.n	8018f0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8018e78:	eb00 0908 	add.w	r9, r0, r8
 8018e7c:	4621      	mov	r1, r4
 8018e7e:	4548      	cmp	r0, r9
 8018e80:	460c      	mov	r4, r1
 8018e82:	d240      	bcs.n	8018f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018e84:	f04f 0a04 	mov.w	sl, #4
 8018e88:	7824      	ldrb	r4, [r4, #0]
 8018e8a:	2fff      	cmp	r7, #255	; 0xff
 8018e8c:	f101 0101 	add.w	r1, r1, #1
 8018e90:	fb1e a404 	smlabb	r4, lr, r4, sl
 8018e94:	eb06 0a04 	add.w	sl, r6, r4
 8018e98:	f816 b004 	ldrb.w	fp, [r6, r4]
 8018e9c:	d02b      	beq.n	8018ef6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8018e9e:	7804      	ldrb	r4, [r0, #0]
 8018ea0:	fb14 f405 	smulbb	r4, r4, r5
 8018ea4:	fb0b 440c 	mla	r4, fp, ip, r4
 8018ea8:	b2a4      	uxth	r4, r4
 8018eaa:	f104 0b01 	add.w	fp, r4, #1
 8018eae:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018eb2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018eb6:	fb1b fb05 	smulbb	fp, fp, r5
 8018eba:	1224      	asrs	r4, r4, #8
 8018ebc:	7004      	strb	r4, [r0, #0]
 8018ebe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018ec2:	fb04 b40c 	mla	r4, r4, ip, fp
 8018ec6:	b2a4      	uxth	r4, r4
 8018ec8:	f104 0b01 	add.w	fp, r4, #1
 8018ecc:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018ed0:	1224      	asrs	r4, r4, #8
 8018ed2:	7044      	strb	r4, [r0, #1]
 8018ed4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018ed8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018edc:	fb1a fa05 	smulbb	sl, sl, r5
 8018ee0:	fb04 a40c 	mla	r4, r4, ip, sl
 8018ee4:	b2a4      	uxth	r4, r4
 8018ee6:	f104 0a01 	add.w	sl, r4, #1
 8018eea:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018eee:	1224      	asrs	r4, r4, #8
 8018ef0:	7084      	strb	r4, [r0, #2]
 8018ef2:	3003      	adds	r0, #3
 8018ef4:	e7c3      	b.n	8018e7e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8018ef6:	f880 b000 	strb.w	fp, [r0]
 8018efa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018efe:	7044      	strb	r4, [r0, #1]
 8018f00:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018f04:	e7f4      	b.n	8018ef0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8018f06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018f08:	4420      	add	r0, r4
 8018f0a:	188c      	adds	r4, r1, r2
 8018f0c:	e7b2      	b.n	8018e74 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8018f0e:	4b03      	ldr	r3, [pc, #12]	; (8018f1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8018f10:	6818      	ldr	r0, [r3, #0]
 8018f12:	6803      	ldr	r3, [r0, #0]
 8018f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f16:	4798      	blx	r3
 8018f18:	e785      	b.n	8018e26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8018f1a:	bf00      	nop
 8018f1c:	20011918 	.word	0x20011918
 8018f20:	20011910 	.word	0x20011910

08018f24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8018f24:	b430      	push	{r4, r5}
 8018f26:	780d      	ldrb	r5, [r1, #0]
 8018f28:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018f2c:	b11d      	cbz	r5, 8018f36 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8018f2e:	2d01      	cmp	r5, #1
 8018f30:	d005      	beq.n	8018f3e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8018f32:	bc30      	pop	{r4, r5}
 8018f34:	4770      	bx	lr
 8018f36:	9402      	str	r4, [sp, #8]
 8018f38:	bc30      	pop	{r4, r5}
 8018f3a:	f7ff be3f 	b.w	8018bbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8018f3e:	9402      	str	r4, [sp, #8]
 8018f40:	bc30      	pop	{r4, r5}
 8018f42:	f7ff bf13 	b.w	8018d6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08018f48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8018f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f4c:	4605      	mov	r5, r0
 8018f4e:	b08f      	sub	sp, #60	; 0x3c
 8018f50:	460c      	mov	r4, r1
 8018f52:	461f      	mov	r7, r3
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d052      	beq.n	8018ffe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8018f58:	6808      	ldr	r0, [r1, #0]
 8018f5a:	ab0a      	add	r3, sp, #40	; 0x28
 8018f5c:	6849      	ldr	r1, [r1, #4]
 8018f5e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8019128 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8018f62:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801912c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8018f66:	c303      	stmia	r3!, {r0, r1}
 8018f68:	6810      	ldr	r0, [r2, #0]
 8018f6a:	ab0c      	add	r3, sp, #48	; 0x30
 8018f6c:	6851      	ldr	r1, [r2, #4]
 8018f6e:	c303      	stmia	r3!, {r0, r1}
 8018f70:	a80a      	add	r0, sp, #40	; 0x28
 8018f72:	f7fa f961 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f76:	4621      	mov	r1, r4
 8018f78:	a80c      	add	r0, sp, #48	; 0x30
 8018f7a:	f7fa f985 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018f7e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8018f82:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018f86:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018f8a:	f8d8 0000 	ldr.w	r0, [r8]
 8018f8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018f92:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8018f96:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8018f9a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8018f9e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8018fa2:	440a      	add	r2, r1
 8018fa4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8018fa8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8018fac:	4413      	add	r3, r2
 8018fae:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fb6:	4798      	blx	r3
 8018fb8:	2fff      	cmp	r7, #255	; 0xff
 8018fba:	d023      	beq.n	8019004 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8018fbc:	f010 0f04 	tst.w	r0, #4
 8018fc0:	f8d8 0000 	ldr.w	r0, [r8]
 8018fc4:	d021      	beq.n	801900a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8018fc6:	2100      	movs	r1, #0
 8018fc8:	f04f 0e01 	mov.w	lr, #1
 8018fcc:	f8d0 c000 	ldr.w	ip, [r0]
 8018fd0:	b2a4      	uxth	r4, r4
 8018fd2:	9106      	str	r1, [sp, #24]
 8018fd4:	b2b6      	uxth	r6, r6
 8018fd6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018fda:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018fde:	e9cd e107 	strd	lr, r1, [sp, #28]
 8018fe2:	f8b9 e000 	ldrh.w	lr, [r9]
 8018fe6:	9703      	str	r7, [sp, #12]
 8018fe8:	9401      	str	r4, [sp, #4]
 8018fea:	9600      	str	r6, [sp, #0]
 8018fec:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8018ff0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018ff4:	9102      	str	r1, [sp, #8]
 8018ff6:	4629      	mov	r1, r5
 8018ff8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8018ffc:	47a0      	blx	r4
 8018ffe:	b00f      	add	sp, #60	; 0x3c
 8019000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019004:	f010 0f01 	tst.w	r0, #1
 8019008:	e7da      	b.n	8018fc0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801900e:	4798      	blx	r3
 8019010:	f8b9 1000 	ldrh.w	r1, [r9]
 8019014:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019018:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801901c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8019020:	434c      	muls	r4, r1
 8019022:	2fff      	cmp	r7, #255	; 0xff
 8019024:	fb01 2303 	mla	r3, r1, r3, r2
 8019028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801902c:	eba1 0106 	sub.w	r1, r1, r6
 8019030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019034:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019038:	4418      	add	r0, r3
 801903a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801903e:	eba3 0606 	sub.w	r6, r3, r6
 8019042:	4404      	add	r4, r0
 8019044:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8019048:	d04a      	beq.n	80190e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801904a:	43fa      	mvns	r2, r7
 801904c:	b2bb      	uxth	r3, r7
 801904e:	b2d7      	uxtb	r7, r2
 8019050:	42a0      	cmp	r0, r4
 8019052:	d263      	bcs.n	801911c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8019054:	eb00 0e0c 	add.w	lr, r0, ip
 8019058:	4586      	cmp	lr, r0
 801905a:	f100 0803 	add.w	r8, r0, #3
 801905e:	d93a      	bls.n	80190d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8019060:	f835 2b02 	ldrh.w	r2, [r5], #2
 8019064:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8019068:	00d0      	lsls	r0, r2, #3
 801906a:	fb19 f907 	smulbb	r9, r9, r7
 801906e:	b2c0      	uxtb	r0, r0
 8019070:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8019074:	fb00 9003 	mla	r0, r0, r3, r9
 8019078:	b280      	uxth	r0, r0
 801907a:	f100 0901 	add.w	r9, r0, #1
 801907e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8019082:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8019086:	fb19 f907 	smulbb	r9, r9, r7
 801908a:	1200      	asrs	r0, r0, #8
 801908c:	f808 0c03 	strb.w	r0, [r8, #-3]
 8019090:	10d0      	asrs	r0, r2, #3
 8019092:	1212      	asrs	r2, r2, #8
 8019094:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019098:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801909c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80190a0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80190a4:	fb00 9003 	mla	r0, r0, r3, r9
 80190a8:	b280      	uxth	r0, r0
 80190aa:	f100 0901 	add.w	r9, r0, #1
 80190ae:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80190b2:	1200      	asrs	r0, r0, #8
 80190b4:	f808 0c02 	strb.w	r0, [r8, #-2]
 80190b8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80190bc:	fb10 f007 	smulbb	r0, r0, r7
 80190c0:	fb02 0203 	mla	r2, r2, r3, r0
 80190c4:	b292      	uxth	r2, r2
 80190c6:	1c50      	adds	r0, r2, #1
 80190c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80190cc:	4640      	mov	r0, r8
 80190ce:	1212      	asrs	r2, r2, #8
 80190d0:	f808 2c01 	strb.w	r2, [r8, #-1]
 80190d4:	e7c0      	b.n	8019058 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80190d6:	4408      	add	r0, r1
 80190d8:	4435      	add	r5, r6
 80190da:	e7b9      	b.n	8019050 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80190dc:	4408      	add	r0, r1
 80190de:	4435      	add	r5, r6
 80190e0:	42a0      	cmp	r0, r4
 80190e2:	d21b      	bcs.n	801911c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80190e4:	eb00 070c 	add.w	r7, r0, ip
 80190e8:	42b8      	cmp	r0, r7
 80190ea:	d2f7      	bcs.n	80190dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80190ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 80190f0:	3003      	adds	r0, #3
 80190f2:	00da      	lsls	r2, r3, #3
 80190f4:	b2d2      	uxtb	r2, r2
 80190f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80190fa:	f800 2c03 	strb.w	r2, [r0, #-3]
 80190fe:	10da      	asrs	r2, r3, #3
 8019100:	121b      	asrs	r3, r3, #8
 8019102:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019106:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801910a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801910e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8019112:	f800 2c02 	strb.w	r2, [r0, #-2]
 8019116:	f800 3c01 	strb.w	r3, [r0, #-1]
 801911a:	e7e5      	b.n	80190e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801911c:	4b02      	ldr	r3, [pc, #8]	; (8019128 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801911e:	6818      	ldr	r0, [r3, #0]
 8019120:	6803      	ldr	r3, [r0, #0]
 8019122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019124:	4798      	blx	r3
 8019126:	e76a      	b.n	8018ffe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019128:	20011918 	.word	0x20011918
 801912c:	20011910 	.word	0x20011910

08019130 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019134:	b08a      	sub	sp, #40	; 0x28
 8019136:	460d      	mov	r5, r1
 8019138:	4604      	mov	r4, r0
 801913a:	461e      	mov	r6, r3
 801913c:	6808      	ldr	r0, [r1, #0]
 801913e:	ab06      	add	r3, sp, #24
 8019140:	6849      	ldr	r1, [r1, #4]
 8019142:	4f5d      	ldr	r7, [pc, #372]	; (80192b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8019144:	c303      	stmia	r3!, {r0, r1}
 8019146:	6810      	ldr	r0, [r2, #0]
 8019148:	ab08      	add	r3, sp, #32
 801914a:	6851      	ldr	r1, [r2, #4]
 801914c:	c303      	stmia	r3!, {r0, r1}
 801914e:	a806      	add	r0, sp, #24
 8019150:	f7fa f872 	bl	8013238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019154:	4629      	mov	r1, r5
 8019156:	a808      	add	r0, sp, #32
 8019158:	f7fa f896 	bl	8013288 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801915c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019160:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019164:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019168:	6838      	ldr	r0, [r7, #0]
 801916a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801916e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8019172:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8019176:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801917a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801917e:	440a      	add	r2, r1
 8019180:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019184:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019188:	4413      	add	r3, r2
 801918a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801918e:	6803      	ldr	r3, [r0, #0]
 8019190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019192:	4798      	blx	r3
 8019194:	2eff      	cmp	r6, #255	; 0xff
 8019196:	d119      	bne.n	80191cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8019198:	f010 0f20 	tst.w	r0, #32
 801919c:	6838      	ldr	r0, [r7, #0]
 801919e:	d018      	beq.n	80191d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80191a0:	b2ad      	uxth	r5, r5
 80191a2:	2700      	movs	r7, #0
 80191a4:	6801      	ldr	r1, [r0, #0]
 80191a6:	9501      	str	r5, [sp, #4]
 80191a8:	fa1f f588 	uxth.w	r5, r8
 80191ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80191b0:	9500      	str	r5, [sp, #0]
 80191b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80191b6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80191ba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80191be:	9602      	str	r6, [sp, #8]
 80191c0:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80191c2:	4621      	mov	r1, r4
 80191c4:	47a8      	blx	r5
 80191c6:	b00a      	add	sp, #40	; 0x28
 80191c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80191d0:	e7e4      	b.n	801919c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80191d2:	6803      	ldr	r3, [r0, #0]
 80191d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191d6:	4798      	blx	r3
 80191d8:	4b38      	ldr	r3, [pc, #224]	; (80192bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80191da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80191de:	f8b3 c000 	ldrh.w	ip, [r3]
 80191e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80191e6:	fb0c f505 	mul.w	r5, ip, r5
 80191ea:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80191ee:	fb0c 2303 	mla	r3, ip, r3, r2
 80191f2:	ebac 0c08 	sub.w	ip, ip, r8
 80191f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191fa:	ebae 0e08 	sub.w	lr, lr, r8
 80191fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019202:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019206:	4418      	add	r0, r3
 8019208:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801920c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019210:	4405      	add	r5, r0
 8019212:	42a8      	cmp	r0, r5
 8019214:	d24a      	bcs.n	80192ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8019216:	eb00 0803 	add.w	r8, r0, r3
 801921a:	4540      	cmp	r0, r8
 801921c:	d243      	bcs.n	80192a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801921e:	78e2      	ldrb	r2, [r4, #3]
 8019220:	b15a      	cbz	r2, 801923a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8019222:	2aff      	cmp	r2, #255	; 0xff
 8019224:	f894 9000 	ldrb.w	r9, [r4]
 8019228:	d10a      	bne.n	8019240 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801922a:	2eff      	cmp	r6, #255	; 0xff
 801922c:	d108      	bne.n	8019240 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801922e:	f880 9000 	strb.w	r9, [r0]
 8019232:	7862      	ldrb	r2, [r4, #1]
 8019234:	7042      	strb	r2, [r0, #1]
 8019236:	78a2      	ldrb	r2, [r4, #2]
 8019238:	7082      	strb	r2, [r0, #2]
 801923a:	3003      	adds	r0, #3
 801923c:	3404      	adds	r4, #4
 801923e:	e7ec      	b.n	801921a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8019240:	4372      	muls	r2, r6
 8019242:	1c51      	adds	r1, r2, #1
 8019244:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8019248:	1209      	asrs	r1, r1, #8
 801924a:	fa1f fa81 	uxth.w	sl, r1
 801924e:	43c9      	mvns	r1, r1
 8019250:	fb19 f90a 	smulbb	r9, r9, sl
 8019254:	b2ca      	uxtb	r2, r1
 8019256:	7801      	ldrb	r1, [r0, #0]
 8019258:	fb01 9902 	mla	r9, r1, r2, r9
 801925c:	fa1f f989 	uxth.w	r9, r9
 8019260:	f109 0101 	add.w	r1, r9, #1
 8019264:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8019268:	ea4f 2929 	mov.w	r9, r9, asr #8
 801926c:	f880 9000 	strb.w	r9, [r0]
 8019270:	f890 9001 	ldrb.w	r9, [r0, #1]
 8019274:	7861      	ldrb	r1, [r4, #1]
 8019276:	fb19 f902 	smulbb	r9, r9, r2
 801927a:	fb01 910a 	mla	r1, r1, sl, r9
 801927e:	b289      	uxth	r1, r1
 8019280:	f101 0901 	add.w	r9, r1, #1
 8019284:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8019288:	1209      	asrs	r1, r1, #8
 801928a:	7041      	strb	r1, [r0, #1]
 801928c:	7881      	ldrb	r1, [r0, #2]
 801928e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8019292:	fb11 f202 	smulbb	r2, r1, r2
 8019296:	fb09 220a 	mla	r2, r9, sl, r2
 801929a:	b292      	uxth	r2, r2
 801929c:	1c51      	adds	r1, r2, #1
 801929e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80192a2:	1212      	asrs	r2, r2, #8
 80192a4:	e7c8      	b.n	8019238 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80192a6:	4460      	add	r0, ip
 80192a8:	4474      	add	r4, lr
 80192aa:	e7b2      	b.n	8019212 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80192ac:	6838      	ldr	r0, [r7, #0]
 80192ae:	6803      	ldr	r3, [r0, #0]
 80192b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192b2:	4798      	blx	r3
 80192b4:	e787      	b.n	80191c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80192b6:	bf00      	nop
 80192b8:	20011918 	.word	0x20011918
 80192bc:	20011910 	.word	0x20011910

080192c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80192c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192c4:	b085      	sub	sp, #20
 80192c6:	4606      	mov	r6, r0
 80192c8:	460c      	mov	r4, r1
 80192ca:	4691      	mov	r9, r2
 80192cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80192d0:	4698      	mov	r8, r3
 80192d2:	b31d      	cbz	r5, 801931c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80192d4:	4608      	mov	r0, r1
 80192d6:	f7fd fa59 	bl	801678c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192da:	4607      	mov	r7, r0
 80192dc:	4620      	mov	r0, r4
 80192de:	f7fd fa89 	bl	80167f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80192e6:	4620      	mov	r0, r4
 80192e8:	f8ad 9008 	strh.w	r9, [sp, #8]
 80192ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 80192f0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80192f4:	f7fd fb82 	bl	80169fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80192f8:	280b      	cmp	r0, #11
 80192fa:	d80f      	bhi.n	801931c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80192fc:	e8df f000 	tbb	[pc, r0]
 8019300:	0e062920 	.word	0x0e062920
 8019304:	0e0e0e0e 	.word	0x0e0e0e0e
 8019308:	110e0e0e 	.word	0x110e0e0e
 801930c:	4620      	mov	r0, r4
 801930e:	f7fd faf1 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019312:	462b      	mov	r3, r5
 8019314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019316:	a902      	add	r1, sp, #8
 8019318:	f7ff ff0a 	bl	8019130 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801931c:	b005      	add	sp, #20
 801931e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019322:	4620      	mov	r0, r4
 8019324:	f7fd fae6 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019328:	4606      	mov	r6, r0
 801932a:	4620      	mov	r0, r4
 801932c:	f7fd fb12 	bl	8016954 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019330:	9500      	str	r5, [sp, #0]
 8019332:	4601      	mov	r1, r0
 8019334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019336:	aa02      	add	r2, sp, #8
 8019338:	4630      	mov	r0, r6
 801933a:	f7ff fdf3 	bl	8018f24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801933e:	e7ed      	b.n	801931c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8019340:	4620      	mov	r0, r4
 8019342:	f7fd fad7 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019346:	462b      	mov	r3, r5
 8019348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801934a:	a902      	add	r1, sp, #8
 801934c:	f7ff fdfc 	bl	8018f48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019350:	e7e4      	b.n	801931c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8019352:	6833      	ldr	r3, [r6, #0]
 8019354:	4620      	mov	r0, r4
 8019356:	68df      	ldr	r7, [r3, #12]
 8019358:	f7fd facc 	bl	80168f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801935c:	2300      	movs	r3, #0
 801935e:	4601      	mov	r1, r0
 8019360:	aa02      	add	r2, sp, #8
 8019362:	4630      	mov	r0, r6
 8019364:	e9cd 5300 	strd	r5, r3, [sp]
 8019368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801936a:	47b8      	blx	r7
 801936c:	e7d6      	b.n	801931c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801936e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801936e:	b4f0      	push	{r4, r5, r6, r7}
 8019370:	4616      	mov	r6, r2
 8019372:	461c      	mov	r4, r3
 8019374:	460d      	mov	r5, r1
 8019376:	9a04      	ldr	r2, [sp, #16]
 8019378:	2e01      	cmp	r6, #1
 801937a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801937e:	d00e      	beq.n	801939e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8019380:	d303      	bcc.n	801938a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8019382:	2e02      	cmp	r6, #2
 8019384:	d006      	beq.n	8019394 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8019386:	bcf0      	pop	{r4, r5, r6, r7}
 8019388:	4770      	bx	lr
 801938a:	4621      	mov	r1, r4
 801938c:	4628      	mov	r0, r5
 801938e:	bcf0      	pop	{r4, r5, r6, r7}
 8019390:	f7ff bdda 	b.w	8018f48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019394:	4621      	mov	r1, r4
 8019396:	4628      	mov	r0, r5
 8019398:	bcf0      	pop	{r4, r5, r6, r7}
 801939a:	f7ff bec9 	b.w	8019130 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801939e:	6805      	ldr	r5, [r0, #0]
 80193a0:	2600      	movs	r6, #0
 80193a2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80193a6:	68ed      	ldr	r5, [r5, #12]
 80193a8:	4613      	mov	r3, r2
 80193aa:	4622      	mov	r2, r4
 80193ac:	46ac      	mov	ip, r5
 80193ae:	bcf0      	pop	{r4, r5, r6, r7}
 80193b0:	4760      	bx	ip
	...

080193b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80193b4:	b160      	cbz	r0, 80193d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80193b6:	2903      	cmp	r1, #3
 80193b8:	d818      	bhi.n	80193ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80193ba:	e8df f001 	tbb	[pc, r1]
 80193be:	1902      	.short	0x1902
 80193c0:	1b06      	.short	0x1b06
 80193c2:	4b0e      	ldr	r3, [pc, #56]	; (80193fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80193c4:	8818      	ldrh	r0, [r3, #0]
 80193c6:	4240      	negs	r0, r0
 80193c8:	4770      	bx	lr
 80193ca:	4b0c      	ldr	r3, [pc, #48]	; (80193fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80193cc:	8818      	ldrh	r0, [r3, #0]
 80193ce:	4770      	bx	lr
 80193d0:	2903      	cmp	r1, #3
 80193d2:	d80b      	bhi.n	80193ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80193d4:	a301      	add	r3, pc, #4	; (adr r3, 80193dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80193d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80193da:	bf00      	nop
 80193dc:	080193f1 	.word	0x080193f1
 80193e0:	080193cb 	.word	0x080193cb
 80193e4:	080193f5 	.word	0x080193f5
 80193e8:	080193c3 	.word	0x080193c3
 80193ec:	2000      	movs	r0, #0
 80193ee:	4770      	bx	lr
 80193f0:	2001      	movs	r0, #1
 80193f2:	4770      	bx	lr
 80193f4:	f04f 30ff 	mov.w	r0, #4294967295
 80193f8:	4770      	bx	lr
 80193fa:	bf00      	nop
 80193fc:	20011910 	.word	0x20011910

08019400 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8019400:	b160      	cbz	r0, 801941c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8019402:	2903      	cmp	r1, #3
 8019404:	d818      	bhi.n	8019438 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019406:	e8df f001 	tbb	[pc, r1]
 801940a:	0219      	.short	0x0219
 801940c:	051b      	.short	0x051b
 801940e:	4b0e      	ldr	r3, [pc, #56]	; (8019448 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019410:	8818      	ldrh	r0, [r3, #0]
 8019412:	4770      	bx	lr
 8019414:	4b0c      	ldr	r3, [pc, #48]	; (8019448 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019416:	8818      	ldrh	r0, [r3, #0]
 8019418:	4240      	negs	r0, r0
 801941a:	4770      	bx	lr
 801941c:	2903      	cmp	r1, #3
 801941e:	d80b      	bhi.n	8019438 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019420:	a301      	add	r3, pc, #4	; (adr r3, 8019428 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8019422:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019426:	bf00      	nop
 8019428:	0801940f 	.word	0x0801940f
 801942c:	08019441 	.word	0x08019441
 8019430:	08019415 	.word	0x08019415
 8019434:	0801943d 	.word	0x0801943d
 8019438:	2000      	movs	r0, #0
 801943a:	4770      	bx	lr
 801943c:	2001      	movs	r0, #1
 801943e:	4770      	bx	lr
 8019440:	f04f 30ff 	mov.w	r0, #4294967295
 8019444:	4770      	bx	lr
 8019446:	bf00      	nop
 8019448:	20011910 	.word	0x20011910

0801944c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019450:	b097      	sub	sp, #92	; 0x5c
 8019452:	910b      	str	r1, [sp, #44]	; 0x2c
 8019454:	a912      	add	r1, sp, #72	; 0x48
 8019456:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801945a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801945e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8019462:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8019466:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801946a:	e881 000c 	stmia.w	r1, {r2, r3}
 801946e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8019472:	930a      	str	r3, [sp, #40]	; 0x28
 8019474:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8019478:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801947c:	9311      	str	r3, [sp, #68]	; 0x44
 801947e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8019482:	798d      	ldrb	r5, [r1, #6]
 8019484:	930c      	str	r3, [sp, #48]	; 0x30
 8019486:	7b4b      	ldrb	r3, [r1, #13]
 8019488:	0158      	lsls	r0, r3, #5
 801948a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801948e:	4328      	orrs	r0, r5
 8019490:	9009      	str	r0, [sp, #36]	; 0x24
 8019492:	f000 817c 	beq.w	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019496:	011b      	lsls	r3, r3, #4
 8019498:	79c8      	ldrb	r0, [r1, #7]
 801949a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801949e:	4303      	orrs	r3, r0
 80194a0:	930e      	str	r3, [sp, #56]	; 0x38
 80194a2:	f000 8174 	beq.w	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80194a6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	2f00      	cmp	r7, #0
 80194ae:	f000 8116 	beq.w	80196de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80194b2:	1aff      	subs	r7, r7, r3
 80194b4:	b2bf      	uxth	r7, r7
 80194b6:	043b      	lsls	r3, r7, #16
 80194b8:	d502      	bpl.n	80194c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80194ba:	1bf6      	subs	r6, r6, r7
 80194bc:	2700      	movs	r7, #0
 80194be:	b236      	sxth	r6, r6
 80194c0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80194c4:	a812      	add	r0, sp, #72	; 0x48
 80194c6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80194ca:	428e      	cmp	r6, r1
 80194cc:	b28b      	uxth	r3, r1
 80194ce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80194d2:	bfbf      	itttt	lt
 80194d4:	18ff      	addlt	r7, r7, r3
 80194d6:	1bbe      	sublt	r6, r7, r6
 80194d8:	b2b7      	uxthlt	r7, r6
 80194da:	460e      	movlt	r6, r1
 80194dc:	8891      	ldrh	r1, [r2, #4]
 80194de:	440b      	add	r3, r1
 80194e0:	4631      	mov	r1, r6
 80194e2:	b21b      	sxth	r3, r3
 80194e4:	9310      	str	r3, [sp, #64]	; 0x40
 80194e6:	88d3      	ldrh	r3, [r2, #6]
 80194e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194ea:	449a      	add	sl, r3
 80194ec:	fa0f f38a 	sxth.w	r3, sl
 80194f0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80194f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80194f6:	4bb5      	ldr	r3, [pc, #724]	; (80197cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80194f8:	f893 b000 	ldrb.w	fp, [r3]
 80194fc:	f10b 3cff 	add.w	ip, fp, #4294967295
 8019500:	f1dc 0300 	rsbs	r3, ip, #0
 8019504:	eb43 030c 	adc.w	r3, r3, ip
 8019508:	930d      	str	r3, [sp, #52]	; 0x34
 801950a:	464b      	mov	r3, r9
 801950c:	f7f9 fd0e 	bl	8012f2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019510:	4631      	mov	r1, r6
 8019512:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8019516:	464b      	mov	r3, r9
 8019518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801951a:	a812      	add	r0, sp, #72	; 0x48
 801951c:	f7f9 fd23 	bl	8012f66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019520:	a916      	add	r1, sp, #88	; 0x58
 8019522:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019526:	a815      	add	r0, sp, #84	; 0x54
 8019528:	f7f9 fe44 	bl	80131b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801952c:	f1b9 0f00 	cmp.w	r9, #0
 8019530:	f040 80d8 	bne.w	80196e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019534:	f1bb 0f01 	cmp.w	fp, #1
 8019538:	f040 80dc 	bne.w	80196f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801953c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801953e:	b153      	cbz	r3, 8019556 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8019540:	2508      	movs	r5, #8
 8019542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019544:	fb95 f3f8 	sdiv	r3, r5, r8
 8019548:	1e5d      	subs	r5, r3, #1
 801954a:	4415      	add	r5, r2
 801954c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019550:	fb15 f503 	smulbb	r5, r5, r3
 8019554:	b2ad      	uxth	r5, r5
 8019556:	b907      	cbnz	r7, 801955a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8019558:	b16c      	cbz	r4, 8019576 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801955a:	fb04 7305 	mla	r3, r4, r5, r7
 801955e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019560:	ebaa 0a04 	sub.w	sl, sl, r4
 8019564:	fb08 f303 	mul.w	r3, r8, r3
 8019568:	fa1f fa8a 	uxth.w	sl, sl
 801956c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8019570:	f003 0407 	and.w	r4, r3, #7
 8019574:	9226      	str	r2, [sp, #152]	; 0x98
 8019576:	4649      	mov	r1, r9
 8019578:	980d      	ldr	r0, [sp, #52]	; 0x34
 801957a:	f7ff ff1b 	bl	80193b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801957e:	4683      	mov	fp, r0
 8019580:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019582:	f7ff ff3d 	bl	8019400 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8019586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801958a:	4681      	mov	r9, r0
 801958c:	1a9b      	subs	r3, r3, r2
 801958e:	459a      	cmp	sl, r3
 8019590:	bfa8      	it	ge
 8019592:	469a      	movge	sl, r3
 8019594:	f1ba 0f00 	cmp.w	sl, #0
 8019598:	f340 80f9 	ble.w	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801959c:	1bf6      	subs	r6, r6, r7
 801959e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195a0:	1b9e      	subs	r6, r3, r6
 80195a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a4:	429e      	cmp	r6, r3
 80195a6:	bfd4      	ite	le
 80195a8:	ebc7 0706 	rsble	r7, r7, r6
 80195ac:	ebc7 0703 	rsbgt	r7, r7, r3
 80195b0:	2f00      	cmp	r7, #0
 80195b2:	f340 80ec 	ble.w	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80195b6:	1bed      	subs	r5, r5, r7
 80195b8:	fb08 f305 	mul.w	r3, r8, r5
 80195bc:	930d      	str	r3, [sp, #52]	; 0x34
 80195be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80195c4:	930e      	str	r3, [sp, #56]	; 0x38
 80195c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80195cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80195ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195d0:	b2db      	uxtb	r3, r3
 80195d2:	9310      	str	r3, [sp, #64]	; 0x40
 80195d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	f040 80de 	bne.w	8019798 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80195dc:	4b7c      	ldr	r3, [pc, #496]	; (80197d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80195de:	6818      	ldr	r0, [r3, #0]
 80195e0:	6803      	ldr	r3, [r0, #0]
 80195e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195e4:	4798      	blx	r3
 80195e6:	2301      	movs	r3, #1
 80195e8:	4a7a      	ldr	r2, [pc, #488]	; (80197d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80195ea:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80195ee:	fb07 9b1b 	mls	fp, r7, fp, r9
 80195f2:	fa03 f308 	lsl.w	r3, r3, r8
 80195f6:	8811      	ldrh	r1, [r2, #0]
 80195f8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80195fc:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8019600:	3b01      	subs	r3, #1
 8019602:	fb06 bb07 	mla	fp, r6, r7, fp
 8019606:	b2db      	uxtb	r3, r3
 8019608:	930a      	str	r3, [sp, #40]	; 0x28
 801960a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801960e:	fb01 2303 	mla	r3, r1, r3, r2
 8019612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019616:	18c3      	adds	r3, r0, r3
 8019618:	9309      	str	r3, [sp, #36]	; 0x24
 801961a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801961c:	781a      	ldrb	r2, [r3, #0]
 801961e:	4122      	asrs	r2, r4
 8019620:	b2d2      	uxtb	r2, r2
 8019622:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019626:	f0c0 80d7 	bcc.w	80197d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801962a:	46be      	mov	lr, r7
 801962c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801962e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8019632:	f0c0 80ba 	bcc.w	80197aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019638:	4013      	ands	r3, r2
 801963a:	d041      	beq.n	80196c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801963c:	20ff      	movs	r0, #255	; 0xff
 801963e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019640:	fb90 f5f5 	sdiv	r5, r0, r5
 8019644:	436b      	muls	r3, r5
 8019646:	2bfe      	cmp	r3, #254	; 0xfe
 8019648:	dd03      	ble.n	8019652 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801964a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801964c:	4285      	cmp	r5, r0
 801964e:	f000 80a5 	beq.w	801979c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8019652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019654:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019656:	fb15 f303 	smulbb	r3, r5, r3
 801965a:	b29b      	uxth	r3, r3
 801965c:	1c5d      	adds	r5, r3, #1
 801965e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8019662:	780d      	ldrb	r5, [r1, #0]
 8019664:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019668:	fa1f fc83 	uxth.w	ip, r3
 801966c:	43db      	mvns	r3, r3
 801966e:	fb10 f90c 	smulbb	r9, r0, ip
 8019672:	b2db      	uxtb	r3, r3
 8019674:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019676:	fb05 9503 	mla	r5, r5, r3, r9
 801967a:	b2ad      	uxth	r5, r5
 801967c:	f105 0901 	add.w	r9, r5, #1
 8019680:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019684:	fb10 f90c 	smulbb	r9, r0, ip
 8019688:	980e      	ldr	r0, [sp, #56]	; 0x38
 801968a:	122d      	asrs	r5, r5, #8
 801968c:	fb10 fc0c 	smulbb	ip, r0, ip
 8019690:	700d      	strb	r5, [r1, #0]
 8019692:	784d      	ldrb	r5, [r1, #1]
 8019694:	fb05 9503 	mla	r5, r5, r3, r9
 8019698:	b2ad      	uxth	r5, r5
 801969a:	f105 0901 	add.w	r9, r5, #1
 801969e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80196a2:	122d      	asrs	r5, r5, #8
 80196a4:	704d      	strb	r5, [r1, #1]
 80196a6:	788d      	ldrb	r5, [r1, #2]
 80196a8:	fb05 cc03 	mla	ip, r5, r3, ip
 80196ac:	fa1f fc8c 	uxth.w	ip, ip
 80196b0:	f10c 0301 	add.w	r3, ip, #1
 80196b4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80196b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80196bc:	f881 c002 	strb.w	ip, [r1, #2]
 80196c0:	4444      	add	r4, r8
 80196c2:	4431      	add	r1, r6
 80196c4:	b2a4      	uxth	r4, r4
 80196c6:	2c07      	cmp	r4, #7
 80196c8:	bf89      	itett	hi
 80196ca:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80196cc:	fa42 f208 	asrls.w	r2, r2, r8
 80196d0:	2400      	movhi	r4, #0
 80196d2:	785a      	ldrbhi	r2, [r3, #1]
 80196d4:	bf8a      	itet	hi
 80196d6:	3301      	addhi	r3, #1
 80196d8:	b2d2      	uxtbls	r2, r2
 80196da:	9326      	strhi	r3, [sp, #152]	; 0x98
 80196dc:	e7a7      	b.n	801962e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80196de:	441e      	add	r6, r3
 80196e0:	b236      	sxth	r6, r6
 80196e2:	e6ed      	b.n	80194c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80196e4:	f1b9 0f01 	cmp.w	r9, #1
 80196e8:	f47f af28 	bne.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80196ec:	f1bb 0f01 	cmp.w	fp, #1
 80196f0:	f47f af24 	bne.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80196f4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80197d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80196f8:	f8db 0000 	ldr.w	r0, [fp]
 80196fc:	6803      	ldr	r3, [r0, #0]
 80196fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019700:	4798      	blx	r3
 8019702:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8019706:	465a      	mov	r2, fp
 8019708:	d006      	beq.n	8019718 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801970a:	f1b8 0f04 	cmp.w	r8, #4
 801970e:	d141      	bne.n	8019794 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8019710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019712:	3300      	adds	r3, #0
 8019714:	bf18      	it	ne
 8019716:	2301      	movne	r3, #1
 8019718:	0580      	lsls	r0, r0, #22
 801971a:	d566      	bpl.n	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801971c:	f1b8 0f08 	cmp.w	r8, #8
 8019720:	d163      	bne.n	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019722:	2b00      	cmp	r3, #0
 8019724:	bf0c      	ite	eq
 8019726:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801972a:	f44f 7180 	movne.w	r1, #256	; 0x100
 801972e:	2f00      	cmp	r7, #0
 8019730:	f47f af04 	bne.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019734:	2c00      	cmp	r4, #0
 8019736:	f47f af01 	bne.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801973a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801973e:	18f3      	adds	r3, r6, r3
 8019740:	4283      	cmp	r3, r0
 8019742:	f73f aefb 	bgt.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019746:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801974a:	4403      	add	r3, r0
 801974c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801974e:	4283      	cmp	r3, r0
 8019750:	f73f aef4 	bgt.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019754:	f1b8 0f08 	cmp.w	r8, #8
 8019758:	6810      	ldr	r0, [r2, #0]
 801975a:	f04f 0600 	mov.w	r6, #0
 801975e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8019762:	bf18      	it	ne
 8019764:	3501      	addne	r5, #1
 8019766:	6804      	ldr	r4, [r0, #0]
 8019768:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801976c:	bf18      	it	ne
 801976e:	f025 0501 	bicne.w	r5, r5, #1
 8019772:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8019776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019778:	bf18      	it	ne
 801977a:	b2ad      	uxthne	r5, r5
 801977c:	9104      	str	r1, [sp, #16]
 801977e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019780:	e9cd 5a00 	strd	r5, sl, [sp]
 8019784:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8019788:	9926      	ldr	r1, [sp, #152]	; 0x98
 801978a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801978c:	47a0      	blx	r4
 801978e:	b017      	add	sp, #92	; 0x5c
 8019790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019794:	2300      	movs	r3, #0
 8019796:	e7bf      	b.n	8019718 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019798:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801979a:	e724      	b.n	80195e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801979c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801979e:	700b      	strb	r3, [r1, #0]
 80197a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197a2:	704b      	strb	r3, [r1, #1]
 80197a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197a6:	708b      	strb	r3, [r1, #2]
 80197a8:	e78a      	b.n	80196c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80197aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197ac:	b153      	cbz	r3, 80197c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80197ae:	441c      	add	r4, r3
 80197b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80197b2:	b2a4      	uxth	r4, r4
 80197b4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80197b8:	f004 0407 	and.w	r4, r4, #7
 80197bc:	781a      	ldrb	r2, [r3, #0]
 80197be:	9326      	str	r3, [sp, #152]	; 0x98
 80197c0:	4122      	asrs	r2, r4
 80197c2:	b2d2      	uxtb	r2, r2
 80197c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197c6:	445b      	add	r3, fp
 80197c8:	9309      	str	r3, [sp, #36]	; 0x24
 80197ca:	e72a      	b.n	8019622 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80197cc:	2001190e 	.word	0x2001190e
 80197d0:	20011918 	.word	0x20011918
 80197d4:	20011910 	.word	0x20011910
 80197d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d1d7      	bne.n	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80197de:	4b06      	ldr	r3, [pc, #24]	; (80197f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80197e0:	6818      	ldr	r0, [r3, #0]
 80197e2:	6803      	ldr	r3, [r0, #0]
 80197e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197e6:	4798      	blx	r3
 80197e8:	e7d1      	b.n	801978e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	f43f aea6 	beq.w	801953c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80197f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80197f4:	e79b      	b.n	801972e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80197f6:	bf00      	nop
 80197f8:	20011918 	.word	0x20011918

080197fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80197fc:	b538      	push	{r3, r4, r5, lr}
 80197fe:	4c15      	ldr	r4, [pc, #84]	; (8019854 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8019800:	4605      	mov	r5, r0
 8019802:	7823      	ldrb	r3, [r4, #0]
 8019804:	f3bf 8f5b 	dmb	ish
 8019808:	07da      	lsls	r2, r3, #31
 801980a:	d40b      	bmi.n	8019824 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801980c:	4620      	mov	r0, r4
 801980e:	f005 f890 	bl	801e932 <__cxa_guard_acquire>
 8019812:	b138      	cbz	r0, 8019824 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019814:	4620      	mov	r0, r4
 8019816:	f005 f898 	bl	801e94a <__cxa_guard_release>
 801981a:	4a0f      	ldr	r2, [pc, #60]	; (8019858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801981c:	490f      	ldr	r1, [pc, #60]	; (801985c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801981e:	4810      	ldr	r0, [pc, #64]	; (8019860 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019820:	f005 f880 	bl	801e924 <__aeabi_atexit>
 8019824:	4c0f      	ldr	r4, [pc, #60]	; (8019864 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019826:	7823      	ldrb	r3, [r4, #0]
 8019828:	f3bf 8f5b 	dmb	ish
 801982c:	07db      	lsls	r3, r3, #31
 801982e:	d40b      	bmi.n	8019848 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019830:	4620      	mov	r0, r4
 8019832:	f005 f87e 	bl	801e932 <__cxa_guard_acquire>
 8019836:	b138      	cbz	r0, 8019848 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019838:	4620      	mov	r0, r4
 801983a:	f005 f886 	bl	801e94a <__cxa_guard_release>
 801983e:	4a06      	ldr	r2, [pc, #24]	; (8019858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019840:	4909      	ldr	r1, [pc, #36]	; (8019868 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8019842:	480a      	ldr	r0, [pc, #40]	; (801986c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019844:	f005 f86e 	bl	801e924 <__aeabi_atexit>
 8019848:	4b05      	ldr	r3, [pc, #20]	; (8019860 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801984a:	612b      	str	r3, [r5, #16]
 801984c:	4b07      	ldr	r3, [pc, #28]	; (801986c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801984e:	616b      	str	r3, [r5, #20]
 8019850:	bd38      	pop	{r3, r4, r5, pc}
 8019852:	bf00      	nop
 8019854:	200119e4 	.word	0x200119e4
 8019858:	20000000 	.word	0x20000000
 801985c:	080183d3 	.word	0x080183d3
 8019860:	20000084 	.word	0x20000084
 8019864:	200119e8 	.word	0x200119e8
 8019868:	080183d1 	.word	0x080183d1
 801986c:	20000088 	.word	0x20000088

08019870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8019870:	b538      	push	{r3, r4, r5, lr}
 8019872:	4c15      	ldr	r4, [pc, #84]	; (80198c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8019874:	4605      	mov	r5, r0
 8019876:	7823      	ldrb	r3, [r4, #0]
 8019878:	f3bf 8f5b 	dmb	ish
 801987c:	07da      	lsls	r2, r3, #31
 801987e:	d40b      	bmi.n	8019898 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019880:	4620      	mov	r0, r4
 8019882:	f005 f856 	bl	801e932 <__cxa_guard_acquire>
 8019886:	b138      	cbz	r0, 8019898 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019888:	4620      	mov	r0, r4
 801988a:	f005 f85e 	bl	801e94a <__cxa_guard_release>
 801988e:	4a0f      	ldr	r2, [pc, #60]	; (80198cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019890:	490f      	ldr	r1, [pc, #60]	; (80198d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8019892:	4810      	ldr	r0, [pc, #64]	; (80198d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019894:	f005 f846 	bl	801e924 <__aeabi_atexit>
 8019898:	4c0f      	ldr	r4, [pc, #60]	; (80198d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801989a:	7823      	ldrb	r3, [r4, #0]
 801989c:	f3bf 8f5b 	dmb	ish
 80198a0:	07db      	lsls	r3, r3, #31
 80198a2:	d40b      	bmi.n	80198bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80198a4:	4620      	mov	r0, r4
 80198a6:	f005 f844 	bl	801e932 <__cxa_guard_acquire>
 80198aa:	b138      	cbz	r0, 80198bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80198ac:	4620      	mov	r0, r4
 80198ae:	f005 f84c 	bl	801e94a <__cxa_guard_release>
 80198b2:	4a06      	ldr	r2, [pc, #24]	; (80198cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80198b4:	4909      	ldr	r1, [pc, #36]	; (80198dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80198b6:	480a      	ldr	r0, [pc, #40]	; (80198e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80198b8:	f005 f834 	bl	801e924 <__aeabi_atexit>
 80198bc:	4b05      	ldr	r3, [pc, #20]	; (80198d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80198be:	60ab      	str	r3, [r5, #8]
 80198c0:	4b07      	ldr	r3, [pc, #28]	; (80198e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80198c2:	60eb      	str	r3, [r5, #12]
 80198c4:	bd38      	pop	{r3, r4, r5, pc}
 80198c6:	bf00      	nop
 80198c8:	200119c4 	.word	0x200119c4
 80198cc:	20000000 	.word	0x20000000
 80198d0:	080183d7 	.word	0x080183d7
 80198d4:	20000064 	.word	0x20000064
 80198d8:	200119c8 	.word	0x200119c8
 80198dc:	080183d5 	.word	0x080183d5
 80198e0:	20000068 	.word	0x20000068

080198e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80198e4:	b510      	push	{r4, lr}
 80198e6:	4604      	mov	r4, r0
 80198e8:	f7ff ff88 	bl	80197fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80198ec:	4620      	mov	r0, r4
 80198ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198f2:	f7ff bfbd 	b.w	8019870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080198f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80198f8:	b538      	push	{r3, r4, r5, lr}
 80198fa:	4c15      	ldr	r4, [pc, #84]	; (8019950 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80198fc:	4605      	mov	r5, r0
 80198fe:	7823      	ldrb	r3, [r4, #0]
 8019900:	f3bf 8f5b 	dmb	ish
 8019904:	07da      	lsls	r2, r3, #31
 8019906:	d40b      	bmi.n	8019920 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019908:	4620      	mov	r0, r4
 801990a:	f005 f812 	bl	801e932 <__cxa_guard_acquire>
 801990e:	b138      	cbz	r0, 8019920 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019910:	4620      	mov	r0, r4
 8019912:	f005 f81a 	bl	801e94a <__cxa_guard_release>
 8019916:	4a0f      	ldr	r2, [pc, #60]	; (8019954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019918:	490f      	ldr	r1, [pc, #60]	; (8019958 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801991a:	4810      	ldr	r0, [pc, #64]	; (801995c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801991c:	f005 f802 	bl	801e924 <__aeabi_atexit>
 8019920:	4c0f      	ldr	r4, [pc, #60]	; (8019960 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8019922:	7823      	ldrb	r3, [r4, #0]
 8019924:	f3bf 8f5b 	dmb	ish
 8019928:	07db      	lsls	r3, r3, #31
 801992a:	d40b      	bmi.n	8019944 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801992c:	4620      	mov	r0, r4
 801992e:	f005 f800 	bl	801e932 <__cxa_guard_acquire>
 8019932:	b138      	cbz	r0, 8019944 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019934:	4620      	mov	r0, r4
 8019936:	f005 f808 	bl	801e94a <__cxa_guard_release>
 801993a:	4a06      	ldr	r2, [pc, #24]	; (8019954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801993c:	4909      	ldr	r1, [pc, #36]	; (8019964 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801993e:	480a      	ldr	r0, [pc, #40]	; (8019968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8019940:	f004 fff0 	bl	801e924 <__aeabi_atexit>
 8019944:	4b05      	ldr	r3, [pc, #20]	; (801995c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019946:	622b      	str	r3, [r5, #32]
 8019948:	4b07      	ldr	r3, [pc, #28]	; (8019968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801994a:	626b      	str	r3, [r5, #36]	; 0x24
 801994c:	bd38      	pop	{r3, r4, r5, pc}
 801994e:	bf00      	nop
 8019950:	200119ec 	.word	0x200119ec
 8019954:	20000000 	.word	0x20000000
 8019958:	080183cb 	.word	0x080183cb
 801995c:	2000008c 	.word	0x2000008c
 8019960:	200119f0 	.word	0x200119f0
 8019964:	080183c9 	.word	0x080183c9
 8019968:	20000090 	.word	0x20000090

0801996c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801996c:	b538      	push	{r3, r4, r5, lr}
 801996e:	4c15      	ldr	r4, [pc, #84]	; (80199c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8019970:	4605      	mov	r5, r0
 8019972:	7823      	ldrb	r3, [r4, #0]
 8019974:	f3bf 8f5b 	dmb	ish
 8019978:	07da      	lsls	r2, r3, #31
 801997a:	d40b      	bmi.n	8019994 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801997c:	4620      	mov	r0, r4
 801997e:	f004 ffd8 	bl	801e932 <__cxa_guard_acquire>
 8019982:	b138      	cbz	r0, 8019994 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8019984:	4620      	mov	r0, r4
 8019986:	f004 ffe0 	bl	801e94a <__cxa_guard_release>
 801998a:	4a0f      	ldr	r2, [pc, #60]	; (80199c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801998c:	490f      	ldr	r1, [pc, #60]	; (80199cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801998e:	4810      	ldr	r0, [pc, #64]	; (80199d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019990:	f004 ffc8 	bl	801e924 <__aeabi_atexit>
 8019994:	4c0f      	ldr	r4, [pc, #60]	; (80199d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8019996:	7823      	ldrb	r3, [r4, #0]
 8019998:	f3bf 8f5b 	dmb	ish
 801999c:	07db      	lsls	r3, r3, #31
 801999e:	d40b      	bmi.n	80199b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80199a0:	4620      	mov	r0, r4
 80199a2:	f004 ffc6 	bl	801e932 <__cxa_guard_acquire>
 80199a6:	b138      	cbz	r0, 80199b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80199a8:	4620      	mov	r0, r4
 80199aa:	f004 ffce 	bl	801e94a <__cxa_guard_release>
 80199ae:	4a06      	ldr	r2, [pc, #24]	; (80199c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80199b0:	4909      	ldr	r1, [pc, #36]	; (80199d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80199b2:	480a      	ldr	r0, [pc, #40]	; (80199dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80199b4:	f004 ffb6 	bl	801e924 <__aeabi_atexit>
 80199b8:	4b05      	ldr	r3, [pc, #20]	; (80199d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80199ba:	61ab      	str	r3, [r5, #24]
 80199bc:	4b07      	ldr	r3, [pc, #28]	; (80199dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80199be:	61eb      	str	r3, [r5, #28]
 80199c0:	bd38      	pop	{r3, r4, r5, pc}
 80199c2:	bf00      	nop
 80199c4:	200119cc 	.word	0x200119cc
 80199c8:	20000000 	.word	0x20000000
 80199cc:	080183cf 	.word	0x080183cf
 80199d0:	2000006c 	.word	0x2000006c
 80199d4:	200119d0 	.word	0x200119d0
 80199d8:	080183cd 	.word	0x080183cd
 80199dc:	20000070 	.word	0x20000070

080199e0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80199e0:	b510      	push	{r4, lr}
 80199e2:	4604      	mov	r4, r0
 80199e4:	f7ff ff88 	bl	80198f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80199e8:	4620      	mov	r0, r4
 80199ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199ee:	f7ff bfbd 	b.w	801996c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080199f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80199f4:	b538      	push	{r3, r4, r5, lr}
 80199f6:	4c15      	ldr	r4, [pc, #84]	; (8019a4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80199f8:	4605      	mov	r5, r0
 80199fa:	7823      	ldrb	r3, [r4, #0]
 80199fc:	f3bf 8f5b 	dmb	ish
 8019a00:	07da      	lsls	r2, r3, #31
 8019a02:	d40b      	bmi.n	8019a1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019a04:	4620      	mov	r0, r4
 8019a06:	f004 ff94 	bl	801e932 <__cxa_guard_acquire>
 8019a0a:	b138      	cbz	r0, 8019a1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	f004 ff9c 	bl	801e94a <__cxa_guard_release>
 8019a12:	4a0f      	ldr	r2, [pc, #60]	; (8019a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019a14:	490f      	ldr	r1, [pc, #60]	; (8019a54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8019a16:	4810      	ldr	r0, [pc, #64]	; (8019a58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019a18:	f004 ff84 	bl	801e924 <__aeabi_atexit>
 8019a1c:	4c0f      	ldr	r4, [pc, #60]	; (8019a5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8019a1e:	7823      	ldrb	r3, [r4, #0]
 8019a20:	f3bf 8f5b 	dmb	ish
 8019a24:	07db      	lsls	r3, r3, #31
 8019a26:	d40b      	bmi.n	8019a40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019a28:	4620      	mov	r0, r4
 8019a2a:	f004 ff82 	bl	801e932 <__cxa_guard_acquire>
 8019a2e:	b138      	cbz	r0, 8019a40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019a30:	4620      	mov	r0, r4
 8019a32:	f004 ff8a 	bl	801e94a <__cxa_guard_release>
 8019a36:	4a06      	ldr	r2, [pc, #24]	; (8019a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019a38:	4909      	ldr	r1, [pc, #36]	; (8019a60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8019a3a:	480a      	ldr	r0, [pc, #40]	; (8019a64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019a3c:	f004 ff72 	bl	801e924 <__aeabi_atexit>
 8019a40:	4b05      	ldr	r3, [pc, #20]	; (8019a58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019a42:	632b      	str	r3, [r5, #48]	; 0x30
 8019a44:	4b07      	ldr	r3, [pc, #28]	; (8019a64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019a46:	636b      	str	r3, [r5, #52]	; 0x34
 8019a48:	bd38      	pop	{r3, r4, r5, pc}
 8019a4a:	bf00      	nop
 8019a4c:	200119d4 	.word	0x200119d4
 8019a50:	20000000 	.word	0x20000000
 8019a54:	080183c3 	.word	0x080183c3
 8019a58:	20000074 	.word	0x20000074
 8019a5c:	200119d8 	.word	0x200119d8
 8019a60:	080183c1 	.word	0x080183c1
 8019a64:	20000078 	.word	0x20000078

08019a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4c15      	ldr	r4, [pc, #84]	; (8019ac0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8019a6c:	4605      	mov	r5, r0
 8019a6e:	7823      	ldrb	r3, [r4, #0]
 8019a70:	f3bf 8f5b 	dmb	ish
 8019a74:	07da      	lsls	r2, r3, #31
 8019a76:	d40b      	bmi.n	8019a90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f004 ff5a 	bl	801e932 <__cxa_guard_acquire>
 8019a7e:	b138      	cbz	r0, 8019a90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019a80:	4620      	mov	r0, r4
 8019a82:	f004 ff62 	bl	801e94a <__cxa_guard_release>
 8019a86:	4a0f      	ldr	r2, [pc, #60]	; (8019ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019a88:	490f      	ldr	r1, [pc, #60]	; (8019ac8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8019a8a:	4810      	ldr	r0, [pc, #64]	; (8019acc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019a8c:	f004 ff4a 	bl	801e924 <__aeabi_atexit>
 8019a90:	4c0f      	ldr	r4, [pc, #60]	; (8019ad0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8019a92:	7823      	ldrb	r3, [r4, #0]
 8019a94:	f3bf 8f5b 	dmb	ish
 8019a98:	07db      	lsls	r3, r3, #31
 8019a9a:	d40b      	bmi.n	8019ab4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019a9c:	4620      	mov	r0, r4
 8019a9e:	f004 ff48 	bl	801e932 <__cxa_guard_acquire>
 8019aa2:	b138      	cbz	r0, 8019ab4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	f004 ff50 	bl	801e94a <__cxa_guard_release>
 8019aaa:	4a06      	ldr	r2, [pc, #24]	; (8019ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019aac:	4909      	ldr	r1, [pc, #36]	; (8019ad4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8019aae:	480a      	ldr	r0, [pc, #40]	; (8019ad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019ab0:	f004 ff38 	bl	801e924 <__aeabi_atexit>
 8019ab4:	4b05      	ldr	r3, [pc, #20]	; (8019acc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019ab6:	62ab      	str	r3, [r5, #40]	; 0x28
 8019ab8:	4b07      	ldr	r3, [pc, #28]	; (8019ad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019aba:	62eb      	str	r3, [r5, #44]	; 0x2c
 8019abc:	bd38      	pop	{r3, r4, r5, pc}
 8019abe:	bf00      	nop
 8019ac0:	200119ac 	.word	0x200119ac
 8019ac4:	20000000 	.word	0x20000000
 8019ac8:	080183c7 	.word	0x080183c7
 8019acc:	2000004c 	.word	0x2000004c
 8019ad0:	200119b0 	.word	0x200119b0
 8019ad4:	080183c5 	.word	0x080183c5
 8019ad8:	20000050 	.word	0x20000050

08019adc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8019adc:	b510      	push	{r4, lr}
 8019ade:	4604      	mov	r4, r0
 8019ae0:	f7ff ff88 	bl	80199f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019aea:	f7ff bfbd 	b.w	8019a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08019af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8019af0:	b538      	push	{r3, r4, r5, lr}
 8019af2:	4c15      	ldr	r4, [pc, #84]	; (8019b48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8019af4:	4605      	mov	r5, r0
 8019af6:	7823      	ldrb	r3, [r4, #0]
 8019af8:	f3bf 8f5b 	dmb	ish
 8019afc:	07da      	lsls	r2, r3, #31
 8019afe:	d40b      	bmi.n	8019b18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019b00:	4620      	mov	r0, r4
 8019b02:	f004 ff16 	bl	801e932 <__cxa_guard_acquire>
 8019b06:	b138      	cbz	r0, 8019b18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019b08:	4620      	mov	r0, r4
 8019b0a:	f004 ff1e 	bl	801e94a <__cxa_guard_release>
 8019b0e:	4a0f      	ldr	r2, [pc, #60]	; (8019b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019b10:	490f      	ldr	r1, [pc, #60]	; (8019b50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8019b12:	4810      	ldr	r0, [pc, #64]	; (8019b54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019b14:	f004 ff06 	bl	801e924 <__aeabi_atexit>
 8019b18:	4c0f      	ldr	r4, [pc, #60]	; (8019b58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8019b1a:	7823      	ldrb	r3, [r4, #0]
 8019b1c:	f3bf 8f5b 	dmb	ish
 8019b20:	07db      	lsls	r3, r3, #31
 8019b22:	d40b      	bmi.n	8019b3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019b24:	4620      	mov	r0, r4
 8019b26:	f004 ff04 	bl	801e932 <__cxa_guard_acquire>
 8019b2a:	b138      	cbz	r0, 8019b3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019b2c:	4620      	mov	r0, r4
 8019b2e:	f004 ff0c 	bl	801e94a <__cxa_guard_release>
 8019b32:	4a06      	ldr	r2, [pc, #24]	; (8019b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019b34:	4909      	ldr	r1, [pc, #36]	; (8019b5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8019b36:	480a      	ldr	r0, [pc, #40]	; (8019b60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019b38:	f004 fef4 	bl	801e924 <__aeabi_atexit>
 8019b3c:	4b05      	ldr	r3, [pc, #20]	; (8019b54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019b3e:	642b      	str	r3, [r5, #64]	; 0x40
 8019b40:	4b07      	ldr	r3, [pc, #28]	; (8019b60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019b42:	646b      	str	r3, [r5, #68]	; 0x44
 8019b44:	bd38      	pop	{r3, r4, r5, pc}
 8019b46:	bf00      	nop
 8019b48:	200119dc 	.word	0x200119dc
 8019b4c:	20000000 	.word	0x20000000
 8019b50:	080183bb 	.word	0x080183bb
 8019b54:	2000007c 	.word	0x2000007c
 8019b58:	200119e0 	.word	0x200119e0
 8019b5c:	080183b9 	.word	0x080183b9
 8019b60:	20000080 	.word	0x20000080

08019b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8019b64:	b538      	push	{r3, r4, r5, lr}
 8019b66:	4c15      	ldr	r4, [pc, #84]	; (8019bbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8019b68:	4605      	mov	r5, r0
 8019b6a:	7823      	ldrb	r3, [r4, #0]
 8019b6c:	f3bf 8f5b 	dmb	ish
 8019b70:	07da      	lsls	r2, r3, #31
 8019b72:	d40b      	bmi.n	8019b8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019b74:	4620      	mov	r0, r4
 8019b76:	f004 fedc 	bl	801e932 <__cxa_guard_acquire>
 8019b7a:	b138      	cbz	r0, 8019b8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	f004 fee4 	bl	801e94a <__cxa_guard_release>
 8019b82:	4a0f      	ldr	r2, [pc, #60]	; (8019bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019b84:	490f      	ldr	r1, [pc, #60]	; (8019bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8019b86:	4810      	ldr	r0, [pc, #64]	; (8019bc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019b88:	f004 fecc 	bl	801e924 <__aeabi_atexit>
 8019b8c:	4c0f      	ldr	r4, [pc, #60]	; (8019bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8019b8e:	7823      	ldrb	r3, [r4, #0]
 8019b90:	f3bf 8f5b 	dmb	ish
 8019b94:	07db      	lsls	r3, r3, #31
 8019b96:	d40b      	bmi.n	8019bb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f004 feca 	bl	801e932 <__cxa_guard_acquire>
 8019b9e:	b138      	cbz	r0, 8019bb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f004 fed2 	bl	801e94a <__cxa_guard_release>
 8019ba6:	4a06      	ldr	r2, [pc, #24]	; (8019bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019ba8:	4909      	ldr	r1, [pc, #36]	; (8019bd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8019baa:	480a      	ldr	r0, [pc, #40]	; (8019bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019bac:	f004 feba 	bl	801e924 <__aeabi_atexit>
 8019bb0:	4b05      	ldr	r3, [pc, #20]	; (8019bc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019bb2:	63ab      	str	r3, [r5, #56]	; 0x38
 8019bb4:	4b07      	ldr	r3, [pc, #28]	; (8019bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019bb6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8019bb8:	bd38      	pop	{r3, r4, r5, pc}
 8019bba:	bf00      	nop
 8019bbc:	200119bc 	.word	0x200119bc
 8019bc0:	20000000 	.word	0x20000000
 8019bc4:	080183bf 	.word	0x080183bf
 8019bc8:	2000005c 	.word	0x2000005c
 8019bcc:	200119c0 	.word	0x200119c0
 8019bd0:	080183bd 	.word	0x080183bd
 8019bd4:	20000060 	.word	0x20000060

08019bd8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8019bd8:	b510      	push	{r4, lr}
 8019bda:	4604      	mov	r4, r0
 8019bdc:	f7ff ff88 	bl	8019af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8019be0:	4620      	mov	r0, r4
 8019be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019be6:	f7ff bfbd 	b.w	8019b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08019bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8019bec:	b538      	push	{r3, r4, r5, lr}
 8019bee:	4c15      	ldr	r4, [pc, #84]	; (8019c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8019bf0:	4605      	mov	r5, r0
 8019bf2:	7823      	ldrb	r3, [r4, #0]
 8019bf4:	f3bf 8f5b 	dmb	ish
 8019bf8:	07da      	lsls	r2, r3, #31
 8019bfa:	d40b      	bmi.n	8019c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	f004 fe98 	bl	801e932 <__cxa_guard_acquire>
 8019c02:	b138      	cbz	r0, 8019c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019c04:	4620      	mov	r0, r4
 8019c06:	f004 fea0 	bl	801e94a <__cxa_guard_release>
 8019c0a:	4a0f      	ldr	r2, [pc, #60]	; (8019c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019c0c:	490f      	ldr	r1, [pc, #60]	; (8019c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8019c0e:	4810      	ldr	r0, [pc, #64]	; (8019c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019c10:	f004 fe88 	bl	801e924 <__aeabi_atexit>
 8019c14:	4c0f      	ldr	r4, [pc, #60]	; (8019c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8019c16:	7823      	ldrb	r3, [r4, #0]
 8019c18:	f3bf 8f5b 	dmb	ish
 8019c1c:	07db      	lsls	r3, r3, #31
 8019c1e:	d40b      	bmi.n	8019c38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019c20:	4620      	mov	r0, r4
 8019c22:	f004 fe86 	bl	801e932 <__cxa_guard_acquire>
 8019c26:	b138      	cbz	r0, 8019c38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019c28:	4620      	mov	r0, r4
 8019c2a:	f004 fe8e 	bl	801e94a <__cxa_guard_release>
 8019c2e:	4a06      	ldr	r2, [pc, #24]	; (8019c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019c30:	4909      	ldr	r1, [pc, #36]	; (8019c58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8019c32:	480a      	ldr	r0, [pc, #40]	; (8019c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019c34:	f004 fe76 	bl	801e924 <__aeabi_atexit>
 8019c38:	4b05      	ldr	r3, [pc, #20]	; (8019c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019c3a:	652b      	str	r3, [r5, #80]	; 0x50
 8019c3c:	4b07      	ldr	r3, [pc, #28]	; (8019c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019c3e:	656b      	str	r3, [r5, #84]	; 0x54
 8019c40:	bd38      	pop	{r3, r4, r5, pc}
 8019c42:	bf00      	nop
 8019c44:	200119b4 	.word	0x200119b4
 8019c48:	20000000 	.word	0x20000000
 8019c4c:	080183b3 	.word	0x080183b3
 8019c50:	20000054 	.word	0x20000054
 8019c54:	200119b8 	.word	0x200119b8
 8019c58:	080183b1 	.word	0x080183b1
 8019c5c:	20000058 	.word	0x20000058

08019c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8019c60:	b538      	push	{r3, r4, r5, lr}
 8019c62:	4c15      	ldr	r4, [pc, #84]	; (8019cb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8019c64:	4605      	mov	r5, r0
 8019c66:	7823      	ldrb	r3, [r4, #0]
 8019c68:	f3bf 8f5b 	dmb	ish
 8019c6c:	07da      	lsls	r2, r3, #31
 8019c6e:	d40b      	bmi.n	8019c88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019c70:	4620      	mov	r0, r4
 8019c72:	f004 fe5e 	bl	801e932 <__cxa_guard_acquire>
 8019c76:	b138      	cbz	r0, 8019c88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019c78:	4620      	mov	r0, r4
 8019c7a:	f004 fe66 	bl	801e94a <__cxa_guard_release>
 8019c7e:	4a0f      	ldr	r2, [pc, #60]	; (8019cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019c80:	490f      	ldr	r1, [pc, #60]	; (8019cc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8019c82:	4810      	ldr	r0, [pc, #64]	; (8019cc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019c84:	f004 fe4e 	bl	801e924 <__aeabi_atexit>
 8019c88:	4c0f      	ldr	r4, [pc, #60]	; (8019cc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8019c8a:	7823      	ldrb	r3, [r4, #0]
 8019c8c:	f3bf 8f5b 	dmb	ish
 8019c90:	07db      	lsls	r3, r3, #31
 8019c92:	d40b      	bmi.n	8019cac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019c94:	4620      	mov	r0, r4
 8019c96:	f004 fe4c 	bl	801e932 <__cxa_guard_acquire>
 8019c9a:	b138      	cbz	r0, 8019cac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	f004 fe54 	bl	801e94a <__cxa_guard_release>
 8019ca2:	4a06      	ldr	r2, [pc, #24]	; (8019cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019ca4:	4909      	ldr	r1, [pc, #36]	; (8019ccc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8019ca6:	480a      	ldr	r0, [pc, #40]	; (8019cd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019ca8:	f004 fe3c 	bl	801e924 <__aeabi_atexit>
 8019cac:	4b05      	ldr	r3, [pc, #20]	; (8019cc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019cae:	64ab      	str	r3, [r5, #72]	; 0x48
 8019cb0:	4b07      	ldr	r3, [pc, #28]	; (8019cd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019cb2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8019cb4:	bd38      	pop	{r3, r4, r5, pc}
 8019cb6:	bf00      	nop
 8019cb8:	200119a4 	.word	0x200119a4
 8019cbc:	20000000 	.word	0x20000000
 8019cc0:	080183b7 	.word	0x080183b7
 8019cc4:	20000044 	.word	0x20000044
 8019cc8:	200119a8 	.word	0x200119a8
 8019ccc:	080183b5 	.word	0x080183b5
 8019cd0:	20000048 	.word	0x20000048

08019cd4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	f7ff ff88 	bl	8019bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8019cdc:	4620      	mov	r0, r4
 8019cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ce2:	f7ff bfbd 	b.w	8019c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08019ce6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8019ce6:	b510      	push	{r4, lr}
 8019ce8:	4604      	mov	r4, r0
 8019cea:	f7ff fff3 	bl	8019cd4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f7ff ff72 	bl	8019bd8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	f7ff fe73 	bl	80199e0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8019cfa:	4620      	mov	r0, r4
 8019cfc:	f7ff fdf2 	bl	80198e4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8019d00:	4620      	mov	r0, r4
 8019d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d06:	f7ff bee9 	b.w	8019adc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08019d0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8019d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d0e:	b087      	sub	sp, #28
 8019d10:	788d      	ldrb	r5, [r1, #2]
 8019d12:	f891 9000 	ldrb.w	r9, [r1]
 8019d16:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8019d1a:	9501      	str	r5, [sp, #4]
 8019d1c:	784d      	ldrb	r5, [r1, #1]
 8019d1e:	9203      	str	r2, [sp, #12]
 8019d20:	9502      	str	r5, [sp, #8]
 8019d22:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8019d26:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8019d2a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8019d2e:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8019d32:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8019d36:	fb06 0708 	mla	r7, r6, r8, r0
 8019d3a:	2e00      	cmp	r6, #0
 8019d3c:	eb02 0a07 	add.w	sl, r2, r7
 8019d40:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8019d44:	9d01      	ldr	r5, [sp, #4]
 8019d46:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8019d4a:	ea45 0509 	orr.w	r5, r5, r9
 8019d4e:	9505      	str	r5, [sp, #20]
 8019d50:	f2c0 80b2 	blt.w	8019eb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019d54:	45b3      	cmp	fp, r6
 8019d56:	f340 80af 	ble.w	8019eb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	f2c0 80aa 	blt.w	8019eb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019d60:	4580      	cmp	r8, r0
 8019d62:	f340 80a7 	ble.w	8019eb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019d66:	9a03      	ldr	r2, [sp, #12]
 8019d68:	5dd7      	ldrb	r7, [r2, r7]
 8019d6a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019d6e:	441f      	add	r7, r3
 8019d70:	1c42      	adds	r2, r0, #1
 8019d72:	f100 80a4 	bmi.w	8019ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019d76:	4590      	cmp	r8, r2
 8019d78:	f340 80a1 	ble.w	8019ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019d7c:	2c00      	cmp	r4, #0
 8019d7e:	f000 809e 	beq.w	8019ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019d82:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8019d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d8a:	441d      	add	r5, r3
 8019d8c:	3601      	adds	r6, #1
 8019d8e:	f100 809a 	bmi.w	8019ec6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019d92:	45b3      	cmp	fp, r6
 8019d94:	f340 8097 	ble.w	8019ec6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019d98:	f1bc 0f00 	cmp.w	ip, #0
 8019d9c:	f000 8093 	beq.w	8019ec6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019da0:	2800      	cmp	r0, #0
 8019da2:	f2c0 808e 	blt.w	8019ec2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019da6:	4580      	cmp	r8, r0
 8019da8:	f340 808b 	ble.w	8019ec2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019dac:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8019db0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019db4:	441e      	add	r6, r3
 8019db6:	3001      	adds	r0, #1
 8019db8:	f100 8088 	bmi.w	8019ecc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019dbc:	4580      	cmp	r8, r0
 8019dbe:	f340 8085 	ble.w	8019ecc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019dc2:	2c00      	cmp	r4, #0
 8019dc4:	f000 8082 	beq.w	8019ecc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019dc8:	44d0      	add	r8, sl
 8019dca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019dce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019dd2:	4413      	add	r3, r2
 8019dd4:	b2a4      	uxth	r4, r4
 8019dd6:	f895 a000 	ldrb.w	sl, [r5]
 8019dda:	fa1f fc8c 	uxth.w	ip, ip
 8019dde:	fb04 fb0c 	mul.w	fp, r4, ip
 8019de2:	0124      	lsls	r4, r4, #4
 8019de4:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8019de8:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8019dec:	eba4 040b 	sub.w	r4, r4, fp
 8019df0:	fa1f f08c 	uxth.w	r0, ip
 8019df4:	b2a2      	uxth	r2, r4
 8019df6:	783c      	ldrb	r4, [r7, #0]
 8019df8:	eba8 0800 	sub.w	r8, r8, r0
 8019dfc:	fa1f fc8e 	uxth.w	ip, lr
 8019e00:	fb02 fa0a 	mul.w	sl, r2, sl
 8019e04:	ea6f 0e0e 	mvn.w	lr, lr
 8019e08:	fa1f f888 	uxth.w	r8, r8
 8019e0c:	fa5f fe8e 	uxtb.w	lr, lr
 8019e10:	fb08 aa04 	mla	sl, r8, r4, sl
 8019e14:	7834      	ldrb	r4, [r6, #0]
 8019e16:	fb19 f90e 	smulbb	r9, r9, lr
 8019e1a:	fb00 aa04 	mla	sl, r0, r4, sl
 8019e1e:	781c      	ldrb	r4, [r3, #0]
 8019e20:	fb0b a404 	mla	r4, fp, r4, sl
 8019e24:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019e28:	fb04 990c 	mla	r9, r4, ip, r9
 8019e2c:	fa1f f989 	uxth.w	r9, r9
 8019e30:	f109 0401 	add.w	r4, r9, #1
 8019e34:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8019e38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e3c:	f881 9000 	strb.w	r9, [r1]
 8019e40:	f895 9001 	ldrb.w	r9, [r5, #1]
 8019e44:	787c      	ldrb	r4, [r7, #1]
 8019e46:	fb02 f909 	mul.w	r9, r2, r9
 8019e4a:	fb08 9904 	mla	r9, r8, r4, r9
 8019e4e:	7874      	ldrb	r4, [r6, #1]
 8019e50:	fb00 9904 	mla	r9, r0, r4, r9
 8019e54:	785c      	ldrb	r4, [r3, #1]
 8019e56:	fb0b 9404 	mla	r4, fp, r4, r9
 8019e5a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8019e5e:	9c02      	ldr	r4, [sp, #8]
 8019e60:	fb14 f90e 	smulbb	r9, r4, lr
 8019e64:	fb0a 940c 	mla	r4, sl, ip, r9
 8019e68:	b2a4      	uxth	r4, r4
 8019e6a:	f104 0901 	add.w	r9, r4, #1
 8019e6e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8019e72:	1224      	asrs	r4, r4, #8
 8019e74:	704c      	strb	r4, [r1, #1]
 8019e76:	78ad      	ldrb	r5, [r5, #2]
 8019e78:	78bc      	ldrb	r4, [r7, #2]
 8019e7a:	436a      	muls	r2, r5
 8019e7c:	789b      	ldrb	r3, [r3, #2]
 8019e7e:	fb08 2204 	mla	r2, r8, r4, r2
 8019e82:	78b4      	ldrb	r4, [r6, #2]
 8019e84:	fb00 2004 	mla	r0, r0, r4, r2
 8019e88:	fb0b 0b03 	mla	fp, fp, r3, r0
 8019e8c:	9b01      	ldr	r3, [sp, #4]
 8019e8e:	fb13 fe0e 	smulbb	lr, r3, lr
 8019e92:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8019e96:	fb0b ec0c 	mla	ip, fp, ip, lr
 8019e9a:	fa1f fc8c 	uxth.w	ip, ip
 8019e9e:	f10c 0e01 	add.w	lr, ip, #1
 8019ea2:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8019ea6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019eaa:	f881 c002 	strb.w	ip, [r1, #2]
 8019eae:	b007      	add	sp, #28
 8019eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb4:	af05      	add	r7, sp, #20
 8019eb6:	e75b      	b.n	8019d70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8019eb8:	ad05      	add	r5, sp, #20
 8019eba:	462f      	mov	r7, r5
 8019ebc:	e766      	b.n	8019d8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8019ebe:	ad05      	add	r5, sp, #20
 8019ec0:	e764      	b.n	8019d8c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8019ec2:	ae05      	add	r6, sp, #20
 8019ec4:	e777      	b.n	8019db6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8019ec6:	ab05      	add	r3, sp, #20
 8019ec8:	461e      	mov	r6, r3
 8019eca:	e783      	b.n	8019dd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8019ecc:	ab05      	add	r3, sp, #20
 8019ece:	e781      	b.n	8019dd4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08019ed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed4:	b093      	sub	sp, #76	; 0x4c
 8019ed6:	9210      	str	r2, [sp, #64]	; 0x40
 8019ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8019eda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019edc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8019ee0:	9011      	str	r0, [sp, #68]	; 0x44
 8019ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8019ee4:	6850      	ldr	r0, [r2, #4]
 8019ee6:	910d      	str	r1, [sp, #52]	; 0x34
 8019ee8:	6812      	ldr	r2, [r2, #0]
 8019eea:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8019eee:	fb00 1303 	mla	r3, r0, r3, r1
 8019ef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ef6:	18d3      	adds	r3, r2, r3
 8019ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8019efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	930c      	str	r3, [sp, #48]	; 0x30
 8019f00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f02:	685c      	ldr	r4, [r3, #4]
 8019f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f06:	3404      	adds	r4, #4
 8019f08:	43db      	mvns	r3, r3
 8019f0a:	b2db      	uxtb	r3, r3
 8019f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	dc03      	bgt.n	8019f1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	f340 8250 	ble.w	801a3bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8019f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019f22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019f26:	1e48      	subs	r0, r1, #1
 8019f28:	1e55      	subs	r5, r2, #1
 8019f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	f340 80ee 	ble.w	801a10e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8019f32:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019f34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019f36:	1436      	asrs	r6, r6, #16
 8019f38:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019f3c:	d406      	bmi.n	8019f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f3e:	4286      	cmp	r6, r0
 8019f40:	da04      	bge.n	8019f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	db02      	blt.n	8019f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f46:	42ab      	cmp	r3, r5
 8019f48:	f2c0 80e2 	blt.w	801a110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8019f4c:	3601      	adds	r6, #1
 8019f4e:	f100 80cf 	bmi.w	801a0f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8019f52:	42b1      	cmp	r1, r6
 8019f54:	f2c0 80cc 	blt.w	801a0f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8019f58:	3301      	adds	r3, #1
 8019f5a:	f100 80c9 	bmi.w	801a0f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	f2c0 80c6 	blt.w	801a0f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8019f64:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8019f68:	f1bb 0f00 	cmp.w	fp, #0
 8019f6c:	f340 80f1 	ble.w	801a152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019f72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019f74:	9824      	ldr	r0, [sp, #144]	; 0x90
 8019f76:	141d      	asrs	r5, r3, #16
 8019f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019f7a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019f7e:	68c7      	ldr	r7, [r0, #12]
 8019f80:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019f82:	1418      	asrs	r0, r3, #16
 8019f84:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8019f88:	6892      	ldr	r2, [r2, #8]
 8019f8a:	f100 8137 	bmi.w	801a1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019f8e:	f102 3cff 	add.w	ip, r2, #4294967295
 8019f92:	4560      	cmp	r0, ip
 8019f94:	f280 8132 	bge.w	801a1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019f98:	2d00      	cmp	r5, #0
 8019f9a:	f2c0 812f 	blt.w	801a1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019f9e:	f107 3cff 	add.w	ip, r7, #4294967295
 8019fa2:	4565      	cmp	r5, ip
 8019fa4:	f280 812a 	bge.w	801a1fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019fa8:	b212      	sxth	r2, r2
 8019faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019fac:	fb05 0002 	mla	r0, r5, r2, r0
 8019fb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019fb2:	f817 c000 	ldrb.w	ip, [r7, r0]
 8019fb6:	4405      	add	r5, r0
 8019fb8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019fbc:	eb04 0e0c 	add.w	lr, r4, ip
 8019fc0:	f1b8 0f00 	cmp.w	r8, #0
 8019fc4:	f000 810c 	beq.w	801a1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8019fc8:	786f      	ldrb	r7, [r5, #1]
 8019fca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019fce:	4427      	add	r7, r4
 8019fd0:	2900      	cmp	r1, #0
 8019fd2:	f000 810d 	beq.w	801a1f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8019fd6:	18a8      	adds	r0, r5, r2
 8019fd8:	5caa      	ldrb	r2, [r5, r2]
 8019fda:	7840      	ldrb	r0, [r0, #1]
 8019fdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019fe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019fe4:	4422      	add	r2, r4
 8019fe6:	4420      	add	r0, r4
 8019fe8:	fa1f f388 	uxth.w	r3, r8
 8019fec:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8019ff0:	b289      	uxth	r1, r1
 8019ff2:	f897 c000 	ldrb.w	ip, [r7]
 8019ff6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019ffa:	fb03 f901 	mul.w	r9, r3, r1
 8019ffe:	011b      	lsls	r3, r3, #4
 801a000:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a004:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801a008:	eba3 0309 	sub.w	r3, r3, r9
 801a00c:	b289      	uxth	r1, r1
 801a00e:	b29b      	uxth	r3, r3
 801a010:	eba8 0801 	sub.w	r8, r8, r1
 801a014:	fb03 fc0c 	mul.w	ip, r3, ip
 801a018:	fa1f f888 	uxth.w	r8, r8
 801a01c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a020:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a024:	f892 a000 	ldrb.w	sl, [r2]
 801a028:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a02c:	f890 a000 	ldrb.w	sl, [r0]
 801a030:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a034:	f896 a000 	ldrb.w	sl, [r6]
 801a038:	fb1a fa03 	smulbb	sl, sl, r3
 801a03c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a042:	fb0c ac05 	mla	ip, ip, r5, sl
 801a046:	fa1f fc8c 	uxth.w	ip, ip
 801a04a:	f10c 0a01 	add.w	sl, ip, #1
 801a04e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a052:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a056:	f886 a000 	strb.w	sl, [r6]
 801a05a:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a05e:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a062:	fb03 fc0c 	mul.w	ip, r3, ip
 801a066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a068:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a06c:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a070:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a074:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a078:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a07c:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a080:	fb1a fa03 	smulbb	sl, sl, r3
 801a084:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a08a:	fb0c ac05 	mla	ip, ip, r5, sl
 801a08e:	fa1f fc8c 	uxth.w	ip, ip
 801a092:	f10c 0a01 	add.w	sl, ip, #1
 801a096:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801a09a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a09e:	f886 c001 	strb.w	ip, [r6, #1]
 801a0a2:	78bf      	ldrb	r7, [r7, #2]
 801a0a4:	f89e c002 	ldrb.w	ip, [lr, #2]
 801a0a8:	437b      	muls	r3, r7
 801a0aa:	fb08 330c 	mla	r3, r8, ip, r3
 801a0ae:	f892 c002 	ldrb.w	ip, [r2, #2]
 801a0b2:	7882      	ldrb	r2, [r0, #2]
 801a0b4:	fb01 310c 	mla	r1, r1, ip, r3
 801a0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0ba:	fb09 1902 	mla	r9, r9, r2, r1
 801a0be:	78b1      	ldrb	r1, [r6, #2]
 801a0c0:	fb11 f103 	smulbb	r1, r1, r3
 801a0c4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a0c8:	fb09 1505 	mla	r5, r9, r5, r1
 801a0cc:	b2ad      	uxth	r5, r5
 801a0ce:	1c6b      	adds	r3, r5, #1
 801a0d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a0d4:	122d      	asrs	r5, r5, #8
 801a0d6:	70b5      	strb	r5, [r6, #2]
 801a0d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a0da:	3603      	adds	r6, #3
 801a0dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a0de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a0e2:	4413      	add	r3, r2
 801a0e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a0e6:	931d      	str	r3, [sp, #116]	; 0x74
 801a0e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a0ea:	4413      	add	r3, r2
 801a0ec:	931e      	str	r3, [sp, #120]	; 0x78
 801a0ee:	e73b      	b.n	8019f68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a0f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a0f2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801a0f4:	4433      	add	r3, r6
 801a0f6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801a0f8:	931d      	str	r3, [sp, #116]	; 0x74
 801a0fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a0fc:	4433      	add	r3, r6
 801a0fe:	931e      	str	r3, [sp, #120]	; 0x78
 801a100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a102:	3b01      	subs	r3, #1
 801a104:	9309      	str	r3, [sp, #36]	; 0x24
 801a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a108:	3303      	adds	r3, #3
 801a10a:	930a      	str	r3, [sp, #40]	; 0x28
 801a10c:	e70d      	b.n	8019f2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a10e:	d028      	beq.n	801a162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a112:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801a114:	3b01      	subs	r3, #1
 801a116:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801a118:	fb00 5003 	mla	r0, r0, r3, r5
 801a11c:	1400      	asrs	r0, r0, #16
 801a11e:	f53f af21 	bmi.w	8019f64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a122:	3901      	subs	r1, #1
 801a124:	4288      	cmp	r0, r1
 801a126:	f6bf af1d 	bge.w	8019f64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a12a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801a12c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801a12e:	fb01 0303 	mla	r3, r1, r3, r0
 801a132:	141b      	asrs	r3, r3, #16
 801a134:	f53f af16 	bmi.w	8019f64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a138:	3a01      	subs	r2, #1
 801a13a:	4293      	cmp	r3, r2
 801a13c:	f6bf af12 	bge.w	8019f64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a142:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a146:	1cdf      	adds	r7, r3, #3
 801a148:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801a14c:	f1b9 0f00 	cmp.w	r9, #0
 801a150:	dc73      	bgt.n	801a23a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a15a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a15e:	441a      	add	r2, r3
 801a160:	920a      	str	r2, [sp, #40]	; 0x28
 801a162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a164:	2b00      	cmp	r3, #0
 801a166:	f340 8129 	ble.w	801a3bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a16e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a170:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a174:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a178:	eef0 6a62 	vmov.f32	s13, s5
 801a17c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a180:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a184:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a188:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801a18c:	eef0 6a43 	vmov.f32	s13, s6
 801a190:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a194:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801a198:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a19c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1b0:	ee12 2a90 	vmov	r2, s5
 801a1b4:	eef0 2a47 	vmov.f32	s5, s14
 801a1b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1bc:	ee13 2a10 	vmov	r2, s6
 801a1c0:	931f      	str	r3, [sp, #124]	; 0x7c
 801a1c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a1c4:	eeb0 3a67 	vmov.f32	s6, s15
 801a1c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1cc:	9320      	str	r3, [sp, #128]	; 0x80
 801a1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a1d2:	3b01      	subs	r3, #1
 801a1d4:	930d      	str	r3, [sp, #52]	; 0x34
 801a1d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a1d8:	bf08      	it	eq
 801a1da:	4613      	moveq	r3, r2
 801a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 801a1de:	e696      	b.n	8019f0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a1e0:	b149      	cbz	r1, 801a1f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801a1e2:	5caa      	ldrb	r2, [r5, r2]
 801a1e4:	4670      	mov	r0, lr
 801a1e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a1ea:	4422      	add	r2, r4
 801a1ec:	4677      	mov	r7, lr
 801a1ee:	e6fb      	b.n	8019fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a1f0:	4670      	mov	r0, lr
 801a1f2:	4672      	mov	r2, lr
 801a1f4:	e6f8      	b.n	8019fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a1f6:	4670      	mov	r0, lr
 801a1f8:	4672      	mov	r2, lr
 801a1fa:	e7f7      	b.n	801a1ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a1fc:	f110 0c01 	adds.w	ip, r0, #1
 801a200:	f53f af6a 	bmi.w	801a0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a204:	4562      	cmp	r2, ip
 801a206:	f6ff af67 	blt.w	801a0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a20a:	f115 0c01 	adds.w	ip, r5, #1
 801a20e:	f53f af63 	bmi.w	801a0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a212:	4567      	cmp	r7, ip
 801a214:	f6ff af60 	blt.w	801a0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a21a:	b23f      	sxth	r7, r7
 801a21c:	b212      	sxth	r2, r2
 801a21e:	9002      	str	r0, [sp, #8]
 801a220:	9701      	str	r7, [sp, #4]
 801a222:	9200      	str	r2, [sp, #0]
 801a224:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a228:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801a22c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801a230:	4623      	mov	r3, r4
 801a232:	4631      	mov	r1, r6
 801a234:	f7ff fd69 	bl	8019d0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801a238:	e74e      	b.n	801a0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a23a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a23c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801a23e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a242:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801a244:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a246:	1400      	asrs	r0, r0, #16
 801a248:	142d      	asrs	r5, r5, #16
 801a24a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a24c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801a250:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a254:	fb02 5000 	mla	r0, r2, r0, r5
 801a258:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a25a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801a25e:	eb05 0c00 	add.w	ip, r5, r0
 801a262:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a266:	eb04 060e 	add.w	r6, r4, lr
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	f000 8097 	beq.w	801a39e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801a270:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801a274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a278:	4425      	add	r5, r4
 801a27a:	2900      	cmp	r1, #0
 801a27c:	f000 8098 	beq.w	801a3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801a280:	eb0c 0002 	add.w	r0, ip, r2
 801a284:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a288:	7840      	ldrb	r0, [r0, #1]
 801a28a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a28e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a292:	4422      	add	r2, r4
 801a294:	4420      	add	r0, r4
 801a296:	b29b      	uxth	r3, r3
 801a298:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801a29c:	b289      	uxth	r1, r1
 801a29e:	f895 e000 	ldrb.w	lr, [r5]
 801a2a2:	3703      	adds	r7, #3
 801a2a4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a2a8:	fb03 f801 	mul.w	r8, r3, r1
 801a2ac:	011b      	lsls	r3, r3, #4
 801a2ae:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801a2b2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801a2b6:	eba3 0308 	sub.w	r3, r3, r8
 801a2ba:	b289      	uxth	r1, r1
 801a2bc:	b29b      	uxth	r3, r3
 801a2be:	ebac 0c01 	sub.w	ip, ip, r1
 801a2c2:	fb03 fe0e 	mul.w	lr, r3, lr
 801a2c6:	fa1f fc8c 	uxth.w	ip, ip
 801a2ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2ce:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a2d2:	f892 b000 	ldrb.w	fp, [r2]
 801a2d6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a2da:	f890 b000 	ldrb.w	fp, [r0]
 801a2de:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a2e2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801a2e6:	fb1b fb03 	smulbb	fp, fp, r3
 801a2ea:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2f0:	fb0e be0a 	mla	lr, lr, sl, fp
 801a2f4:	fa1f fe8e 	uxth.w	lr, lr
 801a2f8:	f10e 0b01 	add.w	fp, lr, #1
 801a2fc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a300:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a304:	f807 ec06 	strb.w	lr, [r7, #-6]
 801a308:	f895 e001 	ldrb.w	lr, [r5, #1]
 801a30c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a310:	fb03 fe0e 	mul.w	lr, r3, lr
 801a314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a316:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a31a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a31e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a322:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a326:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a32a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801a32e:	fb1b fb03 	smulbb	fp, fp, r3
 801a332:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a338:	fb0e be0a 	mla	lr, lr, sl, fp
 801a33c:	fa1f fe8e 	uxth.w	lr, lr
 801a340:	f10e 0b01 	add.w	fp, lr, #1
 801a344:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a348:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a34c:	f807 ec05 	strb.w	lr, [r7, #-5]
 801a350:	78ad      	ldrb	r5, [r5, #2]
 801a352:	78b6      	ldrb	r6, [r6, #2]
 801a354:	436b      	muls	r3, r5
 801a356:	7895      	ldrb	r5, [r2, #2]
 801a358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a35a:	fb0c 3306 	mla	r3, ip, r6, r3
 801a35e:	fb01 3305 	mla	r3, r1, r5, r3
 801a362:	7885      	ldrb	r5, [r0, #2]
 801a364:	fb08 3805 	mla	r8, r8, r5, r3
 801a368:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801a36c:	fb13 f302 	smulbb	r3, r3, r2
 801a370:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801a374:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a376:	fb08 380a 	mla	r8, r8, sl, r3
 801a37a:	fa1f f888 	uxth.w	r8, r8
 801a37e:	f108 0301 	add.w	r3, r8, #1
 801a382:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801a386:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a388:	4413      	add	r3, r2
 801a38a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a38c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a390:	931d      	str	r3, [sp, #116]	; 0x74
 801a392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a394:	f807 8c04 	strb.w	r8, [r7, #-4]
 801a398:	4413      	add	r3, r2
 801a39a:	931e      	str	r3, [sp, #120]	; 0x78
 801a39c:	e6d6      	b.n	801a14c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a39e:	b151      	cbz	r1, 801a3b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801a3a0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a3a4:	4630      	mov	r0, r6
 801a3a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a3aa:	4422      	add	r2, r4
 801a3ac:	4635      	mov	r5, r6
 801a3ae:	e772      	b.n	801a296 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	4632      	mov	r2, r6
 801a3b4:	e76f      	b.n	801a296 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	4632      	mov	r2, r6
 801a3ba:	e7f7      	b.n	801a3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a3bc:	b013      	add	sp, #76	; 0x4c
 801a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801a3c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3c6:	784c      	ldrb	r4, [r1, #1]
 801a3c8:	f891 a002 	ldrb.w	sl, [r1, #2]
 801a3cc:	0224      	lsls	r4, r4, #8
 801a3ce:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801a3d2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801a3d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a3da:	f891 a000 	ldrb.w	sl, [r1]
 801a3de:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801a3e2:	ea44 040a 	orr.w	r4, r4, sl
 801a3e6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801a3ea:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801a3ee:	9401      	str	r4, [sp, #4]
 801a3f0:	fb05 c70e 	mla	r7, r5, lr, ip
 801a3f4:	2d00      	cmp	r5, #0
 801a3f6:	eb02 0807 	add.w	r8, r2, r7
 801a3fa:	db72      	blt.n	801a4e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a3fc:	45a9      	cmp	r9, r5
 801a3fe:	dd70      	ble.n	801a4e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a400:	f1bc 0f00 	cmp.w	ip, #0
 801a404:	db6b      	blt.n	801a4de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a406:	45e6      	cmp	lr, ip
 801a408:	dd69      	ble.n	801a4de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a40a:	5dd7      	ldrb	r7, [r2, r7]
 801a40c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a410:	441f      	add	r7, r3
 801a412:	f11c 0201 	adds.w	r2, ip, #1
 801a416:	d467      	bmi.n	801a4e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a418:	4596      	cmp	lr, r2
 801a41a:	dd65      	ble.n	801a4e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d063      	beq.n	801a4e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a420:	f898 4001 	ldrb.w	r4, [r8, #1]
 801a424:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a428:	441c      	add	r4, r3
 801a42a:	3501      	adds	r5, #1
 801a42c:	d460      	bmi.n	801a4f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a42e:	45a9      	cmp	r9, r5
 801a430:	dd5e      	ble.n	801a4f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a432:	2e00      	cmp	r6, #0
 801a434:	d05c      	beq.n	801a4f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a436:	f1bc 0f00 	cmp.w	ip, #0
 801a43a:	db57      	blt.n	801a4ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a43c:	45e6      	cmp	lr, ip
 801a43e:	dd55      	ble.n	801a4ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a440:	f818 500e 	ldrb.w	r5, [r8, lr]
 801a444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a448:	441d      	add	r5, r3
 801a44a:	f11c 0201 	adds.w	r2, ip, #1
 801a44e:	d452      	bmi.n	801a4f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a450:	4596      	cmp	lr, r2
 801a452:	dd50      	ble.n	801a4f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a454:	2800      	cmp	r0, #0
 801a456:	d04e      	beq.n	801a4f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a458:	44c6      	add	lr, r8
 801a45a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a45e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a462:	4413      	add	r3, r2
 801a464:	b280      	uxth	r0, r0
 801a466:	f897 8000 	ldrb.w	r8, [r7]
 801a46a:	b2b2      	uxth	r2, r6
 801a46c:	fb00 f602 	mul.w	r6, r0, r2
 801a470:	0100      	lsls	r0, r0, #4
 801a472:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801a476:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801a47a:	1b80      	subs	r0, r0, r6
 801a47c:	fa1f fc82 	uxth.w	ip, r2
 801a480:	b282      	uxth	r2, r0
 801a482:	7820      	ldrb	r0, [r4, #0]
 801a484:	ebae 0e0c 	sub.w	lr, lr, ip
 801a488:	4350      	muls	r0, r2
 801a48a:	fa1f fe8e 	uxth.w	lr, lr
 801a48e:	fb0e 0808 	mla	r8, lr, r8, r0
 801a492:	7828      	ldrb	r0, [r5, #0]
 801a494:	fb0c 8800 	mla	r8, ip, r0, r8
 801a498:	7818      	ldrb	r0, [r3, #0]
 801a49a:	fb06 8000 	mla	r0, r6, r0, r8
 801a49e:	1200      	asrs	r0, r0, #8
 801a4a0:	7008      	strb	r0, [r1, #0]
 801a4a2:	7860      	ldrb	r0, [r4, #1]
 801a4a4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a4a8:	4350      	muls	r0, r2
 801a4aa:	fb0e 0808 	mla	r8, lr, r8, r0
 801a4ae:	7868      	ldrb	r0, [r5, #1]
 801a4b0:	fb0c 8800 	mla	r8, ip, r0, r8
 801a4b4:	7858      	ldrb	r0, [r3, #1]
 801a4b6:	fb06 8000 	mla	r0, r6, r0, r8
 801a4ba:	1200      	asrs	r0, r0, #8
 801a4bc:	7048      	strb	r0, [r1, #1]
 801a4be:	78a0      	ldrb	r0, [r4, #2]
 801a4c0:	78bf      	ldrb	r7, [r7, #2]
 801a4c2:	4350      	muls	r0, r2
 801a4c4:	78aa      	ldrb	r2, [r5, #2]
 801a4c6:	fb0e 0007 	mla	r0, lr, r7, r0
 801a4ca:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a4ce:	789a      	ldrb	r2, [r3, #2]
 801a4d0:	fb06 c202 	mla	r2, r6, r2, ip
 801a4d4:	1212      	asrs	r2, r2, #8
 801a4d6:	708a      	strb	r2, [r1, #2]
 801a4d8:	b002      	add	sp, #8
 801a4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4de:	af01      	add	r7, sp, #4
 801a4e0:	e797      	b.n	801a412 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801a4e2:	ac01      	add	r4, sp, #4
 801a4e4:	4627      	mov	r7, r4
 801a4e6:	e7a0      	b.n	801a42a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a4e8:	ac01      	add	r4, sp, #4
 801a4ea:	e79e      	b.n	801a42a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a4ec:	ad01      	add	r5, sp, #4
 801a4ee:	e7ac      	b.n	801a44a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801a4f0:	ab01      	add	r3, sp, #4
 801a4f2:	461d      	mov	r5, r3
 801a4f4:	e7b6      	b.n	801a464 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801a4f6:	ab01      	add	r3, sp, #4
 801a4f8:	e7b4      	b.n	801a464 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801a4fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a4fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4fe:	b08d      	sub	sp, #52	; 0x34
 801a500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a504:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801a508:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a50a:	900b      	str	r0, [sp, #44]	; 0x2c
 801a50c:	9306      	str	r3, [sp, #24]
 801a50e:	6850      	ldr	r0, [r2, #4]
 801a510:	6812      	ldr	r2, [r2, #0]
 801a512:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a514:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801a518:	fb00 1303 	mla	r3, r0, r3, r1
 801a51c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a520:	18d3      	adds	r3, r2, r3
 801a522:	9307      	str	r3, [sp, #28]
 801a524:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	9308      	str	r3, [sp, #32]
 801a52a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a52c:	685d      	ldr	r5, [r3, #4]
 801a52e:	3504      	adds	r5, #4
 801a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a532:	2b00      	cmp	r3, #0
 801a534:	dc03      	bgt.n	801a53e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a538:	2b00      	cmp	r3, #0
 801a53a:	f340 81e6 	ble.w	801a90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a53e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a540:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a544:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a548:	1e48      	subs	r0, r1, #1
 801a54a:	1e56      	subs	r6, r2, #1
 801a54c:	9b06      	ldr	r3, [sp, #24]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	f340 80bd 	ble.w	801a6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a554:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a556:	1427      	asrs	r7, r4, #16
 801a558:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a55c:	d406      	bmi.n	801a56c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a55e:	4287      	cmp	r7, r0
 801a560:	da04      	bge.n	801a56c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a562:	2b00      	cmp	r3, #0
 801a564:	db02      	blt.n	801a56c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a566:	42b3      	cmp	r3, r6
 801a568:	f2c0 80b2 	blt.w	801a6d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801a56c:	3701      	adds	r7, #1
 801a56e:	f100 80a1 	bmi.w	801a6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a572:	42b9      	cmp	r1, r7
 801a574:	f2c0 809e 	blt.w	801a6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a578:	3301      	adds	r3, #1
 801a57a:	f100 809b 	bmi.w	801a6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a57e:	429a      	cmp	r2, r3
 801a580:	f2c0 8098 	blt.w	801a6b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a584:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801a588:	f1bb 0f00 	cmp.w	fp, #0
 801a58c:	f340 80bf 	ble.w	801a70e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a590:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a592:	981e      	ldr	r0, [sp, #120]	; 0x78
 801a594:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a596:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a59a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a59e:	1420      	asrs	r0, r4, #16
 801a5a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a5a2:	ea4f 4723 	mov.w	r7, r3, asr #16
 801a5a6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a5aa:	6892      	ldr	r2, [r2, #8]
 801a5ac:	f100 8103 	bmi.w	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a5b0:	f102 3eff 	add.w	lr, r2, #4294967295
 801a5b4:	4570      	cmp	r0, lr
 801a5b6:	f280 80fe 	bge.w	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a5ba:	2f00      	cmp	r7, #0
 801a5bc:	f2c0 80fb 	blt.w	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a5c0:	f10c 3eff 	add.w	lr, ip, #4294967295
 801a5c4:	4577      	cmp	r7, lr
 801a5c6:	f280 80f6 	bge.w	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a5ca:	b212      	sxth	r2, r2
 801a5cc:	fb07 0002 	mla	r0, r7, r2, r0
 801a5d0:	9f08      	ldr	r7, [sp, #32]
 801a5d2:	f817 8000 	ldrb.w	r8, [r7, r0]
 801a5d6:	eb07 0e00 	add.w	lr, r7, r0
 801a5da:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a5de:	eb05 0c08 	add.w	ip, r5, r8
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	f000 80d8 	beq.w	801a798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a5e8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801a5ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a5f0:	442f      	add	r7, r5
 801a5f2:	2900      	cmp	r1, #0
 801a5f4:	f000 80d9 	beq.w	801a7aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a5f8:	eb0e 0002 	add.w	r0, lr, r2
 801a5fc:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a600:	7840      	ldrb	r0, [r0, #1]
 801a602:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a606:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a60a:	442a      	add	r2, r5
 801a60c:	4428      	add	r0, r5
 801a60e:	b29b      	uxth	r3, r3
 801a610:	f815 a008 	ldrb.w	sl, [r5, r8]
 801a614:	b289      	uxth	r1, r1
 801a616:	f897 8000 	ldrb.w	r8, [r7]
 801a61a:	fb03 f901 	mul.w	r9, r3, r1
 801a61e:	011b      	lsls	r3, r3, #4
 801a620:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a624:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a628:	eba3 0309 	sub.w	r3, r3, r9
 801a62c:	b289      	uxth	r1, r1
 801a62e:	b29b      	uxth	r3, r3
 801a630:	ebae 0e01 	sub.w	lr, lr, r1
 801a634:	fb03 f808 	mul.w	r8, r3, r8
 801a638:	fa1f fe8e 	uxth.w	lr, lr
 801a63c:	fb0e 880a 	mla	r8, lr, sl, r8
 801a640:	f892 a000 	ldrb.w	sl, [r2]
 801a644:	fb01 880a 	mla	r8, r1, sl, r8
 801a648:	f890 a000 	ldrb.w	sl, [r0]
 801a64c:	fb09 880a 	mla	r8, r9, sl, r8
 801a650:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a654:	f886 8000 	strb.w	r8, [r6]
 801a658:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a65c:	f89c a001 	ldrb.w	sl, [ip, #1]
 801a660:	fb03 f808 	mul.w	r8, r3, r8
 801a664:	fb0e 880a 	mla	r8, lr, sl, r8
 801a668:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a66c:	fb01 880a 	mla	r8, r1, sl, r8
 801a670:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a674:	fb09 880a 	mla	r8, r9, sl, r8
 801a678:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a67c:	f886 8001 	strb.w	r8, [r6, #1]
 801a680:	78bf      	ldrb	r7, [r7, #2]
 801a682:	f89c c002 	ldrb.w	ip, [ip, #2]
 801a686:	437b      	muls	r3, r7
 801a688:	7892      	ldrb	r2, [r2, #2]
 801a68a:	fb0e 330c 	mla	r3, lr, ip, r3
 801a68e:	fb01 3102 	mla	r1, r1, r2, r3
 801a692:	7882      	ldrb	r2, [r0, #2]
 801a694:	fb09 1902 	mla	r9, r9, r2, r1
 801a698:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a69c:	f886 9002 	strb.w	r9, [r6, #2]
 801a6a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6a2:	3603      	adds	r6, #3
 801a6a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a6a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a6aa:	441c      	add	r4, r3
 801a6ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a6ae:	4413      	add	r3, r2
 801a6b0:	9318      	str	r3, [sp, #96]	; 0x60
 801a6b2:	e769      	b.n	801a588 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a6b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6b6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a6b8:	441c      	add	r4, r3
 801a6ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a6bc:	443b      	add	r3, r7
 801a6be:	9318      	str	r3, [sp, #96]	; 0x60
 801a6c0:	9b06      	ldr	r3, [sp, #24]
 801a6c2:	3b01      	subs	r3, #1
 801a6c4:	9306      	str	r3, [sp, #24]
 801a6c6:	9b07      	ldr	r3, [sp, #28]
 801a6c8:	3303      	adds	r3, #3
 801a6ca:	9307      	str	r3, [sp, #28]
 801a6cc:	e73e      	b.n	801a54c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a6ce:	d026      	beq.n	801a71e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801a6d0:	9b06      	ldr	r3, [sp, #24]
 801a6d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a6d4:	3b01      	subs	r3, #1
 801a6d6:	fb00 4003 	mla	r0, r0, r3, r4
 801a6da:	1400      	asrs	r0, r0, #16
 801a6dc:	f53f af52 	bmi.w	801a584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a6e0:	3901      	subs	r1, #1
 801a6e2:	4288      	cmp	r0, r1
 801a6e4:	f6bf af4e 	bge.w	801a584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a6e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a6ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a6ec:	fb01 0303 	mla	r3, r1, r3, r0
 801a6f0:	141b      	asrs	r3, r3, #16
 801a6f2:	f53f af47 	bmi.w	801a584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a6f6:	3a01      	subs	r2, #1
 801a6f8:	4293      	cmp	r3, r2
 801a6fa:	f6bf af43 	bge.w	801a584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a6fe:	9b07      	ldr	r3, [sp, #28]
 801a700:	f8dd a018 	ldr.w	sl, [sp, #24]
 801a704:	f103 0803 	add.w	r8, r3, #3
 801a708:	f1ba 0f00 	cmp.w	sl, #0
 801a70c:	dc71      	bgt.n	801a7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801a70e:	9b06      	ldr	r3, [sp, #24]
 801a710:	9a07      	ldr	r2, [sp, #28]
 801a712:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a716:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a71a:	441a      	add	r2, r3
 801a71c:	9207      	str	r2, [sp, #28]
 801a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a720:	2b00      	cmp	r3, #0
 801a722:	f340 80f2 	ble.w	801a90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a726:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a72a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a72c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a730:	eeb0 6a62 	vmov.f32	s12, s5
 801a734:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a738:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a740:	ee16 4a10 	vmov	r4, s12
 801a744:	eeb0 6a43 	vmov.f32	s12, s6
 801a748:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a74c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801a750:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a754:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a758:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a75c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a760:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a764:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a768:	ee12 2a90 	vmov	r2, s5
 801a76c:	eef0 2a47 	vmov.f32	s5, s14
 801a770:	fb92 f3f3 	sdiv	r3, r2, r3
 801a774:	ee13 2a10 	vmov	r2, s6
 801a778:	9319      	str	r3, [sp, #100]	; 0x64
 801a77a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a77c:	eeb0 3a67 	vmov.f32	s6, s15
 801a780:	fb92 f3f3 	sdiv	r3, r2, r3
 801a784:	931a      	str	r3, [sp, #104]	; 0x68
 801a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a78a:	3b01      	subs	r3, #1
 801a78c:	9309      	str	r3, [sp, #36]	; 0x24
 801a78e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a790:	bf08      	it	eq
 801a792:	4613      	moveq	r3, r2
 801a794:	9306      	str	r3, [sp, #24]
 801a796:	e6cb      	b.n	801a530 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a798:	b151      	cbz	r1, 801a7b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a79a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a79e:	4660      	mov	r0, ip
 801a7a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a7a4:	442a      	add	r2, r5
 801a7a6:	4667      	mov	r7, ip
 801a7a8:	e731      	b.n	801a60e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a7aa:	4660      	mov	r0, ip
 801a7ac:	4662      	mov	r2, ip
 801a7ae:	e72e      	b.n	801a60e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a7b0:	4660      	mov	r0, ip
 801a7b2:	4662      	mov	r2, ip
 801a7b4:	e7f7      	b.n	801a7a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801a7b6:	f110 0e01 	adds.w	lr, r0, #1
 801a7ba:	f53f af71 	bmi.w	801a6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a7be:	4572      	cmp	r2, lr
 801a7c0:	f6ff af6e 	blt.w	801a6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a7c4:	f117 0e01 	adds.w	lr, r7, #1
 801a7c8:	f53f af6a 	bmi.w	801a6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a7cc:	45f4      	cmp	ip, lr
 801a7ce:	f6ff af67 	blt.w	801a6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a7d2:	b212      	sxth	r2, r2
 801a7d4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801a7d8:	fa0f f38c 	sxth.w	r3, ip
 801a7dc:	9200      	str	r2, [sp, #0]
 801a7de:	4631      	mov	r1, r6
 801a7e0:	9a08      	ldr	r2, [sp, #32]
 801a7e2:	9301      	str	r3, [sp, #4]
 801a7e4:	462b      	mov	r3, r5
 801a7e6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801a7ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a7ec:	f7ff fde9 	bl	801a3c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801a7f0:	e756      	b.n	801a6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a7f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a7f4:	1426      	asrs	r6, r4, #16
 801a7f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a7f8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a7fc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a800:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a802:	1400      	asrs	r0, r0, #16
 801a804:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801a808:	fb02 6000 	mla	r0, r2, r0, r6
 801a80c:	9e08      	ldr	r6, [sp, #32]
 801a80e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801a812:	eb06 0c00 	add.w	ip, r6, r0
 801a816:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a81a:	eb05 070e 	add.w	r7, r5, lr
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d064      	beq.n	801a8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801a822:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801a826:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a82a:	442e      	add	r6, r5
 801a82c:	2900      	cmp	r1, #0
 801a82e:	d066      	beq.n	801a8fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801a830:	eb0c 0002 	add.w	r0, ip, r2
 801a834:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a838:	7840      	ldrb	r0, [r0, #1]
 801a83a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a83e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a842:	442a      	add	r2, r5
 801a844:	4428      	add	r0, r5
 801a846:	b29b      	uxth	r3, r3
 801a848:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801a84c:	b289      	uxth	r1, r1
 801a84e:	f896 e000 	ldrb.w	lr, [r6]
 801a852:	f108 0803 	add.w	r8, r8, #3
 801a856:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a85a:	fb03 f901 	mul.w	r9, r3, r1
 801a85e:	011b      	lsls	r3, r3, #4
 801a860:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a864:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801a868:	eba3 0309 	sub.w	r3, r3, r9
 801a86c:	b289      	uxth	r1, r1
 801a86e:	b29b      	uxth	r3, r3
 801a870:	ebac 0c01 	sub.w	ip, ip, r1
 801a874:	fb03 fe0e 	mul.w	lr, r3, lr
 801a878:	fa1f fc8c 	uxth.w	ip, ip
 801a87c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a880:	f892 b000 	ldrb.w	fp, [r2]
 801a884:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a888:	f890 b000 	ldrb.w	fp, [r0]
 801a88c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801a890:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a894:	f808 ec06 	strb.w	lr, [r8, #-6]
 801a898:	f896 e001 	ldrb.w	lr, [r6, #1]
 801a89c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a8a0:	fb03 fe0e 	mul.w	lr, r3, lr
 801a8a4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a8a8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a8ac:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a8b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a8b4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801a8b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a8bc:	f808 ec05 	strb.w	lr, [r8, #-5]
 801a8c0:	78b6      	ldrb	r6, [r6, #2]
 801a8c2:	78bf      	ldrb	r7, [r7, #2]
 801a8c4:	4373      	muls	r3, r6
 801a8c6:	7896      	ldrb	r6, [r2, #2]
 801a8c8:	7882      	ldrb	r2, [r0, #2]
 801a8ca:	fb0c 3307 	mla	r3, ip, r7, r3
 801a8ce:	fb01 3306 	mla	r3, r1, r6, r3
 801a8d2:	fb09 3902 	mla	r9, r9, r2, r3
 801a8d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a8d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a8da:	441c      	add	r4, r3
 801a8dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a8de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8e2:	4413      	add	r3, r2
 801a8e4:	f808 9c04 	strb.w	r9, [r8, #-4]
 801a8e8:	9318      	str	r3, [sp, #96]	; 0x60
 801a8ea:	e70d      	b.n	801a708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801a8ec:	b151      	cbz	r1, 801a904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801a8ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a8f2:	4638      	mov	r0, r7
 801a8f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8f8:	442a      	add	r2, r5
 801a8fa:	463e      	mov	r6, r7
 801a8fc:	e7a3      	b.n	801a846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801a8fe:	4638      	mov	r0, r7
 801a900:	463a      	mov	r2, r7
 801a902:	e7a0      	b.n	801a846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801a904:	4638      	mov	r0, r7
 801a906:	463a      	mov	r2, r7
 801a908:	e7f7      	b.n	801a8fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801a90a:	b00d      	add	sp, #52	; 0x34
 801a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a910 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801a910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a914:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801a918:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801a91c:	2d00      	cmp	r5, #0
 801a91e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801a922:	fb05 700c 	mla	r0, r5, ip, r7
 801a926:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801a92a:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801a92e:	eb02 0800 	add.w	r8, r2, r0
 801a932:	f2c0 8118 	blt.w	801ab66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801a936:	45a9      	cmp	r9, r5
 801a938:	f340 8115 	ble.w	801ab66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801a93c:	2f00      	cmp	r7, #0
 801a93e:	f2c0 8110 	blt.w	801ab62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801a942:	45bc      	cmp	ip, r7
 801a944:	f340 810d 	ble.w	801ab62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801a948:	5c12      	ldrb	r2, [r2, r0]
 801a94a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a94e:	1c7a      	adds	r2, r7, #1
 801a950:	f100 810c 	bmi.w	801ab6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801a954:	4594      	cmp	ip, r2
 801a956:	f340 8109 	ble.w	801ab6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801a95a:	2c00      	cmp	r4, #0
 801a95c:	f000 8108 	beq.w	801ab70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801a960:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a964:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a968:	3501      	adds	r5, #1
 801a96a:	f100 8105 	bmi.w	801ab78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801a96e:	45a9      	cmp	r9, r5
 801a970:	f340 8102 	ble.w	801ab78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801a974:	f1be 0f00 	cmp.w	lr, #0
 801a978:	f000 8101 	beq.w	801ab7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801a97c:	2f00      	cmp	r7, #0
 801a97e:	f2c0 80f9 	blt.w	801ab74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801a982:	45bc      	cmp	ip, r7
 801a984:	f340 80f6 	ble.w	801ab74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801a988:	f818 200c 	ldrb.w	r2, [r8, ip]
 801a98c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a990:	3701      	adds	r7, #1
 801a992:	f100 80f7 	bmi.w	801ab84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801a996:	45bc      	cmp	ip, r7
 801a998:	f340 80f4 	ble.w	801ab84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801a99c:	2c00      	cmp	r4, #0
 801a99e:	f000 80f3 	beq.w	801ab88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801a9a2:	44c4      	add	ip, r8
 801a9a4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801a9a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a9ac:	fa1f fc84 	uxth.w	ip, r4
 801a9b0:	fa1f f48e 	uxth.w	r4, lr
 801a9b4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801a9b8:	fb04 fe0c 	mul.w	lr, r4, ip
 801a9bc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a9c0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801a9c4:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801a9c8:	ebac 070e 	sub.w	r7, ip, lr
 801a9cc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801a9d0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801a9d4:	b2a4      	uxth	r4, r4
 801a9d6:	b2bf      	uxth	r7, r7
 801a9d8:	1b1b      	subs	r3, r3, r4
 801a9da:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a9de:	fb07 fc0a 	mul.w	ip, r7, sl
 801a9e2:	b29b      	uxth	r3, r3
 801a9e4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801a9e8:	9300      	str	r3, [sp, #0]
 801a9ea:	fb04 cc09 	mla	ip, r4, r9, ip
 801a9ee:	fb0e cc08 	mla	ip, lr, r8, ip
 801a9f2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a9f6:	9301      	str	r3, [sp, #4]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	f000 80af 	beq.w	801ab5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801a9fe:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801aa02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801aa06:	fb0b fc0c 	mul.w	ip, fp, ip
 801aa0a:	fb0b f606 	mul.w	r6, fp, r6
 801aa0e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801aa12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801aa16:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801aa1a:	44dc      	add	ip, fp
 801aa1c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801aa20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801aa24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa28:	fb0a fb0b 	mul.w	fp, sl, fp
 801aa2c:	fb0a fa00 	mul.w	sl, sl, r0
 801aa30:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801aa34:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801aa38:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801aa3c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801aa40:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801aa44:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801aa48:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801aa4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa50:	0a36      	lsrs	r6, r6, #8
 801aa52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aa56:	44dc      	add	ip, fp
 801aa58:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801aa5c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801aa60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801aa64:	fb09 fb0b 	mul.w	fp, r9, fp
 801aa68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa6c:	fb09 f905 	mul.w	r9, r9, r5
 801aa70:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801aa74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa78:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801aa7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801aa80:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801aa84:	fb0c fc07 	mul.w	ip, ip, r7
 801aa88:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801aa8c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801aa90:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801aa94:	4458      	add	r0, fp
 801aa96:	fb08 f505 	mul.w	r5, r8, r5
 801aa9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801aa9e:	fb08 f802 	mul.w	r8, r8, r2
 801aaa2:	0a00      	lsrs	r0, r0, #8
 801aaa4:	0a2a      	lsrs	r2, r5, #8
 801aaa6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801aaaa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801aaae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801aab2:	4415      	add	r5, r2
 801aab4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801aab8:	0a2d      	lsrs	r5, r5, #8
 801aaba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801aabe:	9a00      	ldr	r2, [sp, #0]
 801aac0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801aac4:	fb03 cc02 	mla	ip, r3, r2, ip
 801aac8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801aacc:	9b01      	ldr	r3, [sp, #4]
 801aace:	fb05 c50e 	mla	r5, r5, lr, ip
 801aad2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801aad6:	fb00 5004 	mla	r0, r0, r4, r5
 801aada:	0a00      	lsrs	r0, r0, #8
 801aadc:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801aae0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801aae4:	4378      	muls	r0, r7
 801aae6:	fb02 0006 	mla	r0, r2, r6, r0
 801aaea:	fb0e 0e08 	mla	lr, lr, r8, r0
 801aaee:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801aaf2:	fb04 e000 	mla	r0, r4, r0, lr
 801aaf6:	0a00      	lsrs	r0, r0, #8
 801aaf8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801aafc:	4328      	orrs	r0, r5
 801aafe:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801ab02:	b2ad      	uxth	r5, r5
 801ab04:	b2c4      	uxtb	r4, r0
 801ab06:	436b      	muls	r3, r5
 801ab08:	fb14 f405 	smulbb	r4, r4, r5
 801ab0c:	1c5a      	adds	r2, r3, #1
 801ab0e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ab12:	780b      	ldrb	r3, [r1, #0]
 801ab14:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ab18:	b2d2      	uxtb	r2, r2
 801ab1a:	fb03 4302 	mla	r3, r3, r2, r4
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	1c5c      	adds	r4, r3, #1
 801ab22:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ab26:	784c      	ldrb	r4, [r1, #1]
 801ab28:	fb14 f402 	smulbb	r4, r4, r2
 801ab2c:	121b      	asrs	r3, r3, #8
 801ab2e:	700b      	strb	r3, [r1, #0]
 801ab30:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ab34:	fb03 4305 	mla	r3, r3, r5, r4
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	1c5c      	adds	r4, r3, #1
 801ab3c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ab40:	0c04      	lsrs	r4, r0, #16
 801ab42:	7888      	ldrb	r0, [r1, #2]
 801ab44:	121b      	asrs	r3, r3, #8
 801ab46:	fb10 f002 	smulbb	r0, r0, r2
 801ab4a:	704b      	strb	r3, [r1, #1]
 801ab4c:	fb04 0005 	mla	r0, r4, r5, r0
 801ab50:	b280      	uxth	r0, r0
 801ab52:	1c43      	adds	r3, r0, #1
 801ab54:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ab58:	1200      	asrs	r0, r0, #8
 801ab5a:	7088      	strb	r0, [r1, #2]
 801ab5c:	b003      	add	sp, #12
 801ab5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab62:	2600      	movs	r6, #0
 801ab64:	e6f3      	b.n	801a94e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801ab66:	2000      	movs	r0, #0
 801ab68:	4606      	mov	r6, r0
 801ab6a:	e6fd      	b.n	801a968 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	e6fb      	b.n	801a968 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ab70:	4620      	mov	r0, r4
 801ab72:	e6f9      	b.n	801a968 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ab74:	2500      	movs	r5, #0
 801ab76:	e70b      	b.n	801a990 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801ab78:	2200      	movs	r2, #0
 801ab7a:	4615      	mov	r5, r2
 801ab7c:	e716      	b.n	801a9ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ab7e:	4672      	mov	r2, lr
 801ab80:	4675      	mov	r5, lr
 801ab82:	e713      	b.n	801a9ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ab84:	2200      	movs	r2, #0
 801ab86:	e711      	b.n	801a9ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801ab88:	4622      	mov	r2, r4
 801ab8a:	e70f      	b.n	801a9ac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801ab8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab90:	b09f      	sub	sp, #124	; 0x7c
 801ab92:	921b      	str	r2, [sp, #108]	; 0x6c
 801ab94:	9309      	str	r3, [sp, #36]	; 0x24
 801ab96:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ab98:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ab9c:	901d      	str	r0, [sp, #116]	; 0x74
 801ab9e:	931c      	str	r3, [sp, #112]	; 0x70
 801aba0:	6850      	ldr	r0, [r2, #4]
 801aba2:	9119      	str	r1, [sp, #100]	; 0x64
 801aba4:	6812      	ldr	r2, [r2, #0]
 801aba6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801aba8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801abac:	fb00 1303 	mla	r3, r0, r3, r1
 801abb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abb4:	18d3      	adds	r3, r2, r3
 801abb6:	930c      	str	r3, [sp, #48]	; 0x30
 801abb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	9312      	str	r3, [sp, #72]	; 0x48
 801abbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801abc0:	685e      	ldr	r6, [r3, #4]
 801abc2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801abc6:	3604      	adds	r6, #4
 801abc8:	930d      	str	r3, [sp, #52]	; 0x34
 801abca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801abcc:	2b00      	cmp	r3, #0
 801abce:	dc03      	bgt.n	801abd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801abd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	f340 8378 	ble.w	801b2c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801abd8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801abda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801abde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801abe2:	1e48      	subs	r0, r1, #1
 801abe4:	1e57      	subs	r7, r2, #1
 801abe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abe8:	2b00      	cmp	r3, #0
 801abea:	f340 818c 	ble.w	801af06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801abee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801abf0:	142b      	asrs	r3, r5, #16
 801abf2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801abf6:	d406      	bmi.n	801ac06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801abf8:	4584      	cmp	ip, r0
 801abfa:	da04      	bge.n	801ac06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	db02      	blt.n	801ac06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ac00:	42bb      	cmp	r3, r7
 801ac02:	f2c0 8181 	blt.w	801af08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801ac06:	f11c 0c01 	adds.w	ip, ip, #1
 801ac0a:	f100 816f 	bmi.w	801aeec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ac0e:	4561      	cmp	r1, ip
 801ac10:	f2c0 816c 	blt.w	801aeec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ac14:	3301      	adds	r3, #1
 801ac16:	f100 8169 	bmi.w	801aeec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	f2c0 8166 	blt.w	801aeec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ac24:	931a      	str	r3, [sp, #104]	; 0x68
 801ac26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	f340 818c 	ble.w	801af46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ac2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ac30:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ac34:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ac38:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ac3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ac3e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ac42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ac44:	141b      	asrs	r3, r3, #16
 801ac46:	f100 81d0 	bmi.w	801afea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ac4a:	f100 38ff 	add.w	r8, r0, #4294967295
 801ac4e:	4543      	cmp	r3, r8
 801ac50:	f280 81cb 	bge.w	801afea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ac54:	f1bc 0f00 	cmp.w	ip, #0
 801ac58:	f2c0 81c7 	blt.w	801afea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ac5c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ac60:	45c4      	cmp	ip, r8
 801ac62:	f280 81c2 	bge.w	801afea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ac66:	b200      	sxth	r0, r0
 801ac68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ac6a:	fb0c 3300 	mla	r3, ip, r0, r3
 801ac6e:	eb04 0803 	add.w	r8, r4, r3
 801ac72:	5ce3      	ldrb	r3, [r4, r3]
 801ac74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ac78:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ac7c:	2a00      	cmp	r2, #0
 801ac7e:	f000 81a9 	beq.w	801afd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801ac82:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ac86:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ac8a:	940e      	str	r4, [sp, #56]	; 0x38
 801ac8c:	0e24      	lsrs	r4, r4, #24
 801ac8e:	9415      	str	r4, [sp, #84]	; 0x54
 801ac90:	b179      	cbz	r1, 801acb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ac92:	eb08 0c00 	add.w	ip, r8, r0
 801ac96:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ac9a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ac9e:	900a      	str	r0, [sp, #40]	; 0x28
 801aca0:	0e00      	lsrs	r0, r0, #24
 801aca2:	9013      	str	r0, [sp, #76]	; 0x4c
 801aca4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801aca8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801acac:	900f      	str	r0, [sp, #60]	; 0x3c
 801acae:	0e00      	lsrs	r0, r0, #24
 801acb0:	9016      	str	r0, [sp, #88]	; 0x58
 801acb2:	b292      	uxth	r2, r2
 801acb4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801acb6:	b289      	uxth	r1, r1
 801acb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801acba:	fb02 f901 	mul.w	r9, r2, r1
 801acbe:	0112      	lsls	r2, r2, #4
 801acc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801acc4:	eba2 0809 	sub.w	r8, r2, r9
 801acc8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801accc:	b289      	uxth	r1, r1
 801acce:	fa1f f888 	uxth.w	r8, r8
 801acd2:	1a52      	subs	r2, r2, r1
 801acd4:	fb08 f000 	mul.w	r0, r8, r0
 801acd8:	b292      	uxth	r2, r2
 801acda:	fb02 000e 	mla	r0, r2, lr, r0
 801acde:	fb01 0004 	mla	r0, r1, r4, r0
 801ace2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ace4:	fb09 0004 	mla	r0, r9, r4, r0
 801ace8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801acec:	2800      	cmp	r0, #0
 801acee:	f000 80f2 	beq.w	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801acf2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801acf6:	d01b      	beq.n	801ad30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801acf8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801acfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ad00:	fb0e fa0a 	mul.w	sl, lr, sl
 801ad04:	fb0e fe03 	mul.w	lr, lr, r3
 801ad08:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ad0c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ad10:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ad14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ad18:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ad1c:	4453      	add	r3, sl
 801ad1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad22:	0a1b      	lsrs	r3, r3, #8
 801ad24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ad28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ad2c:	ea43 030c 	orr.w	r3, r3, ip
 801ad30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad32:	2cff      	cmp	r4, #255	; 0xff
 801ad34:	d021      	beq.n	801ad7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ad36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad38:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ad3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad3e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ad42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ad4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ad52:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ad5a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ad5e:	44de      	add	lr, fp
 801ad60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ad64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ad68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ad70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad74:	ea4e 040a 	orr.w	r4, lr, sl
 801ad78:	940e      	str	r4, [sp, #56]	; 0x38
 801ad7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad7c:	2cff      	cmp	r4, #255	; 0xff
 801ad7e:	d021      	beq.n	801adc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ad80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ad82:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ad86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad88:	fb04 fb0b 	mul.w	fp, r4, fp
 801ad8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ad8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ad98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ad9c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ada0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ada4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ada8:	44de      	add	lr, fp
 801adaa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801adae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801adb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801adb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801adba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801adbe:	ea4e 040a 	orr.w	r4, lr, sl
 801adc2:	940a      	str	r4, [sp, #40]	; 0x28
 801adc4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801adc6:	2cff      	cmp	r4, #255	; 0xff
 801adc8:	d021      	beq.n	801ae0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801adca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801adcc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801add0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801add2:	fb04 fb0b 	mul.w	fp, r4, fp
 801add6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801add8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801addc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801adde:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ade2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ade6:	fb04 fa0a 	mul.w	sl, r4, sl
 801adea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801adee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801adf2:	44de      	add	lr, fp
 801adf4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801adf8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801adfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ae00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ae04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ae08:	ea4e 040a 	orr.w	r4, lr, sl
 801ae0c:	940f      	str	r4, [sp, #60]	; 0x3c
 801ae0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ae10:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ae14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ae18:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ae1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ae1e:	fb08 fc0c 	mul.w	ip, r8, ip
 801ae22:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ae26:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ae2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae2c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ae30:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ae34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ae36:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ae3a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ae3e:	fb08 f80e 	mul.w	r8, r8, lr
 801ae42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae46:	fb02 8303 	mla	r3, r2, r3, r8
 801ae4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ae50:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ae54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae56:	fb01 330a 	mla	r3, r1, sl, r3
 801ae5a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ae5e:	fb09 3901 	mla	r9, r9, r1, r3
 801ae62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae64:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ae66:	4343      	muls	r3, r0
 801ae68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ae6c:	1c58      	adds	r0, r3, #1
 801ae6e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ae72:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ae76:	ea4c 0c09 	orr.w	ip, ip, r9
 801ae7a:	783b      	ldrb	r3, [r7, #0]
 801ae7c:	fa5f f28c 	uxtb.w	r2, ip
 801ae80:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ae84:	fb12 f201 	smulbb	r2, r2, r1
 801ae88:	b2c0      	uxtb	r0, r0
 801ae8a:	fb03 2300 	mla	r3, r3, r0, r2
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	1c5a      	adds	r2, r3, #1
 801ae92:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ae96:	787a      	ldrb	r2, [r7, #1]
 801ae98:	fb12 f200 	smulbb	r2, r2, r0
 801ae9c:	121b      	asrs	r3, r3, #8
 801ae9e:	703b      	strb	r3, [r7, #0]
 801aea0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801aea4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801aea8:	fb03 2301 	mla	r3, r3, r1, r2
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	1c5a      	adds	r2, r3, #1
 801aeb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aeb4:	121b      	asrs	r3, r3, #8
 801aeb6:	707b      	strb	r3, [r7, #1]
 801aeb8:	78bb      	ldrb	r3, [r7, #2]
 801aeba:	fb13 f000 	smulbb	r0, r3, r0
 801aebe:	fb0c 0c01 	mla	ip, ip, r1, r0
 801aec2:	fa1f fc8c 	uxth.w	ip, ip
 801aec6:	f10c 0301 	add.w	r3, ip, #1
 801aeca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801aece:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801aed2:	f887 c002 	strb.w	ip, [r7, #2]
 801aed6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801aed8:	3703      	adds	r7, #3
 801aeda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801aedc:	441a      	add	r2, r3
 801aede:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aee0:	441d      	add	r5, r3
 801aee2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801aee4:	9229      	str	r2, [sp, #164]	; 0xa4
 801aee6:	3b01      	subs	r3, #1
 801aee8:	931a      	str	r3, [sp, #104]	; 0x68
 801aeea:	e69c      	b.n	801ac26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801aeec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801aeee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801aef0:	441c      	add	r4, r3
 801aef2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aef4:	441d      	add	r5, r3
 801aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aef8:	9429      	str	r4, [sp, #164]	; 0xa4
 801aefa:	3b01      	subs	r3, #1
 801aefc:	9309      	str	r3, [sp, #36]	; 0x24
 801aefe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af00:	3303      	adds	r3, #3
 801af02:	930c      	str	r3, [sp, #48]	; 0x30
 801af04:	e66f      	b.n	801abe6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801af06:	d026      	beq.n	801af56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801af08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af0a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801af0c:	3b01      	subs	r3, #1
 801af0e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801af10:	fb00 4003 	mla	r0, r0, r3, r4
 801af14:	1400      	asrs	r0, r0, #16
 801af16:	f53f ae83 	bmi.w	801ac20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801af1a:	3901      	subs	r1, #1
 801af1c:	4288      	cmp	r0, r1
 801af1e:	f6bf ae7f 	bge.w	801ac20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801af22:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801af24:	fb01 5303 	mla	r3, r1, r3, r5
 801af28:	141b      	asrs	r3, r3, #16
 801af2a:	f53f ae79 	bmi.w	801ac20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801af2e:	3a01      	subs	r2, #1
 801af30:	4293      	cmp	r3, r2
 801af32:	f6bf ae75 	bge.w	801ac20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801af36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af38:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801af3c:	f103 0e03 	add.w	lr, r3, #3
 801af40:	f1bb 0f00 	cmp.w	fp, #0
 801af44:	dc71      	bgt.n	801b02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801af46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af48:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801af4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801af52:	4423      	add	r3, r4
 801af54:	930c      	str	r3, [sp, #48]	; 0x30
 801af56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801af58:	2b00      	cmp	r3, #0
 801af5a:	f340 81b5 	ble.w	801b2c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801af5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801af62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af64:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af6c:	eef0 6a62 	vmov.f32	s13, s5
 801af70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801af74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af7c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801af80:	eef0 6a43 	vmov.f32	s13, s6
 801af84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af88:	ee16 5a90 	vmov	r5, s13
 801af8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af90:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af94:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afa0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afa4:	ee12 2a90 	vmov	r2, s5
 801afa8:	eef0 2a47 	vmov.f32	s5, s14
 801afac:	fb92 f3f3 	sdiv	r3, r2, r3
 801afb0:	ee13 2a10 	vmov	r2, s6
 801afb4:	932b      	str	r3, [sp, #172]	; 0xac
 801afb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801afb8:	eeb0 3a67 	vmov.f32	s6, s15
 801afbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801afc0:	932c      	str	r3, [sp, #176]	; 0xb0
 801afc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801afc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801afc6:	3b01      	subs	r3, #1
 801afc8:	9319      	str	r3, [sp, #100]	; 0x64
 801afca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801afcc:	bf08      	it	eq
 801afce:	4613      	moveq	r3, r2
 801afd0:	9309      	str	r3, [sp, #36]	; 0x24
 801afd2:	e5fa      	b.n	801abca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801afd4:	2900      	cmp	r1, #0
 801afd6:	f43f ae6c 	beq.w	801acb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801afda:	f818 0000 	ldrb.w	r0, [r8, r0]
 801afde:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801afe2:	900a      	str	r0, [sp, #40]	; 0x28
 801afe4:	0e00      	lsrs	r0, r0, #24
 801afe6:	9013      	str	r0, [sp, #76]	; 0x4c
 801afe8:	e663      	b.n	801acb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801afea:	f113 0801 	adds.w	r8, r3, #1
 801afee:	f53f af72 	bmi.w	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801aff2:	4540      	cmp	r0, r8
 801aff4:	f6ff af6f 	blt.w	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801aff8:	f11c 0801 	adds.w	r8, ip, #1
 801affc:	f53f af6b 	bmi.w	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b000:	45c6      	cmp	lr, r8
 801b002:	f6ff af68 	blt.w	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b006:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b008:	b200      	sxth	r0, r0
 801b00a:	9302      	str	r3, [sp, #8]
 801b00c:	fa0f f38e 	sxth.w	r3, lr
 801b010:	9000      	str	r0, [sp, #0]
 801b012:	9301      	str	r3, [sp, #4]
 801b014:	4633      	mov	r3, r6
 801b016:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b018:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b01c:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b020:	4639      	mov	r1, r7
 801b022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b024:	f7ff fc74 	bl	801a910 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b028:	e755      	b.n	801aed6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b02a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b02c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b030:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801b032:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b036:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b038:	1427      	asrs	r7, r4, #16
 801b03a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b03c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b040:	142b      	asrs	r3, r5, #16
 801b042:	fb01 7303 	mla	r3, r1, r3, r7
 801b046:	18e7      	adds	r7, r4, r3
 801b048:	5ce3      	ldrb	r3, [r4, r3]
 801b04a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b04e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b052:	2a00      	cmp	r2, #0
 801b054:	f000 812e 	beq.w	801b2b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b058:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b05c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b060:	9410      	str	r4, [sp, #64]	; 0x40
 801b062:	0e24      	lsrs	r4, r4, #24
 801b064:	9417      	str	r4, [sp, #92]	; 0x5c
 801b066:	b170      	cbz	r0, 801b086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b068:	eb07 0801 	add.w	r8, r7, r1
 801b06c:	5c79      	ldrb	r1, [r7, r1]
 801b06e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b072:	910b      	str	r1, [sp, #44]	; 0x2c
 801b074:	0e09      	lsrs	r1, r1, #24
 801b076:	9114      	str	r1, [sp, #80]	; 0x50
 801b078:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b07c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b080:	9111      	str	r1, [sp, #68]	; 0x44
 801b082:	0e09      	lsrs	r1, r1, #24
 801b084:	9118      	str	r1, [sp, #96]	; 0x60
 801b086:	b292      	uxth	r2, r2
 801b088:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b08a:	b280      	uxth	r0, r0
 801b08c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b08e:	fb02 f900 	mul.w	r9, r2, r0
 801b092:	0112      	lsls	r2, r2, #4
 801b094:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b098:	eba2 0809 	sub.w	r8, r2, r9
 801b09c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801b0a0:	b280      	uxth	r0, r0
 801b0a2:	fa1f f888 	uxth.w	r8, r8
 801b0a6:	1a12      	subs	r2, r2, r0
 801b0a8:	fb08 f101 	mul.w	r1, r8, r1
 801b0ac:	b292      	uxth	r2, r2
 801b0ae:	fb02 110c 	mla	r1, r2, ip, r1
 801b0b2:	fb00 1104 	mla	r1, r0, r4, r1
 801b0b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801b0b8:	fb09 1104 	mla	r1, r9, r4, r1
 801b0bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b0c0:	2900      	cmp	r1, #0
 801b0c2:	f000 80ec 	beq.w	801b29e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801b0c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b0ca:	d019      	beq.n	801b100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801b0cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b0d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b0d4:	fb0c fa0a 	mul.w	sl, ip, sl
 801b0d8:	fb0c fc03 	mul.w	ip, ip, r3
 801b0dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b0e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b0e4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801b0e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b0ec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b0f0:	4453      	add	r3, sl
 801b0f2:	0a3f      	lsrs	r7, r7, #8
 801b0f4:	0a1b      	lsrs	r3, r3, #8
 801b0f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b0fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b0fe:	433b      	orrs	r3, r7
 801b100:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801b102:	2cff      	cmp	r4, #255	; 0xff
 801b104:	d020      	beq.n	801b148 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801b106:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b108:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b10c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801b10e:	4367      	muls	r7, r4
 801b110:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b112:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b116:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b11a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801b11c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b120:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b124:	fb04 fa0a 	mul.w	sl, r4, sl
 801b128:	44bc      	add	ip, r7
 801b12a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b12e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b132:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b136:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b13a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b13e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b142:	ea4c 040a 	orr.w	r4, ip, sl
 801b146:	9410      	str	r4, [sp, #64]	; 0x40
 801b148:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b14a:	2cff      	cmp	r4, #255	; 0xff
 801b14c:	d020      	beq.n	801b190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801b14e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b150:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b154:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b156:	4367      	muls	r7, r4
 801b158:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b15a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b15e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b162:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b164:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b168:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b16c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b170:	44bc      	add	ip, r7
 801b172:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b176:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b17a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b17e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b182:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b186:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b18a:	ea4c 040a 	orr.w	r4, ip, sl
 801b18e:	940b      	str	r4, [sp, #44]	; 0x2c
 801b190:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801b192:	2cff      	cmp	r4, #255	; 0xff
 801b194:	d020      	beq.n	801b1d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801b196:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b198:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b19c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801b19e:	4367      	muls	r7, r4
 801b1a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b1a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b1a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b1aa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801b1ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b1b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b1b4:	fb04 fa0a 	mul.w	sl, r4, sl
 801b1b8:	44bc      	add	ip, r7
 801b1ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b1be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b1c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b1c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b1ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b1ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b1d2:	ea4c 040a 	orr.w	r4, ip, sl
 801b1d6:	9411      	str	r4, [sp, #68]	; 0x44
 801b1d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b1da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b1de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b1e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b1e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b1e8:	fb08 f707 	mul.w	r7, r8, r7
 801b1ec:	fb02 770c 	mla	r7, r2, ip, r7
 801b1f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b1f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b1f6:	fb00 770c 	mla	r7, r0, ip, r7
 801b1fa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b1fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b200:	fb09 770c 	mla	r7, r9, ip, r7
 801b204:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801b208:	fb08 f80c 	mul.w	r8, r8, ip
 801b20c:	0a3f      	lsrs	r7, r7, #8
 801b20e:	fb02 8303 	mla	r3, r2, r3, r8
 801b212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b214:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b218:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801b21c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b21e:	fb00 330a 	mla	r3, r0, sl, r3
 801b222:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b226:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b228:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b22e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b232:	434b      	muls	r3, r1
 801b234:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b238:	1c59      	adds	r1, r3, #1
 801b23a:	ea47 070c 	orr.w	r7, r7, ip
 801b23e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b242:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801b246:	b2fa      	uxtb	r2, r7
 801b248:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b24c:	fb12 f200 	smulbb	r2, r2, r0
 801b250:	b2c9      	uxtb	r1, r1
 801b252:	fb03 2301 	mla	r3, r3, r1, r2
 801b256:	b29b      	uxth	r3, r3
 801b258:	1c5a      	adds	r2, r3, #1
 801b25a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b25e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b262:	fb12 f201 	smulbb	r2, r2, r1
 801b266:	121b      	asrs	r3, r3, #8
 801b268:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801b26c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801b270:	0c3f      	lsrs	r7, r7, #16
 801b272:	fb03 2300 	mla	r3, r3, r0, r2
 801b276:	b29b      	uxth	r3, r3
 801b278:	1c5a      	adds	r2, r3, #1
 801b27a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b27e:	121b      	asrs	r3, r3, #8
 801b280:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801b284:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801b288:	fb13 f101 	smulbb	r1, r3, r1
 801b28c:	fb07 1700 	mla	r7, r7, r0, r1
 801b290:	b2bf      	uxth	r7, r7
 801b292:	1c7b      	adds	r3, r7, #1
 801b294:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b298:	123f      	asrs	r7, r7, #8
 801b29a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801b29e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b2a0:	f10e 0e03 	add.w	lr, lr, #3
 801b2a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b2a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b2aa:	441a      	add	r2, r3
 801b2ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b2ae:	9229      	str	r2, [sp, #164]	; 0xa4
 801b2b0:	441d      	add	r5, r3
 801b2b2:	e645      	b.n	801af40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	f43f aee6 	beq.w	801b086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b2ba:	5c79      	ldrb	r1, [r7, r1]
 801b2bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b2c0:	910b      	str	r1, [sp, #44]	; 0x2c
 801b2c2:	0e09      	lsrs	r1, r1, #24
 801b2c4:	9114      	str	r1, [sp, #80]	; 0x50
 801b2c6:	e6de      	b.n	801b086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b2c8:	b01f      	add	sp, #124	; 0x7c
 801b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801b2ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801b2d6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801b2da:	2d00      	cmp	r5, #0
 801b2dc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801b2e0:	fb05 700e 	mla	r0, r5, lr, r7
 801b2e4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801b2e8:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801b2ec:	eb02 0800 	add.w	r8, r2, r0
 801b2f0:	f2c0 8105 	blt.w	801b4fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b2f4:	45a9      	cmp	r9, r5
 801b2f6:	f340 8102 	ble.w	801b4fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b2fa:	2f00      	cmp	r7, #0
 801b2fc:	f2c0 80fd 	blt.w	801b4fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b300:	45be      	cmp	lr, r7
 801b302:	f340 80fa 	ble.w	801b4fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b306:	5c12      	ldrb	r2, [r2, r0]
 801b308:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b30c:	1c7a      	adds	r2, r7, #1
 801b30e:	f100 80f9 	bmi.w	801b504 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b312:	4596      	cmp	lr, r2
 801b314:	f340 80f6 	ble.w	801b504 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b318:	2c00      	cmp	r4, #0
 801b31a:	f000 80f5 	beq.w	801b508 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801b31e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b326:	3501      	adds	r5, #1
 801b328:	f100 80f2 	bmi.w	801b510 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b32c:	45a9      	cmp	r9, r5
 801b32e:	f340 80ef 	ble.w	801b510 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b332:	f1bc 0f00 	cmp.w	ip, #0
 801b336:	f000 80ee 	beq.w	801b516 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801b33a:	2f00      	cmp	r7, #0
 801b33c:	f2c0 80e6 	blt.w	801b50c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b340:	45be      	cmp	lr, r7
 801b342:	f340 80e3 	ble.w	801b50c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b346:	f818 200e 	ldrb.w	r2, [r8, lr]
 801b34a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b34e:	3701      	adds	r7, #1
 801b350:	f100 80e4 	bmi.w	801b51c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b354:	45be      	cmp	lr, r7
 801b356:	f340 80e1 	ble.w	801b51c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b35a:	2c00      	cmp	r4, #0
 801b35c:	f000 80e0 	beq.w	801b520 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801b360:	44c6      	add	lr, r8
 801b362:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b36a:	b2a3      	uxth	r3, r4
 801b36c:	fa1f fc8c 	uxth.w	ip, ip
 801b370:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b374:	fb0c fe03 	mul.w	lr, ip, r3
 801b378:	011b      	lsls	r3, r3, #4
 801b37a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b37e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801b382:	eba3 070e 	sub.w	r7, r3, lr
 801b386:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801b38a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b38e:	fa1f f48c 	uxth.w	r4, ip
 801b392:	b2bf      	uxth	r7, r7
 801b394:	1b1b      	subs	r3, r3, r4
 801b396:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b39a:	fb07 fc0a 	mul.w	ip, r7, sl
 801b39e:	b29b      	uxth	r3, r3
 801b3a0:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b3a4:	9300      	str	r3, [sp, #0]
 801b3a6:	fb04 cc09 	mla	ip, r4, r9, ip
 801b3aa:	fb0e cc08 	mla	ip, lr, r8, ip
 801b3ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b3b2:	9301      	str	r3, [sp, #4]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	f000 809d 	beq.w	801b4f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801b3ba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b3be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b3c2:	fb0b fc0c 	mul.w	ip, fp, ip
 801b3c6:	fb0b f606 	mul.w	r6, fp, r6
 801b3ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b3ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b3d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801b3d6:	44dc      	add	ip, fp
 801b3d8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801b3dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b3e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3e4:	fb0a fb0b 	mul.w	fp, sl, fp
 801b3e8:	fb0a fa00 	mul.w	sl, sl, r0
 801b3ec:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801b3f0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b3f4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801b3f8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b3fc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b400:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b404:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b408:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b40c:	0a36      	lsrs	r6, r6, #8
 801b40e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b412:	44dc      	add	ip, fp
 801b414:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b418:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b41c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b420:	fb09 fb0b 	mul.w	fp, r9, fp
 801b424:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b428:	fb09 f905 	mul.w	r9, r9, r5
 801b42c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b434:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801b438:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b43c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b440:	fb0c fc07 	mul.w	ip, ip, r7
 801b444:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b448:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801b44c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b450:	4458      	add	r0, fp
 801b452:	fb08 f505 	mul.w	r5, r8, r5
 801b456:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b45a:	fb08 f802 	mul.w	r8, r8, r2
 801b45e:	0a00      	lsrs	r0, r0, #8
 801b460:	0a2a      	lsrs	r2, r5, #8
 801b462:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801b466:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b46a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b46e:	4415      	add	r5, r2
 801b470:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801b474:	0a2d      	lsrs	r5, r5, #8
 801b476:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b47a:	9a00      	ldr	r2, [sp, #0]
 801b47c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b480:	fb03 cc02 	mla	ip, r3, r2, ip
 801b484:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b488:	9b01      	ldr	r3, [sp, #4]
 801b48a:	fb05 c50e 	mla	r5, r5, lr, ip
 801b48e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b492:	43db      	mvns	r3, r3
 801b494:	fb00 5004 	mla	r0, r0, r4, r5
 801b498:	b2db      	uxtb	r3, r3
 801b49a:	0a00      	lsrs	r0, r0, #8
 801b49c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801b4a0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801b4a4:	4378      	muls	r0, r7
 801b4a6:	fb02 0006 	mla	r0, r2, r6, r0
 801b4aa:	780a      	ldrb	r2, [r1, #0]
 801b4ac:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b4b0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801b4b4:	fb04 e000 	mla	r0, r4, r0, lr
 801b4b8:	fb02 f403 	mul.w	r4, r2, r3
 801b4bc:	0a00      	lsrs	r0, r0, #8
 801b4be:	1c62      	adds	r2, r4, #1
 801b4c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b4c4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b4c8:	4328      	orrs	r0, r5
 801b4ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b4ce:	700a      	strb	r2, [r1, #0]
 801b4d0:	784a      	ldrb	r2, [r1, #1]
 801b4d2:	435a      	muls	r2, r3
 801b4d4:	1c54      	adds	r4, r2, #1
 801b4d6:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801b4da:	0a02      	lsrs	r2, r0, #8
 801b4dc:	0c00      	lsrs	r0, r0, #16
 801b4de:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b4e2:	704a      	strb	r2, [r1, #1]
 801b4e4:	788a      	ldrb	r2, [r1, #2]
 801b4e6:	4353      	muls	r3, r2
 801b4e8:	1c5a      	adds	r2, r3, #1
 801b4ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b4ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b4f2:	7088      	strb	r0, [r1, #2]
 801b4f4:	b003      	add	sp, #12
 801b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4fa:	2600      	movs	r6, #0
 801b4fc:	e706      	b.n	801b30c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801b4fe:	2000      	movs	r0, #0
 801b500:	4606      	mov	r6, r0
 801b502:	e710      	b.n	801b326 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b504:	2000      	movs	r0, #0
 801b506:	e70e      	b.n	801b326 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b508:	4620      	mov	r0, r4
 801b50a:	e70c      	b.n	801b326 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b50c:	2500      	movs	r5, #0
 801b50e:	e71e      	b.n	801b34e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801b510:	2200      	movs	r2, #0
 801b512:	4615      	mov	r5, r2
 801b514:	e729      	b.n	801b36a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b516:	4662      	mov	r2, ip
 801b518:	4665      	mov	r5, ip
 801b51a:	e726      	b.n	801b36a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b51c:	2200      	movs	r2, #0
 801b51e:	e724      	b.n	801b36a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b520:	4622      	mov	r2, r4
 801b522:	e722      	b.n	801b36a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801b524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b528:	b09b      	sub	sp, #108	; 0x6c
 801b52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b52e:	9218      	str	r2, [sp, #96]	; 0x60
 801b530:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b532:	9019      	str	r0, [sp, #100]	; 0x64
 801b534:	9116      	str	r1, [sp, #88]	; 0x58
 801b536:	6850      	ldr	r0, [r2, #4]
 801b538:	9307      	str	r3, [sp, #28]
 801b53a:	6812      	ldr	r2, [r2, #0]
 801b53c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801b53e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b542:	fb00 1303 	mla	r3, r0, r3, r1
 801b546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b54a:	18d3      	adds	r3, r2, r3
 801b54c:	930a      	str	r3, [sp, #40]	; 0x28
 801b54e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	930f      	str	r3, [sp, #60]	; 0x3c
 801b554:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b556:	685e      	ldr	r6, [r3, #4]
 801b558:	3604      	adds	r6, #4
 801b55a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	dc03      	bgt.n	801b568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b560:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b562:	2b00      	cmp	r3, #0
 801b564:	f340 834f 	ble.w	801bc06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801b568:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b56a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b56e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b572:	1e48      	subs	r0, r1, #1
 801b574:	1e57      	subs	r7, r2, #1
 801b576:	9b07      	ldr	r3, [sp, #28]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	f340 8178 	ble.w	801b86e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b57e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801b580:	142b      	asrs	r3, r5, #16
 801b582:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b586:	d406      	bmi.n	801b596 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b588:	4584      	cmp	ip, r0
 801b58a:	da04      	bge.n	801b596 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	db02      	blt.n	801b596 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b590:	42bb      	cmp	r3, r7
 801b592:	f2c0 816d 	blt.w	801b870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b596:	f11c 0c01 	adds.w	ip, ip, #1
 801b59a:	f100 815b 	bmi.w	801b854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b59e:	4561      	cmp	r1, ip
 801b5a0:	f2c0 8158 	blt.w	801b854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b5a4:	3301      	adds	r3, #1
 801b5a6:	f100 8155 	bmi.w	801b854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	f2c0 8152 	blt.w	801b854 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b5b0:	9b07      	ldr	r3, [sp, #28]
 801b5b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b5b4:	9317      	str	r3, [sp, #92]	; 0x5c
 801b5b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	f340 8178 	ble.w	801b8ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b5be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b5c0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b5c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b5c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b5cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b5ce:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801b5d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b5d4:	141b      	asrs	r3, r3, #16
 801b5d6:	f100 81ba 	bmi.w	801b94e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b5da:	f101 38ff 	add.w	r8, r1, #4294967295
 801b5de:	4543      	cmp	r3, r8
 801b5e0:	f280 81b5 	bge.w	801b94e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b5e4:	f1bc 0f00 	cmp.w	ip, #0
 801b5e8:	f2c0 81b1 	blt.w	801b94e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b5ec:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b5f0:	45c4      	cmp	ip, r8
 801b5f2:	f280 81ac 	bge.w	801b94e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b5f6:	b209      	sxth	r1, r1
 801b5f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b5fa:	fb0c 3301 	mla	r3, ip, r1, r3
 801b5fe:	eb04 0803 	add.w	r8, r4, r3
 801b602:	5ce3      	ldrb	r3, [r4, r3]
 801b604:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b608:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b60c:	2a00      	cmp	r2, #0
 801b60e:	f000 8193 	beq.w	801b938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801b612:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b616:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b61a:	940b      	str	r4, [sp, #44]	; 0x2c
 801b61c:	0e24      	lsrs	r4, r4, #24
 801b61e:	9412      	str	r4, [sp, #72]	; 0x48
 801b620:	b178      	cbz	r0, 801b642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b622:	eb08 0c01 	add.w	ip, r8, r1
 801b626:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b62a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b62e:	9108      	str	r1, [sp, #32]
 801b630:	0e09      	lsrs	r1, r1, #24
 801b632:	9110      	str	r1, [sp, #64]	; 0x40
 801b634:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b638:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b63c:	910c      	str	r1, [sp, #48]	; 0x30
 801b63e:	0e09      	lsrs	r1, r1, #24
 801b640:	9113      	str	r1, [sp, #76]	; 0x4c
 801b642:	b292      	uxth	r2, r2
 801b644:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b646:	b280      	uxth	r0, r0
 801b648:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b64a:	fb02 f900 	mul.w	r9, r2, r0
 801b64e:	0112      	lsls	r2, r2, #4
 801b650:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b654:	eba2 0809 	sub.w	r8, r2, r9
 801b658:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801b65c:	b280      	uxth	r0, r0
 801b65e:	fa1f f888 	uxth.w	r8, r8
 801b662:	1a12      	subs	r2, r2, r0
 801b664:	fb08 f101 	mul.w	r1, r8, r1
 801b668:	b292      	uxth	r2, r2
 801b66a:	fb02 110e 	mla	r1, r2, lr, r1
 801b66e:	fb00 1104 	mla	r1, r0, r4, r1
 801b672:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b674:	fb09 1104 	mla	r1, r9, r4, r1
 801b678:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b67c:	2900      	cmp	r1, #0
 801b67e:	f000 80de 	beq.w	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b682:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b686:	d01b      	beq.n	801b6c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801b688:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b68c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b690:	fb0e fa0a 	mul.w	sl, lr, sl
 801b694:	fb0e fe03 	mul.w	lr, lr, r3
 801b698:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b69c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b6a0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b6a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b6a8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b6ac:	4453      	add	r3, sl
 801b6ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b6b2:	0a1b      	lsrs	r3, r3, #8
 801b6b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b6b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b6bc:	ea43 030c 	orr.w	r3, r3, ip
 801b6c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6c2:	2cff      	cmp	r4, #255	; 0xff
 801b6c4:	d021      	beq.n	801b70a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b6c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b6c8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b6cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6ce:	fb04 fb0b 	mul.w	fp, r4, fp
 801b6d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b6d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b6d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b6de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b6e2:	fb04 fa0a 	mul.w	sl, r4, sl
 801b6e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b6ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b6ee:	44de      	add	lr, fp
 801b6f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b6f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b6f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b6fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b700:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b704:	ea4e 040a 	orr.w	r4, lr, sl
 801b708:	940b      	str	r4, [sp, #44]	; 0x2c
 801b70a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b70c:	2cff      	cmp	r4, #255	; 0xff
 801b70e:	d021      	beq.n	801b754 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b710:	9c08      	ldr	r4, [sp, #32]
 801b712:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b716:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b718:	fb04 fb0b 	mul.w	fp, r4, fp
 801b71c:	9c08      	ldr	r4, [sp, #32]
 801b71e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b722:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b724:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b728:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b72c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b730:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b734:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b738:	44de      	add	lr, fp
 801b73a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b73e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b742:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b74a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b74e:	ea4e 040a 	orr.w	r4, lr, sl
 801b752:	9408      	str	r4, [sp, #32]
 801b754:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b756:	2cff      	cmp	r4, #255	; 0xff
 801b758:	d021      	beq.n	801b79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b75a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b75c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b760:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b762:	fb04 fb0b 	mul.w	fp, r4, fp
 801b766:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b768:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b76c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b76e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b772:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b776:	fb04 fa0a 	mul.w	sl, r4, sl
 801b77a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b77e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b782:	44de      	add	lr, fp
 801b784:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b788:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b78c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b790:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b794:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b798:	ea4e 040a 	orr.w	r4, lr, sl
 801b79c:	940c      	str	r4, [sp, #48]	; 0x30
 801b79e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b7a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b7a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b7a8:	43c9      	mvns	r1, r1
 801b7aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b7ae:	9c08      	ldr	r4, [sp, #32]
 801b7b0:	b2c9      	uxtb	r1, r1
 801b7b2:	fb08 fc0c 	mul.w	ip, r8, ip
 801b7b6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b7ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b7be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b7c0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b7c4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b7c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b7ca:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b7ce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b7d2:	fb08 f80e 	mul.w	r8, r8, lr
 801b7d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b7da:	fb02 8303 	mla	r3, r2, r3, r8
 801b7de:	9a08      	ldr	r2, [sp, #32]
 801b7e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b7e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801b7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b7ea:	fb00 330a 	mla	r3, r0, sl, r3
 801b7ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801b7f2:	fb09 3900 	mla	r9, r9, r0, r3
 801b7f6:	783b      	ldrb	r3, [r7, #0]
 801b7f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b7fc:	fb03 f201 	mul.w	r2, r3, r1
 801b800:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b804:	1c53      	adds	r3, r2, #1
 801b806:	ea4c 0c09 	orr.w	ip, ip, r9
 801b80a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b80e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801b812:	703b      	strb	r3, [r7, #0]
 801b814:	787b      	ldrb	r3, [r7, #1]
 801b816:	434b      	muls	r3, r1
 801b818:	1c5a      	adds	r2, r3, #1
 801b81a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b81e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801b822:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b826:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b82a:	707b      	strb	r3, [r7, #1]
 801b82c:	78bb      	ldrb	r3, [r7, #2]
 801b82e:	4359      	muls	r1, r3
 801b830:	1c4b      	adds	r3, r1, #1
 801b832:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b836:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801b83a:	f887 c002 	strb.w	ip, [r7, #2]
 801b83e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b840:	3703      	adds	r7, #3
 801b842:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b844:	441a      	add	r2, r3
 801b846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b848:	441d      	add	r5, r3
 801b84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b84c:	9225      	str	r2, [sp, #148]	; 0x94
 801b84e:	3b01      	subs	r3, #1
 801b850:	9317      	str	r3, [sp, #92]	; 0x5c
 801b852:	e6b0      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b854:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b856:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801b858:	441c      	add	r4, r3
 801b85a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b85c:	441d      	add	r5, r3
 801b85e:	9b07      	ldr	r3, [sp, #28]
 801b860:	9425      	str	r4, [sp, #148]	; 0x94
 801b862:	3b01      	subs	r3, #1
 801b864:	9307      	str	r3, [sp, #28]
 801b866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b868:	3303      	adds	r3, #3
 801b86a:	930a      	str	r3, [sp, #40]	; 0x28
 801b86c:	e683      	b.n	801b576 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b86e:	d026      	beq.n	801b8be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801b870:	9b07      	ldr	r3, [sp, #28]
 801b872:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b874:	3b01      	subs	r3, #1
 801b876:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801b878:	fb00 4003 	mla	r0, r0, r3, r4
 801b87c:	1400      	asrs	r0, r0, #16
 801b87e:	f53f ae97 	bmi.w	801b5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b882:	3901      	subs	r1, #1
 801b884:	4288      	cmp	r0, r1
 801b886:	f6bf ae93 	bge.w	801b5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b88a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b88c:	fb01 5303 	mla	r3, r1, r3, r5
 801b890:	141b      	asrs	r3, r3, #16
 801b892:	f53f ae8d 	bmi.w	801b5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b896:	3a01      	subs	r2, #1
 801b898:	4293      	cmp	r3, r2
 801b89a:	f6bf ae89 	bge.w	801b5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b8a4:	f103 0e03 	add.w	lr, r3, #3
 801b8a8:	f1bb 0f00 	cmp.w	fp, #0
 801b8ac:	dc6d      	bgt.n	801b98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801b8ae:	9b07      	ldr	r3, [sp, #28]
 801b8b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8ba:	4423      	add	r3, r4
 801b8bc:	930a      	str	r3, [sp, #40]	; 0x28
 801b8be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	f340 81a0 	ble.w	801bc06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801b8c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b8cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8d0:	eeb0 6a62 	vmov.f32	s12, s5
 801b8d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8e0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801b8e4:	eeb0 6a43 	vmov.f32	s12, s6
 801b8e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8ec:	ee16 5a10 	vmov	r5, s12
 801b8f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b904:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b908:	ee12 2a90 	vmov	r2, s5
 801b90c:	eef0 2a47 	vmov.f32	s5, s14
 801b910:	fb92 f3f3 	sdiv	r3, r2, r3
 801b914:	ee13 2a10 	vmov	r2, s6
 801b918:	9327      	str	r3, [sp, #156]	; 0x9c
 801b91a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b91c:	eeb0 3a67 	vmov.f32	s6, s15
 801b920:	fb92 f3f3 	sdiv	r3, r2, r3
 801b924:	9328      	str	r3, [sp, #160]	; 0xa0
 801b926:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b928:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b92a:	3b01      	subs	r3, #1
 801b92c:	9316      	str	r3, [sp, #88]	; 0x58
 801b92e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b930:	bf08      	it	eq
 801b932:	4613      	moveq	r3, r2
 801b934:	9307      	str	r3, [sp, #28]
 801b936:	e610      	b.n	801b55a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b938:	2800      	cmp	r0, #0
 801b93a:	f43f ae82 	beq.w	801b642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b93e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b942:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b946:	9108      	str	r1, [sp, #32]
 801b948:	0e09      	lsrs	r1, r1, #24
 801b94a:	9110      	str	r1, [sp, #64]	; 0x40
 801b94c:	e679      	b.n	801b642 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b94e:	f113 0801 	adds.w	r8, r3, #1
 801b952:	f53f af74 	bmi.w	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b956:	4541      	cmp	r1, r8
 801b958:	f6ff af71 	blt.w	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b95c:	f11c 0801 	adds.w	r8, ip, #1
 801b960:	f53f af6d 	bmi.w	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b964:	45c6      	cmp	lr, r8
 801b966:	f6ff af6a 	blt.w	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b96a:	b209      	sxth	r1, r1
 801b96c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801b970:	fa0f f38e 	sxth.w	r3, lr
 801b974:	9100      	str	r1, [sp, #0]
 801b976:	4639      	mov	r1, r7
 801b978:	9301      	str	r3, [sp, #4]
 801b97a:	4633      	mov	r3, r6
 801b97c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801b980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b982:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b984:	f7ff fca3 	bl	801b2ce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801b988:	e759      	b.n	801b83e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b98a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b98c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b990:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801b992:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b996:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b998:	1427      	asrs	r7, r4, #16
 801b99a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b99c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9a0:	142b      	asrs	r3, r5, #16
 801b9a2:	fb01 7303 	mla	r3, r1, r3, r7
 801b9a6:	18e7      	adds	r7, r4, r3
 801b9a8:	5ce3      	ldrb	r3, [r4, r3]
 801b9aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b9ae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b9b2:	2a00      	cmp	r2, #0
 801b9b4:	f000 811d 	beq.w	801bbf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801b9b8:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b9bc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b9c0:	940d      	str	r4, [sp, #52]	; 0x34
 801b9c2:	0e24      	lsrs	r4, r4, #24
 801b9c4:	9414      	str	r4, [sp, #80]	; 0x50
 801b9c6:	b170      	cbz	r0, 801b9e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801b9c8:	eb07 0801 	add.w	r8, r7, r1
 801b9cc:	5c79      	ldrb	r1, [r7, r1]
 801b9ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b9d2:	9109      	str	r1, [sp, #36]	; 0x24
 801b9d4:	0e09      	lsrs	r1, r1, #24
 801b9d6:	9111      	str	r1, [sp, #68]	; 0x44
 801b9d8:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b9dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b9e0:	910e      	str	r1, [sp, #56]	; 0x38
 801b9e2:	0e09      	lsrs	r1, r1, #24
 801b9e4:	9115      	str	r1, [sp, #84]	; 0x54
 801b9e6:	b292      	uxth	r2, r2
 801b9e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b9ea:	b280      	uxth	r0, r0
 801b9ec:	fb02 f900 	mul.w	r9, r2, r0
 801b9f0:	0112      	lsls	r2, r2, #4
 801b9f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b9f6:	eba2 0809 	sub.w	r8, r2, r9
 801b9fa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801b9fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba00:	b280      	uxth	r0, r0
 801ba02:	fa1f f888 	uxth.w	r8, r8
 801ba06:	1a09      	subs	r1, r1, r0
 801ba08:	fb08 f202 	mul.w	r2, r8, r2
 801ba0c:	b289      	uxth	r1, r1
 801ba0e:	fb01 220c 	mla	r2, r1, ip, r2
 801ba12:	fb00 2204 	mla	r2, r0, r4, r2
 801ba16:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ba18:	fb09 2204 	mla	r2, r9, r4, r2
 801ba1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ba20:	2a00      	cmp	r2, #0
 801ba22:	f000 80db 	beq.w	801bbdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801ba26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ba2a:	d019      	beq.n	801ba60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801ba2c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ba30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ba34:	fb0c fa0a 	mul.w	sl, ip, sl
 801ba38:	fb0c fc03 	mul.w	ip, ip, r3
 801ba3c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ba40:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ba44:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ba48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ba4c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ba50:	4453      	add	r3, sl
 801ba52:	0a3f      	lsrs	r7, r7, #8
 801ba54:	0a1b      	lsrs	r3, r3, #8
 801ba56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ba5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ba5e:	433b      	orrs	r3, r7
 801ba60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ba62:	2cff      	cmp	r4, #255	; 0xff
 801ba64:	d020      	beq.n	801baa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801ba66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ba68:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ba6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ba6e:	4367      	muls	r7, r4
 801ba70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ba72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ba76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ba7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ba7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ba80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ba84:	fb04 fa0a 	mul.w	sl, r4, sl
 801ba88:	44bc      	add	ip, r7
 801ba8a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ba8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ba96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ba9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ba9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801baa2:	ea4c 040a 	orr.w	r4, ip, sl
 801baa6:	940d      	str	r4, [sp, #52]	; 0x34
 801baa8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801baaa:	2cff      	cmp	r4, #255	; 0xff
 801baac:	d020      	beq.n	801baf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801baae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bab0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bab4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bab6:	4367      	muls	r7, r4
 801bab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801baba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801babe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bac2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bac4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bacc:	fb04 fa0a 	mul.w	sl, r4, sl
 801bad0:	44bc      	add	ip, r7
 801bad2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bad6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bada:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bae6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801baea:	ea4c 040a 	orr.w	r4, ip, sl
 801baee:	9409      	str	r4, [sp, #36]	; 0x24
 801baf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801baf2:	2cff      	cmp	r4, #255	; 0xff
 801baf4:	d020      	beq.n	801bb38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801baf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801baf8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bafc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bafe:	4367      	muls	r7, r4
 801bb00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bb02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bb06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bb0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bb0c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bb10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb14:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb18:	44bc      	add	ip, r7
 801bb1a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bb1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bb32:	ea4c 040a 	orr.w	r4, ip, sl
 801bb36:	940e      	str	r4, [sp, #56]	; 0x38
 801bb38:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bb3a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801bb3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bb42:	43d2      	mvns	r2, r2
 801bb44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bb48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bb4a:	b2d2      	uxtb	r2, r2
 801bb4c:	fb08 f707 	mul.w	r7, r8, r7
 801bb50:	fb01 770c 	mla	r7, r1, ip, r7
 801bb54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bb58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bb5a:	fb00 770c 	mla	r7, r0, ip, r7
 801bb5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bb62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bb64:	fb09 770c 	mla	r7, r9, ip, r7
 801bb68:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801bb6c:	fb08 f80c 	mul.w	r8, r8, ip
 801bb70:	0a3f      	lsrs	r7, r7, #8
 801bb72:	fb01 8303 	mla	r3, r1, r3, r8
 801bb76:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bb7c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801bb80:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bb82:	fb00 330a 	mla	r3, r0, sl, r3
 801bb86:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801bb8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bb8e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bb92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb96:	fb03 f102 	mul.w	r1, r3, r2
 801bb9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bb9e:	1c4b      	adds	r3, r1, #1
 801bba0:	ea47 070c 	orr.w	r7, r7, ip
 801bba4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bba8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801bbac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bbb0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801bbb4:	4353      	muls	r3, r2
 801bbb6:	1c59      	adds	r1, r3, #1
 801bbb8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bbbc:	0a3b      	lsrs	r3, r7, #8
 801bbbe:	0c3f      	lsrs	r7, r7, #16
 801bbc0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bbc4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801bbc8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801bbcc:	435a      	muls	r2, r3
 801bbce:	1c53      	adds	r3, r2, #1
 801bbd0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801bbd4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801bbd8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801bbdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bbde:	f10e 0e03 	add.w	lr, lr, #3
 801bbe2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801bbe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bbe8:	441a      	add	r2, r3
 801bbea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbec:	9225      	str	r2, [sp, #148]	; 0x94
 801bbee:	441d      	add	r5, r3
 801bbf0:	e65a      	b.n	801b8a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801bbf2:	2800      	cmp	r0, #0
 801bbf4:	f43f aef7 	beq.w	801b9e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bbf8:	5c79      	ldrb	r1, [r7, r1]
 801bbfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bbfe:	9109      	str	r1, [sp, #36]	; 0x24
 801bc00:	0e09      	lsrs	r1, r1, #24
 801bc02:	9111      	str	r1, [sp, #68]	; 0x44
 801bc04:	e6ef      	b.n	801b9e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bc06:	b01b      	add	sp, #108	; 0x6c
 801bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc10:	b08d      	sub	sp, #52	; 0x34
 801bc12:	468b      	mov	fp, r1
 801bc14:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801bc18:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801bc1c:	fb0c 5703 	mla	r7, ip, r3, r5
 801bc20:	f1bc 0f00 	cmp.w	ip, #0
 801bc24:	910b      	str	r1, [sp, #44]	; 0x2c
 801bc26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bc2a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bc2e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801bc32:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801bc36:	eb02 0607 	add.w	r6, r2, r7
 801bc3a:	f89b 4000 	ldrb.w	r4, [fp]
 801bc3e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801bc42:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801bc46:	f2c0 80c1 	blt.w	801bdcc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801bc4a:	45e6      	cmp	lr, ip
 801bc4c:	f340 80be 	ble.w	801bdcc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801bc50:	2d00      	cmp	r5, #0
 801bc52:	f2c0 80b7 	blt.w	801bdc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801bc56:	42ab      	cmp	r3, r5
 801bc58:	f340 80b4 	ble.w	801bdc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801bc5c:	5dd2      	ldrb	r2, [r2, r7]
 801bc5e:	9205      	str	r2, [sp, #20]
 801bc60:	7872      	ldrb	r2, [r6, #1]
 801bc62:	9206      	str	r2, [sp, #24]
 801bc64:	78b2      	ldrb	r2, [r6, #2]
 801bc66:	9207      	str	r2, [sp, #28]
 801bc68:	1c6a      	adds	r2, r5, #1
 801bc6a:	f100 80b6 	bmi.w	801bdda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bc6e:	4293      	cmp	r3, r2
 801bc70:	f340 80b3 	ble.w	801bdda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bc74:	f1b8 0f00 	cmp.w	r8, #0
 801bc78:	f000 80af 	beq.w	801bdda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bc7c:	78f2      	ldrb	r2, [r6, #3]
 801bc7e:	9201      	str	r2, [sp, #4]
 801bc80:	7932      	ldrb	r2, [r6, #4]
 801bc82:	9202      	str	r2, [sp, #8]
 801bc84:	7972      	ldrb	r2, [r6, #5]
 801bc86:	9203      	str	r2, [sp, #12]
 801bc88:	f11c 0c01 	adds.w	ip, ip, #1
 801bc8c:	f100 80ad 	bmi.w	801bdea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bc90:	45e6      	cmp	lr, ip
 801bc92:	f340 80aa 	ble.w	801bdea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bc96:	f1ba 0f00 	cmp.w	sl, #0
 801bc9a:	f000 80a6 	beq.w	801bdea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bc9e:	2d00      	cmp	r5, #0
 801bca0:	f2c0 809f 	blt.w	801bde2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bca4:	42ab      	cmp	r3, r5
 801bca6:	f340 809c 	ble.w	801bde2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bcaa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801bcae:	f816 9002 	ldrb.w	r9, [r6, r2]
 801bcb2:	2203      	movs	r2, #3
 801bcb4:	fb03 6c02 	mla	ip, r3, r2, r6
 801bcb8:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801bcbc:	f89c e002 	ldrb.w	lr, [ip, #2]
 801bcc0:	9704      	str	r7, [sp, #16]
 801bcc2:	3501      	adds	r5, #1
 801bcc4:	f100 8098 	bmi.w	801bdf8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801bcc8:	42ab      	cmp	r3, r5
 801bcca:	f340 8095 	ble.w	801bdf8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801bcce:	f1b8 0f00 	cmp.w	r8, #0
 801bcd2:	f000 8091 	beq.w	801bdf8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801bcd6:	f04f 0c03 	mov.w	ip, #3
 801bcda:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801bcde:	5cb5      	ldrb	r5, [r6, r2]
 801bce0:	fb03 620c 	mla	r2, r3, ip, r6
 801bce4:	fb03 630c 	mla	r3, r3, ip, r6
 801bce8:	7912      	ldrb	r2, [r2, #4]
 801bcea:	795e      	ldrb	r6, [r3, #5]
 801bcec:	fa1f f388 	uxth.w	r3, r8
 801bcf0:	fa1f fc8a 	uxth.w	ip, sl
 801bcf4:	fb03 f70c 	mul.w	r7, r3, ip
 801bcf8:	011b      	lsls	r3, r3, #4
 801bcfa:	9708      	str	r7, [sp, #32]
 801bcfc:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801bd00:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801bd04:	1bdb      	subs	r3, r3, r7
 801bd06:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801bd0a:	fa1f fc8c 	uxth.w	ip, ip
 801bd0e:	b29b      	uxth	r3, r3
 801bd10:	9709      	str	r7, [sp, #36]	; 0x24
 801bd12:	ebaa 0a0c 	sub.w	sl, sl, ip
 801bd16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801bd18:	930a      	str	r3, [sp, #40]	; 0x28
 801bd1a:	fa1f fa8a 	uxth.w	sl, sl
 801bd1e:	ea6f 0807 	mvn.w	r8, r7
 801bd22:	9f01      	ldr	r7, [sp, #4]
 801bd24:	435f      	muls	r7, r3
 801bd26:	9b05      	ldr	r3, [sp, #20]
 801bd28:	fa5f f888 	uxtb.w	r8, r8
 801bd2c:	fb0a 7703 	mla	r7, sl, r3, r7
 801bd30:	9b08      	ldr	r3, [sp, #32]
 801bd32:	fb14 f408 	smulbb	r4, r4, r8
 801bd36:	fb0c 7709 	mla	r7, ip, r9, r7
 801bd3a:	fb10 f008 	smulbb	r0, r0, r8
 801bd3e:	fb11 f108 	smulbb	r1, r1, r8
 801bd42:	fb03 7705 	mla	r7, r3, r5, r7
 801bd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd48:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801bd4c:	fb07 4703 	mla	r7, r7, r3, r4
 801bd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd52:	b2bf      	uxth	r7, r7
 801bd54:	1c7c      	adds	r4, r7, #1
 801bd56:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801bd5a:	1224      	asrs	r4, r4, #8
 801bd5c:	f88b 4000 	strb.w	r4, [fp]
 801bd60:	9c02      	ldr	r4, [sp, #8]
 801bd62:	435c      	muls	r4, r3
 801bd64:	9b06      	ldr	r3, [sp, #24]
 801bd66:	fb0a 4403 	mla	r4, sl, r3, r4
 801bd6a:	9b04      	ldr	r3, [sp, #16]
 801bd6c:	fb0c 4403 	mla	r4, ip, r3, r4
 801bd70:	9b08      	ldr	r3, [sp, #32]
 801bd72:	fb03 4402 	mla	r4, r3, r2, r4
 801bd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd7a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bd7e:	fb04 0403 	mla	r4, r4, r3, r0
 801bd82:	9b03      	ldr	r3, [sp, #12]
 801bd84:	435a      	muls	r2, r3
 801bd86:	b2a4      	uxth	r4, r4
 801bd88:	4613      	mov	r3, r2
 801bd8a:	9a07      	ldr	r2, [sp, #28]
 801bd8c:	1c60      	adds	r0, r4, #1
 801bd8e:	fb0a 3a02 	mla	sl, sl, r2, r3
 801bd92:	9b08      	ldr	r3, [sp, #32]
 801bd94:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801bd98:	fb0c ac0e 	mla	ip, ip, lr, sl
 801bd9c:	1224      	asrs	r4, r4, #8
 801bd9e:	fb03 c606 	mla	r6, r3, r6, ip
 801bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bda4:	f88b 4001 	strb.w	r4, [fp, #1]
 801bda8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801bdac:	fb06 1103 	mla	r1, r6, r3, r1
 801bdb0:	b289      	uxth	r1, r1
 801bdb2:	1c4e      	adds	r6, r1, #1
 801bdb4:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801bdb8:	1209      	asrs	r1, r1, #8
 801bdba:	f88b 1002 	strb.w	r1, [fp, #2]
 801bdbe:	b00d      	add	sp, #52	; 0x34
 801bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bdc8:	9405      	str	r4, [sp, #20]
 801bdca:	e74d      	b.n	801bc68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801bdcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdd0:	9401      	str	r4, [sp, #4]
 801bdd2:	9405      	str	r4, [sp, #20]
 801bdd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bdd8:	e756      	b.n	801bc88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801bdda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdde:	9401      	str	r4, [sp, #4]
 801bde0:	e752      	b.n	801bc88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801bde2:	468e      	mov	lr, r1
 801bde4:	9004      	str	r0, [sp, #16]
 801bde6:	46a1      	mov	r9, r4
 801bde8:	e76b      	b.n	801bcc2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801bdea:	460e      	mov	r6, r1
 801bdec:	4602      	mov	r2, r0
 801bdee:	4625      	mov	r5, r4
 801bdf0:	468e      	mov	lr, r1
 801bdf2:	9004      	str	r0, [sp, #16]
 801bdf4:	46a1      	mov	r9, r4
 801bdf6:	e779      	b.n	801bcec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801bdf8:	460e      	mov	r6, r1
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	4625      	mov	r5, r4
 801bdfe:	e775      	b.n	801bcec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801be00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be04:	b09f      	sub	sp, #124	; 0x7c
 801be06:	920e      	str	r2, [sp, #56]	; 0x38
 801be08:	9307      	str	r3, [sp, #28]
 801be0a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801be0c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801be10:	901d      	str	r0, [sp, #116]	; 0x74
 801be12:	930c      	str	r3, [sp, #48]	; 0x30
 801be14:	6850      	ldr	r0, [r2, #4]
 801be16:	910b      	str	r1, [sp, #44]	; 0x2c
 801be18:	6812      	ldr	r2, [r2, #0]
 801be1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801be1e:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801be22:	fb00 1303 	mla	r3, r0, r3, r1
 801be26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be2a:	18d3      	adds	r3, r2, r3
 801be2c:	9308      	str	r3, [sp, #32]
 801be2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	930a      	str	r3, [sp, #40]	; 0x28
 801be34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be36:	43db      	mvns	r3, r3
 801be38:	b2db      	uxtb	r3, r3
 801be3a:	9309      	str	r3, [sp, #36]	; 0x24
 801be3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be3e:	2b00      	cmp	r3, #0
 801be40:	dc03      	bgt.n	801be4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801be42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be44:	2b00      	cmp	r3, #0
 801be46:	f340 81f5 	ble.w	801c234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801be4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801be4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801be50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801be54:	1e48      	subs	r0, r1, #1
 801be56:	1e54      	subs	r4, r2, #1
 801be58:	9b07      	ldr	r3, [sp, #28]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	f340 80d5 	ble.w	801c00a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801be60:	ea5f 452a 	movs.w	r5, sl, asr #16
 801be64:	ea4f 4328 	mov.w	r3, r8, asr #16
 801be68:	d406      	bmi.n	801be78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801be6a:	4285      	cmp	r5, r0
 801be6c:	da04      	bge.n	801be78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801be6e:	2b00      	cmp	r3, #0
 801be70:	db02      	blt.n	801be78 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801be72:	42a3      	cmp	r3, r4
 801be74:	f2c0 80ca 	blt.w	801c00c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801be78:	3501      	adds	r5, #1
 801be7a:	f100 80bb 	bmi.w	801bff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801be7e:	42a9      	cmp	r1, r5
 801be80:	f2c0 80b8 	blt.w	801bff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801be84:	3301      	adds	r3, #1
 801be86:	f100 80b5 	bmi.w	801bff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801be8a:	429a      	cmp	r2, r3
 801be8c:	f2c0 80b2 	blt.w	801bff4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801be90:	9b07      	ldr	r3, [sp, #28]
 801be92:	9d08      	ldr	r5, [sp, #32]
 801be94:	930d      	str	r3, [sp, #52]	; 0x34
 801be96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be98:	2b00      	cmp	r3, #0
 801be9a:	f340 80d6 	ble.w	801c04a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801be9e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801bea0:	ea4f 4428 	mov.w	r4, r8, asr #16
 801bea4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bea6:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801beaa:	68c6      	ldr	r6, [r0, #12]
 801beac:	ea5f 402a 	movs.w	r0, sl, asr #16
 801beb0:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801beb4:	689b      	ldr	r3, [r3, #8]
 801beb6:	f100 810f 	bmi.w	801c0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801beba:	1e5f      	subs	r7, r3, #1
 801bebc:	42b8      	cmp	r0, r7
 801bebe:	f280 810b 	bge.w	801c0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801bec2:	2c00      	cmp	r4, #0
 801bec4:	f2c0 8108 	blt.w	801c0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801bec8:	1e77      	subs	r7, r6, #1
 801beca:	42bc      	cmp	r4, r7
 801becc:	f280 8104 	bge.w	801c0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801bed0:	b21b      	sxth	r3, r3
 801bed2:	fb04 0003 	mla	r0, r4, r3, r0
 801bed6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bed8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bedc:	1826      	adds	r6, r4, r0
 801bede:	5c24      	ldrb	r4, [r4, r0]
 801bee0:	78b7      	ldrb	r7, [r6, #2]
 801bee2:	7870      	ldrb	r0, [r6, #1]
 801bee4:	970f      	str	r7, [sp, #60]	; 0x3c
 801bee6:	7977      	ldrb	r7, [r6, #5]
 801bee8:	f896 e003 	ldrb.w	lr, [r6, #3]
 801beec:	f896 c004 	ldrb.w	ip, [r6, #4]
 801bef0:	9710      	str	r7, [sp, #64]	; 0x40
 801bef2:	b1c9      	cbz	r1, 801bf28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bef4:	f04f 0b03 	mov.w	fp, #3
 801bef8:	f06f 0904 	mvn.w	r9, #4
 801befc:	3605      	adds	r6, #5
 801befe:	fb13 930b 	smlabb	r3, r3, fp, r9
 801bf02:	eb06 0b03 	add.w	fp, r6, r3
 801bf06:	5cf3      	ldrb	r3, [r6, r3]
 801bf08:	9311      	str	r3, [sp, #68]	; 0x44
 801bf0a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801bf0e:	9313      	str	r3, [sp, #76]	; 0x4c
 801bf10:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801bf14:	9315      	str	r3, [sp, #84]	; 0x54
 801bf16:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801bf1a:	9312      	str	r3, [sp, #72]	; 0x48
 801bf1c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801bf20:	9314      	str	r3, [sp, #80]	; 0x50
 801bf22:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801bf26:	9316      	str	r3, [sp, #88]	; 0x58
 801bf28:	b292      	uxth	r2, r2
 801bf2a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801bf2c:	b289      	uxth	r1, r1
 801bf2e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801bf32:	fb02 f601 	mul.w	r6, r2, r1
 801bf36:	0112      	lsls	r2, r2, #4
 801bf38:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801bf3c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801bf40:	1b92      	subs	r2, r2, r6
 801bf42:	b289      	uxth	r1, r1
 801bf44:	b292      	uxth	r2, r2
 801bf46:	eba9 0901 	sub.w	r9, r9, r1
 801bf4a:	fb02 fe0e 	mul.w	lr, r2, lr
 801bf4e:	fa1f f989 	uxth.w	r9, r9
 801bf52:	fb02 fc0c 	mul.w	ip, r2, ip
 801bf56:	fb09 e404 	mla	r4, r9, r4, lr
 801bf5a:	f895 e000 	ldrb.w	lr, [r5]
 801bf5e:	fb09 c000 	mla	r0, r9, r0, ip
 801bf62:	fb01 4407 	mla	r4, r1, r7, r4
 801bf66:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801bf68:	fb06 4407 	mla	r4, r6, r7, r4
 801bf6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bf6e:	fb1e fe07 	smulbb	lr, lr, r7
 801bf72:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bf76:	fb04 e403 	mla	r4, r4, r3, lr
 801bf7a:	b2a4      	uxth	r4, r4
 801bf7c:	f104 0e01 	add.w	lr, r4, #1
 801bf80:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801bf84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bf86:	fb01 0004 	mla	r0, r1, r4, r0
 801bf8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf90:	fb06 0004 	mla	r0, r6, r4, r0
 801bf94:	786c      	ldrb	r4, [r5, #1]
 801bf96:	f885 e000 	strb.w	lr, [r5]
 801bf9a:	fb14 f407 	smulbb	r4, r4, r7
 801bf9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bfa2:	fb00 4003 	mla	r0, r0, r3, r4
 801bfa6:	b280      	uxth	r0, r0
 801bfa8:	1c44      	adds	r4, r0, #1
 801bfaa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801bfae:	1200      	asrs	r0, r0, #8
 801bfb0:	7068      	strb	r0, [r5, #1]
 801bfb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bfb4:	4342      	muls	r2, r0
 801bfb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bfb8:	fb09 2200 	mla	r2, r9, r0, r2
 801bfbc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bfbe:	fb01 2100 	mla	r1, r1, r0, r2
 801bfc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bfc4:	fb06 1602 	mla	r6, r6, r2, r1
 801bfc8:	78a9      	ldrb	r1, [r5, #2]
 801bfca:	fb11 f107 	smulbb	r1, r1, r7
 801bfce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801bfd2:	fb06 1303 	mla	r3, r6, r3, r1
 801bfd6:	b29b      	uxth	r3, r3
 801bfd8:	1c5e      	adds	r6, r3, #1
 801bfda:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801bfde:	121b      	asrs	r3, r3, #8
 801bfe0:	70ab      	strb	r3, [r5, #2]
 801bfe2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bfe4:	3503      	adds	r5, #3
 801bfe6:	449a      	add	sl, r3
 801bfe8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bfea:	4498      	add	r8, r3
 801bfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfee:	3b01      	subs	r3, #1
 801bff0:	930d      	str	r3, [sp, #52]	; 0x34
 801bff2:	e750      	b.n	801be96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bff4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bff6:	449a      	add	sl, r3
 801bff8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bffa:	4498      	add	r8, r3
 801bffc:	9b07      	ldr	r3, [sp, #28]
 801bffe:	3b01      	subs	r3, #1
 801c000:	9307      	str	r3, [sp, #28]
 801c002:	9b08      	ldr	r3, [sp, #32]
 801c004:	3303      	adds	r3, #3
 801c006:	9308      	str	r3, [sp, #32]
 801c008:	e726      	b.n	801be58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c00a:	d026      	beq.n	801c05a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c00c:	9b07      	ldr	r3, [sp, #28]
 801c00e:	982b      	ldr	r0, [sp, #172]	; 0xac
 801c010:	3b01      	subs	r3, #1
 801c012:	fb00 a003 	mla	r0, r0, r3, sl
 801c016:	1400      	asrs	r0, r0, #16
 801c018:	f53f af3a 	bmi.w	801be90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c01c:	3901      	subs	r1, #1
 801c01e:	4288      	cmp	r0, r1
 801c020:	f6bf af36 	bge.w	801be90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c024:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801c026:	fb01 8303 	mla	r3, r1, r3, r8
 801c02a:	141b      	asrs	r3, r3, #16
 801c02c:	f53f af30 	bmi.w	801be90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c030:	3a01      	subs	r2, #1
 801c032:	4293      	cmp	r3, r2
 801c034:	f6bf af2c 	bge.w	801be90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c038:	9b08      	ldr	r3, [sp, #32]
 801c03a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c03e:	1cdd      	adds	r5, r3, #3
 801c040:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801c044:	f1bc 0f00 	cmp.w	ip, #0
 801c048:	dc5f      	bgt.n	801c10a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c04a:	9b07      	ldr	r3, [sp, #28]
 801c04c:	9a08      	ldr	r2, [sp, #32]
 801c04e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c056:	441a      	add	r2, r3
 801c058:	9208      	str	r2, [sp, #32]
 801c05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f340 80e9 	ble.w	801c234 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c066:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c068:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c06c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c070:	eef0 6a62 	vmov.f32	s13, s5
 801c074:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c078:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c07c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c080:	ee16 aa90 	vmov	sl, s13
 801c084:	eef0 6a43 	vmov.f32	s13, s6
 801c088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c08c:	ee16 8a90 	vmov	r8, s13
 801c090:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c094:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c098:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c09c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0a8:	ee12 2a90 	vmov	r2, s5
 801c0ac:	eef0 2a47 	vmov.f32	s5, s14
 801c0b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0b4:	ee13 2a10 	vmov	r2, s6
 801c0b8:	932b      	str	r3, [sp, #172]	; 0xac
 801c0ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801c0c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0c4:	932c      	str	r3, [sp, #176]	; 0xb0
 801c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c0ca:	3b01      	subs	r3, #1
 801c0cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801c0ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c0d0:	bf08      	it	eq
 801c0d2:	4613      	moveq	r3, r2
 801c0d4:	9307      	str	r3, [sp, #28]
 801c0d6:	e6b1      	b.n	801be3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c0d8:	1c47      	adds	r7, r0, #1
 801c0da:	d482      	bmi.n	801bfe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c0dc:	42bb      	cmp	r3, r7
 801c0de:	db80      	blt.n	801bfe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c0e0:	1c67      	adds	r7, r4, #1
 801c0e2:	f53f af7e 	bmi.w	801bfe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c0e6:	42be      	cmp	r6, r7
 801c0e8:	f6ff af7b 	blt.w	801bfe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c0ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c0ee:	b236      	sxth	r6, r6
 801c0f0:	9001      	str	r0, [sp, #4]
 801c0f2:	b21b      	sxth	r3, r3
 801c0f4:	9600      	str	r6, [sp, #0]
 801c0f6:	981d      	ldr	r0, [sp, #116]	; 0x74
 801c0f8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801c0fc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c100:	4629      	mov	r1, r5
 801c102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c104:	f7ff fd82 	bl	801bc0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801c108:	e76b      	b.n	801bfe2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c10a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801c10c:	ea4f 402a 	mov.w	r0, sl, asr #16
 801c110:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801c114:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801c118:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801c11c:	ea4f 4128 	mov.w	r1, r8, asr #16
 801c120:	fb07 0101 	mla	r1, r7, r1, r0
 801c124:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c126:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c12a:	1844      	adds	r4, r0, r1
 801c12c:	5c40      	ldrb	r0, [r0, r1]
 801c12e:	78a6      	ldrb	r6, [r4, #2]
 801c130:	7861      	ldrb	r1, [r4, #1]
 801c132:	960f      	str	r6, [sp, #60]	; 0x3c
 801c134:	78e6      	ldrb	r6, [r4, #3]
 801c136:	910d      	str	r1, [sp, #52]	; 0x34
 801c138:	9610      	str	r6, [sp, #64]	; 0x40
 801c13a:	f894 9004 	ldrb.w	r9, [r4, #4]
 801c13e:	f894 b005 	ldrb.w	fp, [r4, #5]
 801c142:	b192      	cbz	r2, 801c16a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c144:	f06f 0604 	mvn.w	r6, #4
 801c148:	2103      	movs	r1, #3
 801c14a:	3405      	adds	r4, #5
 801c14c:	fb17 6701 	smlabb	r7, r7, r1, r6
 801c150:	19e6      	adds	r6, r4, r7
 801c152:	5de4      	ldrb	r4, [r4, r7]
 801c154:	9417      	str	r4, [sp, #92]	; 0x5c
 801c156:	7874      	ldrb	r4, [r6, #1]
 801c158:	9419      	str	r4, [sp, #100]	; 0x64
 801c15a:	78b4      	ldrb	r4, [r6, #2]
 801c15c:	941b      	str	r4, [sp, #108]	; 0x6c
 801c15e:	78f4      	ldrb	r4, [r6, #3]
 801c160:	9418      	str	r4, [sp, #96]	; 0x60
 801c162:	7934      	ldrb	r4, [r6, #4]
 801c164:	941a      	str	r4, [sp, #104]	; 0x68
 801c166:	7974      	ldrb	r4, [r6, #5]
 801c168:	941c      	str	r4, [sp, #112]	; 0x70
 801c16a:	b29b      	uxth	r3, r3
 801c16c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c16e:	b292      	uxth	r2, r2
 801c170:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c172:	3503      	adds	r5, #3
 801c174:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c178:	fb03 f402 	mul.w	r4, r3, r2
 801c17c:	011b      	lsls	r3, r3, #4
 801c17e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801c182:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801c186:	1b1b      	subs	r3, r3, r4
 801c188:	b292      	uxth	r2, r2
 801c18a:	b29b      	uxth	r3, r3
 801c18c:	1ab6      	subs	r6, r6, r2
 801c18e:	435f      	muls	r7, r3
 801c190:	b2b6      	uxth	r6, r6
 801c192:	fb03 f909 	mul.w	r9, r3, r9
 801c196:	fb03 fb0b 	mul.w	fp, r3, fp
 801c19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c19c:	fb06 7000 	mla	r0, r6, r0, r7
 801c1a0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801c1a2:	fb06 bb03 	mla	fp, r6, r3, fp
 801c1a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c1a8:	fb02 0007 	mla	r0, r2, r7, r0
 801c1ac:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801c1ae:	fb02 bb03 	mla	fp, r2, r3, fp
 801c1b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1b4:	fb04 0007 	mla	r0, r4, r7, r0
 801c1b8:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801c1bc:	fb17 f701 	smulbb	r7, r7, r1
 801c1c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c1c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c1c6:	fb00 700e 	mla	r0, r0, lr, r7
 801c1ca:	fb06 9101 	mla	r1, r6, r1, r9
 801c1ce:	b280      	uxth	r0, r0
 801c1d0:	1c47      	adds	r7, r0, #1
 801c1d2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801c1d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c1d8:	1200      	asrs	r0, r0, #8
 801c1da:	f805 0c06 	strb.w	r0, [r5, #-6]
 801c1de:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c1e0:	fb02 1100 	mla	r1, r2, r0, r1
 801c1e4:	981a      	ldr	r0, [sp, #104]	; 0x68
 801c1e6:	fb04 1100 	mla	r1, r4, r0, r1
 801c1ea:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801c1ee:	fb04 b403 	mla	r4, r4, r3, fp
 801c1f2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801c1f6:	fb10 f007 	smulbb	r0, r0, r7
 801c1fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c1fe:	fb13 f307 	smulbb	r3, r3, r7
 801c202:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c206:	fb01 010e 	mla	r1, r1, lr, r0
 801c20a:	fb04 340e 	mla	r4, r4, lr, r3
 801c20e:	b289      	uxth	r1, r1
 801c210:	b2a4      	uxth	r4, r4
 801c212:	1c48      	adds	r0, r1, #1
 801c214:	1c63      	adds	r3, r4, #1
 801c216:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801c21a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c21e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c220:	1209      	asrs	r1, r1, #8
 801c222:	1224      	asrs	r4, r4, #8
 801c224:	449a      	add	sl, r3
 801c226:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c228:	f805 1c05 	strb.w	r1, [r5, #-5]
 801c22c:	f805 4c04 	strb.w	r4, [r5, #-4]
 801c230:	4498      	add	r8, r3
 801c232:	e707      	b.n	801c044 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801c234:	b01f      	add	sp, #124	; 0x7c
 801c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c23a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801c23a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c23e:	b087      	sub	sp, #28
 801c240:	780d      	ldrb	r5, [r1, #0]
 801c242:	784c      	ldrb	r4, [r1, #1]
 801c244:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801c248:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801c24c:	9004      	str	r0, [sp, #16]
 801c24e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801c252:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801c256:	9005      	str	r0, [sp, #20]
 801c258:	fb06 bc03 	mla	ip, r6, r3, fp
 801c25c:	2e00      	cmp	r6, #0
 801c25e:	7888      	ldrb	r0, [r1, #2]
 801c260:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c264:	eb02 090c 	add.w	r9, r2, ip
 801c268:	f2c0 8084 	blt.w	801c374 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c26c:	42b7      	cmp	r7, r6
 801c26e:	f340 8081 	ble.w	801c374 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c272:	f1bb 0f00 	cmp.w	fp, #0
 801c276:	db79      	blt.n	801c36c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c278:	455b      	cmp	r3, fp
 801c27a:	dd77      	ble.n	801c36c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c27c:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c280:	9201      	str	r2, [sp, #4]
 801c282:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c286:	9202      	str	r2, [sp, #8]
 801c288:	f899 2002 	ldrb.w	r2, [r9, #2]
 801c28c:	9203      	str	r2, [sp, #12]
 801c28e:	f11b 0201 	adds.w	r2, fp, #1
 801c292:	d476      	bmi.n	801c382 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c294:	4293      	cmp	r3, r2
 801c296:	dd74      	ble.n	801c382 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c298:	9a04      	ldr	r2, [sp, #16]
 801c29a:	2a00      	cmp	r2, #0
 801c29c:	d071      	beq.n	801c382 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c29e:	f899 8003 	ldrb.w	r8, [r9, #3]
 801c2a2:	f899 c004 	ldrb.w	ip, [r9, #4]
 801c2a6:	f899 a005 	ldrb.w	sl, [r9, #5]
 801c2aa:	3601      	adds	r6, #1
 801c2ac:	d471      	bmi.n	801c392 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c2ae:	42b7      	cmp	r7, r6
 801c2b0:	dd6f      	ble.n	801c392 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c2b2:	9a05      	ldr	r2, [sp, #20]
 801c2b4:	2a00      	cmp	r2, #0
 801c2b6:	d06c      	beq.n	801c392 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c2b8:	f1bb 0f00 	cmp.w	fp, #0
 801c2bc:	db65      	blt.n	801c38a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c2be:	455b      	cmp	r3, fp
 801c2c0:	dd63      	ble.n	801c38a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c2c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c2c6:	f819 e002 	ldrb.w	lr, [r9, r2]
 801c2ca:	2203      	movs	r2, #3
 801c2cc:	fb03 9602 	mla	r6, r3, r2, r9
 801c2d0:	7877      	ldrb	r7, [r6, #1]
 801c2d2:	78b6      	ldrb	r6, [r6, #2]
 801c2d4:	f11b 0b01 	adds.w	fp, fp, #1
 801c2d8:	d40c      	bmi.n	801c2f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c2da:	455b      	cmp	r3, fp
 801c2dc:	dd0a      	ble.n	801c2f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c2de:	9a04      	ldr	r2, [sp, #16]
 801c2e0:	b142      	cbz	r2, 801c2f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c2e2:	2203      	movs	r2, #3
 801c2e4:	fb13 2002 	smlabb	r0, r3, r2, r2
 801c2e8:	f819 5000 	ldrb.w	r5, [r9, r0]
 801c2ec:	fb03 9002 	mla	r0, r3, r2, r9
 801c2f0:	7904      	ldrb	r4, [r0, #4]
 801c2f2:	7940      	ldrb	r0, [r0, #5]
 801c2f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c2f8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c2fc:	fb03 fb02 	mul.w	fp, r3, r2
 801c300:	011b      	lsls	r3, r3, #4
 801c302:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801c306:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801c30a:	eba3 030b 	sub.w	r3, r3, fp
 801c30e:	b292      	uxth	r2, r2
 801c310:	b29b      	uxth	r3, r3
 801c312:	eba9 0902 	sub.w	r9, r9, r2
 801c316:	9304      	str	r3, [sp, #16]
 801c318:	fa1f f989 	uxth.w	r9, r9
 801c31c:	fb03 f808 	mul.w	r8, r3, r8
 801c320:	9b01      	ldr	r3, [sp, #4]
 801c322:	fb09 8803 	mla	r8, r9, r3, r8
 801c326:	9b04      	ldr	r3, [sp, #16]
 801c328:	fb03 fc0c 	mul.w	ip, r3, ip
 801c32c:	9b02      	ldr	r3, [sp, #8]
 801c32e:	fb02 880e 	mla	r8, r2, lr, r8
 801c332:	fb09 cc03 	mla	ip, r9, r3, ip
 801c336:	9b04      	ldr	r3, [sp, #16]
 801c338:	fb0b 8805 	mla	r8, fp, r5, r8
 801c33c:	fb02 c707 	mla	r7, r2, r7, ip
 801c340:	fb03 f30a 	mul.w	r3, r3, sl
 801c344:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c348:	fb0b 7404 	mla	r4, fp, r4, r7
 801c34c:	f881 8000 	strb.w	r8, [r1]
 801c350:	1224      	asrs	r4, r4, #8
 801c352:	704c      	strb	r4, [r1, #1]
 801c354:	9c03      	ldr	r4, [sp, #12]
 801c356:	fb09 3904 	mla	r9, r9, r4, r3
 801c35a:	fb02 9206 	mla	r2, r2, r6, r9
 801c35e:	fb0b 2000 	mla	r0, fp, r0, r2
 801c362:	1200      	asrs	r0, r0, #8
 801c364:	7088      	strb	r0, [r1, #2]
 801c366:	b007      	add	sp, #28
 801c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c36c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c370:	9501      	str	r5, [sp, #4]
 801c372:	e78c      	b.n	801c28e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801c374:	4682      	mov	sl, r0
 801c376:	46a4      	mov	ip, r4
 801c378:	46a8      	mov	r8, r5
 801c37a:	9501      	str	r5, [sp, #4]
 801c37c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c380:	e793      	b.n	801c2aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c382:	4682      	mov	sl, r0
 801c384:	46a4      	mov	ip, r4
 801c386:	46a8      	mov	r8, r5
 801c388:	e78f      	b.n	801c2aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c38a:	4606      	mov	r6, r0
 801c38c:	4627      	mov	r7, r4
 801c38e:	46ae      	mov	lr, r5
 801c390:	e7a0      	b.n	801c2d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801c392:	4606      	mov	r6, r0
 801c394:	4627      	mov	r7, r4
 801c396:	46ae      	mov	lr, r5
 801c398:	e7ac      	b.n	801c2f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801c39a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39e:	b09b      	sub	sp, #108	; 0x6c
 801c3a0:	920b      	str	r2, [sp, #44]	; 0x2c
 801c3a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c3a4:	9019      	str	r0, [sp, #100]	; 0x64
 801c3a6:	9109      	str	r1, [sp, #36]	; 0x24
 801c3a8:	6850      	ldr	r0, [r2, #4]
 801c3aa:	9306      	str	r3, [sp, #24]
 801c3ac:	6812      	ldr	r2, [r2, #0]
 801c3ae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801c3b2:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801c3b6:	fb00 1303 	mla	r3, r0, r3, r1
 801c3ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3be:	18d3      	adds	r3, r2, r3
 801c3c0:	9307      	str	r3, [sp, #28]
 801c3c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	9308      	str	r3, [sp, #32]
 801c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	dc03      	bgt.n	801c3d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	f340 81ab 	ble.w	801c72c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c3d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c3d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c3e0:	1e48      	subs	r0, r1, #1
 801c3e2:	1e55      	subs	r5, r2, #1
 801c3e4:	9b06      	ldr	r3, [sp, #24]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	f340 80b1 	ble.w	801c54e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c3ec:	ea5f 462b 	movs.w	r6, fp, asr #16
 801c3f0:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c3f4:	d406      	bmi.n	801c404 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c3f6:	4286      	cmp	r6, r0
 801c3f8:	da04      	bge.n	801c404 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	db02      	blt.n	801c404 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c3fe:	42ab      	cmp	r3, r5
 801c400:	f2c0 80a6 	blt.w	801c550 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c404:	3601      	adds	r6, #1
 801c406:	f100 8097 	bmi.w	801c538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c40a:	42b1      	cmp	r1, r6
 801c40c:	f2c0 8094 	blt.w	801c538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c410:	3301      	adds	r3, #1
 801c412:	f100 8091 	bmi.w	801c538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c416:	429a      	cmp	r2, r3
 801c418:	f2c0 808e 	blt.w	801c538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c41c:	9b06      	ldr	r3, [sp, #24]
 801c41e:	9e07      	ldr	r6, [sp, #28]
 801c420:	930a      	str	r3, [sp, #40]	; 0x28
 801c422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c424:	2b00      	cmp	r3, #0
 801c426:	f340 80b0 	ble.w	801c58a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c42a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c42c:	1425      	asrs	r5, r4, #16
 801c42e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c430:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801c434:	68c7      	ldr	r7, [r0, #12]
 801c436:	ea5f 402b 	movs.w	r0, fp, asr #16
 801c43a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c43e:	689b      	ldr	r3, [r3, #8]
 801c440:	f100 80ea 	bmi.w	801c618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c444:	f103 3cff 	add.w	ip, r3, #4294967295
 801c448:	4560      	cmp	r0, ip
 801c44a:	f280 80e5 	bge.w	801c618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c44e:	2d00      	cmp	r5, #0
 801c450:	f2c0 80e2 	blt.w	801c618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c454:	f107 3cff 	add.w	ip, r7, #4294967295
 801c458:	4565      	cmp	r5, ip
 801c45a:	f280 80dd 	bge.w	801c618 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c45e:	b21b      	sxth	r3, r3
 801c460:	fb05 0003 	mla	r0, r5, r3, r0
 801c464:	9d08      	ldr	r5, [sp, #32]
 801c466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c46a:	182f      	adds	r7, r5, r0
 801c46c:	5c2d      	ldrb	r5, [r5, r0]
 801c46e:	7878      	ldrb	r0, [r7, #1]
 801c470:	f897 e002 	ldrb.w	lr, [r7, #2]
 801c474:	900c      	str	r0, [sp, #48]	; 0x30
 801c476:	f897 9003 	ldrb.w	r9, [r7, #3]
 801c47a:	f897 8004 	ldrb.w	r8, [r7, #4]
 801c47e:	f897 a005 	ldrb.w	sl, [r7, #5]
 801c482:	b1c9      	cbz	r1, 801c4b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c484:	f04f 0c03 	mov.w	ip, #3
 801c488:	f06f 0004 	mvn.w	r0, #4
 801c48c:	3705      	adds	r7, #5
 801c48e:	fb13 030c 	smlabb	r3, r3, ip, r0
 801c492:	eb07 0c03 	add.w	ip, r7, r3
 801c496:	5cfb      	ldrb	r3, [r7, r3]
 801c498:	930d      	str	r3, [sp, #52]	; 0x34
 801c49a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c49e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c4a0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c4a4:	9311      	str	r3, [sp, #68]	; 0x44
 801c4a6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801c4aa:	930e      	str	r3, [sp, #56]	; 0x38
 801c4ac:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801c4b0:	9310      	str	r3, [sp, #64]	; 0x40
 801c4b2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801c4b6:	9312      	str	r3, [sp, #72]	; 0x48
 801c4b8:	b292      	uxth	r2, r2
 801c4ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c4bc:	b289      	uxth	r1, r1
 801c4be:	fb02 f301 	mul.w	r3, r2, r1
 801c4c2:	0112      	lsls	r2, r2, #4
 801c4c4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801c4c8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801c4cc:	1ad2      	subs	r2, r2, r3
 801c4ce:	b289      	uxth	r1, r1
 801c4d0:	b292      	uxth	r2, r2
 801c4d2:	1a7f      	subs	r7, r7, r1
 801c4d4:	fb02 f909 	mul.w	r9, r2, r9
 801c4d8:	b2bf      	uxth	r7, r7
 801c4da:	fb02 f808 	mul.w	r8, r2, r8
 801c4de:	fb02 fa0a 	mul.w	sl, r2, sl
 801c4e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4e4:	fb07 9905 	mla	r9, r7, r5, r9
 801c4e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c4ea:	fb07 8800 	mla	r8, r7, r0, r8
 801c4ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c4f0:	fb07 aa0e 	mla	sl, r7, lr, sl
 801c4f4:	fb01 9905 	mla	r9, r1, r5, r9
 801c4f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c4fa:	fb01 8800 	mla	r8, r1, r0, r8
 801c4fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c500:	fb01 a102 	mla	r1, r1, r2, sl
 801c504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c506:	fb03 9905 	mla	r9, r3, r5, r9
 801c50a:	fb03 8800 	mla	r8, r3, r0, r8
 801c50e:	fb03 1302 	mla	r3, r3, r2, r1
 801c512:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c516:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c51a:	121b      	asrs	r3, r3, #8
 801c51c:	f886 9000 	strb.w	r9, [r6]
 801c520:	f886 8001 	strb.w	r8, [r6, #1]
 801c524:	70b3      	strb	r3, [r6, #2]
 801c526:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c528:	3603      	adds	r6, #3
 801c52a:	449b      	add	fp, r3
 801c52c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c52e:	441c      	add	r4, r3
 801c530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c532:	3b01      	subs	r3, #1
 801c534:	930a      	str	r3, [sp, #40]	; 0x28
 801c536:	e774      	b.n	801c422 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c538:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c53a:	449b      	add	fp, r3
 801c53c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c53e:	441c      	add	r4, r3
 801c540:	9b06      	ldr	r3, [sp, #24]
 801c542:	3b01      	subs	r3, #1
 801c544:	9306      	str	r3, [sp, #24]
 801c546:	9b07      	ldr	r3, [sp, #28]
 801c548:	3303      	adds	r3, #3
 801c54a:	9307      	str	r3, [sp, #28]
 801c54c:	e74a      	b.n	801c3e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c54e:	d024      	beq.n	801c59a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c550:	9b06      	ldr	r3, [sp, #24]
 801c552:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c554:	3b01      	subs	r3, #1
 801c556:	fb00 b003 	mla	r0, r0, r3, fp
 801c55a:	1400      	asrs	r0, r0, #16
 801c55c:	f53f af5e 	bmi.w	801c41c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c560:	3901      	subs	r1, #1
 801c562:	4288      	cmp	r0, r1
 801c564:	f6bf af5a 	bge.w	801c41c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c568:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c56a:	fb01 4303 	mla	r3, r1, r3, r4
 801c56e:	141b      	asrs	r3, r3, #16
 801c570:	f53f af54 	bmi.w	801c41c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c574:	3a01      	subs	r2, #1
 801c576:	4293      	cmp	r3, r2
 801c578:	f6bf af50 	bge.w	801c41c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c57c:	9b07      	ldr	r3, [sp, #28]
 801c57e:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c582:	1cde      	adds	r6, r3, #3
 801c584:	f1be 0f00 	cmp.w	lr, #0
 801c588:	dc5f      	bgt.n	801c64a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c58a:	9b06      	ldr	r3, [sp, #24]
 801c58c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c590:	9b07      	ldr	r3, [sp, #28]
 801c592:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c596:	4423      	add	r3, r4
 801c598:	9307      	str	r3, [sp, #28]
 801c59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	f340 80c5 	ble.w	801c72c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c5a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c5a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c5a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5b0:	eef0 6a62 	vmov.f32	s13, s5
 801c5b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c5b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c5c0:	ee16 ba90 	vmov	fp, s13
 801c5c4:	eef0 6a43 	vmov.f32	s13, s6
 801c5c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c5cc:	ee16 4a90 	vmov	r4, s13
 801c5d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c5d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c5e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c5e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c5e8:	ee12 2a90 	vmov	r2, s5
 801c5ec:	eef0 2a47 	vmov.f32	s5, s14
 801c5f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5f4:	ee13 2a10 	vmov	r2, s6
 801c5f8:	9327      	str	r3, [sp, #156]	; 0x9c
 801c5fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c5fc:	eeb0 3a67 	vmov.f32	s6, s15
 801c600:	fb92 f3f3 	sdiv	r3, r2, r3
 801c604:	9328      	str	r3, [sp, #160]	; 0xa0
 801c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c60a:	3b01      	subs	r3, #1
 801c60c:	9309      	str	r3, [sp, #36]	; 0x24
 801c60e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c610:	bf08      	it	eq
 801c612:	4613      	moveq	r3, r2
 801c614:	9306      	str	r3, [sp, #24]
 801c616:	e6d7      	b.n	801c3c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c618:	f110 0c01 	adds.w	ip, r0, #1
 801c61c:	d483      	bmi.n	801c526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c61e:	4563      	cmp	r3, ip
 801c620:	db81      	blt.n	801c526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c622:	f115 0c01 	adds.w	ip, r5, #1
 801c626:	f53f af7e 	bmi.w	801c526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c62a:	4567      	cmp	r7, ip
 801c62c:	f6ff af7b 	blt.w	801c526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c630:	b23f      	sxth	r7, r7
 801c632:	b21b      	sxth	r3, r3
 801c634:	9700      	str	r7, [sp, #0]
 801c636:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801c63a:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801c63e:	9a08      	ldr	r2, [sp, #32]
 801c640:	4631      	mov	r1, r6
 801c642:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c644:	f7ff fdf9 	bl	801c23a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801c648:	e76d      	b.n	801c526 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c64a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801c64c:	ea4f 402b 	mov.w	r0, fp, asr #16
 801c650:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c654:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c658:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801c65c:	1421      	asrs	r1, r4, #16
 801c65e:	930a      	str	r3, [sp, #40]	; 0x28
 801c660:	fb0c 0101 	mla	r1, ip, r1, r0
 801c664:	9808      	ldr	r0, [sp, #32]
 801c666:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c66a:	1845      	adds	r5, r0, r1
 801c66c:	5c40      	ldrb	r0, [r0, r1]
 801c66e:	796f      	ldrb	r7, [r5, #5]
 801c670:	7869      	ldrb	r1, [r5, #1]
 801c672:	f895 8002 	ldrb.w	r8, [r5, #2]
 801c676:	f895 a003 	ldrb.w	sl, [r5, #3]
 801c67a:	f895 9004 	ldrb.w	r9, [r5, #4]
 801c67e:	970c      	str	r7, [sp, #48]	; 0x30
 801c680:	b1a2      	cbz	r2, 801c6ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801c682:	2703      	movs	r7, #3
 801c684:	f06f 0304 	mvn.w	r3, #4
 801c688:	3505      	adds	r5, #5
 801c68a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801c68e:	eb05 070c 	add.w	r7, r5, ip
 801c692:	f815 500c 	ldrb.w	r5, [r5, ip]
 801c696:	9513      	str	r5, [sp, #76]	; 0x4c
 801c698:	787d      	ldrb	r5, [r7, #1]
 801c69a:	9515      	str	r5, [sp, #84]	; 0x54
 801c69c:	78bd      	ldrb	r5, [r7, #2]
 801c69e:	9517      	str	r5, [sp, #92]	; 0x5c
 801c6a0:	78fd      	ldrb	r5, [r7, #3]
 801c6a2:	9514      	str	r5, [sp, #80]	; 0x50
 801c6a4:	793d      	ldrb	r5, [r7, #4]
 801c6a6:	9516      	str	r5, [sp, #88]	; 0x58
 801c6a8:	797d      	ldrb	r5, [r7, #5]
 801c6aa:	9518      	str	r5, [sp, #96]	; 0x60
 801c6ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801c6b0:	b292      	uxth	r2, r2
 801c6b2:	3603      	adds	r6, #3
 801c6b4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c6b8:	fb03 f502 	mul.w	r5, r3, r2
 801c6bc:	011b      	lsls	r3, r3, #4
 801c6be:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801c6c2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801c6c6:	1b5b      	subs	r3, r3, r5
 801c6c8:	b292      	uxth	r2, r2
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	1abf      	subs	r7, r7, r2
 801c6ce:	fb03 f909 	mul.w	r9, r3, r9
 801c6d2:	b2bf      	uxth	r7, r7
 801c6d4:	fb03 fa0a 	mul.w	sl, r3, sl
 801c6d8:	fb07 9901 	mla	r9, r7, r1, r9
 801c6dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c6de:	fb07 aa00 	mla	sl, r7, r0, sl
 801c6e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c6e4:	fb02 9901 	mla	r9, r2, r1, r9
 801c6e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c6ea:	fb02 aa00 	mla	sl, r2, r0, sl
 801c6ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c6f0:	fb05 9901 	mla	r9, r5, r1, r9
 801c6f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c6f6:	fb05 aa00 	mla	sl, r5, r0, sl
 801c6fa:	434b      	muls	r3, r1
 801c6fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801c6fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c702:	fb07 3308 	mla	r3, r7, r8, r3
 801c706:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c70a:	f806 ac06 	strb.w	sl, [r6, #-6]
 801c70e:	fb02 3201 	mla	r2, r2, r1, r3
 801c712:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c714:	f806 9c05 	strb.w	r9, [r6, #-5]
 801c718:	fb05 2503 	mla	r5, r5, r3, r2
 801c71c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c71e:	122d      	asrs	r5, r5, #8
 801c720:	449b      	add	fp, r3
 801c722:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c724:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c728:	441c      	add	r4, r3
 801c72a:	e72b      	b.n	801c584 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c72c:	b01b      	add	sp, #108	; 0x6c
 801c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c732 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801c732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c736:	b087      	sub	sp, #28
 801c738:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801c73c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c740:	fb05 7003 	mla	r0, r5, r3, r7
 801c744:	2d00      	cmp	r5, #0
 801c746:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c74a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801c74e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c752:	f2c0 811f 	blt.w	801c994 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c756:	45a8      	cmp	r8, r5
 801c758:	f340 811c 	ble.w	801c994 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c75c:	2f00      	cmp	r7, #0
 801c75e:	f2c0 8117 	blt.w	801c990 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c762:	42bb      	cmp	r3, r7
 801c764:	f340 8114 	ble.w	801c990 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c768:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c76c:	1c7a      	adds	r2, r7, #1
 801c76e:	f100 8114 	bmi.w	801c99a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c772:	4293      	cmp	r3, r2
 801c774:	f340 8111 	ble.w	801c99a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c778:	2c00      	cmp	r4, #0
 801c77a:	f000 8110 	beq.w	801c99e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801c77e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c782:	3501      	adds	r5, #1
 801c784:	f100 810f 	bmi.w	801c9a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c788:	45a8      	cmp	r8, r5
 801c78a:	f340 810c 	ble.w	801c9a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c78e:	f1be 0f00 	cmp.w	lr, #0
 801c792:	f000 810b 	beq.w	801c9ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801c796:	2f00      	cmp	r7, #0
 801c798:	f2c0 8103 	blt.w	801c9a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c79c:	42bb      	cmp	r3, r7
 801c79e:	f340 8100 	ble.w	801c9a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c7a2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c7a6:	3701      	adds	r7, #1
 801c7a8:	f100 8103 	bmi.w	801c9b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c7ac:	42bb      	cmp	r3, r7
 801c7ae:	f340 8100 	ble.w	801c9b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c7b2:	2c00      	cmp	r4, #0
 801c7b4:	f000 80ff 	beq.w	801c9b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801c7b8:	3301      	adds	r3, #1
 801c7ba:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c7be:	fa1f fc84 	uxth.w	ip, r4
 801c7c2:	fa1f fe8e 	uxth.w	lr, lr
 801c7c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c7ca:	fb0c f90e 	mul.w	r9, ip, lr
 801c7ce:	0e13      	lsrs	r3, r2, #24
 801c7d0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c7d4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801c7d8:	9302      	str	r3, [sp, #8]
 801c7da:	ebac 0709 	sub.w	r7, ip, r9
 801c7de:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c7e2:	fa1f f48e 	uxth.w	r4, lr
 801c7e6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801c7ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c7ee:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801c7f2:	fb0a fe0e 	mul.w	lr, sl, lr
 801c7f6:	1b1b      	subs	r3, r3, r4
 801c7f8:	fb0a f606 	mul.w	r6, sl, r6
 801c7fc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c800:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c804:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c808:	b29b      	uxth	r3, r3
 801c80a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c80e:	b2bf      	uxth	r7, r7
 801c810:	9301      	str	r3, [sp, #4]
 801c812:	44e6      	add	lr, ip
 801c814:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c818:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c81c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c820:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801c824:	9303      	str	r3, [sp, #12]
 801c826:	0a33      	lsrs	r3, r6, #8
 801c828:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801c82c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c830:	9304      	str	r3, [sp, #16]
 801c832:	fb0b f606 	mul.w	r6, fp, r6
 801c836:	fb0b f000 	mul.w	r0, fp, r0
 801c83a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801c83e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c842:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c846:	44b6      	add	lr, r6
 801c848:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801c84c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c850:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c854:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c858:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c85c:	fb08 f606 	mul.w	r6, r8, r6
 801c860:	0a03      	lsrs	r3, r0, #8
 801c862:	fb08 f505 	mul.w	r5, r8, r5
 801c866:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c86a:	0a30      	lsrs	r0, r6, #8
 801c86c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c870:	9305      	str	r3, [sp, #20]
 801c872:	0e13      	lsrs	r3, r2, #24
 801c874:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c878:	fb0e fe07 	mul.w	lr, lr, r7
 801c87c:	4430      	add	r0, r6
 801c87e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c882:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c886:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801c88a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c88e:	0a00      	lsrs	r0, r0, #8
 801c890:	435e      	muls	r6, r3
 801c892:	0a2d      	lsrs	r5, r5, #8
 801c894:	435a      	muls	r2, r3
 801c896:	9b03      	ldr	r3, [sp, #12]
 801c898:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801c89c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c8a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c8a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c8a8:	44b4      	add	ip, r6
 801c8aa:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801c8ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c8b2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c8b6:	9e01      	ldr	r6, [sp, #4]
 801c8b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c8bc:	fb03 ee06 	mla	lr, r3, r6, lr
 801c8c0:	9b04      	ldr	r3, [sp, #16]
 801c8c2:	0a12      	lsrs	r2, r2, #8
 801c8c4:	fb0c ee09 	mla	lr, ip, r9, lr
 801c8c8:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801c8cc:	9b05      	ldr	r3, [sp, #20]
 801c8ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c8d2:	fb00 ee04 	mla	lr, r0, r4, lr
 801c8d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8da:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801c8de:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801c8e2:	9b01      	ldr	r3, [sp, #4]
 801c8e4:	fb07 fe0e 	mul.w	lr, r7, lr
 801c8e8:	fb07 f70b 	mul.w	r7, r7, fp
 801c8ec:	fb03 ee06 	mla	lr, r3, r6, lr
 801c8f0:	fb03 730a 	mla	r3, r3, sl, r7
 801c8f4:	fb09 e202 	mla	r2, r9, r2, lr
 801c8f8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c8fc:	fb04 2e0e 	mla	lr, r4, lr, r2
 801c900:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801c904:	fb04 3408 	mla	r4, r4, r8, r3
 801c908:	9b02      	ldr	r3, [sp, #8]
 801c90a:	b292      	uxth	r2, r2
 801c90c:	fb09 4903 	mla	r9, r9, r3, r4
 801c910:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c914:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c918:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c91c:	fb09 f902 	mul.w	r9, r9, r2
 801c920:	ea40 0e0e 	orr.w	lr, r0, lr
 801c924:	f109 0301 	add.w	r3, r9, #1
 801c928:	fa5f f08e 	uxtb.w	r0, lr
 801c92c:	fb10 f002 	smulbb	r0, r0, r2
 801c930:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c934:	780b      	ldrb	r3, [r1, #0]
 801c936:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801c93a:	fa5f f989 	uxtb.w	r9, r9
 801c93e:	fb03 0309 	mla	r3, r3, r9, r0
 801c942:	b29b      	uxth	r3, r3
 801c944:	1c58      	adds	r0, r3, #1
 801c946:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c94a:	7848      	ldrb	r0, [r1, #1]
 801c94c:	fb10 f009 	smulbb	r0, r0, r9
 801c950:	121b      	asrs	r3, r3, #8
 801c952:	700b      	strb	r3, [r1, #0]
 801c954:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801c958:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c95c:	fb03 0302 	mla	r3, r3, r2, r0
 801c960:	b29b      	uxth	r3, r3
 801c962:	1c58      	adds	r0, r3, #1
 801c964:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c968:	121b      	asrs	r3, r3, #8
 801c96a:	704b      	strb	r3, [r1, #1]
 801c96c:	788b      	ldrb	r3, [r1, #2]
 801c96e:	fb13 f909 	smulbb	r9, r3, r9
 801c972:	fb0e 9e02 	mla	lr, lr, r2, r9
 801c976:	fa1f fe8e 	uxth.w	lr, lr
 801c97a:	f10e 0301 	add.w	r3, lr, #1
 801c97e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801c982:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c986:	f881 e002 	strb.w	lr, [r1, #2]
 801c98a:	b007      	add	sp, #28
 801c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c990:	2600      	movs	r6, #0
 801c992:	e6eb      	b.n	801c76c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801c994:	2000      	movs	r0, #0
 801c996:	4606      	mov	r6, r0
 801c998:	e6f3      	b.n	801c782 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801c99a:	2000      	movs	r0, #0
 801c99c:	e6f1      	b.n	801c782 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801c99e:	4620      	mov	r0, r4
 801c9a0:	e6ef      	b.n	801c782 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801c9a2:	2500      	movs	r5, #0
 801c9a4:	e6ff      	b.n	801c7a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	4615      	mov	r5, r2
 801c9aa:	e708      	b.n	801c7be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801c9ac:	4672      	mov	r2, lr
 801c9ae:	4675      	mov	r5, lr
 801c9b0:	e705      	b.n	801c7be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	e703      	b.n	801c7be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801c9b6:	4622      	mov	r2, r4
 801c9b8:	e701      	b.n	801c7be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801c9ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9be:	b09d      	sub	sp, #116	; 0x74
 801c9c0:	9219      	str	r2, [sp, #100]	; 0x64
 801c9c2:	9307      	str	r3, [sp, #28]
 801c9c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c9c6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801c9ca:	901b      	str	r0, [sp, #108]	; 0x6c
 801c9cc:	931a      	str	r3, [sp, #104]	; 0x68
 801c9ce:	6850      	ldr	r0, [r2, #4]
 801c9d0:	9117      	str	r1, [sp, #92]	; 0x5c
 801c9d2:	6812      	ldr	r2, [r2, #0]
 801c9d4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c9d8:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801c9dc:	fb00 1303 	mla	r3, r0, r3, r1
 801c9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9e4:	18d3      	adds	r3, r2, r3
 801c9e6:	930a      	str	r3, [sp, #40]	; 0x28
 801c9e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	9310      	str	r3, [sp, #64]	; 0x40
 801c9ee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801c9f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	dc03      	bgt.n	801ca02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c9fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f340 8368 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ca02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ca04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ca08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ca0c:	1e48      	subs	r0, r1, #1
 801ca0e:	1e57      	subs	r7, r2, #1
 801ca10:	9b07      	ldr	r3, [sp, #28]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	f340 8187 	ble.w	801cd26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ca18:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ca1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ca20:	d406      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca22:	4584      	cmp	ip, r0
 801ca24:	da04      	bge.n	801ca30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	db02      	blt.n	801ca30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca2a:	42bb      	cmp	r3, r7
 801ca2c:	f2c0 817c 	blt.w	801cd28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801ca30:	f11c 0c01 	adds.w	ip, ip, #1
 801ca34:	f100 816c 	bmi.w	801cd10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca38:	4561      	cmp	r1, ip
 801ca3a:	f2c0 8169 	blt.w	801cd10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca3e:	3301      	adds	r3, #1
 801ca40:	f100 8166 	bmi.w	801cd10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca44:	429a      	cmp	r2, r3
 801ca46:	f2c0 8163 	blt.w	801cd10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ca4a:	9b07      	ldr	r3, [sp, #28]
 801ca4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ca4e:	9318      	str	r3, [sp, #96]	; 0x60
 801ca50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	f340 8186 	ble.w	801cd64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801ca58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ca5a:	142a      	asrs	r2, r5, #16
 801ca5c:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ca60:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ca64:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ca68:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ca6c:	f100 81cb 	bmi.w	801ce06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ca70:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ca74:	4542      	cmp	r2, r8
 801ca76:	f280 81c6 	bge.w	801ce06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ca7a:	2800      	cmp	r0, #0
 801ca7c:	f2c0 81c3 	blt.w	801ce06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ca80:	f103 38ff 	add.w	r8, r3, #4294967295
 801ca84:	4540      	cmp	r0, r8
 801ca86:	f280 81be 	bge.w	801ce06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ca8a:	fa0f f38e 	sxth.w	r3, lr
 801ca8e:	fb00 2203 	mla	r2, r0, r3, r2
 801ca92:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ca94:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801ca98:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801ca9c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801caa0:	2900      	cmp	r1, #0
 801caa2:	f000 81a6 	beq.w	801cdf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801caa6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801caaa:	900c      	str	r0, [sp, #48]	; 0x30
 801caac:	0e00      	lsrs	r0, r0, #24
 801caae:	9013      	str	r0, [sp, #76]	; 0x4c
 801cab0:	f1bc 0f00 	cmp.w	ip, #0
 801cab4:	d00f      	beq.n	801cad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cab6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801caba:	3b01      	subs	r3, #1
 801cabc:	009b      	lsls	r3, r3, #2
 801cabe:	3304      	adds	r3, #4
 801cac0:	eb08 0003 	add.w	r0, r8, r3
 801cac4:	f858 3003 	ldr.w	r3, [r8, r3]
 801cac8:	9308      	str	r3, [sp, #32]
 801caca:	0e1b      	lsrs	r3, r3, #24
 801cacc:	9311      	str	r3, [sp, #68]	; 0x44
 801cace:	6843      	ldr	r3, [r0, #4]
 801cad0:	930d      	str	r3, [sp, #52]	; 0x34
 801cad2:	0e1b      	lsrs	r3, r3, #24
 801cad4:	9314      	str	r3, [sp, #80]	; 0x50
 801cad6:	b289      	uxth	r1, r1
 801cad8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cada:	fa1f fc8c 	uxth.w	ip, ip
 801cade:	0108      	lsls	r0, r1, #4
 801cae0:	fb01 f90c 	mul.w	r9, r1, ip
 801cae4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801cae8:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801caec:	eba0 0809 	sub.w	r8, r0, r9
 801caf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801caf2:	fa1f f18c 	uxth.w	r1, ip
 801caf6:	fa1f f888 	uxth.w	r8, r8
 801cafa:	1a5b      	subs	r3, r3, r1
 801cafc:	fb08 f000 	mul.w	r0, r8, r0
 801cb00:	b29b      	uxth	r3, r3
 801cb02:	fb03 000e 	mla	r0, r3, lr, r0
 801cb06:	fb01 0004 	mla	r0, r1, r4, r0
 801cb0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb0c:	fb09 0004 	mla	r0, r9, r4, r0
 801cb10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cb14:	2800      	cmp	r0, #0
 801cb16:	f000 80f2 	beq.w	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cb1a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cb1e:	d01b      	beq.n	801cb58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cb20:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801cb24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cb28:	fb0e fa0a 	mul.w	sl, lr, sl
 801cb2c:	fb0e fe02 	mul.w	lr, lr, r2
 801cb30:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801cb34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cb38:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801cb3c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cb40:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cb44:	4452      	add	r2, sl
 801cb46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb4a:	0a12      	lsrs	r2, r2, #8
 801cb4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cb50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801cb54:	ea42 020c 	orr.w	r2, r2, ip
 801cb58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb5a:	2cff      	cmp	r4, #255	; 0xff
 801cb5c:	d021      	beq.n	801cba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cb5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cb60:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cb64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb66:	fb04 fb0b 	mul.w	fp, r4, fp
 801cb6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cb6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cb72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cb76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cb7a:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cb86:	44de      	add	lr, fp
 801cb88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cb8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb9c:	ea4e 040a 	orr.w	r4, lr, sl
 801cba0:	940c      	str	r4, [sp, #48]	; 0x30
 801cba2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cba4:	2cff      	cmp	r4, #255	; 0xff
 801cba6:	d021      	beq.n	801cbec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cba8:	9c08      	ldr	r4, [sp, #32]
 801cbaa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cbae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cbb0:	fb04 fb0b 	mul.w	fp, r4, fp
 801cbb4:	9c08      	ldr	r4, [sp, #32]
 801cbb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cbba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cbbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cbc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cbc4:	fb04 fa0a 	mul.w	sl, r4, sl
 801cbc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cbcc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cbd0:	44de      	add	lr, fp
 801cbd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cbd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cbda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cbde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cbe2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cbe6:	ea4e 040a 	orr.w	r4, lr, sl
 801cbea:	9408      	str	r4, [sp, #32]
 801cbec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbee:	2cff      	cmp	r4, #255	; 0xff
 801cbf0:	d021      	beq.n	801cc36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cbf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cbf4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cbf8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbfa:	fb04 fb0b 	mul.w	fp, r4, fp
 801cbfe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cc00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc06:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cc0a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cc0e:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc12:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc16:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cc1a:	44de      	add	lr, fp
 801cc1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc30:	ea4e 040a 	orr.w	r4, lr, sl
 801cc34:	940d      	str	r4, [sp, #52]	; 0x34
 801cc36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc38:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801cc3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cc40:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc44:	9c08      	ldr	r4, [sp, #32]
 801cc46:	fb08 fc0c 	mul.w	ip, r8, ip
 801cc4a:	fb03 cc0e 	mla	ip, r3, lr, ip
 801cc4e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cc52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cc54:	fb01 cc0e 	mla	ip, r1, lr, ip
 801cc58:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cc5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc5e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cc62:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cc66:	fb08 f80e 	mul.w	r8, r8, lr
 801cc6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc6e:	fb03 8202 	mla	r2, r3, r2, r8
 801cc72:	9b08      	ldr	r3, [sp, #32]
 801cc74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc78:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801cc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc7e:	fb01 220a 	mla	r2, r1, sl, r2
 801cc82:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801cc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc88:	fb09 2901 	mla	r9, r9, r1, r2
 801cc8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cc8e:	4343      	muls	r3, r0
 801cc90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cc94:	1c58      	adds	r0, r3, #1
 801cc96:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801cc9a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cc9e:	783b      	ldrb	r3, [r7, #0]
 801cca0:	ea4c 0c09 	orr.w	ip, ip, r9
 801cca4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801cca8:	fa5f f28c 	uxtb.w	r2, ip
 801ccac:	b2c0      	uxtb	r0, r0
 801ccae:	fb12 f201 	smulbb	r2, r2, r1
 801ccb2:	fb03 2300 	mla	r3, r3, r0, r2
 801ccb6:	b29b      	uxth	r3, r3
 801ccb8:	1c5a      	adds	r2, r3, #1
 801ccba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ccbe:	787a      	ldrb	r2, [r7, #1]
 801ccc0:	fb12 f200 	smulbb	r2, r2, r0
 801ccc4:	121b      	asrs	r3, r3, #8
 801ccc6:	703b      	strb	r3, [r7, #0]
 801ccc8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cccc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ccd0:	fb03 2301 	mla	r3, r3, r1, r2
 801ccd4:	b29b      	uxth	r3, r3
 801ccd6:	1c5a      	adds	r2, r3, #1
 801ccd8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ccdc:	121b      	asrs	r3, r3, #8
 801ccde:	707b      	strb	r3, [r7, #1]
 801cce0:	78bb      	ldrb	r3, [r7, #2]
 801cce2:	fb13 f000 	smulbb	r0, r3, r0
 801cce6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ccea:	fa1f fc8c 	uxth.w	ip, ip
 801ccee:	f10c 0301 	add.w	r3, ip, #1
 801ccf2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ccf6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccfa:	f887 c002 	strb.w	ip, [r7, #2]
 801ccfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cd00:	3703      	adds	r7, #3
 801cd02:	441d      	add	r5, r3
 801cd04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cd06:	441e      	add	r6, r3
 801cd08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cd0a:	3b01      	subs	r3, #1
 801cd0c:	9318      	str	r3, [sp, #96]	; 0x60
 801cd0e:	e69f      	b.n	801ca50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cd10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cd12:	441d      	add	r5, r3
 801cd14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cd16:	441e      	add	r6, r3
 801cd18:	9b07      	ldr	r3, [sp, #28]
 801cd1a:	3b01      	subs	r3, #1
 801cd1c:	9307      	str	r3, [sp, #28]
 801cd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd20:	3303      	adds	r3, #3
 801cd22:	930a      	str	r3, [sp, #40]	; 0x28
 801cd24:	e674      	b.n	801ca10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801cd26:	d025      	beq.n	801cd74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801cd28:	9b07      	ldr	r3, [sp, #28]
 801cd2a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801cd2c:	3b01      	subs	r3, #1
 801cd2e:	fb00 5003 	mla	r0, r0, r3, r5
 801cd32:	1400      	asrs	r0, r0, #16
 801cd34:	f53f ae89 	bmi.w	801ca4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd38:	3901      	subs	r1, #1
 801cd3a:	4288      	cmp	r0, r1
 801cd3c:	f6bf ae85 	bge.w	801ca4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd40:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801cd42:	fb01 6303 	mla	r3, r1, r3, r6
 801cd46:	141b      	asrs	r3, r3, #16
 801cd48:	f53f ae7f 	bmi.w	801ca4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd4c:	3a01      	subs	r2, #1
 801cd4e:	4293      	cmp	r3, r2
 801cd50:	f6bf ae7b 	bge.w	801ca4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd56:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801cd5a:	f103 0e03 	add.w	lr, r3, #3
 801cd5e:	f1bb 0f00 	cmp.w	fp, #0
 801cd62:	dc6e      	bgt.n	801ce42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801cd64:	9b07      	ldr	r3, [sp, #28]
 801cd66:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd70:	4423      	add	r3, r4
 801cd72:	930a      	str	r3, [sp, #40]	; 0x28
 801cd74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	f340 81ab 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801cd7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd8a:	eef0 6a62 	vmov.f32	s13, s5
 801cd8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd9a:	ee16 5a90 	vmov	r5, s13
 801cd9e:	eef0 6a43 	vmov.f32	s13, s6
 801cda2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cda6:	ee16 6a90 	vmov	r6, s13
 801cdaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdc2:	ee12 2a90 	vmov	r2, s5
 801cdc6:	eef0 2a47 	vmov.f32	s5, s14
 801cdca:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdce:	ee13 2a10 	vmov	r2, s6
 801cdd2:	9329      	str	r3, [sp, #164]	; 0xa4
 801cdd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdd6:	eeb0 3a67 	vmov.f32	s6, s15
 801cdda:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdde:	932a      	str	r3, [sp, #168]	; 0xa8
 801cde0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cde2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801cde4:	3b01      	subs	r3, #1
 801cde6:	9317      	str	r3, [sp, #92]	; 0x5c
 801cde8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdea:	bf08      	it	eq
 801cdec:	4613      	moveq	r3, r2
 801cdee:	9307      	str	r3, [sp, #28]
 801cdf0:	e600      	b.n	801c9f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cdf2:	f1bc 0f00 	cmp.w	ip, #0
 801cdf6:	f43f ae6e 	beq.w	801cad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cdfa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801cdfe:	9308      	str	r3, [sp, #32]
 801ce00:	0e1b      	lsrs	r3, r3, #24
 801ce02:	9311      	str	r3, [sp, #68]	; 0x44
 801ce04:	e667      	b.n	801cad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ce06:	f112 0801 	adds.w	r8, r2, #1
 801ce0a:	f53f af78 	bmi.w	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ce0e:	45c6      	cmp	lr, r8
 801ce10:	f6ff af75 	blt.w	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ce14:	f110 0801 	adds.w	r8, r0, #1
 801ce18:	f53f af71 	bmi.w	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ce1c:	4543      	cmp	r3, r8
 801ce1e:	f6ff af6e 	blt.w	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ce22:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ce24:	b21b      	sxth	r3, r3
 801ce26:	9201      	str	r2, [sp, #4]
 801ce28:	9300      	str	r3, [sp, #0]
 801ce2a:	fa0f f38e 	sxth.w	r3, lr
 801ce2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ce34:	e9cd c404 	strd	ip, r4, [sp, #16]
 801ce38:	4639      	mov	r1, r7
 801ce3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ce3c:	f7ff fc79 	bl	801c732 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801ce40:	e75d      	b.n	801ccfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ce42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ce44:	142f      	asrs	r7, r5, #16
 801ce46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ce48:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ce4c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ce50:	1433      	asrs	r3, r6, #16
 801ce52:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ce56:	fb02 7303 	mla	r3, r2, r3, r7
 801ce5a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801ce5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ce62:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ce66:	2900      	cmp	r1, #0
 801ce68:	f000 812a 	beq.w	801d0c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ce6c:	687c      	ldr	r4, [r7, #4]
 801ce6e:	940e      	str	r4, [sp, #56]	; 0x38
 801ce70:	0e24      	lsrs	r4, r4, #24
 801ce72:	9415      	str	r4, [sp, #84]	; 0x54
 801ce74:	b178      	cbz	r0, 801ce96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ce76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801ce7a:	3a01      	subs	r2, #1
 801ce7c:	0092      	lsls	r2, r2, #2
 801ce7e:	3204      	adds	r2, #4
 801ce80:	eb07 0802 	add.w	r8, r7, r2
 801ce84:	58ba      	ldr	r2, [r7, r2]
 801ce86:	9209      	str	r2, [sp, #36]	; 0x24
 801ce88:	0e12      	lsrs	r2, r2, #24
 801ce8a:	9212      	str	r2, [sp, #72]	; 0x48
 801ce8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ce90:	920f      	str	r2, [sp, #60]	; 0x3c
 801ce92:	0e12      	lsrs	r2, r2, #24
 801ce94:	9216      	str	r2, [sp, #88]	; 0x58
 801ce96:	b289      	uxth	r1, r1
 801ce98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ce9a:	b280      	uxth	r0, r0
 801ce9c:	fb01 f900 	mul.w	r9, r1, r0
 801cea0:	0109      	lsls	r1, r1, #4
 801cea2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cea6:	eba1 0809 	sub.w	r8, r1, r9
 801ceaa:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ceae:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ceb0:	b280      	uxth	r0, r0
 801ceb2:	fa1f f888 	uxth.w	r8, r8
 801ceb6:	1a12      	subs	r2, r2, r0
 801ceb8:	fb08 f101 	mul.w	r1, r8, r1
 801cebc:	b292      	uxth	r2, r2
 801cebe:	fb02 110c 	mla	r1, r2, ip, r1
 801cec2:	fb00 1104 	mla	r1, r0, r4, r1
 801cec6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cec8:	fb09 1104 	mla	r1, r9, r4, r1
 801cecc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ced0:	2900      	cmp	r1, #0
 801ced2:	f000 80ec 	beq.w	801d0ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801ced6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ceda:	d019      	beq.n	801cf10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801cedc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cee4:	fb0c fa0a 	mul.w	sl, ip, sl
 801cee8:	fb0c fc03 	mul.w	ip, ip, r3
 801ceec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cef0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cef4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cef8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cefc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cf00:	4453      	add	r3, sl
 801cf02:	0a3f      	lsrs	r7, r7, #8
 801cf04:	0a1b      	lsrs	r3, r3, #8
 801cf06:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cf0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cf0e:	433b      	orrs	r3, r7
 801cf10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cf12:	2cff      	cmp	r4, #255	; 0xff
 801cf14:	d020      	beq.n	801cf58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801cf16:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cf18:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cf1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cf1e:	4367      	muls	r7, r4
 801cf20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cf22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cf26:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cf2a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cf2c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cf30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf34:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf38:	44bc      	add	ip, r7
 801cf3a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cf3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf42:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cf46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cf52:	ea4c 040a 	orr.w	r4, ip, sl
 801cf56:	940e      	str	r4, [sp, #56]	; 0x38
 801cf58:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf5a:	2cff      	cmp	r4, #255	; 0xff
 801cf5c:	d020      	beq.n	801cfa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801cf5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cf60:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cf64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf66:	4367      	muls	r7, r4
 801cf68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cf6a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cf6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cf72:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cf74:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cf78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf7c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf80:	44bc      	add	ip, r7
 801cf82:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cf86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cf8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cf9a:	ea4c 040a 	orr.w	r4, ip, sl
 801cf9e:	9409      	str	r4, [sp, #36]	; 0x24
 801cfa0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cfa2:	2cff      	cmp	r4, #255	; 0xff
 801cfa4:	d020      	beq.n	801cfe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801cfa6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cfa8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cfac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cfae:	4367      	muls	r7, r4
 801cfb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cfb2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cfb6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cfba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801cfbc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cfc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cfc4:	fb04 fa0a 	mul.w	sl, r4, sl
 801cfc8:	44bc      	add	ip, r7
 801cfca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cfce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cfd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cfda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cfde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cfe2:	ea4c 040a 	orr.w	r4, ip, sl
 801cfe6:	940f      	str	r4, [sp, #60]	; 0x3c
 801cfe8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cfea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801cfee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cff2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cff6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cff8:	fb08 f707 	mul.w	r7, r8, r7
 801cffc:	fb02 770c 	mla	r7, r2, ip, r7
 801d000:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d004:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d006:	fb00 770c 	mla	r7, r0, ip, r7
 801d00a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d00e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d010:	fb09 770c 	mla	r7, r9, ip, r7
 801d014:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d018:	fb08 f80c 	mul.w	r8, r8, ip
 801d01c:	0a3f      	lsrs	r7, r7, #8
 801d01e:	fb02 8303 	mla	r3, r2, r3, r8
 801d022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d024:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d028:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d02c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d02e:	fb00 330a 	mla	r3, r0, sl, r3
 801d032:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d036:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d038:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d03e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d042:	434b      	muls	r3, r1
 801d044:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d048:	1c59      	adds	r1, r3, #1
 801d04a:	ea47 070c 	orr.w	r7, r7, ip
 801d04e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d052:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d056:	b2fa      	uxtb	r2, r7
 801d058:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d05c:	fb12 f200 	smulbb	r2, r2, r0
 801d060:	b2c9      	uxtb	r1, r1
 801d062:	fb03 2301 	mla	r3, r3, r1, r2
 801d066:	b29b      	uxth	r3, r3
 801d068:	1c5a      	adds	r2, r3, #1
 801d06a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d06e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d072:	fb12 f201 	smulbb	r2, r2, r1
 801d076:	121b      	asrs	r3, r3, #8
 801d078:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d07c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d080:	0c3f      	lsrs	r7, r7, #16
 801d082:	fb03 2300 	mla	r3, r3, r0, r2
 801d086:	b29b      	uxth	r3, r3
 801d088:	1c5a      	adds	r2, r3, #1
 801d08a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d08e:	121b      	asrs	r3, r3, #8
 801d090:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d094:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d098:	fb13 f101 	smulbb	r1, r3, r1
 801d09c:	fb07 1700 	mla	r7, r7, r0, r1
 801d0a0:	b2bf      	uxth	r7, r7
 801d0a2:	1c79      	adds	r1, r7, #1
 801d0a4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d0a8:	123f      	asrs	r7, r7, #8
 801d0aa:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d0ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d0b0:	f10e 0e03 	add.w	lr, lr, #3
 801d0b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d0b8:	441d      	add	r5, r3
 801d0ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d0bc:	441e      	add	r6, r3
 801d0be:	e64e      	b.n	801cd5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d0c0:	2800      	cmp	r0, #0
 801d0c2:	f43f aee8 	beq.w	801ce96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d0c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d0ca:	9209      	str	r2, [sp, #36]	; 0x24
 801d0cc:	0e12      	lsrs	r2, r2, #24
 801d0ce:	9212      	str	r2, [sp, #72]	; 0x48
 801d0d0:	e6e1      	b.n	801ce96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d0d2:	b01d      	add	sp, #116	; 0x74
 801d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0dc:	b087      	sub	sp, #28
 801d0de:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801d0e2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801d0e6:	fb05 7003 	mla	r0, r5, r3, r7
 801d0ea:	2d00      	cmp	r5, #0
 801d0ec:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801d0f0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801d0f4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d0f8:	f2c0 810a 	blt.w	801d310 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d0fc:	45a8      	cmp	r8, r5
 801d0fe:	f340 8107 	ble.w	801d310 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d102:	2f00      	cmp	r7, #0
 801d104:	f2c0 8102 	blt.w	801d30c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d108:	42bb      	cmp	r3, r7
 801d10a:	f340 80ff 	ble.w	801d30c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d10e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d112:	1c7a      	adds	r2, r7, #1
 801d114:	f100 80ff 	bmi.w	801d316 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d118:	4293      	cmp	r3, r2
 801d11a:	f340 80fc 	ble.w	801d316 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d11e:	2c00      	cmp	r4, #0
 801d120:	f000 80fb 	beq.w	801d31a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801d124:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d128:	3501      	adds	r5, #1
 801d12a:	f100 80fa 	bmi.w	801d322 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d12e:	45a8      	cmp	r8, r5
 801d130:	f340 80f7 	ble.w	801d322 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d134:	f1be 0f00 	cmp.w	lr, #0
 801d138:	f000 80f6 	beq.w	801d328 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801d13c:	2f00      	cmp	r7, #0
 801d13e:	f2c0 80ee 	blt.w	801d31e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d142:	42bb      	cmp	r3, r7
 801d144:	f340 80eb 	ble.w	801d31e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d148:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d14c:	3701      	adds	r7, #1
 801d14e:	f100 80ee 	bmi.w	801d32e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d152:	42bb      	cmp	r3, r7
 801d154:	f340 80eb 	ble.w	801d32e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d158:	2c00      	cmp	r4, #0
 801d15a:	f000 80ea 	beq.w	801d332 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801d15e:	3301      	adds	r3, #1
 801d160:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d164:	fa1f fc84 	uxth.w	ip, r4
 801d168:	fa1f fe8e 	uxth.w	lr, lr
 801d16c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d170:	fb0c f90e 	mul.w	r9, ip, lr
 801d174:	0e13      	lsrs	r3, r2, #24
 801d176:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d17a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d17e:	9302      	str	r3, [sp, #8]
 801d180:	ebac 0709 	sub.w	r7, ip, r9
 801d184:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801d188:	fa1f f48e 	uxth.w	r4, lr
 801d18c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801d190:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d194:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d198:	fb0a fe0e 	mul.w	lr, sl, lr
 801d19c:	1b1b      	subs	r3, r3, r4
 801d19e:	fb0a f606 	mul.w	r6, sl, r6
 801d1a2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d1a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d1aa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d1ae:	b29b      	uxth	r3, r3
 801d1b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d1b4:	b2bf      	uxth	r7, r7
 801d1b6:	9301      	str	r3, [sp, #4]
 801d1b8:	44e6      	add	lr, ip
 801d1ba:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d1be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d1c6:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801d1ca:	9303      	str	r3, [sp, #12]
 801d1cc:	0a33      	lsrs	r3, r6, #8
 801d1ce:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801d1d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d1d6:	9304      	str	r3, [sp, #16]
 801d1d8:	fb0b f606 	mul.w	r6, fp, r6
 801d1dc:	fb0b f000 	mul.w	r0, fp, r0
 801d1e0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d1e4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d1e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d1ec:	44b6      	add	lr, r6
 801d1ee:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801d1f2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d1f6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801d1fa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d1fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d202:	fb08 f606 	mul.w	r6, r8, r6
 801d206:	0a03      	lsrs	r3, r0, #8
 801d208:	fb08 f505 	mul.w	r5, r8, r5
 801d20c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d210:	0a30      	lsrs	r0, r6, #8
 801d212:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d216:	9305      	str	r3, [sp, #20]
 801d218:	0e13      	lsrs	r3, r2, #24
 801d21a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d21e:	fb0e fe07 	mul.w	lr, lr, r7
 801d222:	4430      	add	r0, r6
 801d224:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801d228:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d22c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801d230:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d234:	0a00      	lsrs	r0, r0, #8
 801d236:	435e      	muls	r6, r3
 801d238:	0a2d      	lsrs	r5, r5, #8
 801d23a:	435a      	muls	r2, r3
 801d23c:	9b03      	ldr	r3, [sp, #12]
 801d23e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d242:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d246:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d24a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d24e:	44b4      	add	ip, r6
 801d250:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801d254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d258:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d25c:	9e01      	ldr	r6, [sp, #4]
 801d25e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d262:	fb03 ee06 	mla	lr, r3, r6, lr
 801d266:	9b04      	ldr	r3, [sp, #16]
 801d268:	0a12      	lsrs	r2, r2, #8
 801d26a:	fb0c ee09 	mla	lr, ip, r9, lr
 801d26e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801d272:	9b05      	ldr	r3, [sp, #20]
 801d274:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d278:	fb00 ee04 	mla	lr, r0, r4, lr
 801d27c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d280:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801d284:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801d288:	9b01      	ldr	r3, [sp, #4]
 801d28a:	fb07 fe0e 	mul.w	lr, r7, lr
 801d28e:	fb07 f70b 	mul.w	r7, r7, fp
 801d292:	fb03 ee06 	mla	lr, r3, r6, lr
 801d296:	fb03 730a 	mla	r3, r3, sl, r7
 801d29a:	fb09 e202 	mla	r2, r9, r2, lr
 801d29e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801d2a2:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d2a6:	fb04 3408 	mla	r4, r4, r8, r3
 801d2aa:	9b02      	ldr	r3, [sp, #8]
 801d2ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2b0:	fb09 4903 	mla	r9, r9, r3, r4
 801d2b4:	780b      	ldrb	r3, [r1, #0]
 801d2b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d2ba:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801d2be:	ea40 0e0e 	orr.w	lr, r0, lr
 801d2c2:	fa5f f989 	uxtb.w	r9, r9
 801d2c6:	fb03 f209 	mul.w	r2, r3, r9
 801d2ca:	1c53      	adds	r3, r2, #1
 801d2cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d2d0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d2d4:	700b      	strb	r3, [r1, #0]
 801d2d6:	784b      	ldrb	r3, [r1, #1]
 801d2d8:	fb03 f309 	mul.w	r3, r3, r9
 801d2dc:	1c5a      	adds	r2, r3, #1
 801d2de:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d2e2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801d2e6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d2ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d2ee:	704b      	strb	r3, [r1, #1]
 801d2f0:	788b      	ldrb	r3, [r1, #2]
 801d2f2:	fb03 f909 	mul.w	r9, r3, r9
 801d2f6:	f109 0301 	add.w	r3, r9, #1
 801d2fa:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d2fe:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801d302:	f881 e002 	strb.w	lr, [r1, #2]
 801d306:	b007      	add	sp, #28
 801d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30c:	2600      	movs	r6, #0
 801d30e:	e700      	b.n	801d112 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801d310:	2000      	movs	r0, #0
 801d312:	4606      	mov	r6, r0
 801d314:	e708      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d316:	2000      	movs	r0, #0
 801d318:	e706      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d31a:	4620      	mov	r0, r4
 801d31c:	e704      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d31e:	2500      	movs	r5, #0
 801d320:	e714      	b.n	801d14c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801d322:	2200      	movs	r2, #0
 801d324:	4615      	mov	r5, r2
 801d326:	e71d      	b.n	801d164 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d328:	4672      	mov	r2, lr
 801d32a:	4675      	mov	r5, lr
 801d32c:	e71a      	b.n	801d164 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d32e:	2200      	movs	r2, #0
 801d330:	e718      	b.n	801d164 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d332:	4622      	mov	r2, r4
 801d334:	e716      	b.n	801d164 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801d336 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d33a:	b099      	sub	sp, #100	; 0x64
 801d33c:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801d340:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801d342:	9017      	str	r0, [sp, #92]	; 0x5c
 801d344:	9306      	str	r3, [sp, #24]
 801d346:	6850      	ldr	r0, [r2, #4]
 801d348:	6812      	ldr	r2, [r2, #0]
 801d34a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801d34e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801d352:	fb00 1303 	mla	r3, r0, r3, r1
 801d356:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d35a:	18d3      	adds	r3, r2, r3
 801d35c:	9309      	str	r3, [sp, #36]	; 0x24
 801d35e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	930e      	str	r3, [sp, #56]	; 0x38
 801d364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d366:	2b00      	cmp	r3, #0
 801d368:	dc03      	bgt.n	801d372 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d36a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	f340 8360 	ble.w	801da32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d372:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d374:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d378:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d37c:	1e48      	subs	r0, r1, #1
 801d37e:	1e57      	subs	r7, r2, #1
 801d380:	9b06      	ldr	r3, [sp, #24]
 801d382:	2b00      	cmp	r3, #0
 801d384:	f340 817b 	ble.w	801d67e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801d388:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d38c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d390:	d406      	bmi.n	801d3a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d392:	4584      	cmp	ip, r0
 801d394:	da04      	bge.n	801d3a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d396:	2b00      	cmp	r3, #0
 801d398:	db02      	blt.n	801d3a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d39a:	42bb      	cmp	r3, r7
 801d39c:	f2c0 8170 	blt.w	801d680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d3a0:	f11c 0c01 	adds.w	ip, ip, #1
 801d3a4:	f100 8160 	bmi.w	801d668 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d3a8:	4561      	cmp	r1, ip
 801d3aa:	f2c0 815d 	blt.w	801d668 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	f100 815a 	bmi.w	801d668 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	f2c0 8157 	blt.w	801d668 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d3ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d3be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d3c0:	f1b8 0f00 	cmp.w	r8, #0
 801d3c4:	f340 8179 	ble.w	801d6ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d3c8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d3ca:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d3ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d3d0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d3d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d3d8:	142a      	asrs	r2, r5, #16
 801d3da:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d3de:	689b      	ldr	r3, [r3, #8]
 801d3e0:	f100 81be 	bmi.w	801d760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d3e4:	f103 39ff 	add.w	r9, r3, #4294967295
 801d3e8:	454a      	cmp	r2, r9
 801d3ea:	f280 81b9 	bge.w	801d760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d3ee:	f1bc 0f00 	cmp.w	ip, #0
 801d3f2:	f2c0 81b5 	blt.w	801d760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d3f6:	f10e 39ff 	add.w	r9, lr, #4294967295
 801d3fa:	45cc      	cmp	ip, r9
 801d3fc:	f280 81b0 	bge.w	801d760 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d400:	b21b      	sxth	r3, r3
 801d402:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d404:	fb0c 2203 	mla	r2, ip, r3, r2
 801d408:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801d40c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d410:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d414:	2900      	cmp	r1, #0
 801d416:	f000 8197 	beq.w	801d748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d41a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801d41e:	940a      	str	r4, [sp, #40]	; 0x28
 801d420:	0e24      	lsrs	r4, r4, #24
 801d422:	9411      	str	r4, [sp, #68]	; 0x44
 801d424:	b180      	cbz	r0, 801d448 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d42a:	3b01      	subs	r3, #1
 801d42c:	009b      	lsls	r3, r3, #2
 801d42e:	3304      	adds	r3, #4
 801d430:	eb09 0c03 	add.w	ip, r9, r3
 801d434:	f859 3003 	ldr.w	r3, [r9, r3]
 801d438:	9307      	str	r3, [sp, #28]
 801d43a:	0e1b      	lsrs	r3, r3, #24
 801d43c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d43e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d442:	930b      	str	r3, [sp, #44]	; 0x2c
 801d444:	0e1b      	lsrs	r3, r3, #24
 801d446:	9312      	str	r3, [sp, #72]	; 0x48
 801d448:	b289      	uxth	r1, r1
 801d44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d44c:	b280      	uxth	r0, r0
 801d44e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d450:	fb01 fa00 	mul.w	sl, r1, r0
 801d454:	0109      	lsls	r1, r1, #4
 801d456:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d45a:	eba1 090a 	sub.w	r9, r1, sl
 801d45e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801d462:	b280      	uxth	r0, r0
 801d464:	fa1f f989 	uxth.w	r9, r9
 801d468:	1a09      	subs	r1, r1, r0
 801d46a:	fb09 f303 	mul.w	r3, r9, r3
 801d46e:	b289      	uxth	r1, r1
 801d470:	fb01 330e 	mla	r3, r1, lr, r3
 801d474:	fb00 3304 	mla	r3, r0, r4, r3
 801d478:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d47a:	fb0a 3304 	mla	r3, sl, r4, r3
 801d47e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d482:	2b00      	cmp	r3, #0
 801d484:	f000 80e8 	beq.w	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d488:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d48c:	d01b      	beq.n	801d4c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d48e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801d492:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d496:	fb0e fb0b 	mul.w	fp, lr, fp
 801d49a:	fb0e fe02 	mul.w	lr, lr, r2
 801d49e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801d4a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d4a6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d4aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d4ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d4b2:	445a      	add	r2, fp
 801d4b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4b8:	0a12      	lsrs	r2, r2, #8
 801d4ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d4be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d4c2:	ea42 020c 	orr.w	r2, r2, ip
 801d4c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d4c8:	2cff      	cmp	r4, #255	; 0xff
 801d4ca:	d021      	beq.n	801d510 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801d4cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d4ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d4d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d4d4:	fb04 fc0c 	mul.w	ip, r4, ip
 801d4d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d4da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d4de:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801d4e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d4e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d4e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d4ec:	fb04 fb0b 	mul.w	fp, r4, fp
 801d4f0:	44e6      	add	lr, ip
 801d4f2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801d4f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4fa:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d4fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d502:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d506:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801d50a:	ea4e 040b 	orr.w	r4, lr, fp
 801d50e:	940a      	str	r4, [sp, #40]	; 0x28
 801d510:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d512:	2cff      	cmp	r4, #255	; 0xff
 801d514:	d021      	beq.n	801d55a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d516:	9c07      	ldr	r4, [sp, #28]
 801d518:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d51c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d51e:	fb04 fc0c 	mul.w	ip, r4, ip
 801d522:	9c07      	ldr	r4, [sp, #28]
 801d524:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d528:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801d52c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d52e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d536:	fb04 fb0b 	mul.w	fp, r4, fp
 801d53a:	44e6      	add	lr, ip
 801d53c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801d540:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d544:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d548:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d54c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d550:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801d554:	ea4e 040b 	orr.w	r4, lr, fp
 801d558:	9407      	str	r4, [sp, #28]
 801d55a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d55c:	2cff      	cmp	r4, #255	; 0xff
 801d55e:	d021      	beq.n	801d5a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801d560:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d562:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d566:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d568:	fb04 fc0c 	mul.w	ip, r4, ip
 801d56c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d56e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d572:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801d576:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d578:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d57c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d580:	fb04 fb0b 	mul.w	fp, r4, fp
 801d584:	44e6      	add	lr, ip
 801d586:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801d58a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d58e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d592:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d596:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d59a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801d59e:	ea4e 040b 	orr.w	r4, lr, fp
 801d5a2:	940b      	str	r4, [sp, #44]	; 0x2c
 801d5a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d5a6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801d5aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d5ae:	2bff      	cmp	r3, #255	; 0xff
 801d5b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d5b4:	9c07      	ldr	r4, [sp, #28]
 801d5b6:	fb09 fc0c 	mul.w	ip, r9, ip
 801d5ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d5be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d5c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d5c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d5c8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d5cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d5ce:	fb0a cc0e 	mla	ip, sl, lr, ip
 801d5d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d5d6:	fb09 f90e 	mul.w	r9, r9, lr
 801d5da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5de:	fb01 9202 	mla	r2, r1, r2, r9
 801d5e2:	9907      	ldr	r1, [sp, #28]
 801d5e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5e8:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801d5ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d5ee:	fb00 220b 	mla	r2, r0, fp, r2
 801d5f2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801d5f6:	fb0a 2a00 	mla	sl, sl, r0, r2
 801d5fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d5fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d602:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d606:	fa5f f08c 	uxtb.w	r0, ip
 801d60a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801d60e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d612:	f000 80a2 	beq.w	801d75a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801d616:	43db      	mvns	r3, r3
 801d618:	783a      	ldrb	r2, [r7, #0]
 801d61a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d61e:	b2db      	uxtb	r3, r3
 801d620:	fb02 fe03 	mul.w	lr, r2, r3
 801d624:	fb0a fa03 	mul.w	sl, sl, r3
 801d628:	f10e 0201 	add.w	r2, lr, #1
 801d62c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801d630:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d634:	703a      	strb	r2, [r7, #0]
 801d636:	787a      	ldrb	r2, [r7, #1]
 801d638:	fb02 f003 	mul.w	r0, r2, r3
 801d63c:	f10a 0301 	add.w	r3, sl, #1
 801d640:	1c42      	adds	r2, r0, #1
 801d642:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d646:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d64a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d64e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d652:	707a      	strb	r2, [r7, #1]
 801d654:	f887 c002 	strb.w	ip, [r7, #2]
 801d658:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d65a:	3703      	adds	r7, #3
 801d65c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d660:	441d      	add	r5, r3
 801d662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d664:	441e      	add	r6, r3
 801d666:	e6ab      	b.n	801d3c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d668:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d66a:	441d      	add	r5, r3
 801d66c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d66e:	441e      	add	r6, r3
 801d670:	9b06      	ldr	r3, [sp, #24]
 801d672:	3b01      	subs	r3, #1
 801d674:	9306      	str	r3, [sp, #24]
 801d676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d678:	3303      	adds	r3, #3
 801d67a:	9309      	str	r3, [sp, #36]	; 0x24
 801d67c:	e680      	b.n	801d380 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d67e:	d024      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801d680:	9b06      	ldr	r3, [sp, #24]
 801d682:	9825      	ldr	r0, [sp, #148]	; 0x94
 801d684:	3b01      	subs	r3, #1
 801d686:	fb00 5003 	mla	r0, r0, r3, r5
 801d68a:	1400      	asrs	r0, r0, #16
 801d68c:	f53f ae95 	bmi.w	801d3ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d690:	3901      	subs	r1, #1
 801d692:	4288      	cmp	r0, r1
 801d694:	f6bf ae91 	bge.w	801d3ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d698:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d69a:	fb01 6303 	mla	r3, r1, r3, r6
 801d69e:	141b      	asrs	r3, r3, #16
 801d6a0:	f53f ae8b 	bmi.w	801d3ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d6a4:	3a01      	subs	r2, #1
 801d6a6:	4293      	cmp	r3, r2
 801d6a8:	f6bf ae87 	bge.w	801d3ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6ae:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d6b2:	1cdf      	adds	r7, r3, #3
 801d6b4:	f1bb 0f00 	cmp.w	fp, #0
 801d6b8:	dc6e      	bgt.n	801d798 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801d6ba:	9b06      	ldr	r3, [sp, #24]
 801d6bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6c6:	4423      	add	r3, r4
 801d6c8:	9309      	str	r3, [sp, #36]	; 0x24
 801d6ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	f340 81b0 	ble.w	801da32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d6d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6e0:	eef0 6a62 	vmov.f32	s13, s5
 801d6e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d6e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6f0:	ee16 5a90 	vmov	r5, s13
 801d6f4:	eef0 6a43 	vmov.f32	s13, s6
 801d6f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6fc:	ee16 6a90 	vmov	r6, s13
 801d700:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d704:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d708:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d70c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d710:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d714:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d718:	ee12 2a90 	vmov	r2, s5
 801d71c:	eef0 2a47 	vmov.f32	s5, s14
 801d720:	fb92 f3f3 	sdiv	r3, r2, r3
 801d724:	ee13 2a10 	vmov	r2, s6
 801d728:	9325      	str	r3, [sp, #148]	; 0x94
 801d72a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d72c:	eeb0 3a67 	vmov.f32	s6, s15
 801d730:	fb92 f3f3 	sdiv	r3, r2, r3
 801d734:	9326      	str	r3, [sp, #152]	; 0x98
 801d736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d738:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d73a:	3b01      	subs	r3, #1
 801d73c:	9315      	str	r3, [sp, #84]	; 0x54
 801d73e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d740:	bf08      	it	eq
 801d742:	4613      	moveq	r3, r2
 801d744:	9306      	str	r3, [sp, #24]
 801d746:	e60d      	b.n	801d364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d748:	2800      	cmp	r0, #0
 801d74a:	f43f ae7d 	beq.w	801d448 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d74e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d752:	9307      	str	r3, [sp, #28]
 801d754:	0e1b      	lsrs	r3, r3, #24
 801d756:	930f      	str	r3, [sp, #60]	; 0x3c
 801d758:	e676      	b.n	801d448 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d75a:	7038      	strb	r0, [r7, #0]
 801d75c:	7079      	strb	r1, [r7, #1]
 801d75e:	e779      	b.n	801d654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d760:	f112 0901 	adds.w	r9, r2, #1
 801d764:	f53f af78 	bmi.w	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d768:	454b      	cmp	r3, r9
 801d76a:	f6ff af75 	blt.w	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d76e:	f11c 0901 	adds.w	r9, ip, #1
 801d772:	f53f af71 	bmi.w	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d776:	45ce      	cmp	lr, r9
 801d778:	f6ff af6e 	blt.w	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d77c:	b21b      	sxth	r3, r3
 801d77e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801d782:	fa0f f28e 	sxth.w	r2, lr
 801d786:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801d78a:	9200      	str	r2, [sp, #0]
 801d78c:	4639      	mov	r1, r7
 801d78e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d790:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d792:	f7ff fca1 	bl	801d0d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801d796:	e75f      	b.n	801d658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d798:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d79a:	1429      	asrs	r1, r5, #16
 801d79c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d79e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d7a2:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801d7a6:	1433      	asrs	r3, r6, #16
 801d7a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d7ac:	fb0c 1303 	mla	r3, ip, r3, r1
 801d7b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d7b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d7b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d7ba:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d7be:	2a00      	cmp	r2, #0
 801d7c0:	f000 8129 	beq.w	801da16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801d7c4:	684c      	ldr	r4, [r1, #4]
 801d7c6:	940c      	str	r4, [sp, #48]	; 0x30
 801d7c8:	0e24      	lsrs	r4, r4, #24
 801d7ca:	9413      	str	r4, [sp, #76]	; 0x4c
 801d7cc:	b198      	cbz	r0, 801d7f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801d7ce:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801d7d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d7d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801d7da:	f10c 0c04 	add.w	ip, ip, #4
 801d7de:	eb01 080c 	add.w	r8, r1, ip
 801d7e2:	f851 100c 	ldr.w	r1, [r1, ip]
 801d7e6:	9108      	str	r1, [sp, #32]
 801d7e8:	0e09      	lsrs	r1, r1, #24
 801d7ea:	9110      	str	r1, [sp, #64]	; 0x40
 801d7ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d7f0:	910d      	str	r1, [sp, #52]	; 0x34
 801d7f2:	0e09      	lsrs	r1, r1, #24
 801d7f4:	9114      	str	r1, [sp, #80]	; 0x50
 801d7f6:	b292      	uxth	r2, r2
 801d7f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d7fa:	b280      	uxth	r0, r0
 801d7fc:	fb02 f900 	mul.w	r9, r2, r0
 801d800:	0112      	lsls	r2, r2, #4
 801d802:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d806:	eba2 0809 	sub.w	r8, r2, r9
 801d80a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d80e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d810:	b280      	uxth	r0, r0
 801d812:	fa1f f888 	uxth.w	r8, r8
 801d816:	1a09      	subs	r1, r1, r0
 801d818:	fb08 f202 	mul.w	r2, r8, r2
 801d81c:	b289      	uxth	r1, r1
 801d81e:	fb01 220e 	mla	r2, r1, lr, r2
 801d822:	fb00 2204 	mla	r2, r0, r4, r2
 801d826:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d828:	fb09 2204 	mla	r2, r9, r4, r2
 801d82c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d830:	2a00      	cmp	r2, #0
 801d832:	f000 80e8 	beq.w	801da06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801d836:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d83a:	d01b      	beq.n	801d874 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801d83c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d840:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d844:	fb0e fa0a 	mul.w	sl, lr, sl
 801d848:	fb0e fe03 	mul.w	lr, lr, r3
 801d84c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d850:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d854:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d858:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d85c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d860:	4453      	add	r3, sl
 801d862:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d866:	0a1b      	lsrs	r3, r3, #8
 801d868:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d86c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d870:	ea43 030c 	orr.w	r3, r3, ip
 801d874:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d876:	2cff      	cmp	r4, #255	; 0xff
 801d878:	d021      	beq.n	801d8be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801d87a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d87c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d880:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d882:	fb04 fc0c 	mul.w	ip, r4, ip
 801d886:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d888:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d88c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d890:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d892:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d896:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d89a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d89e:	44e6      	add	lr, ip
 801d8a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d8a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d8a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d8ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d8b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d8b8:	ea4e 040a 	orr.w	r4, lr, sl
 801d8bc:	940c      	str	r4, [sp, #48]	; 0x30
 801d8be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d8c0:	2cff      	cmp	r4, #255	; 0xff
 801d8c2:	d021      	beq.n	801d908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801d8c4:	9c08      	ldr	r4, [sp, #32]
 801d8c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d8ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d8cc:	fb04 fc0c 	mul.w	ip, r4, ip
 801d8d0:	9c08      	ldr	r4, [sp, #32]
 801d8d2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d8d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d8d8:	fb04 fa0e 	mul.w	sl, r4, lr
 801d8dc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d8e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d8e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d8e8:	44e6      	add	lr, ip
 801d8ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d8ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d8f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d8f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d8fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d902:	ea4e 040a 	orr.w	r4, lr, sl
 801d906:	9408      	str	r4, [sp, #32]
 801d908:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d90a:	2cff      	cmp	r4, #255	; 0xff
 801d90c:	d021      	beq.n	801d952 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801d90e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d910:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d914:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d916:	fb04 fc0c 	mul.w	ip, r4, ip
 801d91a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d91c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d920:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d924:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d926:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d92a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d92e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d932:	44e6      	add	lr, ip
 801d934:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d938:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d93c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d940:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d944:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d948:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d94c:	ea4e 040a 	orr.w	r4, lr, sl
 801d950:	940d      	str	r4, [sp, #52]	; 0x34
 801d952:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d954:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d95c:	2aff      	cmp	r2, #255	; 0xff
 801d95e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d962:	9c08      	ldr	r4, [sp, #32]
 801d964:	fb08 fc0c 	mul.w	ip, r8, ip
 801d968:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d96c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d970:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d972:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d976:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d97a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d97c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d980:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d984:	fb08 f80e 	mul.w	r8, r8, lr
 801d988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d98c:	fb01 8303 	mla	r3, r1, r3, r8
 801d990:	9908      	ldr	r1, [sp, #32]
 801d992:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d996:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801d99a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d99c:	fb00 330a 	mla	r3, r0, sl, r3
 801d9a0:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801d9a4:	fb09 3e0e 	mla	lr, r9, lr, r3
 801d9a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9ac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d9b0:	ea4c 0c0e 	orr.w	ip, ip, lr
 801d9b4:	fa5f f08c 	uxtb.w	r0, ip
 801d9b8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801d9bc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d9c0:	d032      	beq.n	801da28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801d9c2:	43d2      	mvns	r2, r2
 801d9c4:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801d9c8:	b2d2      	uxtb	r2, r2
 801d9ca:	fb0e fe02 	mul.w	lr, lr, r2
 801d9ce:	f10e 0301 	add.w	r3, lr, #1
 801d9d2:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801d9d6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d9da:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801d9de:	4350      	muls	r0, r2
 801d9e0:	f807 3c03 	strb.w	r3, [r7, #-3]
 801d9e4:	1c43      	adds	r3, r0, #1
 801d9e6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d9ea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d9ee:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801d9f2:	4353      	muls	r3, r2
 801d9f4:	f807 1c02 	strb.w	r1, [r7, #-2]
 801d9f8:	1c5a      	adds	r2, r3, #1
 801d9fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d9fe:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801da02:	f807 cc01 	strb.w	ip, [r7, #-1]
 801da06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801da08:	3703      	adds	r7, #3
 801da0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da0e:	441d      	add	r5, r3
 801da10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801da12:	441e      	add	r6, r3
 801da14:	e64e      	b.n	801d6b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801da16:	2800      	cmp	r0, #0
 801da18:	f43f aeed 	beq.w	801d7f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801da1c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801da20:	9108      	str	r1, [sp, #32]
 801da22:	0e09      	lsrs	r1, r1, #24
 801da24:	9110      	str	r1, [sp, #64]	; 0x40
 801da26:	e6e6      	b.n	801d7f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801da28:	f807 0c03 	strb.w	r0, [r7, #-3]
 801da2c:	f807 1c02 	strb.w	r1, [r7, #-2]
 801da30:	e7e7      	b.n	801da02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801da32:	b019      	add	sp, #100	; 0x64
 801da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da3c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801da40:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801da44:	2c00      	cmp	r4, #0
 801da46:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801da4a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801da4e:	fb00 4e03 	mla	lr, r0, r3, r4
 801da52:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801da56:	f2c0 80b8 	blt.w	801dbca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801da5a:	45a1      	cmp	r9, r4
 801da5c:	f340 80b5 	ble.w	801dbca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801da60:	2800      	cmp	r0, #0
 801da62:	f2c0 80b2 	blt.w	801dbca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801da66:	4580      	cmp	r8, r0
 801da68:	f340 80af 	ble.w	801dbca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801da6c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801da70:	f01e 0f01 	tst.w	lr, #1
 801da74:	5d56      	ldrb	r6, [r2, r5]
 801da76:	bf0c      	ite	eq
 801da78:	f006 060f 	andeq.w	r6, r6, #15
 801da7c:	1136      	asrne	r6, r6, #4
 801da7e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801da82:	b2f6      	uxtb	r6, r6
 801da84:	f114 0a01 	adds.w	sl, r4, #1
 801da88:	f100 80a1 	bmi.w	801dbce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801da8c:	45d1      	cmp	r9, sl
 801da8e:	f340 809e 	ble.w	801dbce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801da92:	2800      	cmp	r0, #0
 801da94:	f2c0 809b 	blt.w	801dbce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801da98:	4580      	cmp	r8, r0
 801da9a:	f340 8098 	ble.w	801dbce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801da9e:	2f00      	cmp	r7, #0
 801daa0:	f000 8097 	beq.w	801dbd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801daa4:	f10e 0b01 	add.w	fp, lr, #1
 801daa8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801daac:	f01b 0f01 	tst.w	fp, #1
 801dab0:	5d55      	ldrb	r5, [r2, r5]
 801dab2:	bf0c      	ite	eq
 801dab4:	f005 050f 	andeq.w	r5, r5, #15
 801dab8:	112d      	asrne	r5, r5, #4
 801daba:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801dabe:	b2ed      	uxtb	r5, r5
 801dac0:	f1bc 0f00 	cmp.w	ip, #0
 801dac4:	f000 8089 	beq.w	801dbda <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801dac8:	2c00      	cmp	r4, #0
 801daca:	f100 0001 	add.w	r0, r0, #1
 801dace:	f2c0 8082 	blt.w	801dbd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dad2:	45a1      	cmp	r9, r4
 801dad4:	dd7f      	ble.n	801dbd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dad6:	2800      	cmp	r0, #0
 801dad8:	db7d      	blt.n	801dbd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dada:	4580      	cmp	r8, r0
 801dadc:	dd7b      	ble.n	801dbd6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dade:	eb03 0b0e 	add.w	fp, r3, lr
 801dae2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801dae6:	f01b 0f01 	tst.w	fp, #1
 801daea:	5d14      	ldrb	r4, [r2, r4]
 801daec:	bf0c      	ite	eq
 801daee:	f004 040f 	andeq.w	r4, r4, #15
 801daf2:	1124      	asrne	r4, r4, #4
 801daf4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801daf8:	b2e4      	uxtb	r4, r4
 801dafa:	f1ba 0f00 	cmp.w	sl, #0
 801dafe:	db6f      	blt.n	801dbe0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801db00:	45d1      	cmp	r9, sl
 801db02:	dd6d      	ble.n	801dbe0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801db04:	2800      	cmp	r0, #0
 801db06:	db6b      	blt.n	801dbe0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801db08:	4580      	cmp	r8, r0
 801db0a:	dd69      	ble.n	801dbe0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801db0c:	2f00      	cmp	r7, #0
 801db0e:	d069      	beq.n	801dbe4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801db10:	3301      	adds	r3, #1
 801db12:	449e      	add	lr, r3
 801db14:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801db18:	f01e 0f01 	tst.w	lr, #1
 801db1c:	5cd0      	ldrb	r0, [r2, r3]
 801db1e:	bf0c      	ite	eq
 801db20:	f000 000f 	andeq.w	r0, r0, #15
 801db24:	1100      	asrne	r0, r0, #4
 801db26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801db2a:	b2c3      	uxtb	r3, r0
 801db2c:	b2ba      	uxth	r2, r7
 801db2e:	fa1f fc8c 	uxth.w	ip, ip
 801db32:	fb02 f00c 	mul.w	r0, r2, ip
 801db36:	0112      	lsls	r2, r2, #4
 801db38:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801db3c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801db40:	1a12      	subs	r2, r2, r0
 801db42:	fa1f fc8c 	uxth.w	ip, ip
 801db46:	b292      	uxth	r2, r2
 801db48:	eba7 070c 	sub.w	r7, r7, ip
 801db4c:	436a      	muls	r2, r5
 801db4e:	b2bf      	uxth	r7, r7
 801db50:	fb06 2207 	mla	r2, r6, r7, r2
 801db54:	fb0c 2404 	mla	r4, ip, r4, r2
 801db58:	fb00 4303 	mla	r3, r0, r3, r4
 801db5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801db60:	b38b      	cbz	r3, 801dbc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801db62:	4a21      	ldr	r2, [pc, #132]	; (801dbe8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801db64:	6814      	ldr	r4, [r2, #0]
 801db66:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801db6a:	b2e5      	uxtb	r5, r4
 801db6c:	4353      	muls	r3, r2
 801db6e:	1c5a      	adds	r2, r3, #1
 801db70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801db74:	1212      	asrs	r2, r2, #8
 801db76:	b290      	uxth	r0, r2
 801db78:	43d2      	mvns	r2, r2
 801db7a:	fb15 f500 	smulbb	r5, r5, r0
 801db7e:	b2d3      	uxtb	r3, r2
 801db80:	780a      	ldrb	r2, [r1, #0]
 801db82:	fb02 5203 	mla	r2, r2, r3, r5
 801db86:	b292      	uxth	r2, r2
 801db88:	1c55      	adds	r5, r2, #1
 801db8a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801db8e:	784d      	ldrb	r5, [r1, #1]
 801db90:	fb15 f503 	smulbb	r5, r5, r3
 801db94:	1212      	asrs	r2, r2, #8
 801db96:	700a      	strb	r2, [r1, #0]
 801db98:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801db9c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801dba0:	fb02 5200 	mla	r2, r2, r0, r5
 801dba4:	b292      	uxth	r2, r2
 801dba6:	1c55      	adds	r5, r2, #1
 801dba8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801dbac:	1212      	asrs	r2, r2, #8
 801dbae:	704a      	strb	r2, [r1, #1]
 801dbb0:	788a      	ldrb	r2, [r1, #2]
 801dbb2:	fb12 f303 	smulbb	r3, r2, r3
 801dbb6:	fb04 3300 	mla	r3, r4, r0, r3
 801dbba:	b29b      	uxth	r3, r3
 801dbbc:	1c5a      	adds	r2, r3, #1
 801dbbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dbc2:	121b      	asrs	r3, r3, #8
 801dbc4:	708b      	strb	r3, [r1, #2]
 801dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbca:	2600      	movs	r6, #0
 801dbcc:	e75a      	b.n	801da84 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801dbce:	2500      	movs	r5, #0
 801dbd0:	e776      	b.n	801dac0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801dbd2:	463d      	mov	r5, r7
 801dbd4:	e774      	b.n	801dac0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801dbd6:	2400      	movs	r4, #0
 801dbd8:	e78f      	b.n	801dafa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801dbda:	4663      	mov	r3, ip
 801dbdc:	4664      	mov	r4, ip
 801dbde:	e7a5      	b.n	801db2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	e7a3      	b.n	801db2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dbe4:	463b      	mov	r3, r7
 801dbe6:	e7a1      	b.n	801db2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dbe8:	20011920 	.word	0x20011920

0801dbec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbf0:	b097      	sub	sp, #92	; 0x5c
 801dbf2:	9214      	str	r2, [sp, #80]	; 0x50
 801dbf4:	9309      	str	r3, [sp, #36]	; 0x24
 801dbf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801dbf8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801dbfc:	9015      	str	r0, [sp, #84]	; 0x54
 801dbfe:	910c      	str	r1, [sp, #48]	; 0x30
 801dc00:	6850      	ldr	r0, [r2, #4]
 801dc02:	930e      	str	r3, [sp, #56]	; 0x38
 801dc04:	6812      	ldr	r2, [r2, #0]
 801dc06:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801dc0a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801dc0e:	fb00 1303 	mla	r3, r0, r3, r1
 801dc12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc16:	eb02 0a03 	add.w	sl, r2, r3
 801dc1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc1c:	689b      	ldr	r3, [r3, #8]
 801dc1e:	3301      	adds	r3, #1
 801dc20:	f023 0301 	bic.w	r3, r3, #1
 801dc24:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc28:	681f      	ldr	r7, [r3, #0]
 801dc2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	dc03      	bgt.n	801dc38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dc30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	f340 8247 	ble.w	801e0c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801dc38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dc3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dc42:	1e48      	subs	r0, r1, #1
 801dc44:	f102 3cff 	add.w	ip, r2, #4294967295
 801dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	f340 80e5 	ble.w	801de1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801dc50:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801dc54:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dc58:	d406      	bmi.n	801dc68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc5a:	4586      	cmp	lr, r0
 801dc5c:	da04      	bge.n	801dc68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	db02      	blt.n	801dc68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc62:	4563      	cmp	r3, ip
 801dc64:	f2c0 80da 	blt.w	801de1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801dc68:	f11e 0e01 	adds.w	lr, lr, #1
 801dc6c:	f100 80cb 	bmi.w	801de06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dc70:	4571      	cmp	r1, lr
 801dc72:	f2c0 80c8 	blt.w	801de06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dc76:	3301      	adds	r3, #1
 801dc78:	f100 80c5 	bmi.w	801de06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dc7c:	429a      	cmp	r2, r3
 801dc7e:	f2c0 80c2 	blt.w	801de06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc84:	46d0      	mov	r8, sl
 801dc86:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801dc8a:	930d      	str	r3, [sp, #52]	; 0x34
 801dc8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	f340 80e3 	ble.w	801de5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801dc94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dc96:	1430      	asrs	r0, r6, #16
 801dc98:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801dc9c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801dca0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801dca4:	142b      	asrs	r3, r5, #16
 801dca6:	f100 812e 	bmi.w	801df06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcaa:	f10c 3bff 	add.w	fp, ip, #4294967295
 801dcae:	455b      	cmp	r3, fp
 801dcb0:	f280 8129 	bge.w	801df06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcb4:	2800      	cmp	r0, #0
 801dcb6:	f2c0 8126 	blt.w	801df06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcba:	f10e 3bff 	add.w	fp, lr, #4294967295
 801dcbe:	4558      	cmp	r0, fp
 801dcc0:	f280 8121 	bge.w	801df06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dcc4:	fb00 3309 	mla	r3, r0, r9, r3
 801dcc8:	0858      	lsrs	r0, r3, #1
 801dcca:	07dc      	lsls	r4, r3, #31
 801dccc:	f817 c000 	ldrb.w	ip, [r7, r0]
 801dcd0:	bf54      	ite	pl
 801dcd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801dcd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801dcda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801dcde:	fa5f fc8c 	uxtb.w	ip, ip
 801dce2:	2a00      	cmp	r2, #0
 801dce4:	f000 80fe 	beq.w	801dee4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801dce8:	1c58      	adds	r0, r3, #1
 801dcea:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801dcee:	07c0      	lsls	r0, r0, #31
 801dcf0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dcf4:	bf54      	ite	pl
 801dcf6:	f00e 0e0f 	andpl.w	lr, lr, #15
 801dcfa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801dcfe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801dd02:	fa5f f08e 	uxtb.w	r0, lr
 801dd06:	9010      	str	r0, [sp, #64]	; 0x40
 801dd08:	b1d9      	cbz	r1, 801dd42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801dd0a:	444b      	add	r3, r9
 801dd0c:	0858      	lsrs	r0, r3, #1
 801dd0e:	07dc      	lsls	r4, r3, #31
 801dd10:	f103 0301 	add.w	r3, r3, #1
 801dd14:	5c38      	ldrb	r0, [r7, r0]
 801dd16:	bf54      	ite	pl
 801dd18:	f000 000f 	andpl.w	r0, r0, #15
 801dd1c:	1100      	asrmi	r0, r0, #4
 801dd1e:	07dc      	lsls	r4, r3, #31
 801dd20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801dd24:	b2c0      	uxtb	r0, r0
 801dd26:	900a      	str	r0, [sp, #40]	; 0x28
 801dd28:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801dd2c:	f817 e000 	ldrb.w	lr, [r7, r0]
 801dd30:	bf54      	ite	pl
 801dd32:	f00e 030f 	andpl.w	r3, lr, #15
 801dd36:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801dd3a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801dd3e:	b2db      	uxtb	r3, r3
 801dd40:	9311      	str	r3, [sp, #68]	; 0x44
 801dd42:	b292      	uxth	r2, r2
 801dd44:	b289      	uxth	r1, r1
 801dd46:	0113      	lsls	r3, r2, #4
 801dd48:	fb02 f001 	mul.w	r0, r2, r1
 801dd4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dd4e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801dd52:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801dd56:	1a1b      	subs	r3, r3, r0
 801dd58:	b289      	uxth	r1, r1
 801dd5a:	b29b      	uxth	r3, r3
 801dd5c:	ebae 0e01 	sub.w	lr, lr, r1
 801dd60:	4353      	muls	r3, r2
 801dd62:	fa1f fe8e 	uxth.w	lr, lr
 801dd66:	fb0c 320e 	mla	r2, ip, lr, r3
 801dd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd6c:	fb01 2203 	mla	r2, r1, r3, r2
 801dd70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dd72:	fb00 2203 	mla	r2, r0, r3, r2
 801dd76:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801dd7a:	2a00      	cmp	r2, #0
 801dd7c:	d039      	beq.n	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801dd7e:	4bc7      	ldr	r3, [pc, #796]	; (801e09c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801dd80:	6819      	ldr	r1, [r3, #0]
 801dd82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd84:	fa5f fc81 	uxtb.w	ip, r1
 801dd88:	435a      	muls	r2, r3
 801dd8a:	1c53      	adds	r3, r2, #1
 801dd8c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801dd90:	1212      	asrs	r2, r2, #8
 801dd92:	b290      	uxth	r0, r2
 801dd94:	43d2      	mvns	r2, r2
 801dd96:	fb1c fc00 	smulbb	ip, ip, r0
 801dd9a:	b2d3      	uxtb	r3, r2
 801dd9c:	f898 2000 	ldrb.w	r2, [r8]
 801dda0:	fb02 c203 	mla	r2, r2, r3, ip
 801dda4:	b292      	uxth	r2, r2
 801dda6:	f102 0c01 	add.w	ip, r2, #1
 801ddaa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ddae:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ddb2:	fb1c fc03 	smulbb	ip, ip, r3
 801ddb6:	1212      	asrs	r2, r2, #8
 801ddb8:	f888 2000 	strb.w	r2, [r8]
 801ddbc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801ddc0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801ddc4:	fb02 c200 	mla	r2, r2, r0, ip
 801ddc8:	b292      	uxth	r2, r2
 801ddca:	f102 0c01 	add.w	ip, r2, #1
 801ddce:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ddd2:	1212      	asrs	r2, r2, #8
 801ddd4:	f888 2001 	strb.w	r2, [r8, #1]
 801ddd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801dddc:	fb12 f303 	smulbb	r3, r2, r3
 801dde0:	fb01 3300 	mla	r3, r1, r0, r3
 801dde4:	b29b      	uxth	r3, r3
 801dde6:	1c5a      	adds	r2, r3, #1
 801dde8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ddec:	121b      	asrs	r3, r3, #8
 801ddee:	f888 3002 	strb.w	r3, [r8, #2]
 801ddf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ddf4:	f108 0803 	add.w	r8, r8, #3
 801ddf8:	441d      	add	r5, r3
 801ddfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ddfc:	441e      	add	r6, r3
 801ddfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de00:	3b01      	subs	r3, #1
 801de02:	930d      	str	r3, [sp, #52]	; 0x34
 801de04:	e742      	b.n	801dc8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801de06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801de08:	f10a 0a03 	add.w	sl, sl, #3
 801de0c:	441d      	add	r5, r3
 801de0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de10:	441e      	add	r6, r3
 801de12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de14:	3b01      	subs	r3, #1
 801de16:	9309      	str	r3, [sp, #36]	; 0x24
 801de18:	e716      	b.n	801dc48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801de1a:	d024      	beq.n	801de66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801de1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de1e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801de20:	3b01      	subs	r3, #1
 801de22:	fb00 5003 	mla	r0, r0, r3, r5
 801de26:	1400      	asrs	r0, r0, #16
 801de28:	f53f af2b 	bmi.w	801dc82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de2c:	3901      	subs	r1, #1
 801de2e:	4288      	cmp	r0, r1
 801de30:	f6bf af27 	bge.w	801dc82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de34:	9924      	ldr	r1, [sp, #144]	; 0x90
 801de36:	fb01 6303 	mla	r3, r1, r3, r6
 801de3a:	141b      	asrs	r3, r3, #16
 801de3c:	f53f af21 	bmi.w	801dc82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de40:	3a01      	subs	r2, #1
 801de42:	4293      	cmp	r3, r2
 801de44:	f6bf af1d 	bge.w	801dc82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de48:	f10a 0e03 	add.w	lr, sl, #3
 801de4c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801de50:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801de54:	f1b8 0f00 	cmp.w	r8, #0
 801de58:	dc76      	bgt.n	801df48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801de5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de64:	44a2      	add	sl, r4
 801de66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de68:	2b00      	cmp	r3, #0
 801de6a:	f340 812c 	ble.w	801e0c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801de6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801de74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de7c:	eef0 6a62 	vmov.f32	s13, s5
 801de80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de8c:	ee16 5a90 	vmov	r5, s13
 801de90:	eef0 6a43 	vmov.f32	s13, s6
 801de94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de98:	ee16 6a90 	vmov	r6, s13
 801de9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dea0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dea4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dea8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801deac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801deb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801deb4:	ee12 2a90 	vmov	r2, s5
 801deb8:	eef0 2a47 	vmov.f32	s5, s14
 801debc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dec0:	ee13 2a10 	vmov	r2, s6
 801dec4:	9323      	str	r3, [sp, #140]	; 0x8c
 801dec6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dec8:	eeb0 3a67 	vmov.f32	s6, s15
 801decc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ded0:	9324      	str	r3, [sp, #144]	; 0x90
 801ded2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ded4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ded6:	3b01      	subs	r3, #1
 801ded8:	930c      	str	r3, [sp, #48]	; 0x30
 801deda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dedc:	bf08      	it	eq
 801dede:	4613      	moveq	r3, r2
 801dee0:	9309      	str	r3, [sp, #36]	; 0x24
 801dee2:	e6a2      	b.n	801dc2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801dee4:	2900      	cmp	r1, #0
 801dee6:	f43f af2c 	beq.w	801dd42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801deea:	eb09 0003 	add.w	r0, r9, r3
 801deee:	0843      	lsrs	r3, r0, #1
 801def0:	07c0      	lsls	r0, r0, #31
 801def2:	5cfb      	ldrb	r3, [r7, r3]
 801def4:	bf54      	ite	pl
 801def6:	f003 030f 	andpl.w	r3, r3, #15
 801defa:	111b      	asrmi	r3, r3, #4
 801defc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801df00:	b2db      	uxtb	r3, r3
 801df02:	930a      	str	r3, [sp, #40]	; 0x28
 801df04:	e71d      	b.n	801dd42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801df06:	f113 0b01 	adds.w	fp, r3, #1
 801df0a:	f53f af72 	bmi.w	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801df0e:	45dc      	cmp	ip, fp
 801df10:	f6ff af6f 	blt.w	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801df14:	f110 0b01 	adds.w	fp, r0, #1
 801df18:	f53f af6b 	bmi.w	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801df1c:	45de      	cmp	lr, fp
 801df1e:	f6ff af68 	blt.w	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801df22:	9302      	str	r3, [sp, #8]
 801df24:	fa0f f38e 	sxth.w	r3, lr
 801df28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801df2a:	9301      	str	r3, [sp, #4]
 801df2c:	fa0f f38c 	sxth.w	r3, ip
 801df30:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801df34:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801df38:	9300      	str	r3, [sp, #0]
 801df3a:	463a      	mov	r2, r7
 801df3c:	464b      	mov	r3, r9
 801df3e:	4641      	mov	r1, r8
 801df40:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df42:	f7ff fd79 	bl	801da38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801df46:	e754      	b.n	801ddf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801df48:	142a      	asrs	r2, r5, #16
 801df4a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801df4e:	1433      	asrs	r3, r6, #16
 801df50:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801df54:	fb09 2303 	mla	r3, r9, r3, r2
 801df58:	085a      	lsrs	r2, r3, #1
 801df5a:	07dc      	lsls	r4, r3, #31
 801df5c:	5cba      	ldrb	r2, [r7, r2]
 801df5e:	bf54      	ite	pl
 801df60:	f002 020f 	andpl.w	r2, r2, #15
 801df64:	1112      	asrmi	r2, r2, #4
 801df66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801df6a:	b2d2      	uxtb	r2, r2
 801df6c:	2900      	cmp	r1, #0
 801df6e:	f000 8097 	beq.w	801e0a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801df72:	f103 0b01 	add.w	fp, r3, #1
 801df76:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801df7a:	f01b 0f01 	tst.w	fp, #1
 801df7e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801df82:	bf0c      	ite	eq
 801df84:	f00c 0c0f 	andeq.w	ip, ip, #15
 801df88:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801df8c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801df90:	fa5f f48c 	uxtb.w	r4, ip
 801df94:	9412      	str	r4, [sp, #72]	; 0x48
 801df96:	b300      	cbz	r0, 801dfda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801df98:	444b      	add	r3, r9
 801df9a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801df9e:	07dc      	lsls	r4, r3, #31
 801dfa0:	f103 0301 	add.w	r3, r3, #1
 801dfa4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801dfa8:	bf54      	ite	pl
 801dfaa:	f00c 0c0f 	andpl.w	ip, ip, #15
 801dfae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801dfb2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801dfb6:	fa5f f48c 	uxtb.w	r4, ip
 801dfba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801dfbe:	940b      	str	r4, [sp, #44]	; 0x2c
 801dfc0:	07dc      	lsls	r4, r3, #31
 801dfc2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801dfc6:	bf54      	ite	pl
 801dfc8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801dfcc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801dfd0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801dfd4:	fa5f f38c 	uxtb.w	r3, ip
 801dfd8:	9313      	str	r3, [sp, #76]	; 0x4c
 801dfda:	b289      	uxth	r1, r1
 801dfdc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dfde:	b280      	uxth	r0, r0
 801dfe0:	fb01 f300 	mul.w	r3, r1, r0
 801dfe4:	0109      	lsls	r1, r1, #4
 801dfe6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801dfea:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801dfee:	1ac9      	subs	r1, r1, r3
 801dff0:	b280      	uxth	r0, r0
 801dff2:	b289      	uxth	r1, r1
 801dff4:	ebac 0c00 	sub.w	ip, ip, r0
 801dff8:	4361      	muls	r1, r4
 801dffa:	fa1f fc8c 	uxth.w	ip, ip
 801dffe:	fb02 120c 	mla	r2, r2, ip, r1
 801e002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e004:	fb00 2001 	mla	r0, r0, r1, r2
 801e008:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e00a:	fb03 0302 	mla	r3, r3, r2, r0
 801e00e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e012:	2b00      	cmp	r3, #0
 801e014:	d039      	beq.n	801e08a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e016:	4a21      	ldr	r2, [pc, #132]	; (801e09c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e018:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e01c:	6810      	ldr	r0, [r2, #0]
 801e01e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e020:	fa5f fc80 	uxtb.w	ip, r0
 801e024:	4353      	muls	r3, r2
 801e026:	1c5a      	adds	r2, r3, #1
 801e028:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e02c:	121b      	asrs	r3, r3, #8
 801e02e:	b29a      	uxth	r2, r3
 801e030:	43db      	mvns	r3, r3
 801e032:	fb1c fc02 	smulbb	ip, ip, r2
 801e036:	b2db      	uxtb	r3, r3
 801e038:	fb01 c103 	mla	r1, r1, r3, ip
 801e03c:	b289      	uxth	r1, r1
 801e03e:	f101 0c01 	add.w	ip, r1, #1
 801e042:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e046:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e04a:	fb1c fc03 	smulbb	ip, ip, r3
 801e04e:	1209      	asrs	r1, r1, #8
 801e050:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e054:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e058:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e05c:	fb01 c102 	mla	r1, r1, r2, ip
 801e060:	b289      	uxth	r1, r1
 801e062:	f101 0c01 	add.w	ip, r1, #1
 801e066:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e06a:	1209      	asrs	r1, r1, #8
 801e06c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e070:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e074:	fb11 f303 	smulbb	r3, r1, r3
 801e078:	fb00 3002 	mla	r0, r0, r2, r3
 801e07c:	b280      	uxth	r0, r0
 801e07e:	1c42      	adds	r2, r0, #1
 801e080:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e084:	1200      	asrs	r0, r0, #8
 801e086:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e08a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e08c:	f10e 0e03 	add.w	lr, lr, #3
 801e090:	f108 38ff 	add.w	r8, r8, #4294967295
 801e094:	441d      	add	r5, r3
 801e096:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e098:	441e      	add	r6, r3
 801e09a:	e6db      	b.n	801de54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e09c:	20011920 	.word	0x20011920
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	d09a      	beq.n	801dfda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e0a4:	444b      	add	r3, r9
 801e0a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e0aa:	07db      	lsls	r3, r3, #31
 801e0ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e0b0:	bf54      	ite	pl
 801e0b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e0b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e0ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e0be:	fa5f f38c 	uxtb.w	r3, ip
 801e0c2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0c4:	e789      	b.n	801dfda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e0c6:	b017      	add	sp, #92	; 0x5c
 801e0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801e0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801e0d4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e0d8:	2d00      	cmp	r5, #0
 801e0da:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801e0de:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801e0e2:	fb04 5e03 	mla	lr, r4, r3, r5
 801e0e6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801e0ea:	f2c0 80b1 	blt.w	801e250 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e0ee:	45a9      	cmp	r9, r5
 801e0f0:	f340 80ae 	ble.w	801e250 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e0f4:	2c00      	cmp	r4, #0
 801e0f6:	f2c0 80ab 	blt.w	801e250 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e0fa:	45a0      	cmp	r8, r4
 801e0fc:	f340 80a8 	ble.w	801e250 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e100:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801e104:	f01e 0f01 	tst.w	lr, #1
 801e108:	5d97      	ldrb	r7, [r2, r6]
 801e10a:	bf0c      	ite	eq
 801e10c:	f007 070f 	andeq.w	r7, r7, #15
 801e110:	113f      	asrne	r7, r7, #4
 801e112:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801e116:	b2ff      	uxtb	r7, r7
 801e118:	f115 0a01 	adds.w	sl, r5, #1
 801e11c:	f100 809a 	bmi.w	801e254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e120:	45d1      	cmp	r9, sl
 801e122:	f340 8097 	ble.w	801e254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e126:	2c00      	cmp	r4, #0
 801e128:	f2c0 8094 	blt.w	801e254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e12c:	45a0      	cmp	r8, r4
 801e12e:	f340 8091 	ble.w	801e254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e132:	2800      	cmp	r0, #0
 801e134:	f000 8090 	beq.w	801e258 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801e138:	f10e 0b01 	add.w	fp, lr, #1
 801e13c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801e140:	f01b 0f01 	tst.w	fp, #1
 801e144:	5d96      	ldrb	r6, [r2, r6]
 801e146:	bf0c      	ite	eq
 801e148:	f006 060f 	andeq.w	r6, r6, #15
 801e14c:	1136      	asrne	r6, r6, #4
 801e14e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e152:	b2f6      	uxtb	r6, r6
 801e154:	f1bc 0f00 	cmp.w	ip, #0
 801e158:	f000 8082 	beq.w	801e260 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801e15c:	2d00      	cmp	r5, #0
 801e15e:	f104 0401 	add.w	r4, r4, #1
 801e162:	db7b      	blt.n	801e25c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e164:	45a9      	cmp	r9, r5
 801e166:	dd79      	ble.n	801e25c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e168:	2c00      	cmp	r4, #0
 801e16a:	db77      	blt.n	801e25c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e16c:	45a0      	cmp	r8, r4
 801e16e:	dd75      	ble.n	801e25c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e170:	eb03 0b0e 	add.w	fp, r3, lr
 801e174:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e178:	f01b 0f01 	tst.w	fp, #1
 801e17c:	5d55      	ldrb	r5, [r2, r5]
 801e17e:	bf0c      	ite	eq
 801e180:	f005 050f 	andeq.w	r5, r5, #15
 801e184:	112d      	asrne	r5, r5, #4
 801e186:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e18a:	b2ed      	uxtb	r5, r5
 801e18c:	f1ba 0f00 	cmp.w	sl, #0
 801e190:	db69      	blt.n	801e266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e192:	45d1      	cmp	r9, sl
 801e194:	dd67      	ble.n	801e266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e196:	2c00      	cmp	r4, #0
 801e198:	db65      	blt.n	801e266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e19a:	45a0      	cmp	r8, r4
 801e19c:	dd63      	ble.n	801e266 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e19e:	2800      	cmp	r0, #0
 801e1a0:	d063      	beq.n	801e26a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801e1a2:	3301      	adds	r3, #1
 801e1a4:	449e      	add	lr, r3
 801e1a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e1aa:	f01e 0f01 	tst.w	lr, #1
 801e1ae:	5cd4      	ldrb	r4, [r2, r3]
 801e1b0:	bf0c      	ite	eq
 801e1b2:	f004 040f 	andeq.w	r4, r4, #15
 801e1b6:	1124      	asrne	r4, r4, #4
 801e1b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e1bc:	b2e3      	uxtb	r3, r4
 801e1be:	b282      	uxth	r2, r0
 801e1c0:	fa1f fc8c 	uxth.w	ip, ip
 801e1c4:	fb02 f40c 	mul.w	r4, r2, ip
 801e1c8:	0112      	lsls	r2, r2, #4
 801e1ca:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801e1ce:	fa1f f08c 	uxth.w	r0, ip
 801e1d2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801e1d6:	1b12      	subs	r2, r2, r4
 801e1d8:	ebac 0c00 	sub.w	ip, ip, r0
 801e1dc:	b292      	uxth	r2, r2
 801e1de:	fa1f fc8c 	uxth.w	ip, ip
 801e1e2:	4372      	muls	r2, r6
 801e1e4:	fb07 220c 	mla	r2, r7, ip, r2
 801e1e8:	fb00 2005 	mla	r0, r0, r5, r2
 801e1ec:	fb04 0303 	mla	r3, r4, r3, r0
 801e1f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e1f4:	b353      	cbz	r3, 801e24c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801e1f6:	4a1e      	ldr	r2, [pc, #120]	; (801e270 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801e1f8:	7808      	ldrb	r0, [r1, #0]
 801e1fa:	6814      	ldr	r4, [r2, #0]
 801e1fc:	b29a      	uxth	r2, r3
 801e1fe:	43db      	mvns	r3, r3
 801e200:	b2e5      	uxtb	r5, r4
 801e202:	b2db      	uxtb	r3, r3
 801e204:	fb15 f502 	smulbb	r5, r5, r2
 801e208:	fb00 5003 	mla	r0, r0, r3, r5
 801e20c:	b280      	uxth	r0, r0
 801e20e:	1c45      	adds	r5, r0, #1
 801e210:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e214:	784d      	ldrb	r5, [r1, #1]
 801e216:	fb15 f503 	smulbb	r5, r5, r3
 801e21a:	1200      	asrs	r0, r0, #8
 801e21c:	7008      	strb	r0, [r1, #0]
 801e21e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801e222:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e226:	fb00 5002 	mla	r0, r0, r2, r5
 801e22a:	b280      	uxth	r0, r0
 801e22c:	1c45      	adds	r5, r0, #1
 801e22e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e232:	1200      	asrs	r0, r0, #8
 801e234:	7048      	strb	r0, [r1, #1]
 801e236:	7888      	ldrb	r0, [r1, #2]
 801e238:	fb10 f303 	smulbb	r3, r0, r3
 801e23c:	fb04 3202 	mla	r2, r4, r2, r3
 801e240:	b292      	uxth	r2, r2
 801e242:	1c53      	adds	r3, r2, #1
 801e244:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e248:	1212      	asrs	r2, r2, #8
 801e24a:	708a      	strb	r2, [r1, #2]
 801e24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e250:	2700      	movs	r7, #0
 801e252:	e761      	b.n	801e118 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801e254:	2600      	movs	r6, #0
 801e256:	e77d      	b.n	801e154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e258:	4606      	mov	r6, r0
 801e25a:	e77b      	b.n	801e154 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e25c:	2500      	movs	r5, #0
 801e25e:	e795      	b.n	801e18c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801e260:	4663      	mov	r3, ip
 801e262:	4665      	mov	r5, ip
 801e264:	e7ab      	b.n	801e1be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e266:	2300      	movs	r3, #0
 801e268:	e7a9      	b.n	801e1be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e26a:	4603      	mov	r3, r0
 801e26c:	e7a7      	b.n	801e1be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e26e:	bf00      	nop
 801e270:	20011920 	.word	0x20011920

0801e274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e278:	b093      	sub	sp, #76	; 0x4c
 801e27a:	461c      	mov	r4, r3
 801e27c:	920c      	str	r2, [sp, #48]	; 0x30
 801e27e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e280:	9011      	str	r0, [sp, #68]	; 0x44
 801e282:	9107      	str	r1, [sp, #28]
 801e284:	6850      	ldr	r0, [r2, #4]
 801e286:	6812      	ldr	r2, [r2, #0]
 801e288:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e28c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801e290:	fb00 1303 	mla	r3, r0, r3, r1
 801e294:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e298:	eb02 0b03 	add.w	fp, r2, r3
 801e29c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e29e:	689b      	ldr	r3, [r3, #8]
 801e2a0:	3301      	adds	r3, #1
 801e2a2:	f023 0301 	bic.w	r3, r3, #1
 801e2a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e2a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2aa:	f8d3 8000 	ldr.w	r8, [r3]
 801e2ae:	9b07      	ldr	r3, [sp, #28]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	dc03      	bgt.n	801e2bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e2b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	f340 822b 	ble.w	801e712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e2bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e2c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e2c6:	1e48      	subs	r0, r1, #1
 801e2c8:	1e57      	subs	r7, r2, #1
 801e2ca:	2c00      	cmp	r4, #0
 801e2cc:	f340 80d7 	ble.w	801e47e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e2d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e2d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e2d8:	d406      	bmi.n	801e2e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e2da:	4584      	cmp	ip, r0
 801e2dc:	da04      	bge.n	801e2e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	db02      	blt.n	801e2e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e2e2:	42bb      	cmp	r3, r7
 801e2e4:	f2c0 80cc 	blt.w	801e480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e2e8:	f11c 0c01 	adds.w	ip, ip, #1
 801e2ec:	f100 80bf 	bmi.w	801e46e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e2f0:	4561      	cmp	r1, ip
 801e2f2:	f2c0 80bc 	blt.w	801e46e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e2f6:	3301      	adds	r3, #1
 801e2f8:	f100 80b9 	bmi.w	801e46e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	f2c0 80b6 	blt.w	801e46e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e302:	46a2      	mov	sl, r4
 801e304:	465f      	mov	r7, fp
 801e306:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e30a:	f1ba 0f00 	cmp.w	sl, #0
 801e30e:	f340 80d4 	ble.w	801e4ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801e312:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801e316:	1430      	asrs	r0, r6, #16
 801e318:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e31c:	9308      	str	r3, [sp, #32]
 801e31e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e320:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e324:	142b      	asrs	r3, r5, #16
 801e326:	f100 8124 	bmi.w	801e572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e32a:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e32e:	4293      	cmp	r3, r2
 801e330:	f280 811f 	bge.w	801e572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e334:	2800      	cmp	r0, #0
 801e336:	f2c0 811c 	blt.w	801e572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e33a:	f10e 32ff 	add.w	r2, lr, #4294967295
 801e33e:	4290      	cmp	r0, r2
 801e340:	f280 8117 	bge.w	801e572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e344:	fb00 3309 	mla	r3, r0, r9, r3
 801e348:	0858      	lsrs	r0, r3, #1
 801e34a:	07da      	lsls	r2, r3, #31
 801e34c:	9a08      	ldr	r2, [sp, #32]
 801e34e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801e352:	bf54      	ite	pl
 801e354:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e358:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e35c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e360:	fa5f fc8c 	uxtb.w	ip, ip
 801e364:	2a00      	cmp	r2, #0
 801e366:	f000 80ed 	beq.w	801e544 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801e36a:	1c58      	adds	r0, r3, #1
 801e36c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e370:	07c0      	lsls	r0, r0, #31
 801e372:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801e376:	bf54      	ite	pl
 801e378:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e37c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e380:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e384:	fa5f fe8e 	uxtb.w	lr, lr
 801e388:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801e38c:	b1c9      	cbz	r1, 801e3c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e38e:	444b      	add	r3, r9
 801e390:	0858      	lsrs	r0, r3, #1
 801e392:	07da      	lsls	r2, r3, #31
 801e394:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e398:	bf54      	ite	pl
 801e39a:	f000 000f 	andpl.w	r0, r0, #15
 801e39e:	1100      	asrmi	r0, r0, #4
 801e3a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e3a4:	b2c0      	uxtb	r0, r0
 801e3a6:	900a      	str	r0, [sp, #40]	; 0x28
 801e3a8:	1c58      	adds	r0, r3, #1
 801e3aa:	0843      	lsrs	r3, r0, #1
 801e3ac:	07c2      	lsls	r2, r0, #31
 801e3ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e3b2:	bf54      	ite	pl
 801e3b4:	f003 030f 	andpl.w	r3, r3, #15
 801e3b8:	111b      	asrmi	r3, r3, #4
 801e3ba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e3be:	b2db      	uxtb	r3, r3
 801e3c0:	930e      	str	r3, [sp, #56]	; 0x38
 801e3c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e3c6:	b289      	uxth	r1, r1
 801e3c8:	fb02 f301 	mul.w	r3, r2, r1
 801e3cc:	0112      	lsls	r2, r2, #4
 801e3ce:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e3d2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801e3d6:	1ad2      	subs	r2, r2, r3
 801e3d8:	b289      	uxth	r1, r1
 801e3da:	b292      	uxth	r2, r2
 801e3dc:	1a40      	subs	r0, r0, r1
 801e3de:	fa1f fe80 	uxth.w	lr, r0
 801e3e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e3e4:	4342      	muls	r2, r0
 801e3e6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801e3ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3ec:	fb01 c102 	mla	r1, r1, r2, ip
 801e3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3f2:	fb03 1302 	mla	r3, r3, r2, r1
 801e3f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e3fa:	b383      	cbz	r3, 801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e3fc:	4ac6      	ldr	r2, [pc, #792]	; (801e718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e3fe:	2bff      	cmp	r3, #255	; 0xff
 801e400:	6812      	ldr	r2, [r2, #0]
 801e402:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801e406:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801e40a:	b2d2      	uxtb	r2, r2
 801e40c:	f000 80ac 	beq.w	801e568 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e410:	b299      	uxth	r1, r3
 801e412:	43db      	mvns	r3, r3
 801e414:	f897 c000 	ldrb.w	ip, [r7]
 801e418:	fb12 f201 	smulbb	r2, r2, r1
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	fb10 f001 	smulbb	r0, r0, r1
 801e422:	fb0c 2203 	mla	r2, ip, r3, r2
 801e426:	fb1e f101 	smulbb	r1, lr, r1
 801e42a:	b292      	uxth	r2, r2
 801e42c:	f102 0c01 	add.w	ip, r2, #1
 801e430:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e434:	1212      	asrs	r2, r2, #8
 801e436:	703a      	strb	r2, [r7, #0]
 801e438:	787a      	ldrb	r2, [r7, #1]
 801e43a:	fb02 0003 	mla	r0, r2, r3, r0
 801e43e:	b280      	uxth	r0, r0
 801e440:	1c42      	adds	r2, r0, #1
 801e442:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e446:	78ba      	ldrb	r2, [r7, #2]
 801e448:	fb02 1303 	mla	r3, r2, r3, r1
 801e44c:	1200      	asrs	r0, r0, #8
 801e44e:	b29b      	uxth	r3, r3
 801e450:	7078      	strb	r0, [r7, #1]
 801e452:	f103 0e01 	add.w	lr, r3, #1
 801e456:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801e45a:	121b      	asrs	r3, r3, #8
 801e45c:	70bb      	strb	r3, [r7, #2]
 801e45e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e460:	3703      	adds	r7, #3
 801e462:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e466:	441d      	add	r5, r3
 801e468:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e46a:	441e      	add	r6, r3
 801e46c:	e74d      	b.n	801e30a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e46e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e470:	3c01      	subs	r4, #1
 801e472:	f10b 0b03 	add.w	fp, fp, #3
 801e476:	441d      	add	r5, r3
 801e478:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e47a:	441e      	add	r6, r3
 801e47c:	e725      	b.n	801e2ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e47e:	d021      	beq.n	801e4c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e480:	1e63      	subs	r3, r4, #1
 801e482:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e484:	fb00 5003 	mla	r0, r0, r3, r5
 801e488:	1400      	asrs	r0, r0, #16
 801e48a:	f53f af3a 	bmi.w	801e302 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e48e:	3901      	subs	r1, #1
 801e490:	4288      	cmp	r0, r1
 801e492:	f6bf af36 	bge.w	801e302 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e496:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e498:	fb01 6303 	mla	r3, r1, r3, r6
 801e49c:	141b      	asrs	r3, r3, #16
 801e49e:	f53f af30 	bmi.w	801e302 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e4a2:	3a01      	subs	r2, #1
 801e4a4:	4293      	cmp	r3, r2
 801e4a6:	f6bf af2c 	bge.w	801e302 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e4aa:	f10b 0c03 	add.w	ip, fp, #3
 801e4ae:	46a6      	mov	lr, r4
 801e4b0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801e4b4:	f1be 0f00 	cmp.w	lr, #0
 801e4b8:	dc79      	bgt.n	801e5ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e4ba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801e4be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e4c2:	44a3      	add	fp, r4
 801e4c4:	9b07      	ldr	r3, [sp, #28]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	f340 8123 	ble.w	801e712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e4cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e4d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4da:	eef0 6a62 	vmov.f32	s13, s5
 801e4de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4ea:	ee16 5a90 	vmov	r5, s13
 801e4ee:	eef0 6a43 	vmov.f32	s13, s6
 801e4f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4f6:	ee16 6a90 	vmov	r6, s13
 801e4fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e502:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e506:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e50a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e50e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e512:	ee12 2a90 	vmov	r2, s5
 801e516:	eef0 2a47 	vmov.f32	s5, s14
 801e51a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e51e:	ee13 2a10 	vmov	r2, s6
 801e522:	931f      	str	r3, [sp, #124]	; 0x7c
 801e524:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e526:	eeb0 3a67 	vmov.f32	s6, s15
 801e52a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e52e:	9320      	str	r3, [sp, #128]	; 0x80
 801e530:	9b07      	ldr	r3, [sp, #28]
 801e532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e534:	3b01      	subs	r3, #1
 801e536:	9307      	str	r3, [sp, #28]
 801e538:	bf08      	it	eq
 801e53a:	4614      	moveq	r4, r2
 801e53c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e53e:	bf18      	it	ne
 801e540:	461c      	movne	r4, r3
 801e542:	e6b4      	b.n	801e2ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e544:	2900      	cmp	r1, #0
 801e546:	f43f af3c 	beq.w	801e3c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e54a:	eb09 0003 	add.w	r0, r9, r3
 801e54e:	0843      	lsrs	r3, r0, #1
 801e550:	07c0      	lsls	r0, r0, #31
 801e552:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e556:	bf54      	ite	pl
 801e558:	f003 030f 	andpl.w	r3, r3, #15
 801e55c:	111b      	asrmi	r3, r3, #4
 801e55e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e562:	b2db      	uxtb	r3, r3
 801e564:	930a      	str	r3, [sp, #40]	; 0x28
 801e566:	e72c      	b.n	801e3c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e568:	703a      	strb	r2, [r7, #0]
 801e56a:	7078      	strb	r0, [r7, #1]
 801e56c:	f887 e002 	strb.w	lr, [r7, #2]
 801e570:	e775      	b.n	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e572:	1c5a      	adds	r2, r3, #1
 801e574:	f53f af73 	bmi.w	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e578:	4594      	cmp	ip, r2
 801e57a:	f6ff af70 	blt.w	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e57e:	1c42      	adds	r2, r0, #1
 801e580:	f53f af6d 	bmi.w	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e584:	4596      	cmp	lr, r2
 801e586:	f6ff af6a 	blt.w	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e58a:	9302      	str	r3, [sp, #8]
 801e58c:	fa0f f38e 	sxth.w	r3, lr
 801e590:	9a08      	ldr	r2, [sp, #32]
 801e592:	9301      	str	r3, [sp, #4]
 801e594:	fa0f f38c 	sxth.w	r3, ip
 801e598:	9105      	str	r1, [sp, #20]
 801e59a:	4639      	mov	r1, r7
 801e59c:	9300      	str	r3, [sp, #0]
 801e59e:	464b      	mov	r3, r9
 801e5a0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e5a4:	4642      	mov	r2, r8
 801e5a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e5a8:	f7ff fd90 	bl	801e0cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801e5ac:	e757      	b.n	801e45e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e5ae:	142a      	asrs	r2, r5, #16
 801e5b0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e5b4:	1433      	asrs	r3, r6, #16
 801e5b6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801e5ba:	fb09 2303 	mla	r3, r9, r3, r2
 801e5be:	085a      	lsrs	r2, r3, #1
 801e5c0:	07d9      	lsls	r1, r3, #31
 801e5c2:	f818 2002 	ldrb.w	r2, [r8, r2]
 801e5c6:	bf54      	ite	pl
 801e5c8:	f002 020f 	andpl.w	r2, r2, #15
 801e5cc:	1112      	asrmi	r2, r2, #4
 801e5ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e5d2:	b2d2      	uxtb	r2, r2
 801e5d4:	2800      	cmp	r0, #0
 801e5d6:	f000 8085 	beq.w	801e6e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801e5da:	f103 0a01 	add.w	sl, r3, #1
 801e5de:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801e5e2:	f01a 0f01 	tst.w	sl, #1
 801e5e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e5ea:	bf0c      	ite	eq
 801e5ec:	f001 010f 	andeq.w	r1, r1, #15
 801e5f0:	1109      	asrne	r1, r1, #4
 801e5f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e5f6:	b2c9      	uxtb	r1, r1
 801e5f8:	910f      	str	r1, [sp, #60]	; 0x3c
 801e5fa:	b1df      	cbz	r7, 801e634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e5fc:	444b      	add	r3, r9
 801e5fe:	0859      	lsrs	r1, r3, #1
 801e600:	f013 0f01 	tst.w	r3, #1
 801e604:	f103 0301 	add.w	r3, r3, #1
 801e608:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e60c:	bf0c      	ite	eq
 801e60e:	f001 010f 	andeq.w	r1, r1, #15
 801e612:	1109      	asrne	r1, r1, #4
 801e614:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e618:	b2c9      	uxtb	r1, r1
 801e61a:	910b      	str	r1, [sp, #44]	; 0x2c
 801e61c:	0859      	lsrs	r1, r3, #1
 801e61e:	07db      	lsls	r3, r3, #31
 801e620:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e624:	bf54      	ite	pl
 801e626:	f001 010f 	andpl.w	r1, r1, #15
 801e62a:	1109      	asrmi	r1, r1, #4
 801e62c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e630:	b2c9      	uxtb	r1, r1
 801e632:	9110      	str	r1, [sp, #64]	; 0x40
 801e634:	b280      	uxth	r0, r0
 801e636:	b2bf      	uxth	r7, r7
 801e638:	fb00 f307 	mul.w	r3, r0, r7
 801e63c:	0100      	lsls	r0, r0, #4
 801e63e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801e642:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801e646:	1ac0      	subs	r0, r0, r3
 801e648:	b2bf      	uxth	r7, r7
 801e64a:	b280      	uxth	r0, r0
 801e64c:	1bc9      	subs	r1, r1, r7
 801e64e:	fa1f fa81 	uxth.w	sl, r1
 801e652:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e654:	4348      	muls	r0, r1
 801e656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e658:	fb02 020a 	mla	r2, r2, sl, r0
 801e65c:	fb07 2701 	mla	r7, r7, r1, r2
 801e660:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e662:	fb03 7302 	mla	r3, r3, r2, r7
 801e666:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e66a:	b393      	cbz	r3, 801e6d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e66c:	4a2a      	ldr	r2, [pc, #168]	; (801e718 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e66e:	2bff      	cmp	r3, #255	; 0xff
 801e670:	6811      	ldr	r1, [r2, #0]
 801e672:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801e676:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801e67a:	b2c9      	uxtb	r1, r1
 801e67c:	d042      	beq.n	801e704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e67e:	b298      	uxth	r0, r3
 801e680:	43db      	mvns	r3, r3
 801e682:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801e686:	fb11 f100 	smulbb	r1, r1, r0
 801e68a:	b2db      	uxtb	r3, r3
 801e68c:	fb17 f700 	smulbb	r7, r7, r0
 801e690:	fb02 1103 	mla	r1, r2, r3, r1
 801e694:	fb1a f000 	smulbb	r0, sl, r0
 801e698:	b289      	uxth	r1, r1
 801e69a:	1c4a      	adds	r2, r1, #1
 801e69c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e6a0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801e6a4:	fb02 7703 	mla	r7, r2, r3, r7
 801e6a8:	1209      	asrs	r1, r1, #8
 801e6aa:	b2bf      	uxth	r7, r7
 801e6ac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e6b0:	1c7a      	adds	r2, r7, #1
 801e6b2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e6b6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801e6ba:	fb02 0303 	mla	r3, r2, r3, r0
 801e6be:	123f      	asrs	r7, r7, #8
 801e6c0:	b29b      	uxth	r3, r3
 801e6c2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e6c6:	1c5a      	adds	r2, r3, #1
 801e6c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e6cc:	121b      	asrs	r3, r3, #8
 801e6ce:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801e6d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e6d4:	f10c 0c03 	add.w	ip, ip, #3
 801e6d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e6dc:	441d      	add	r5, r3
 801e6de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e6e0:	441e      	add	r6, r3
 801e6e2:	e6e7      	b.n	801e4b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e6e4:	2f00      	cmp	r7, #0
 801e6e6:	d0a5      	beq.n	801e634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e6e8:	444b      	add	r3, r9
 801e6ea:	0859      	lsrs	r1, r3, #1
 801e6ec:	07db      	lsls	r3, r3, #31
 801e6ee:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e6f2:	bf54      	ite	pl
 801e6f4:	f001 010f 	andpl.w	r1, r1, #15
 801e6f8:	1109      	asrmi	r1, r1, #4
 801e6fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e6fe:	b2c9      	uxtb	r1, r1
 801e700:	910b      	str	r1, [sp, #44]	; 0x2c
 801e702:	e797      	b.n	801e634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e704:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e708:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e70c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e710:	e7df      	b.n	801e6d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e712:	b013      	add	sp, #76	; 0x4c
 801e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e718:	20011920 	.word	0x20011920

0801e71c <CRC_Lock>:
 801e71c:	4a20      	ldr	r2, [pc, #128]	; (801e7a0 <CRC_Lock+0x84>)
 801e71e:	b530      	push	{r4, r5, lr}
 801e720:	6813      	ldr	r3, [r2, #0]
 801e722:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801e726:	f24c 2540 	movw	r5, #49728	; 0xc240
 801e72a:	f023 0301 	bic.w	r3, r3, #1
 801e72e:	6013      	str	r3, [r2, #0]
 801e730:	4b1c      	ldr	r3, [pc, #112]	; (801e7a4 <CRC_Lock+0x88>)
 801e732:	681a      	ldr	r2, [r3, #0]
 801e734:	4022      	ands	r2, r4
 801e736:	42aa      	cmp	r2, r5
 801e738:	d005      	beq.n	801e746 <CRC_Lock+0x2a>
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	f24c 2270 	movw	r2, #49776	; 0xc270
 801e740:	4023      	ands	r3, r4
 801e742:	4293      	cmp	r3, r2
 801e744:	d124      	bne.n	801e790 <CRC_Lock+0x74>
 801e746:	4b18      	ldr	r3, [pc, #96]	; (801e7a8 <CRC_Lock+0x8c>)
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	bb0b      	cbnz	r3, 801e790 <CRC_Lock+0x74>
 801e74c:	4b17      	ldr	r3, [pc, #92]	; (801e7ac <CRC_Lock+0x90>)
 801e74e:	681a      	ldr	r2, [r3, #0]
 801e750:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801e754:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801e758:	d00d      	beq.n	801e776 <CRC_Lock+0x5a>
 801e75a:	681a      	ldr	r2, [r3, #0]
 801e75c:	f240 4483 	movw	r4, #1155	; 0x483
 801e760:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801e764:	42a2      	cmp	r2, r4
 801e766:	d006      	beq.n	801e776 <CRC_Lock+0x5a>
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	f240 4285 	movw	r2, #1157	; 0x485
 801e76e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e772:	4293      	cmp	r3, r2
 801e774:	d10c      	bne.n	801e790 <CRC_Lock+0x74>
 801e776:	4b0e      	ldr	r3, [pc, #56]	; (801e7b0 <CRC_Lock+0x94>)
 801e778:	2201      	movs	r2, #1
 801e77a:	601a      	str	r2, [r3, #0]
 801e77c:	681a      	ldr	r2, [r3, #0]
 801e77e:	2a00      	cmp	r2, #0
 801e780:	d1fc      	bne.n	801e77c <CRC_Lock+0x60>
 801e782:	4b0c      	ldr	r3, [pc, #48]	; (801e7b4 <CRC_Lock+0x98>)
 801e784:	6018      	str	r0, [r3, #0]
 801e786:	6818      	ldr	r0, [r3, #0]
 801e788:	1a43      	subs	r3, r0, r1
 801e78a:	4258      	negs	r0, r3
 801e78c:	4158      	adcs	r0, r3
 801e78e:	bd30      	pop	{r4, r5, pc}
 801e790:	4b09      	ldr	r3, [pc, #36]	; (801e7b8 <CRC_Lock+0x9c>)
 801e792:	2201      	movs	r2, #1
 801e794:	601a      	str	r2, [r3, #0]
 801e796:	681a      	ldr	r2, [r3, #0]
 801e798:	2a00      	cmp	r2, #0
 801e79a:	d1fc      	bne.n	801e796 <CRC_Lock+0x7a>
 801e79c:	4b07      	ldr	r3, [pc, #28]	; (801e7bc <CRC_Lock+0xa0>)
 801e79e:	e7f1      	b.n	801e784 <CRC_Lock+0x68>
 801e7a0:	e0002000 	.word	0xe0002000
 801e7a4:	e000ed00 	.word	0xe000ed00
 801e7a8:	e0042000 	.word	0xe0042000
 801e7ac:	5c001000 	.word	0x5c001000
 801e7b0:	58024c08 	.word	0x58024c08
 801e7b4:	58024c00 	.word	0x58024c00
 801e7b8:	40023008 	.word	0x40023008
 801e7bc:	40023000 	.word	0x40023000

0801e7c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e7c0:	6101      	str	r1, [r0, #16]
 801e7c2:	4770      	bx	lr

0801e7c4 <_ZN8touchgfx8Gestures4tickEv>:
 801e7c4:	7b83      	ldrb	r3, [r0, #14]
 801e7c6:	b14b      	cbz	r3, 801e7dc <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e7c8:	8903      	ldrh	r3, [r0, #8]
 801e7ca:	3301      	adds	r3, #1
 801e7cc:	b29b      	uxth	r3, r3
 801e7ce:	2b07      	cmp	r3, #7
 801e7d0:	8103      	strh	r3, [r0, #8]
 801e7d2:	bf81      	itttt	hi
 801e7d4:	2300      	movhi	r3, #0
 801e7d6:	8143      	strhhi	r3, [r0, #10]
 801e7d8:	8183      	strhhi	r3, [r0, #12]
 801e7da:	7383      	strbhi	r3, [r0, #14]
 801e7dc:	4770      	bx	lr
	...

0801e7e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e7e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e7e4:	4698      	mov	r8, r3
 801e7e6:	8883      	ldrh	r3, [r0, #4]
 801e7e8:	4604      	mov	r4, r0
 801e7ea:	4617      	mov	r7, r2
 801e7ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e7f0:	eba8 0303 	sub.w	r3, r8, r3
 801e7f4:	4a19      	ldr	r2, [pc, #100]	; (801e85c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801e7f6:	460e      	mov	r6, r1
 801e7f8:	b21b      	sxth	r3, r3
 801e7fa:	88c1      	ldrh	r1, [r0, #6]
 801e7fc:	9200      	str	r2, [sp, #0]
 801e7fe:	2000      	movs	r0, #0
 801e800:	2b00      	cmp	r3, #0
 801e802:	8aa2      	ldrh	r2, [r4, #20]
 801e804:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e808:	bfb8      	it	lt
 801e80a:	425b      	neglt	r3, r3
 801e80c:	f88d 0004 	strb.w	r0, [sp, #4]
 801e810:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e814:	b21b      	sxth	r3, r3
 801e816:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e81a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e81e:	4293      	cmp	r3, r2
 801e820:	dc07      	bgt.n	801e832 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801e822:	1a69      	subs	r1, r5, r1
 801e824:	b209      	sxth	r1, r1
 801e826:	2900      	cmp	r1, #0
 801e828:	bfb8      	it	lt
 801e82a:	4249      	neglt	r1, r1
 801e82c:	b209      	sxth	r1, r1
 801e82e:	428a      	cmp	r2, r1
 801e830:	da10      	bge.n	801e854 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801e832:	6920      	ldr	r0, [r4, #16]
 801e834:	4669      	mov	r1, sp
 801e836:	eba8 0606 	sub.w	r6, r8, r6
 801e83a:	1bef      	subs	r7, r5, r7
 801e83c:	6803      	ldr	r3, [r0, #0]
 801e83e:	685b      	ldr	r3, [r3, #4]
 801e840:	4798      	blx	r3
 801e842:	2300      	movs	r3, #0
 801e844:	2001      	movs	r0, #1
 801e846:	8166      	strh	r6, [r4, #10]
 801e848:	8123      	strh	r3, [r4, #8]
 801e84a:	81a7      	strh	r7, [r4, #12]
 801e84c:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e850:	80e5      	strh	r5, [r4, #6]
 801e852:	73a0      	strb	r0, [r4, #14]
 801e854:	b004      	add	sp, #16
 801e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e85a:	bf00      	nop
 801e85c:	08021994 	.word	0x08021994

0801e860 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e860:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e862:	461e      	mov	r6, r3
 801e864:	1e4b      	subs	r3, r1, #1
 801e866:	b085      	sub	sp, #20
 801e868:	4604      	mov	r4, r0
 801e86a:	2b01      	cmp	r3, #1
 801e86c:	460d      	mov	r5, r1
 801e86e:	4617      	mov	r7, r2
 801e870:	d84b      	bhi.n	801e90a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801e872:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e876:	1cd3      	adds	r3, r2, #3
 801e878:	b29b      	uxth	r3, r3
 801e87a:	2b06      	cmp	r3, #6
 801e87c:	d916      	bls.n	801e8ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801e87e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801e920 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801e882:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e886:	f8cd c004 	str.w	ip, [sp, #4]
 801e88a:	f04f 0c00 	mov.w	ip, #0
 801e88e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e892:	6900      	ldr	r0, [r0, #16]
 801e894:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e898:	a901      	add	r1, sp, #4
 801e89a:	f88d c008 	strb.w	ip, [sp, #8]
 801e89e:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e8a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e8a6:	6803      	ldr	r3, [r0, #0]
 801e8a8:	689b      	ldr	r3, [r3, #8]
 801e8aa:	4798      	blx	r3
 801e8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8b0:	1cd3      	adds	r3, r2, #3
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	2b06      	cmp	r3, #6
 801e8b6:	d916      	bls.n	801e8e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e8b8:	f8df c064 	ldr.w	ip, [pc, #100]	; 801e920 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801e8bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e8c0:	f8cd c004 	str.w	ip, [sp, #4]
 801e8c4:	f04f 0c01 	mov.w	ip, #1
 801e8c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e8cc:	6920      	ldr	r0, [r4, #16]
 801e8ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e8d2:	a901      	add	r1, sp, #4
 801e8d4:	f88d c008 	strb.w	ip, [sp, #8]
 801e8d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e8dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e8e0:	6803      	ldr	r3, [r0, #0]
 801e8e2:	689b      	ldr	r3, [r3, #8]
 801e8e4:	4798      	blx	r3
 801e8e6:	4b0d      	ldr	r3, [pc, #52]	; (801e91c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801e8e8:	a901      	add	r1, sp, #4
 801e8ea:	6920      	ldr	r0, [r4, #16]
 801e8ec:	9301      	str	r3, [sp, #4]
 801e8ee:	2300      	movs	r3, #0
 801e8f0:	f88d 5008 	strb.w	r5, [sp, #8]
 801e8f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e8f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e8fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e900:	6803      	ldr	r3, [r0, #0]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	4798      	blx	r3
 801e906:	b005      	add	sp, #20
 801e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e90a:	2900      	cmp	r1, #0
 801e90c:	d1eb      	bne.n	801e8e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e90e:	80a2      	strh	r2, [r4, #4]
 801e910:	80c6      	strh	r6, [r0, #6]
 801e912:	60a1      	str	r1, [r4, #8]
 801e914:	81a1      	strh	r1, [r4, #12]
 801e916:	73a1      	strb	r1, [r4, #14]
 801e918:	e7e5      	b.n	801e8e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e91a:	bf00      	nop
 801e91c:	08021980 	.word	0x08021980
 801e920:	080219a8 	.word	0x080219a8

0801e924 <__aeabi_atexit>:
 801e924:	460b      	mov	r3, r1
 801e926:	4601      	mov	r1, r0
 801e928:	4618      	mov	r0, r3
 801e92a:	f000 b853 	b.w	801e9d4 <__cxa_atexit>

0801e92e <_ZdlPvj>:
 801e92e:	f000 b812 	b.w	801e956 <_ZdlPv>

0801e932 <__cxa_guard_acquire>:
 801e932:	6803      	ldr	r3, [r0, #0]
 801e934:	07db      	lsls	r3, r3, #31
 801e936:	d406      	bmi.n	801e946 <__cxa_guard_acquire+0x14>
 801e938:	7843      	ldrb	r3, [r0, #1]
 801e93a:	b103      	cbz	r3, 801e93e <__cxa_guard_acquire+0xc>
 801e93c:	deff      	udf	#255	; 0xff
 801e93e:	2301      	movs	r3, #1
 801e940:	7043      	strb	r3, [r0, #1]
 801e942:	4618      	mov	r0, r3
 801e944:	4770      	bx	lr
 801e946:	2000      	movs	r0, #0
 801e948:	4770      	bx	lr

0801e94a <__cxa_guard_release>:
 801e94a:	2301      	movs	r3, #1
 801e94c:	6003      	str	r3, [r0, #0]
 801e94e:	4770      	bx	lr

0801e950 <__cxa_pure_virtual>:
 801e950:	b508      	push	{r3, lr}
 801e952:	f000 f80f 	bl	801e974 <_ZSt9terminatev>

0801e956 <_ZdlPv>:
 801e956:	f000 b989 	b.w	801ec6c <free>

0801e95a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e95a:	b508      	push	{r3, lr}
 801e95c:	4780      	blx	r0
 801e95e:	f000 f80e 	bl	801e97e <abort>
	...

0801e964 <_ZSt13get_terminatev>:
 801e964:	4b02      	ldr	r3, [pc, #8]	; (801e970 <_ZSt13get_terminatev+0xc>)
 801e966:	6818      	ldr	r0, [r3, #0]
 801e968:	f3bf 8f5b 	dmb	ish
 801e96c:	4770      	bx	lr
 801e96e:	bf00      	nop
 801e970:	20000094 	.word	0x20000094

0801e974 <_ZSt9terminatev>:
 801e974:	b508      	push	{r3, lr}
 801e976:	f7ff fff5 	bl	801e964 <_ZSt13get_terminatev>
 801e97a:	f7ff ffee 	bl	801e95a <_ZN10__cxxabiv111__terminateEPFvvE>

0801e97e <abort>:
 801e97e:	b508      	push	{r3, lr}
 801e980:	2006      	movs	r0, #6
 801e982:	f000 fe01 	bl	801f588 <raise>
 801e986:	2001      	movs	r0, #1
 801e988:	f7e3 fa3a 	bl	8001e00 <_exit>

0801e98c <__assert_func>:
 801e98c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e98e:	4614      	mov	r4, r2
 801e990:	461a      	mov	r2, r3
 801e992:	4b09      	ldr	r3, [pc, #36]	; (801e9b8 <__assert_func+0x2c>)
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	4605      	mov	r5, r0
 801e998:	68d8      	ldr	r0, [r3, #12]
 801e99a:	b14c      	cbz	r4, 801e9b0 <__assert_func+0x24>
 801e99c:	4b07      	ldr	r3, [pc, #28]	; (801e9bc <__assert_func+0x30>)
 801e99e:	9100      	str	r1, [sp, #0]
 801e9a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e9a4:	4906      	ldr	r1, [pc, #24]	; (801e9c0 <__assert_func+0x34>)
 801e9a6:	462b      	mov	r3, r5
 801e9a8:	f000 f8fe 	bl	801eba8 <fiprintf>
 801e9ac:	f7ff ffe7 	bl	801e97e <abort>
 801e9b0:	4b04      	ldr	r3, [pc, #16]	; (801e9c4 <__assert_func+0x38>)
 801e9b2:	461c      	mov	r4, r3
 801e9b4:	e7f3      	b.n	801e99e <__assert_func+0x12>
 801e9b6:	bf00      	nop
 801e9b8:	20000098 	.word	0x20000098
 801e9bc:	08021bd0 	.word	0x08021bd0
 801e9c0:	08021bdd 	.word	0x08021bdd
 801e9c4:	08021c0b 	.word	0x08021c0b

0801e9c8 <atexit>:
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	4601      	mov	r1, r0
 801e9cc:	461a      	mov	r2, r3
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	f000 bf0c 	b.w	801f7ec <__register_exitproc>

0801e9d4 <__cxa_atexit>:
 801e9d4:	b510      	push	{r4, lr}
 801e9d6:	4c05      	ldr	r4, [pc, #20]	; (801e9ec <__cxa_atexit+0x18>)
 801e9d8:	4613      	mov	r3, r2
 801e9da:	b12c      	cbz	r4, 801e9e8 <__cxa_atexit+0x14>
 801e9dc:	460a      	mov	r2, r1
 801e9de:	4601      	mov	r1, r0
 801e9e0:	2002      	movs	r0, #2
 801e9e2:	f000 ff03 	bl	801f7ec <__register_exitproc>
 801e9e6:	bd10      	pop	{r4, pc}
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	e7fc      	b.n	801e9e6 <__cxa_atexit+0x12>
 801e9ec:	0801f7ed 	.word	0x0801f7ed

0801e9f0 <__errno>:
 801e9f0:	4b01      	ldr	r3, [pc, #4]	; (801e9f8 <__errno+0x8>)
 801e9f2:	6818      	ldr	r0, [r3, #0]
 801e9f4:	4770      	bx	lr
 801e9f6:	bf00      	nop
 801e9f8:	20000098 	.word	0x20000098

0801e9fc <std>:
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	b510      	push	{r4, lr}
 801ea00:	4604      	mov	r4, r0
 801ea02:	e9c0 3300 	strd	r3, r3, [r0]
 801ea06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ea0a:	6083      	str	r3, [r0, #8]
 801ea0c:	8181      	strh	r1, [r0, #12]
 801ea0e:	6643      	str	r3, [r0, #100]	; 0x64
 801ea10:	81c2      	strh	r2, [r0, #14]
 801ea12:	6183      	str	r3, [r0, #24]
 801ea14:	4619      	mov	r1, r3
 801ea16:	2208      	movs	r2, #8
 801ea18:	305c      	adds	r0, #92	; 0x5c
 801ea1a:	f000 f93d 	bl	801ec98 <memset>
 801ea1e:	4b05      	ldr	r3, [pc, #20]	; (801ea34 <std+0x38>)
 801ea20:	6263      	str	r3, [r4, #36]	; 0x24
 801ea22:	4b05      	ldr	r3, [pc, #20]	; (801ea38 <std+0x3c>)
 801ea24:	62a3      	str	r3, [r4, #40]	; 0x28
 801ea26:	4b05      	ldr	r3, [pc, #20]	; (801ea3c <std+0x40>)
 801ea28:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ea2a:	4b05      	ldr	r3, [pc, #20]	; (801ea40 <std+0x44>)
 801ea2c:	6224      	str	r4, [r4, #32]
 801ea2e:	6323      	str	r3, [r4, #48]	; 0x30
 801ea30:	bd10      	pop	{r4, pc}
 801ea32:	bf00      	nop
 801ea34:	0801f5c1 	.word	0x0801f5c1
 801ea38:	0801f5e3 	.word	0x0801f5e3
 801ea3c:	0801f61b 	.word	0x0801f61b
 801ea40:	0801f63f 	.word	0x0801f63f

0801ea44 <_cleanup_r>:
 801ea44:	4901      	ldr	r1, [pc, #4]	; (801ea4c <_cleanup_r+0x8>)
 801ea46:	f000 b8c1 	b.w	801ebcc <_fwalk_reent>
 801ea4a:	bf00      	nop
 801ea4c:	0801f9dd 	.word	0x0801f9dd

0801ea50 <__sfmoreglue>:
 801ea50:	b570      	push	{r4, r5, r6, lr}
 801ea52:	2268      	movs	r2, #104	; 0x68
 801ea54:	1e4d      	subs	r5, r1, #1
 801ea56:	4355      	muls	r5, r2
 801ea58:	460e      	mov	r6, r1
 801ea5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ea5e:	f000 f98f 	bl	801ed80 <_malloc_r>
 801ea62:	4604      	mov	r4, r0
 801ea64:	b140      	cbz	r0, 801ea78 <__sfmoreglue+0x28>
 801ea66:	2100      	movs	r1, #0
 801ea68:	e9c0 1600 	strd	r1, r6, [r0]
 801ea6c:	300c      	adds	r0, #12
 801ea6e:	60a0      	str	r0, [r4, #8]
 801ea70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ea74:	f000 f910 	bl	801ec98 <memset>
 801ea78:	4620      	mov	r0, r4
 801ea7a:	bd70      	pop	{r4, r5, r6, pc}

0801ea7c <__sfp_lock_acquire>:
 801ea7c:	4801      	ldr	r0, [pc, #4]	; (801ea84 <__sfp_lock_acquire+0x8>)
 801ea7e:	f000 b8ea 	b.w	801ec56 <__retarget_lock_acquire_recursive>
 801ea82:	bf00      	nop
 801ea84:	200119f6 	.word	0x200119f6

0801ea88 <__sfp_lock_release>:
 801ea88:	4801      	ldr	r0, [pc, #4]	; (801ea90 <__sfp_lock_release+0x8>)
 801ea8a:	f000 b8e6 	b.w	801ec5a <__retarget_lock_release_recursive>
 801ea8e:	bf00      	nop
 801ea90:	200119f6 	.word	0x200119f6

0801ea94 <__sinit_lock_acquire>:
 801ea94:	4801      	ldr	r0, [pc, #4]	; (801ea9c <__sinit_lock_acquire+0x8>)
 801ea96:	f000 b8de 	b.w	801ec56 <__retarget_lock_acquire_recursive>
 801ea9a:	bf00      	nop
 801ea9c:	200119f7 	.word	0x200119f7

0801eaa0 <__sinit_lock_release>:
 801eaa0:	4801      	ldr	r0, [pc, #4]	; (801eaa8 <__sinit_lock_release+0x8>)
 801eaa2:	f000 b8da 	b.w	801ec5a <__retarget_lock_release_recursive>
 801eaa6:	bf00      	nop
 801eaa8:	200119f7 	.word	0x200119f7

0801eaac <__sinit>:
 801eaac:	b510      	push	{r4, lr}
 801eaae:	4604      	mov	r4, r0
 801eab0:	f7ff fff0 	bl	801ea94 <__sinit_lock_acquire>
 801eab4:	69a3      	ldr	r3, [r4, #24]
 801eab6:	b11b      	cbz	r3, 801eac0 <__sinit+0x14>
 801eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eabc:	f7ff bff0 	b.w	801eaa0 <__sinit_lock_release>
 801eac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801eac4:	6523      	str	r3, [r4, #80]	; 0x50
 801eac6:	4b13      	ldr	r3, [pc, #76]	; (801eb14 <__sinit+0x68>)
 801eac8:	4a13      	ldr	r2, [pc, #76]	; (801eb18 <__sinit+0x6c>)
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	62a2      	str	r2, [r4, #40]	; 0x28
 801eace:	42a3      	cmp	r3, r4
 801ead0:	bf04      	itt	eq
 801ead2:	2301      	moveq	r3, #1
 801ead4:	61a3      	streq	r3, [r4, #24]
 801ead6:	4620      	mov	r0, r4
 801ead8:	f000 f820 	bl	801eb1c <__sfp>
 801eadc:	6060      	str	r0, [r4, #4]
 801eade:	4620      	mov	r0, r4
 801eae0:	f000 f81c 	bl	801eb1c <__sfp>
 801eae4:	60a0      	str	r0, [r4, #8]
 801eae6:	4620      	mov	r0, r4
 801eae8:	f000 f818 	bl	801eb1c <__sfp>
 801eaec:	2200      	movs	r2, #0
 801eaee:	60e0      	str	r0, [r4, #12]
 801eaf0:	2104      	movs	r1, #4
 801eaf2:	6860      	ldr	r0, [r4, #4]
 801eaf4:	f7ff ff82 	bl	801e9fc <std>
 801eaf8:	68a0      	ldr	r0, [r4, #8]
 801eafa:	2201      	movs	r2, #1
 801eafc:	2109      	movs	r1, #9
 801eafe:	f7ff ff7d 	bl	801e9fc <std>
 801eb02:	68e0      	ldr	r0, [r4, #12]
 801eb04:	2202      	movs	r2, #2
 801eb06:	2112      	movs	r1, #18
 801eb08:	f7ff ff78 	bl	801e9fc <std>
 801eb0c:	2301      	movs	r3, #1
 801eb0e:	61a3      	str	r3, [r4, #24]
 801eb10:	e7d2      	b.n	801eab8 <__sinit+0xc>
 801eb12:	bf00      	nop
 801eb14:	08021c6c 	.word	0x08021c6c
 801eb18:	0801ea45 	.word	0x0801ea45

0801eb1c <__sfp>:
 801eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb1e:	4607      	mov	r7, r0
 801eb20:	f7ff ffac 	bl	801ea7c <__sfp_lock_acquire>
 801eb24:	4b1e      	ldr	r3, [pc, #120]	; (801eba0 <__sfp+0x84>)
 801eb26:	681e      	ldr	r6, [r3, #0]
 801eb28:	69b3      	ldr	r3, [r6, #24]
 801eb2a:	b913      	cbnz	r3, 801eb32 <__sfp+0x16>
 801eb2c:	4630      	mov	r0, r6
 801eb2e:	f7ff ffbd 	bl	801eaac <__sinit>
 801eb32:	3648      	adds	r6, #72	; 0x48
 801eb34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801eb38:	3b01      	subs	r3, #1
 801eb3a:	d503      	bpl.n	801eb44 <__sfp+0x28>
 801eb3c:	6833      	ldr	r3, [r6, #0]
 801eb3e:	b30b      	cbz	r3, 801eb84 <__sfp+0x68>
 801eb40:	6836      	ldr	r6, [r6, #0]
 801eb42:	e7f7      	b.n	801eb34 <__sfp+0x18>
 801eb44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801eb48:	b9d5      	cbnz	r5, 801eb80 <__sfp+0x64>
 801eb4a:	4b16      	ldr	r3, [pc, #88]	; (801eba4 <__sfp+0x88>)
 801eb4c:	60e3      	str	r3, [r4, #12]
 801eb4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801eb52:	6665      	str	r5, [r4, #100]	; 0x64
 801eb54:	f000 f87e 	bl	801ec54 <__retarget_lock_init_recursive>
 801eb58:	f7ff ff96 	bl	801ea88 <__sfp_lock_release>
 801eb5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801eb60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801eb64:	6025      	str	r5, [r4, #0]
 801eb66:	61a5      	str	r5, [r4, #24]
 801eb68:	2208      	movs	r2, #8
 801eb6a:	4629      	mov	r1, r5
 801eb6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801eb70:	f000 f892 	bl	801ec98 <memset>
 801eb74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801eb78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801eb7c:	4620      	mov	r0, r4
 801eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb80:	3468      	adds	r4, #104	; 0x68
 801eb82:	e7d9      	b.n	801eb38 <__sfp+0x1c>
 801eb84:	2104      	movs	r1, #4
 801eb86:	4638      	mov	r0, r7
 801eb88:	f7ff ff62 	bl	801ea50 <__sfmoreglue>
 801eb8c:	4604      	mov	r4, r0
 801eb8e:	6030      	str	r0, [r6, #0]
 801eb90:	2800      	cmp	r0, #0
 801eb92:	d1d5      	bne.n	801eb40 <__sfp+0x24>
 801eb94:	f7ff ff78 	bl	801ea88 <__sfp_lock_release>
 801eb98:	230c      	movs	r3, #12
 801eb9a:	603b      	str	r3, [r7, #0]
 801eb9c:	e7ee      	b.n	801eb7c <__sfp+0x60>
 801eb9e:	bf00      	nop
 801eba0:	08021c6c 	.word	0x08021c6c
 801eba4:	ffff0001 	.word	0xffff0001

0801eba8 <fiprintf>:
 801eba8:	b40e      	push	{r1, r2, r3}
 801ebaa:	b503      	push	{r0, r1, lr}
 801ebac:	4601      	mov	r1, r0
 801ebae:	ab03      	add	r3, sp, #12
 801ebb0:	4805      	ldr	r0, [pc, #20]	; (801ebc8 <fiprintf+0x20>)
 801ebb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ebb6:	6800      	ldr	r0, [r0, #0]
 801ebb8:	9301      	str	r3, [sp, #4]
 801ebba:	f000 f97f 	bl	801eebc <_vfiprintf_r>
 801ebbe:	b002      	add	sp, #8
 801ebc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801ebc4:	b003      	add	sp, #12
 801ebc6:	4770      	bx	lr
 801ebc8:	20000098 	.word	0x20000098

0801ebcc <_fwalk_reent>:
 801ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebd0:	4606      	mov	r6, r0
 801ebd2:	4688      	mov	r8, r1
 801ebd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ebd8:	2700      	movs	r7, #0
 801ebda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ebde:	f1b9 0901 	subs.w	r9, r9, #1
 801ebe2:	d505      	bpl.n	801ebf0 <_fwalk_reent+0x24>
 801ebe4:	6824      	ldr	r4, [r4, #0]
 801ebe6:	2c00      	cmp	r4, #0
 801ebe8:	d1f7      	bne.n	801ebda <_fwalk_reent+0xe>
 801ebea:	4638      	mov	r0, r7
 801ebec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebf0:	89ab      	ldrh	r3, [r5, #12]
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d907      	bls.n	801ec06 <_fwalk_reent+0x3a>
 801ebf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	d003      	beq.n	801ec06 <_fwalk_reent+0x3a>
 801ebfe:	4629      	mov	r1, r5
 801ec00:	4630      	mov	r0, r6
 801ec02:	47c0      	blx	r8
 801ec04:	4307      	orrs	r7, r0
 801ec06:	3568      	adds	r5, #104	; 0x68
 801ec08:	e7e9      	b.n	801ebde <_fwalk_reent+0x12>
	...

0801ec0c <__libc_init_array>:
 801ec0c:	b570      	push	{r4, r5, r6, lr}
 801ec0e:	4d0d      	ldr	r5, [pc, #52]	; (801ec44 <__libc_init_array+0x38>)
 801ec10:	4c0d      	ldr	r4, [pc, #52]	; (801ec48 <__libc_init_array+0x3c>)
 801ec12:	1b64      	subs	r4, r4, r5
 801ec14:	10a4      	asrs	r4, r4, #2
 801ec16:	2600      	movs	r6, #0
 801ec18:	42a6      	cmp	r6, r4
 801ec1a:	d109      	bne.n	801ec30 <__libc_init_array+0x24>
 801ec1c:	4d0b      	ldr	r5, [pc, #44]	; (801ec4c <__libc_init_array+0x40>)
 801ec1e:	4c0c      	ldr	r4, [pc, #48]	; (801ec50 <__libc_init_array+0x44>)
 801ec20:	f000 ffd0 	bl	801fbc4 <_init>
 801ec24:	1b64      	subs	r4, r4, r5
 801ec26:	10a4      	asrs	r4, r4, #2
 801ec28:	2600      	movs	r6, #0
 801ec2a:	42a6      	cmp	r6, r4
 801ec2c:	d105      	bne.n	801ec3a <__libc_init_array+0x2e>
 801ec2e:	bd70      	pop	{r4, r5, r6, pc}
 801ec30:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec34:	4798      	blx	r3
 801ec36:	3601      	adds	r6, #1
 801ec38:	e7ee      	b.n	801ec18 <__libc_init_array+0xc>
 801ec3a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec3e:	4798      	blx	r3
 801ec40:	3601      	adds	r6, #1
 801ec42:	e7f2      	b.n	801ec2a <__libc_init_array+0x1e>
 801ec44:	0803b6ec 	.word	0x0803b6ec
 801ec48:	0803b6ec 	.word	0x0803b6ec
 801ec4c:	0803b6ec 	.word	0x0803b6ec
 801ec50:	0803b700 	.word	0x0803b700

0801ec54 <__retarget_lock_init_recursive>:
 801ec54:	4770      	bx	lr

0801ec56 <__retarget_lock_acquire_recursive>:
 801ec56:	4770      	bx	lr

0801ec58 <__retarget_lock_release>:
 801ec58:	4770      	bx	lr

0801ec5a <__retarget_lock_release_recursive>:
 801ec5a:	4770      	bx	lr

0801ec5c <malloc>:
 801ec5c:	4b02      	ldr	r3, [pc, #8]	; (801ec68 <malloc+0xc>)
 801ec5e:	4601      	mov	r1, r0
 801ec60:	6818      	ldr	r0, [r3, #0]
 801ec62:	f000 b88d 	b.w	801ed80 <_malloc_r>
 801ec66:	bf00      	nop
 801ec68:	20000098 	.word	0x20000098

0801ec6c <free>:
 801ec6c:	4b02      	ldr	r3, [pc, #8]	; (801ec78 <free+0xc>)
 801ec6e:	4601      	mov	r1, r0
 801ec70:	6818      	ldr	r0, [r3, #0]
 801ec72:	f000 b819 	b.w	801eca8 <_free_r>
 801ec76:	bf00      	nop
 801ec78:	20000098 	.word	0x20000098

0801ec7c <memcpy>:
 801ec7c:	440a      	add	r2, r1
 801ec7e:	4291      	cmp	r1, r2
 801ec80:	f100 33ff 	add.w	r3, r0, #4294967295
 801ec84:	d100      	bne.n	801ec88 <memcpy+0xc>
 801ec86:	4770      	bx	lr
 801ec88:	b510      	push	{r4, lr}
 801ec8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec92:	4291      	cmp	r1, r2
 801ec94:	d1f9      	bne.n	801ec8a <memcpy+0xe>
 801ec96:	bd10      	pop	{r4, pc}

0801ec98 <memset>:
 801ec98:	4402      	add	r2, r0
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	4293      	cmp	r3, r2
 801ec9e:	d100      	bne.n	801eca2 <memset+0xa>
 801eca0:	4770      	bx	lr
 801eca2:	f803 1b01 	strb.w	r1, [r3], #1
 801eca6:	e7f9      	b.n	801ec9c <memset+0x4>

0801eca8 <_free_r>:
 801eca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ecaa:	2900      	cmp	r1, #0
 801ecac:	d044      	beq.n	801ed38 <_free_r+0x90>
 801ecae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ecb2:	9001      	str	r0, [sp, #4]
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	f1a1 0404 	sub.w	r4, r1, #4
 801ecba:	bfb8      	it	lt
 801ecbc:	18e4      	addlt	r4, r4, r3
 801ecbe:	f000 ff41 	bl	801fb44 <__malloc_lock>
 801ecc2:	4a1e      	ldr	r2, [pc, #120]	; (801ed3c <_free_r+0x94>)
 801ecc4:	9801      	ldr	r0, [sp, #4]
 801ecc6:	6813      	ldr	r3, [r2, #0]
 801ecc8:	b933      	cbnz	r3, 801ecd8 <_free_r+0x30>
 801ecca:	6063      	str	r3, [r4, #4]
 801eccc:	6014      	str	r4, [r2, #0]
 801ecce:	b003      	add	sp, #12
 801ecd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ecd4:	f000 bf3c 	b.w	801fb50 <__malloc_unlock>
 801ecd8:	42a3      	cmp	r3, r4
 801ecda:	d908      	bls.n	801ecee <_free_r+0x46>
 801ecdc:	6825      	ldr	r5, [r4, #0]
 801ecde:	1961      	adds	r1, r4, r5
 801ece0:	428b      	cmp	r3, r1
 801ece2:	bf01      	itttt	eq
 801ece4:	6819      	ldreq	r1, [r3, #0]
 801ece6:	685b      	ldreq	r3, [r3, #4]
 801ece8:	1949      	addeq	r1, r1, r5
 801ecea:	6021      	streq	r1, [r4, #0]
 801ecec:	e7ed      	b.n	801ecca <_free_r+0x22>
 801ecee:	461a      	mov	r2, r3
 801ecf0:	685b      	ldr	r3, [r3, #4]
 801ecf2:	b10b      	cbz	r3, 801ecf8 <_free_r+0x50>
 801ecf4:	42a3      	cmp	r3, r4
 801ecf6:	d9fa      	bls.n	801ecee <_free_r+0x46>
 801ecf8:	6811      	ldr	r1, [r2, #0]
 801ecfa:	1855      	adds	r5, r2, r1
 801ecfc:	42a5      	cmp	r5, r4
 801ecfe:	d10b      	bne.n	801ed18 <_free_r+0x70>
 801ed00:	6824      	ldr	r4, [r4, #0]
 801ed02:	4421      	add	r1, r4
 801ed04:	1854      	adds	r4, r2, r1
 801ed06:	42a3      	cmp	r3, r4
 801ed08:	6011      	str	r1, [r2, #0]
 801ed0a:	d1e0      	bne.n	801ecce <_free_r+0x26>
 801ed0c:	681c      	ldr	r4, [r3, #0]
 801ed0e:	685b      	ldr	r3, [r3, #4]
 801ed10:	6053      	str	r3, [r2, #4]
 801ed12:	4421      	add	r1, r4
 801ed14:	6011      	str	r1, [r2, #0]
 801ed16:	e7da      	b.n	801ecce <_free_r+0x26>
 801ed18:	d902      	bls.n	801ed20 <_free_r+0x78>
 801ed1a:	230c      	movs	r3, #12
 801ed1c:	6003      	str	r3, [r0, #0]
 801ed1e:	e7d6      	b.n	801ecce <_free_r+0x26>
 801ed20:	6825      	ldr	r5, [r4, #0]
 801ed22:	1961      	adds	r1, r4, r5
 801ed24:	428b      	cmp	r3, r1
 801ed26:	bf04      	itt	eq
 801ed28:	6819      	ldreq	r1, [r3, #0]
 801ed2a:	685b      	ldreq	r3, [r3, #4]
 801ed2c:	6063      	str	r3, [r4, #4]
 801ed2e:	bf04      	itt	eq
 801ed30:	1949      	addeq	r1, r1, r5
 801ed32:	6021      	streq	r1, [r4, #0]
 801ed34:	6054      	str	r4, [r2, #4]
 801ed36:	e7ca      	b.n	801ecce <_free_r+0x26>
 801ed38:	b003      	add	sp, #12
 801ed3a:	bd30      	pop	{r4, r5, pc}
 801ed3c:	200119f8 	.word	0x200119f8

0801ed40 <sbrk_aligned>:
 801ed40:	b570      	push	{r4, r5, r6, lr}
 801ed42:	4e0e      	ldr	r6, [pc, #56]	; (801ed7c <sbrk_aligned+0x3c>)
 801ed44:	460c      	mov	r4, r1
 801ed46:	6831      	ldr	r1, [r6, #0]
 801ed48:	4605      	mov	r5, r0
 801ed4a:	b911      	cbnz	r1, 801ed52 <sbrk_aligned+0x12>
 801ed4c:	f000 fbe4 	bl	801f518 <_sbrk_r>
 801ed50:	6030      	str	r0, [r6, #0]
 801ed52:	4621      	mov	r1, r4
 801ed54:	4628      	mov	r0, r5
 801ed56:	f000 fbdf 	bl	801f518 <_sbrk_r>
 801ed5a:	1c43      	adds	r3, r0, #1
 801ed5c:	d00a      	beq.n	801ed74 <sbrk_aligned+0x34>
 801ed5e:	1cc4      	adds	r4, r0, #3
 801ed60:	f024 0403 	bic.w	r4, r4, #3
 801ed64:	42a0      	cmp	r0, r4
 801ed66:	d007      	beq.n	801ed78 <sbrk_aligned+0x38>
 801ed68:	1a21      	subs	r1, r4, r0
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	f000 fbd4 	bl	801f518 <_sbrk_r>
 801ed70:	3001      	adds	r0, #1
 801ed72:	d101      	bne.n	801ed78 <sbrk_aligned+0x38>
 801ed74:	f04f 34ff 	mov.w	r4, #4294967295
 801ed78:	4620      	mov	r0, r4
 801ed7a:	bd70      	pop	{r4, r5, r6, pc}
 801ed7c:	200119fc 	.word	0x200119fc

0801ed80 <_malloc_r>:
 801ed80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed84:	1ccd      	adds	r5, r1, #3
 801ed86:	f025 0503 	bic.w	r5, r5, #3
 801ed8a:	3508      	adds	r5, #8
 801ed8c:	2d0c      	cmp	r5, #12
 801ed8e:	bf38      	it	cc
 801ed90:	250c      	movcc	r5, #12
 801ed92:	2d00      	cmp	r5, #0
 801ed94:	4607      	mov	r7, r0
 801ed96:	db01      	blt.n	801ed9c <_malloc_r+0x1c>
 801ed98:	42a9      	cmp	r1, r5
 801ed9a:	d905      	bls.n	801eda8 <_malloc_r+0x28>
 801ed9c:	230c      	movs	r3, #12
 801ed9e:	603b      	str	r3, [r7, #0]
 801eda0:	2600      	movs	r6, #0
 801eda2:	4630      	mov	r0, r6
 801eda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eda8:	4e2e      	ldr	r6, [pc, #184]	; (801ee64 <_malloc_r+0xe4>)
 801edaa:	f000 fecb 	bl	801fb44 <__malloc_lock>
 801edae:	6833      	ldr	r3, [r6, #0]
 801edb0:	461c      	mov	r4, r3
 801edb2:	bb34      	cbnz	r4, 801ee02 <_malloc_r+0x82>
 801edb4:	4629      	mov	r1, r5
 801edb6:	4638      	mov	r0, r7
 801edb8:	f7ff ffc2 	bl	801ed40 <sbrk_aligned>
 801edbc:	1c43      	adds	r3, r0, #1
 801edbe:	4604      	mov	r4, r0
 801edc0:	d14d      	bne.n	801ee5e <_malloc_r+0xde>
 801edc2:	6834      	ldr	r4, [r6, #0]
 801edc4:	4626      	mov	r6, r4
 801edc6:	2e00      	cmp	r6, #0
 801edc8:	d140      	bne.n	801ee4c <_malloc_r+0xcc>
 801edca:	6823      	ldr	r3, [r4, #0]
 801edcc:	4631      	mov	r1, r6
 801edce:	4638      	mov	r0, r7
 801edd0:	eb04 0803 	add.w	r8, r4, r3
 801edd4:	f000 fba0 	bl	801f518 <_sbrk_r>
 801edd8:	4580      	cmp	r8, r0
 801edda:	d13a      	bne.n	801ee52 <_malloc_r+0xd2>
 801eddc:	6821      	ldr	r1, [r4, #0]
 801edde:	3503      	adds	r5, #3
 801ede0:	1a6d      	subs	r5, r5, r1
 801ede2:	f025 0503 	bic.w	r5, r5, #3
 801ede6:	3508      	adds	r5, #8
 801ede8:	2d0c      	cmp	r5, #12
 801edea:	bf38      	it	cc
 801edec:	250c      	movcc	r5, #12
 801edee:	4629      	mov	r1, r5
 801edf0:	4638      	mov	r0, r7
 801edf2:	f7ff ffa5 	bl	801ed40 <sbrk_aligned>
 801edf6:	3001      	adds	r0, #1
 801edf8:	d02b      	beq.n	801ee52 <_malloc_r+0xd2>
 801edfa:	6823      	ldr	r3, [r4, #0]
 801edfc:	442b      	add	r3, r5
 801edfe:	6023      	str	r3, [r4, #0]
 801ee00:	e00e      	b.n	801ee20 <_malloc_r+0xa0>
 801ee02:	6822      	ldr	r2, [r4, #0]
 801ee04:	1b52      	subs	r2, r2, r5
 801ee06:	d41e      	bmi.n	801ee46 <_malloc_r+0xc6>
 801ee08:	2a0b      	cmp	r2, #11
 801ee0a:	d916      	bls.n	801ee3a <_malloc_r+0xba>
 801ee0c:	1961      	adds	r1, r4, r5
 801ee0e:	42a3      	cmp	r3, r4
 801ee10:	6025      	str	r5, [r4, #0]
 801ee12:	bf18      	it	ne
 801ee14:	6059      	strne	r1, [r3, #4]
 801ee16:	6863      	ldr	r3, [r4, #4]
 801ee18:	bf08      	it	eq
 801ee1a:	6031      	streq	r1, [r6, #0]
 801ee1c:	5162      	str	r2, [r4, r5]
 801ee1e:	604b      	str	r3, [r1, #4]
 801ee20:	4638      	mov	r0, r7
 801ee22:	f104 060b 	add.w	r6, r4, #11
 801ee26:	f000 fe93 	bl	801fb50 <__malloc_unlock>
 801ee2a:	f026 0607 	bic.w	r6, r6, #7
 801ee2e:	1d23      	adds	r3, r4, #4
 801ee30:	1af2      	subs	r2, r6, r3
 801ee32:	d0b6      	beq.n	801eda2 <_malloc_r+0x22>
 801ee34:	1b9b      	subs	r3, r3, r6
 801ee36:	50a3      	str	r3, [r4, r2]
 801ee38:	e7b3      	b.n	801eda2 <_malloc_r+0x22>
 801ee3a:	6862      	ldr	r2, [r4, #4]
 801ee3c:	42a3      	cmp	r3, r4
 801ee3e:	bf0c      	ite	eq
 801ee40:	6032      	streq	r2, [r6, #0]
 801ee42:	605a      	strne	r2, [r3, #4]
 801ee44:	e7ec      	b.n	801ee20 <_malloc_r+0xa0>
 801ee46:	4623      	mov	r3, r4
 801ee48:	6864      	ldr	r4, [r4, #4]
 801ee4a:	e7b2      	b.n	801edb2 <_malloc_r+0x32>
 801ee4c:	4634      	mov	r4, r6
 801ee4e:	6876      	ldr	r6, [r6, #4]
 801ee50:	e7b9      	b.n	801edc6 <_malloc_r+0x46>
 801ee52:	230c      	movs	r3, #12
 801ee54:	603b      	str	r3, [r7, #0]
 801ee56:	4638      	mov	r0, r7
 801ee58:	f000 fe7a 	bl	801fb50 <__malloc_unlock>
 801ee5c:	e7a1      	b.n	801eda2 <_malloc_r+0x22>
 801ee5e:	6025      	str	r5, [r4, #0]
 801ee60:	e7de      	b.n	801ee20 <_malloc_r+0xa0>
 801ee62:	bf00      	nop
 801ee64:	200119f8 	.word	0x200119f8

0801ee68 <__sfputc_r>:
 801ee68:	6893      	ldr	r3, [r2, #8]
 801ee6a:	3b01      	subs	r3, #1
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	b410      	push	{r4}
 801ee70:	6093      	str	r3, [r2, #8]
 801ee72:	da08      	bge.n	801ee86 <__sfputc_r+0x1e>
 801ee74:	6994      	ldr	r4, [r2, #24]
 801ee76:	42a3      	cmp	r3, r4
 801ee78:	db01      	blt.n	801ee7e <__sfputc_r+0x16>
 801ee7a:	290a      	cmp	r1, #10
 801ee7c:	d103      	bne.n	801ee86 <__sfputc_r+0x1e>
 801ee7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee82:	f000 bbe1 	b.w	801f648 <__swbuf_r>
 801ee86:	6813      	ldr	r3, [r2, #0]
 801ee88:	1c58      	adds	r0, r3, #1
 801ee8a:	6010      	str	r0, [r2, #0]
 801ee8c:	7019      	strb	r1, [r3, #0]
 801ee8e:	4608      	mov	r0, r1
 801ee90:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee94:	4770      	bx	lr

0801ee96 <__sfputs_r>:
 801ee96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee98:	4606      	mov	r6, r0
 801ee9a:	460f      	mov	r7, r1
 801ee9c:	4614      	mov	r4, r2
 801ee9e:	18d5      	adds	r5, r2, r3
 801eea0:	42ac      	cmp	r4, r5
 801eea2:	d101      	bne.n	801eea8 <__sfputs_r+0x12>
 801eea4:	2000      	movs	r0, #0
 801eea6:	e007      	b.n	801eeb8 <__sfputs_r+0x22>
 801eea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eeac:	463a      	mov	r2, r7
 801eeae:	4630      	mov	r0, r6
 801eeb0:	f7ff ffda 	bl	801ee68 <__sfputc_r>
 801eeb4:	1c43      	adds	r3, r0, #1
 801eeb6:	d1f3      	bne.n	801eea0 <__sfputs_r+0xa>
 801eeb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eebc <_vfiprintf_r>:
 801eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec0:	460d      	mov	r5, r1
 801eec2:	b09d      	sub	sp, #116	; 0x74
 801eec4:	4614      	mov	r4, r2
 801eec6:	4698      	mov	r8, r3
 801eec8:	4606      	mov	r6, r0
 801eeca:	b118      	cbz	r0, 801eed4 <_vfiprintf_r+0x18>
 801eecc:	6983      	ldr	r3, [r0, #24]
 801eece:	b90b      	cbnz	r3, 801eed4 <_vfiprintf_r+0x18>
 801eed0:	f7ff fdec 	bl	801eaac <__sinit>
 801eed4:	4b89      	ldr	r3, [pc, #548]	; (801f0fc <_vfiprintf_r+0x240>)
 801eed6:	429d      	cmp	r5, r3
 801eed8:	d11b      	bne.n	801ef12 <_vfiprintf_r+0x56>
 801eeda:	6875      	ldr	r5, [r6, #4]
 801eedc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eede:	07d9      	lsls	r1, r3, #31
 801eee0:	d405      	bmi.n	801eeee <_vfiprintf_r+0x32>
 801eee2:	89ab      	ldrh	r3, [r5, #12]
 801eee4:	059a      	lsls	r2, r3, #22
 801eee6:	d402      	bmi.n	801eeee <_vfiprintf_r+0x32>
 801eee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eeea:	f7ff feb4 	bl	801ec56 <__retarget_lock_acquire_recursive>
 801eeee:	89ab      	ldrh	r3, [r5, #12]
 801eef0:	071b      	lsls	r3, r3, #28
 801eef2:	d501      	bpl.n	801eef8 <_vfiprintf_r+0x3c>
 801eef4:	692b      	ldr	r3, [r5, #16]
 801eef6:	b9eb      	cbnz	r3, 801ef34 <_vfiprintf_r+0x78>
 801eef8:	4629      	mov	r1, r5
 801eefa:	4630      	mov	r0, r6
 801eefc:	f000 fc08 	bl	801f710 <__swsetup_r>
 801ef00:	b1c0      	cbz	r0, 801ef34 <_vfiprintf_r+0x78>
 801ef02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef04:	07dc      	lsls	r4, r3, #31
 801ef06:	d50e      	bpl.n	801ef26 <_vfiprintf_r+0x6a>
 801ef08:	f04f 30ff 	mov.w	r0, #4294967295
 801ef0c:	b01d      	add	sp, #116	; 0x74
 801ef0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef12:	4b7b      	ldr	r3, [pc, #492]	; (801f100 <_vfiprintf_r+0x244>)
 801ef14:	429d      	cmp	r5, r3
 801ef16:	d101      	bne.n	801ef1c <_vfiprintf_r+0x60>
 801ef18:	68b5      	ldr	r5, [r6, #8]
 801ef1a:	e7df      	b.n	801eedc <_vfiprintf_r+0x20>
 801ef1c:	4b79      	ldr	r3, [pc, #484]	; (801f104 <_vfiprintf_r+0x248>)
 801ef1e:	429d      	cmp	r5, r3
 801ef20:	bf08      	it	eq
 801ef22:	68f5      	ldreq	r5, [r6, #12]
 801ef24:	e7da      	b.n	801eedc <_vfiprintf_r+0x20>
 801ef26:	89ab      	ldrh	r3, [r5, #12]
 801ef28:	0598      	lsls	r0, r3, #22
 801ef2a:	d4ed      	bmi.n	801ef08 <_vfiprintf_r+0x4c>
 801ef2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef2e:	f7ff fe94 	bl	801ec5a <__retarget_lock_release_recursive>
 801ef32:	e7e9      	b.n	801ef08 <_vfiprintf_r+0x4c>
 801ef34:	2300      	movs	r3, #0
 801ef36:	9309      	str	r3, [sp, #36]	; 0x24
 801ef38:	2320      	movs	r3, #32
 801ef3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef3e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef42:	2330      	movs	r3, #48	; 0x30
 801ef44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f108 <_vfiprintf_r+0x24c>
 801ef48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef4c:	f04f 0901 	mov.w	r9, #1
 801ef50:	4623      	mov	r3, r4
 801ef52:	469a      	mov	sl, r3
 801ef54:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef58:	b10a      	cbz	r2, 801ef5e <_vfiprintf_r+0xa2>
 801ef5a:	2a25      	cmp	r2, #37	; 0x25
 801ef5c:	d1f9      	bne.n	801ef52 <_vfiprintf_r+0x96>
 801ef5e:	ebba 0b04 	subs.w	fp, sl, r4
 801ef62:	d00b      	beq.n	801ef7c <_vfiprintf_r+0xc0>
 801ef64:	465b      	mov	r3, fp
 801ef66:	4622      	mov	r2, r4
 801ef68:	4629      	mov	r1, r5
 801ef6a:	4630      	mov	r0, r6
 801ef6c:	f7ff ff93 	bl	801ee96 <__sfputs_r>
 801ef70:	3001      	adds	r0, #1
 801ef72:	f000 80aa 	beq.w	801f0ca <_vfiprintf_r+0x20e>
 801ef76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef78:	445a      	add	r2, fp
 801ef7a:	9209      	str	r2, [sp, #36]	; 0x24
 801ef7c:	f89a 3000 	ldrb.w	r3, [sl]
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	f000 80a2 	beq.w	801f0ca <_vfiprintf_r+0x20e>
 801ef86:	2300      	movs	r3, #0
 801ef88:	f04f 32ff 	mov.w	r2, #4294967295
 801ef8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef90:	f10a 0a01 	add.w	sl, sl, #1
 801ef94:	9304      	str	r3, [sp, #16]
 801ef96:	9307      	str	r3, [sp, #28]
 801ef98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef9c:	931a      	str	r3, [sp, #104]	; 0x68
 801ef9e:	4654      	mov	r4, sl
 801efa0:	2205      	movs	r2, #5
 801efa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efa6:	4858      	ldr	r0, [pc, #352]	; (801f108 <_vfiprintf_r+0x24c>)
 801efa8:	f7e1 f932 	bl	8000210 <memchr>
 801efac:	9a04      	ldr	r2, [sp, #16]
 801efae:	b9d8      	cbnz	r0, 801efe8 <_vfiprintf_r+0x12c>
 801efb0:	06d1      	lsls	r1, r2, #27
 801efb2:	bf44      	itt	mi
 801efb4:	2320      	movmi	r3, #32
 801efb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efba:	0713      	lsls	r3, r2, #28
 801efbc:	bf44      	itt	mi
 801efbe:	232b      	movmi	r3, #43	; 0x2b
 801efc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efc4:	f89a 3000 	ldrb.w	r3, [sl]
 801efc8:	2b2a      	cmp	r3, #42	; 0x2a
 801efca:	d015      	beq.n	801eff8 <_vfiprintf_r+0x13c>
 801efcc:	9a07      	ldr	r2, [sp, #28]
 801efce:	4654      	mov	r4, sl
 801efd0:	2000      	movs	r0, #0
 801efd2:	f04f 0c0a 	mov.w	ip, #10
 801efd6:	4621      	mov	r1, r4
 801efd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801efdc:	3b30      	subs	r3, #48	; 0x30
 801efde:	2b09      	cmp	r3, #9
 801efe0:	d94e      	bls.n	801f080 <_vfiprintf_r+0x1c4>
 801efe2:	b1b0      	cbz	r0, 801f012 <_vfiprintf_r+0x156>
 801efe4:	9207      	str	r2, [sp, #28]
 801efe6:	e014      	b.n	801f012 <_vfiprintf_r+0x156>
 801efe8:	eba0 0308 	sub.w	r3, r0, r8
 801efec:	fa09 f303 	lsl.w	r3, r9, r3
 801eff0:	4313      	orrs	r3, r2
 801eff2:	9304      	str	r3, [sp, #16]
 801eff4:	46a2      	mov	sl, r4
 801eff6:	e7d2      	b.n	801ef9e <_vfiprintf_r+0xe2>
 801eff8:	9b03      	ldr	r3, [sp, #12]
 801effa:	1d19      	adds	r1, r3, #4
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	9103      	str	r1, [sp, #12]
 801f000:	2b00      	cmp	r3, #0
 801f002:	bfbb      	ittet	lt
 801f004:	425b      	neglt	r3, r3
 801f006:	f042 0202 	orrlt.w	r2, r2, #2
 801f00a:	9307      	strge	r3, [sp, #28]
 801f00c:	9307      	strlt	r3, [sp, #28]
 801f00e:	bfb8      	it	lt
 801f010:	9204      	strlt	r2, [sp, #16]
 801f012:	7823      	ldrb	r3, [r4, #0]
 801f014:	2b2e      	cmp	r3, #46	; 0x2e
 801f016:	d10c      	bne.n	801f032 <_vfiprintf_r+0x176>
 801f018:	7863      	ldrb	r3, [r4, #1]
 801f01a:	2b2a      	cmp	r3, #42	; 0x2a
 801f01c:	d135      	bne.n	801f08a <_vfiprintf_r+0x1ce>
 801f01e:	9b03      	ldr	r3, [sp, #12]
 801f020:	1d1a      	adds	r2, r3, #4
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	9203      	str	r2, [sp, #12]
 801f026:	2b00      	cmp	r3, #0
 801f028:	bfb8      	it	lt
 801f02a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f02e:	3402      	adds	r4, #2
 801f030:	9305      	str	r3, [sp, #20]
 801f032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f118 <_vfiprintf_r+0x25c>
 801f036:	7821      	ldrb	r1, [r4, #0]
 801f038:	2203      	movs	r2, #3
 801f03a:	4650      	mov	r0, sl
 801f03c:	f7e1 f8e8 	bl	8000210 <memchr>
 801f040:	b140      	cbz	r0, 801f054 <_vfiprintf_r+0x198>
 801f042:	2340      	movs	r3, #64	; 0x40
 801f044:	eba0 000a 	sub.w	r0, r0, sl
 801f048:	fa03 f000 	lsl.w	r0, r3, r0
 801f04c:	9b04      	ldr	r3, [sp, #16]
 801f04e:	4303      	orrs	r3, r0
 801f050:	3401      	adds	r4, #1
 801f052:	9304      	str	r3, [sp, #16]
 801f054:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f058:	482c      	ldr	r0, [pc, #176]	; (801f10c <_vfiprintf_r+0x250>)
 801f05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f05e:	2206      	movs	r2, #6
 801f060:	f7e1 f8d6 	bl	8000210 <memchr>
 801f064:	2800      	cmp	r0, #0
 801f066:	d03f      	beq.n	801f0e8 <_vfiprintf_r+0x22c>
 801f068:	4b29      	ldr	r3, [pc, #164]	; (801f110 <_vfiprintf_r+0x254>)
 801f06a:	bb1b      	cbnz	r3, 801f0b4 <_vfiprintf_r+0x1f8>
 801f06c:	9b03      	ldr	r3, [sp, #12]
 801f06e:	3307      	adds	r3, #7
 801f070:	f023 0307 	bic.w	r3, r3, #7
 801f074:	3308      	adds	r3, #8
 801f076:	9303      	str	r3, [sp, #12]
 801f078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f07a:	443b      	add	r3, r7
 801f07c:	9309      	str	r3, [sp, #36]	; 0x24
 801f07e:	e767      	b.n	801ef50 <_vfiprintf_r+0x94>
 801f080:	fb0c 3202 	mla	r2, ip, r2, r3
 801f084:	460c      	mov	r4, r1
 801f086:	2001      	movs	r0, #1
 801f088:	e7a5      	b.n	801efd6 <_vfiprintf_r+0x11a>
 801f08a:	2300      	movs	r3, #0
 801f08c:	3401      	adds	r4, #1
 801f08e:	9305      	str	r3, [sp, #20]
 801f090:	4619      	mov	r1, r3
 801f092:	f04f 0c0a 	mov.w	ip, #10
 801f096:	4620      	mov	r0, r4
 801f098:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f09c:	3a30      	subs	r2, #48	; 0x30
 801f09e:	2a09      	cmp	r2, #9
 801f0a0:	d903      	bls.n	801f0aa <_vfiprintf_r+0x1ee>
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d0c5      	beq.n	801f032 <_vfiprintf_r+0x176>
 801f0a6:	9105      	str	r1, [sp, #20]
 801f0a8:	e7c3      	b.n	801f032 <_vfiprintf_r+0x176>
 801f0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0ae:	4604      	mov	r4, r0
 801f0b0:	2301      	movs	r3, #1
 801f0b2:	e7f0      	b.n	801f096 <_vfiprintf_r+0x1da>
 801f0b4:	ab03      	add	r3, sp, #12
 801f0b6:	9300      	str	r3, [sp, #0]
 801f0b8:	462a      	mov	r2, r5
 801f0ba:	4b16      	ldr	r3, [pc, #88]	; (801f114 <_vfiprintf_r+0x258>)
 801f0bc:	a904      	add	r1, sp, #16
 801f0be:	4630      	mov	r0, r6
 801f0c0:	f3af 8000 	nop.w
 801f0c4:	4607      	mov	r7, r0
 801f0c6:	1c78      	adds	r0, r7, #1
 801f0c8:	d1d6      	bne.n	801f078 <_vfiprintf_r+0x1bc>
 801f0ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f0cc:	07d9      	lsls	r1, r3, #31
 801f0ce:	d405      	bmi.n	801f0dc <_vfiprintf_r+0x220>
 801f0d0:	89ab      	ldrh	r3, [r5, #12]
 801f0d2:	059a      	lsls	r2, r3, #22
 801f0d4:	d402      	bmi.n	801f0dc <_vfiprintf_r+0x220>
 801f0d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f0d8:	f7ff fdbf 	bl	801ec5a <__retarget_lock_release_recursive>
 801f0dc:	89ab      	ldrh	r3, [r5, #12]
 801f0de:	065b      	lsls	r3, r3, #25
 801f0e0:	f53f af12 	bmi.w	801ef08 <_vfiprintf_r+0x4c>
 801f0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f0e6:	e711      	b.n	801ef0c <_vfiprintf_r+0x50>
 801f0e8:	ab03      	add	r3, sp, #12
 801f0ea:	9300      	str	r3, [sp, #0]
 801f0ec:	462a      	mov	r2, r5
 801f0ee:	4b09      	ldr	r3, [pc, #36]	; (801f114 <_vfiprintf_r+0x258>)
 801f0f0:	a904      	add	r1, sp, #16
 801f0f2:	4630      	mov	r0, r6
 801f0f4:	f000 f880 	bl	801f1f8 <_printf_i>
 801f0f8:	e7e4      	b.n	801f0c4 <_vfiprintf_r+0x208>
 801f0fa:	bf00      	nop
 801f0fc:	08021c2c 	.word	0x08021c2c
 801f100:	08021c4c 	.word	0x08021c4c
 801f104:	08021c0c 	.word	0x08021c0c
 801f108:	08021c70 	.word	0x08021c70
 801f10c:	08021c7a 	.word	0x08021c7a
 801f110:	00000000 	.word	0x00000000
 801f114:	0801ee97 	.word	0x0801ee97
 801f118:	08021c76 	.word	0x08021c76

0801f11c <_printf_common>:
 801f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f120:	4616      	mov	r6, r2
 801f122:	4699      	mov	r9, r3
 801f124:	688a      	ldr	r2, [r1, #8]
 801f126:	690b      	ldr	r3, [r1, #16]
 801f128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f12c:	4293      	cmp	r3, r2
 801f12e:	bfb8      	it	lt
 801f130:	4613      	movlt	r3, r2
 801f132:	6033      	str	r3, [r6, #0]
 801f134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f138:	4607      	mov	r7, r0
 801f13a:	460c      	mov	r4, r1
 801f13c:	b10a      	cbz	r2, 801f142 <_printf_common+0x26>
 801f13e:	3301      	adds	r3, #1
 801f140:	6033      	str	r3, [r6, #0]
 801f142:	6823      	ldr	r3, [r4, #0]
 801f144:	0699      	lsls	r1, r3, #26
 801f146:	bf42      	ittt	mi
 801f148:	6833      	ldrmi	r3, [r6, #0]
 801f14a:	3302      	addmi	r3, #2
 801f14c:	6033      	strmi	r3, [r6, #0]
 801f14e:	6825      	ldr	r5, [r4, #0]
 801f150:	f015 0506 	ands.w	r5, r5, #6
 801f154:	d106      	bne.n	801f164 <_printf_common+0x48>
 801f156:	f104 0a19 	add.w	sl, r4, #25
 801f15a:	68e3      	ldr	r3, [r4, #12]
 801f15c:	6832      	ldr	r2, [r6, #0]
 801f15e:	1a9b      	subs	r3, r3, r2
 801f160:	42ab      	cmp	r3, r5
 801f162:	dc26      	bgt.n	801f1b2 <_printf_common+0x96>
 801f164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f168:	1e13      	subs	r3, r2, #0
 801f16a:	6822      	ldr	r2, [r4, #0]
 801f16c:	bf18      	it	ne
 801f16e:	2301      	movne	r3, #1
 801f170:	0692      	lsls	r2, r2, #26
 801f172:	d42b      	bmi.n	801f1cc <_printf_common+0xb0>
 801f174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f178:	4649      	mov	r1, r9
 801f17a:	4638      	mov	r0, r7
 801f17c:	47c0      	blx	r8
 801f17e:	3001      	adds	r0, #1
 801f180:	d01e      	beq.n	801f1c0 <_printf_common+0xa4>
 801f182:	6823      	ldr	r3, [r4, #0]
 801f184:	68e5      	ldr	r5, [r4, #12]
 801f186:	6832      	ldr	r2, [r6, #0]
 801f188:	f003 0306 	and.w	r3, r3, #6
 801f18c:	2b04      	cmp	r3, #4
 801f18e:	bf08      	it	eq
 801f190:	1aad      	subeq	r5, r5, r2
 801f192:	68a3      	ldr	r3, [r4, #8]
 801f194:	6922      	ldr	r2, [r4, #16]
 801f196:	bf0c      	ite	eq
 801f198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f19c:	2500      	movne	r5, #0
 801f19e:	4293      	cmp	r3, r2
 801f1a0:	bfc4      	itt	gt
 801f1a2:	1a9b      	subgt	r3, r3, r2
 801f1a4:	18ed      	addgt	r5, r5, r3
 801f1a6:	2600      	movs	r6, #0
 801f1a8:	341a      	adds	r4, #26
 801f1aa:	42b5      	cmp	r5, r6
 801f1ac:	d11a      	bne.n	801f1e4 <_printf_common+0xc8>
 801f1ae:	2000      	movs	r0, #0
 801f1b0:	e008      	b.n	801f1c4 <_printf_common+0xa8>
 801f1b2:	2301      	movs	r3, #1
 801f1b4:	4652      	mov	r2, sl
 801f1b6:	4649      	mov	r1, r9
 801f1b8:	4638      	mov	r0, r7
 801f1ba:	47c0      	blx	r8
 801f1bc:	3001      	adds	r0, #1
 801f1be:	d103      	bne.n	801f1c8 <_printf_common+0xac>
 801f1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1c8:	3501      	adds	r5, #1
 801f1ca:	e7c6      	b.n	801f15a <_printf_common+0x3e>
 801f1cc:	18e1      	adds	r1, r4, r3
 801f1ce:	1c5a      	adds	r2, r3, #1
 801f1d0:	2030      	movs	r0, #48	; 0x30
 801f1d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f1d6:	4422      	add	r2, r4
 801f1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f1dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f1e0:	3302      	adds	r3, #2
 801f1e2:	e7c7      	b.n	801f174 <_printf_common+0x58>
 801f1e4:	2301      	movs	r3, #1
 801f1e6:	4622      	mov	r2, r4
 801f1e8:	4649      	mov	r1, r9
 801f1ea:	4638      	mov	r0, r7
 801f1ec:	47c0      	blx	r8
 801f1ee:	3001      	adds	r0, #1
 801f1f0:	d0e6      	beq.n	801f1c0 <_printf_common+0xa4>
 801f1f2:	3601      	adds	r6, #1
 801f1f4:	e7d9      	b.n	801f1aa <_printf_common+0x8e>
	...

0801f1f8 <_printf_i>:
 801f1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f1fc:	7e0f      	ldrb	r7, [r1, #24]
 801f1fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f200:	2f78      	cmp	r7, #120	; 0x78
 801f202:	4691      	mov	r9, r2
 801f204:	4680      	mov	r8, r0
 801f206:	460c      	mov	r4, r1
 801f208:	469a      	mov	sl, r3
 801f20a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f20e:	d807      	bhi.n	801f220 <_printf_i+0x28>
 801f210:	2f62      	cmp	r7, #98	; 0x62
 801f212:	d80a      	bhi.n	801f22a <_printf_i+0x32>
 801f214:	2f00      	cmp	r7, #0
 801f216:	f000 80d8 	beq.w	801f3ca <_printf_i+0x1d2>
 801f21a:	2f58      	cmp	r7, #88	; 0x58
 801f21c:	f000 80a3 	beq.w	801f366 <_printf_i+0x16e>
 801f220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f228:	e03a      	b.n	801f2a0 <_printf_i+0xa8>
 801f22a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f22e:	2b15      	cmp	r3, #21
 801f230:	d8f6      	bhi.n	801f220 <_printf_i+0x28>
 801f232:	a101      	add	r1, pc, #4	; (adr r1, 801f238 <_printf_i+0x40>)
 801f234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f238:	0801f291 	.word	0x0801f291
 801f23c:	0801f2a5 	.word	0x0801f2a5
 801f240:	0801f221 	.word	0x0801f221
 801f244:	0801f221 	.word	0x0801f221
 801f248:	0801f221 	.word	0x0801f221
 801f24c:	0801f221 	.word	0x0801f221
 801f250:	0801f2a5 	.word	0x0801f2a5
 801f254:	0801f221 	.word	0x0801f221
 801f258:	0801f221 	.word	0x0801f221
 801f25c:	0801f221 	.word	0x0801f221
 801f260:	0801f221 	.word	0x0801f221
 801f264:	0801f3b1 	.word	0x0801f3b1
 801f268:	0801f2d5 	.word	0x0801f2d5
 801f26c:	0801f393 	.word	0x0801f393
 801f270:	0801f221 	.word	0x0801f221
 801f274:	0801f221 	.word	0x0801f221
 801f278:	0801f3d3 	.word	0x0801f3d3
 801f27c:	0801f221 	.word	0x0801f221
 801f280:	0801f2d5 	.word	0x0801f2d5
 801f284:	0801f221 	.word	0x0801f221
 801f288:	0801f221 	.word	0x0801f221
 801f28c:	0801f39b 	.word	0x0801f39b
 801f290:	682b      	ldr	r3, [r5, #0]
 801f292:	1d1a      	adds	r2, r3, #4
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	602a      	str	r2, [r5, #0]
 801f298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	e0a3      	b.n	801f3ec <_printf_i+0x1f4>
 801f2a4:	6820      	ldr	r0, [r4, #0]
 801f2a6:	6829      	ldr	r1, [r5, #0]
 801f2a8:	0606      	lsls	r6, r0, #24
 801f2aa:	f101 0304 	add.w	r3, r1, #4
 801f2ae:	d50a      	bpl.n	801f2c6 <_printf_i+0xce>
 801f2b0:	680e      	ldr	r6, [r1, #0]
 801f2b2:	602b      	str	r3, [r5, #0]
 801f2b4:	2e00      	cmp	r6, #0
 801f2b6:	da03      	bge.n	801f2c0 <_printf_i+0xc8>
 801f2b8:	232d      	movs	r3, #45	; 0x2d
 801f2ba:	4276      	negs	r6, r6
 801f2bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f2c0:	485e      	ldr	r0, [pc, #376]	; (801f43c <_printf_i+0x244>)
 801f2c2:	230a      	movs	r3, #10
 801f2c4:	e019      	b.n	801f2fa <_printf_i+0x102>
 801f2c6:	680e      	ldr	r6, [r1, #0]
 801f2c8:	602b      	str	r3, [r5, #0]
 801f2ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f2ce:	bf18      	it	ne
 801f2d0:	b236      	sxthne	r6, r6
 801f2d2:	e7ef      	b.n	801f2b4 <_printf_i+0xbc>
 801f2d4:	682b      	ldr	r3, [r5, #0]
 801f2d6:	6820      	ldr	r0, [r4, #0]
 801f2d8:	1d19      	adds	r1, r3, #4
 801f2da:	6029      	str	r1, [r5, #0]
 801f2dc:	0601      	lsls	r1, r0, #24
 801f2de:	d501      	bpl.n	801f2e4 <_printf_i+0xec>
 801f2e0:	681e      	ldr	r6, [r3, #0]
 801f2e2:	e002      	b.n	801f2ea <_printf_i+0xf2>
 801f2e4:	0646      	lsls	r6, r0, #25
 801f2e6:	d5fb      	bpl.n	801f2e0 <_printf_i+0xe8>
 801f2e8:	881e      	ldrh	r6, [r3, #0]
 801f2ea:	4854      	ldr	r0, [pc, #336]	; (801f43c <_printf_i+0x244>)
 801f2ec:	2f6f      	cmp	r7, #111	; 0x6f
 801f2ee:	bf0c      	ite	eq
 801f2f0:	2308      	moveq	r3, #8
 801f2f2:	230a      	movne	r3, #10
 801f2f4:	2100      	movs	r1, #0
 801f2f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f2fa:	6865      	ldr	r5, [r4, #4]
 801f2fc:	60a5      	str	r5, [r4, #8]
 801f2fe:	2d00      	cmp	r5, #0
 801f300:	bfa2      	ittt	ge
 801f302:	6821      	ldrge	r1, [r4, #0]
 801f304:	f021 0104 	bicge.w	r1, r1, #4
 801f308:	6021      	strge	r1, [r4, #0]
 801f30a:	b90e      	cbnz	r6, 801f310 <_printf_i+0x118>
 801f30c:	2d00      	cmp	r5, #0
 801f30e:	d04d      	beq.n	801f3ac <_printf_i+0x1b4>
 801f310:	4615      	mov	r5, r2
 801f312:	fbb6 f1f3 	udiv	r1, r6, r3
 801f316:	fb03 6711 	mls	r7, r3, r1, r6
 801f31a:	5dc7      	ldrb	r7, [r0, r7]
 801f31c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f320:	4637      	mov	r7, r6
 801f322:	42bb      	cmp	r3, r7
 801f324:	460e      	mov	r6, r1
 801f326:	d9f4      	bls.n	801f312 <_printf_i+0x11a>
 801f328:	2b08      	cmp	r3, #8
 801f32a:	d10b      	bne.n	801f344 <_printf_i+0x14c>
 801f32c:	6823      	ldr	r3, [r4, #0]
 801f32e:	07de      	lsls	r6, r3, #31
 801f330:	d508      	bpl.n	801f344 <_printf_i+0x14c>
 801f332:	6923      	ldr	r3, [r4, #16]
 801f334:	6861      	ldr	r1, [r4, #4]
 801f336:	4299      	cmp	r1, r3
 801f338:	bfde      	ittt	le
 801f33a:	2330      	movle	r3, #48	; 0x30
 801f33c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f340:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f344:	1b52      	subs	r2, r2, r5
 801f346:	6122      	str	r2, [r4, #16]
 801f348:	f8cd a000 	str.w	sl, [sp]
 801f34c:	464b      	mov	r3, r9
 801f34e:	aa03      	add	r2, sp, #12
 801f350:	4621      	mov	r1, r4
 801f352:	4640      	mov	r0, r8
 801f354:	f7ff fee2 	bl	801f11c <_printf_common>
 801f358:	3001      	adds	r0, #1
 801f35a:	d14c      	bne.n	801f3f6 <_printf_i+0x1fe>
 801f35c:	f04f 30ff 	mov.w	r0, #4294967295
 801f360:	b004      	add	sp, #16
 801f362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f366:	4835      	ldr	r0, [pc, #212]	; (801f43c <_printf_i+0x244>)
 801f368:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f36c:	6829      	ldr	r1, [r5, #0]
 801f36e:	6823      	ldr	r3, [r4, #0]
 801f370:	f851 6b04 	ldr.w	r6, [r1], #4
 801f374:	6029      	str	r1, [r5, #0]
 801f376:	061d      	lsls	r5, r3, #24
 801f378:	d514      	bpl.n	801f3a4 <_printf_i+0x1ac>
 801f37a:	07df      	lsls	r7, r3, #31
 801f37c:	bf44      	itt	mi
 801f37e:	f043 0320 	orrmi.w	r3, r3, #32
 801f382:	6023      	strmi	r3, [r4, #0]
 801f384:	b91e      	cbnz	r6, 801f38e <_printf_i+0x196>
 801f386:	6823      	ldr	r3, [r4, #0]
 801f388:	f023 0320 	bic.w	r3, r3, #32
 801f38c:	6023      	str	r3, [r4, #0]
 801f38e:	2310      	movs	r3, #16
 801f390:	e7b0      	b.n	801f2f4 <_printf_i+0xfc>
 801f392:	6823      	ldr	r3, [r4, #0]
 801f394:	f043 0320 	orr.w	r3, r3, #32
 801f398:	6023      	str	r3, [r4, #0]
 801f39a:	2378      	movs	r3, #120	; 0x78
 801f39c:	4828      	ldr	r0, [pc, #160]	; (801f440 <_printf_i+0x248>)
 801f39e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f3a2:	e7e3      	b.n	801f36c <_printf_i+0x174>
 801f3a4:	0659      	lsls	r1, r3, #25
 801f3a6:	bf48      	it	mi
 801f3a8:	b2b6      	uxthmi	r6, r6
 801f3aa:	e7e6      	b.n	801f37a <_printf_i+0x182>
 801f3ac:	4615      	mov	r5, r2
 801f3ae:	e7bb      	b.n	801f328 <_printf_i+0x130>
 801f3b0:	682b      	ldr	r3, [r5, #0]
 801f3b2:	6826      	ldr	r6, [r4, #0]
 801f3b4:	6961      	ldr	r1, [r4, #20]
 801f3b6:	1d18      	adds	r0, r3, #4
 801f3b8:	6028      	str	r0, [r5, #0]
 801f3ba:	0635      	lsls	r5, r6, #24
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	d501      	bpl.n	801f3c4 <_printf_i+0x1cc>
 801f3c0:	6019      	str	r1, [r3, #0]
 801f3c2:	e002      	b.n	801f3ca <_printf_i+0x1d2>
 801f3c4:	0670      	lsls	r0, r6, #25
 801f3c6:	d5fb      	bpl.n	801f3c0 <_printf_i+0x1c8>
 801f3c8:	8019      	strh	r1, [r3, #0]
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	6123      	str	r3, [r4, #16]
 801f3ce:	4615      	mov	r5, r2
 801f3d0:	e7ba      	b.n	801f348 <_printf_i+0x150>
 801f3d2:	682b      	ldr	r3, [r5, #0]
 801f3d4:	1d1a      	adds	r2, r3, #4
 801f3d6:	602a      	str	r2, [r5, #0]
 801f3d8:	681d      	ldr	r5, [r3, #0]
 801f3da:	6862      	ldr	r2, [r4, #4]
 801f3dc:	2100      	movs	r1, #0
 801f3de:	4628      	mov	r0, r5
 801f3e0:	f7e0 ff16 	bl	8000210 <memchr>
 801f3e4:	b108      	cbz	r0, 801f3ea <_printf_i+0x1f2>
 801f3e6:	1b40      	subs	r0, r0, r5
 801f3e8:	6060      	str	r0, [r4, #4]
 801f3ea:	6863      	ldr	r3, [r4, #4]
 801f3ec:	6123      	str	r3, [r4, #16]
 801f3ee:	2300      	movs	r3, #0
 801f3f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f3f4:	e7a8      	b.n	801f348 <_printf_i+0x150>
 801f3f6:	6923      	ldr	r3, [r4, #16]
 801f3f8:	462a      	mov	r2, r5
 801f3fa:	4649      	mov	r1, r9
 801f3fc:	4640      	mov	r0, r8
 801f3fe:	47d0      	blx	sl
 801f400:	3001      	adds	r0, #1
 801f402:	d0ab      	beq.n	801f35c <_printf_i+0x164>
 801f404:	6823      	ldr	r3, [r4, #0]
 801f406:	079b      	lsls	r3, r3, #30
 801f408:	d413      	bmi.n	801f432 <_printf_i+0x23a>
 801f40a:	68e0      	ldr	r0, [r4, #12]
 801f40c:	9b03      	ldr	r3, [sp, #12]
 801f40e:	4298      	cmp	r0, r3
 801f410:	bfb8      	it	lt
 801f412:	4618      	movlt	r0, r3
 801f414:	e7a4      	b.n	801f360 <_printf_i+0x168>
 801f416:	2301      	movs	r3, #1
 801f418:	4632      	mov	r2, r6
 801f41a:	4649      	mov	r1, r9
 801f41c:	4640      	mov	r0, r8
 801f41e:	47d0      	blx	sl
 801f420:	3001      	adds	r0, #1
 801f422:	d09b      	beq.n	801f35c <_printf_i+0x164>
 801f424:	3501      	adds	r5, #1
 801f426:	68e3      	ldr	r3, [r4, #12]
 801f428:	9903      	ldr	r1, [sp, #12]
 801f42a:	1a5b      	subs	r3, r3, r1
 801f42c:	42ab      	cmp	r3, r5
 801f42e:	dcf2      	bgt.n	801f416 <_printf_i+0x21e>
 801f430:	e7eb      	b.n	801f40a <_printf_i+0x212>
 801f432:	2500      	movs	r5, #0
 801f434:	f104 0619 	add.w	r6, r4, #25
 801f438:	e7f5      	b.n	801f426 <_printf_i+0x22e>
 801f43a:	bf00      	nop
 801f43c:	08021c81 	.word	0x08021c81
 801f440:	08021c92 	.word	0x08021c92

0801f444 <cleanup_glue>:
 801f444:	b538      	push	{r3, r4, r5, lr}
 801f446:	460c      	mov	r4, r1
 801f448:	6809      	ldr	r1, [r1, #0]
 801f44a:	4605      	mov	r5, r0
 801f44c:	b109      	cbz	r1, 801f452 <cleanup_glue+0xe>
 801f44e:	f7ff fff9 	bl	801f444 <cleanup_glue>
 801f452:	4621      	mov	r1, r4
 801f454:	4628      	mov	r0, r5
 801f456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f45a:	f7ff bc25 	b.w	801eca8 <_free_r>
	...

0801f460 <_reclaim_reent>:
 801f460:	4b2c      	ldr	r3, [pc, #176]	; (801f514 <_reclaim_reent+0xb4>)
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	4283      	cmp	r3, r0
 801f466:	b570      	push	{r4, r5, r6, lr}
 801f468:	4604      	mov	r4, r0
 801f46a:	d051      	beq.n	801f510 <_reclaim_reent+0xb0>
 801f46c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f46e:	b143      	cbz	r3, 801f482 <_reclaim_reent+0x22>
 801f470:	68db      	ldr	r3, [r3, #12]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d14a      	bne.n	801f50c <_reclaim_reent+0xac>
 801f476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f478:	6819      	ldr	r1, [r3, #0]
 801f47a:	b111      	cbz	r1, 801f482 <_reclaim_reent+0x22>
 801f47c:	4620      	mov	r0, r4
 801f47e:	f7ff fc13 	bl	801eca8 <_free_r>
 801f482:	6961      	ldr	r1, [r4, #20]
 801f484:	b111      	cbz	r1, 801f48c <_reclaim_reent+0x2c>
 801f486:	4620      	mov	r0, r4
 801f488:	f7ff fc0e 	bl	801eca8 <_free_r>
 801f48c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f48e:	b111      	cbz	r1, 801f496 <_reclaim_reent+0x36>
 801f490:	4620      	mov	r0, r4
 801f492:	f7ff fc09 	bl	801eca8 <_free_r>
 801f496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f498:	b111      	cbz	r1, 801f4a0 <_reclaim_reent+0x40>
 801f49a:	4620      	mov	r0, r4
 801f49c:	f7ff fc04 	bl	801eca8 <_free_r>
 801f4a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f4a2:	b111      	cbz	r1, 801f4aa <_reclaim_reent+0x4a>
 801f4a4:	4620      	mov	r0, r4
 801f4a6:	f7ff fbff 	bl	801eca8 <_free_r>
 801f4aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f4ac:	b111      	cbz	r1, 801f4b4 <_reclaim_reent+0x54>
 801f4ae:	4620      	mov	r0, r4
 801f4b0:	f7ff fbfa 	bl	801eca8 <_free_r>
 801f4b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f4b6:	b111      	cbz	r1, 801f4be <_reclaim_reent+0x5e>
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	f7ff fbf5 	bl	801eca8 <_free_r>
 801f4be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f4c0:	b111      	cbz	r1, 801f4c8 <_reclaim_reent+0x68>
 801f4c2:	4620      	mov	r0, r4
 801f4c4:	f7ff fbf0 	bl	801eca8 <_free_r>
 801f4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f4ca:	b111      	cbz	r1, 801f4d2 <_reclaim_reent+0x72>
 801f4cc:	4620      	mov	r0, r4
 801f4ce:	f7ff fbeb 	bl	801eca8 <_free_r>
 801f4d2:	69a3      	ldr	r3, [r4, #24]
 801f4d4:	b1e3      	cbz	r3, 801f510 <_reclaim_reent+0xb0>
 801f4d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f4d8:	4620      	mov	r0, r4
 801f4da:	4798      	blx	r3
 801f4dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f4de:	b1b9      	cbz	r1, 801f510 <_reclaim_reent+0xb0>
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f4e6:	f7ff bfad 	b.w	801f444 <cleanup_glue>
 801f4ea:	5949      	ldr	r1, [r1, r5]
 801f4ec:	b941      	cbnz	r1, 801f500 <_reclaim_reent+0xa0>
 801f4ee:	3504      	adds	r5, #4
 801f4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f4f2:	2d80      	cmp	r5, #128	; 0x80
 801f4f4:	68d9      	ldr	r1, [r3, #12]
 801f4f6:	d1f8      	bne.n	801f4ea <_reclaim_reent+0x8a>
 801f4f8:	4620      	mov	r0, r4
 801f4fa:	f7ff fbd5 	bl	801eca8 <_free_r>
 801f4fe:	e7ba      	b.n	801f476 <_reclaim_reent+0x16>
 801f500:	680e      	ldr	r6, [r1, #0]
 801f502:	4620      	mov	r0, r4
 801f504:	f7ff fbd0 	bl	801eca8 <_free_r>
 801f508:	4631      	mov	r1, r6
 801f50a:	e7ef      	b.n	801f4ec <_reclaim_reent+0x8c>
 801f50c:	2500      	movs	r5, #0
 801f50e:	e7ef      	b.n	801f4f0 <_reclaim_reent+0x90>
 801f510:	bd70      	pop	{r4, r5, r6, pc}
 801f512:	bf00      	nop
 801f514:	20000098 	.word	0x20000098

0801f518 <_sbrk_r>:
 801f518:	b538      	push	{r3, r4, r5, lr}
 801f51a:	4d06      	ldr	r5, [pc, #24]	; (801f534 <_sbrk_r+0x1c>)
 801f51c:	2300      	movs	r3, #0
 801f51e:	4604      	mov	r4, r0
 801f520:	4608      	mov	r0, r1
 801f522:	602b      	str	r3, [r5, #0]
 801f524:	f7e2 fce4 	bl	8001ef0 <_sbrk>
 801f528:	1c43      	adds	r3, r0, #1
 801f52a:	d102      	bne.n	801f532 <_sbrk_r+0x1a>
 801f52c:	682b      	ldr	r3, [r5, #0]
 801f52e:	b103      	cbz	r3, 801f532 <_sbrk_r+0x1a>
 801f530:	6023      	str	r3, [r4, #0]
 801f532:	bd38      	pop	{r3, r4, r5, pc}
 801f534:	20011b08 	.word	0x20011b08

0801f538 <_raise_r>:
 801f538:	291f      	cmp	r1, #31
 801f53a:	b538      	push	{r3, r4, r5, lr}
 801f53c:	4604      	mov	r4, r0
 801f53e:	460d      	mov	r5, r1
 801f540:	d904      	bls.n	801f54c <_raise_r+0x14>
 801f542:	2316      	movs	r3, #22
 801f544:	6003      	str	r3, [r0, #0]
 801f546:	f04f 30ff 	mov.w	r0, #4294967295
 801f54a:	bd38      	pop	{r3, r4, r5, pc}
 801f54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f54e:	b112      	cbz	r2, 801f556 <_raise_r+0x1e>
 801f550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f554:	b94b      	cbnz	r3, 801f56a <_raise_r+0x32>
 801f556:	4620      	mov	r0, r4
 801f558:	f000 f830 	bl	801f5bc <_getpid_r>
 801f55c:	462a      	mov	r2, r5
 801f55e:	4601      	mov	r1, r0
 801f560:	4620      	mov	r0, r4
 801f562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f566:	f000 b817 	b.w	801f598 <_kill_r>
 801f56a:	2b01      	cmp	r3, #1
 801f56c:	d00a      	beq.n	801f584 <_raise_r+0x4c>
 801f56e:	1c59      	adds	r1, r3, #1
 801f570:	d103      	bne.n	801f57a <_raise_r+0x42>
 801f572:	2316      	movs	r3, #22
 801f574:	6003      	str	r3, [r0, #0]
 801f576:	2001      	movs	r0, #1
 801f578:	e7e7      	b.n	801f54a <_raise_r+0x12>
 801f57a:	2400      	movs	r4, #0
 801f57c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f580:	4628      	mov	r0, r5
 801f582:	4798      	blx	r3
 801f584:	2000      	movs	r0, #0
 801f586:	e7e0      	b.n	801f54a <_raise_r+0x12>

0801f588 <raise>:
 801f588:	4b02      	ldr	r3, [pc, #8]	; (801f594 <raise+0xc>)
 801f58a:	4601      	mov	r1, r0
 801f58c:	6818      	ldr	r0, [r3, #0]
 801f58e:	f7ff bfd3 	b.w	801f538 <_raise_r>
 801f592:	bf00      	nop
 801f594:	20000098 	.word	0x20000098

0801f598 <_kill_r>:
 801f598:	b538      	push	{r3, r4, r5, lr}
 801f59a:	4d07      	ldr	r5, [pc, #28]	; (801f5b8 <_kill_r+0x20>)
 801f59c:	2300      	movs	r3, #0
 801f59e:	4604      	mov	r4, r0
 801f5a0:	4608      	mov	r0, r1
 801f5a2:	4611      	mov	r1, r2
 801f5a4:	602b      	str	r3, [r5, #0]
 801f5a6:	f7e2 fc1b 	bl	8001de0 <_kill>
 801f5aa:	1c43      	adds	r3, r0, #1
 801f5ac:	d102      	bne.n	801f5b4 <_kill_r+0x1c>
 801f5ae:	682b      	ldr	r3, [r5, #0]
 801f5b0:	b103      	cbz	r3, 801f5b4 <_kill_r+0x1c>
 801f5b2:	6023      	str	r3, [r4, #0]
 801f5b4:	bd38      	pop	{r3, r4, r5, pc}
 801f5b6:	bf00      	nop
 801f5b8:	20011b08 	.word	0x20011b08

0801f5bc <_getpid_r>:
 801f5bc:	f7e2 bc08 	b.w	8001dd0 <_getpid>

0801f5c0 <__sread>:
 801f5c0:	b510      	push	{r4, lr}
 801f5c2:	460c      	mov	r4, r1
 801f5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5c8:	f000 fac8 	bl	801fb5c <_read_r>
 801f5cc:	2800      	cmp	r0, #0
 801f5ce:	bfab      	itete	ge
 801f5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f5d2:	89a3      	ldrhlt	r3, [r4, #12]
 801f5d4:	181b      	addge	r3, r3, r0
 801f5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f5da:	bfac      	ite	ge
 801f5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801f5de:	81a3      	strhlt	r3, [r4, #12]
 801f5e0:	bd10      	pop	{r4, pc}

0801f5e2 <__swrite>:
 801f5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5e6:	461f      	mov	r7, r3
 801f5e8:	898b      	ldrh	r3, [r1, #12]
 801f5ea:	05db      	lsls	r3, r3, #23
 801f5ec:	4605      	mov	r5, r0
 801f5ee:	460c      	mov	r4, r1
 801f5f0:	4616      	mov	r6, r2
 801f5f2:	d505      	bpl.n	801f600 <__swrite+0x1e>
 801f5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5f8:	2302      	movs	r3, #2
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	f000 fa2a 	bl	801fa54 <_lseek_r>
 801f600:	89a3      	ldrh	r3, [r4, #12]
 801f602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f60a:	81a3      	strh	r3, [r4, #12]
 801f60c:	4632      	mov	r2, r6
 801f60e:	463b      	mov	r3, r7
 801f610:	4628      	mov	r0, r5
 801f612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f616:	f000 b869 	b.w	801f6ec <_write_r>

0801f61a <__sseek>:
 801f61a:	b510      	push	{r4, lr}
 801f61c:	460c      	mov	r4, r1
 801f61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f622:	f000 fa17 	bl	801fa54 <_lseek_r>
 801f626:	1c43      	adds	r3, r0, #1
 801f628:	89a3      	ldrh	r3, [r4, #12]
 801f62a:	bf15      	itete	ne
 801f62c:	6560      	strne	r0, [r4, #84]	; 0x54
 801f62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f636:	81a3      	strheq	r3, [r4, #12]
 801f638:	bf18      	it	ne
 801f63a:	81a3      	strhne	r3, [r4, #12]
 801f63c:	bd10      	pop	{r4, pc}

0801f63e <__sclose>:
 801f63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f642:	f000 b935 	b.w	801f8b0 <_close_r>
	...

0801f648 <__swbuf_r>:
 801f648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f64a:	460e      	mov	r6, r1
 801f64c:	4614      	mov	r4, r2
 801f64e:	4605      	mov	r5, r0
 801f650:	b118      	cbz	r0, 801f65a <__swbuf_r+0x12>
 801f652:	6983      	ldr	r3, [r0, #24]
 801f654:	b90b      	cbnz	r3, 801f65a <__swbuf_r+0x12>
 801f656:	f7ff fa29 	bl	801eaac <__sinit>
 801f65a:	4b21      	ldr	r3, [pc, #132]	; (801f6e0 <__swbuf_r+0x98>)
 801f65c:	429c      	cmp	r4, r3
 801f65e:	d12b      	bne.n	801f6b8 <__swbuf_r+0x70>
 801f660:	686c      	ldr	r4, [r5, #4]
 801f662:	69a3      	ldr	r3, [r4, #24]
 801f664:	60a3      	str	r3, [r4, #8]
 801f666:	89a3      	ldrh	r3, [r4, #12]
 801f668:	071a      	lsls	r2, r3, #28
 801f66a:	d52f      	bpl.n	801f6cc <__swbuf_r+0x84>
 801f66c:	6923      	ldr	r3, [r4, #16]
 801f66e:	b36b      	cbz	r3, 801f6cc <__swbuf_r+0x84>
 801f670:	6923      	ldr	r3, [r4, #16]
 801f672:	6820      	ldr	r0, [r4, #0]
 801f674:	1ac0      	subs	r0, r0, r3
 801f676:	6963      	ldr	r3, [r4, #20]
 801f678:	b2f6      	uxtb	r6, r6
 801f67a:	4283      	cmp	r3, r0
 801f67c:	4637      	mov	r7, r6
 801f67e:	dc04      	bgt.n	801f68a <__swbuf_r+0x42>
 801f680:	4621      	mov	r1, r4
 801f682:	4628      	mov	r0, r5
 801f684:	f000 f9aa 	bl	801f9dc <_fflush_r>
 801f688:	bb30      	cbnz	r0, 801f6d8 <__swbuf_r+0x90>
 801f68a:	68a3      	ldr	r3, [r4, #8]
 801f68c:	3b01      	subs	r3, #1
 801f68e:	60a3      	str	r3, [r4, #8]
 801f690:	6823      	ldr	r3, [r4, #0]
 801f692:	1c5a      	adds	r2, r3, #1
 801f694:	6022      	str	r2, [r4, #0]
 801f696:	701e      	strb	r6, [r3, #0]
 801f698:	6963      	ldr	r3, [r4, #20]
 801f69a:	3001      	adds	r0, #1
 801f69c:	4283      	cmp	r3, r0
 801f69e:	d004      	beq.n	801f6aa <__swbuf_r+0x62>
 801f6a0:	89a3      	ldrh	r3, [r4, #12]
 801f6a2:	07db      	lsls	r3, r3, #31
 801f6a4:	d506      	bpl.n	801f6b4 <__swbuf_r+0x6c>
 801f6a6:	2e0a      	cmp	r6, #10
 801f6a8:	d104      	bne.n	801f6b4 <__swbuf_r+0x6c>
 801f6aa:	4621      	mov	r1, r4
 801f6ac:	4628      	mov	r0, r5
 801f6ae:	f000 f995 	bl	801f9dc <_fflush_r>
 801f6b2:	b988      	cbnz	r0, 801f6d8 <__swbuf_r+0x90>
 801f6b4:	4638      	mov	r0, r7
 801f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6b8:	4b0a      	ldr	r3, [pc, #40]	; (801f6e4 <__swbuf_r+0x9c>)
 801f6ba:	429c      	cmp	r4, r3
 801f6bc:	d101      	bne.n	801f6c2 <__swbuf_r+0x7a>
 801f6be:	68ac      	ldr	r4, [r5, #8]
 801f6c0:	e7cf      	b.n	801f662 <__swbuf_r+0x1a>
 801f6c2:	4b09      	ldr	r3, [pc, #36]	; (801f6e8 <__swbuf_r+0xa0>)
 801f6c4:	429c      	cmp	r4, r3
 801f6c6:	bf08      	it	eq
 801f6c8:	68ec      	ldreq	r4, [r5, #12]
 801f6ca:	e7ca      	b.n	801f662 <__swbuf_r+0x1a>
 801f6cc:	4621      	mov	r1, r4
 801f6ce:	4628      	mov	r0, r5
 801f6d0:	f000 f81e 	bl	801f710 <__swsetup_r>
 801f6d4:	2800      	cmp	r0, #0
 801f6d6:	d0cb      	beq.n	801f670 <__swbuf_r+0x28>
 801f6d8:	f04f 37ff 	mov.w	r7, #4294967295
 801f6dc:	e7ea      	b.n	801f6b4 <__swbuf_r+0x6c>
 801f6de:	bf00      	nop
 801f6e0:	08021c2c 	.word	0x08021c2c
 801f6e4:	08021c4c 	.word	0x08021c4c
 801f6e8:	08021c0c 	.word	0x08021c0c

0801f6ec <_write_r>:
 801f6ec:	b538      	push	{r3, r4, r5, lr}
 801f6ee:	4d07      	ldr	r5, [pc, #28]	; (801f70c <_write_r+0x20>)
 801f6f0:	4604      	mov	r4, r0
 801f6f2:	4608      	mov	r0, r1
 801f6f4:	4611      	mov	r1, r2
 801f6f6:	2200      	movs	r2, #0
 801f6f8:	602a      	str	r2, [r5, #0]
 801f6fa:	461a      	mov	r2, r3
 801f6fc:	f7e2 fba7 	bl	8001e4e <_write>
 801f700:	1c43      	adds	r3, r0, #1
 801f702:	d102      	bne.n	801f70a <_write_r+0x1e>
 801f704:	682b      	ldr	r3, [r5, #0]
 801f706:	b103      	cbz	r3, 801f70a <_write_r+0x1e>
 801f708:	6023      	str	r3, [r4, #0]
 801f70a:	bd38      	pop	{r3, r4, r5, pc}
 801f70c:	20011b08 	.word	0x20011b08

0801f710 <__swsetup_r>:
 801f710:	4b32      	ldr	r3, [pc, #200]	; (801f7dc <__swsetup_r+0xcc>)
 801f712:	b570      	push	{r4, r5, r6, lr}
 801f714:	681d      	ldr	r5, [r3, #0]
 801f716:	4606      	mov	r6, r0
 801f718:	460c      	mov	r4, r1
 801f71a:	b125      	cbz	r5, 801f726 <__swsetup_r+0x16>
 801f71c:	69ab      	ldr	r3, [r5, #24]
 801f71e:	b913      	cbnz	r3, 801f726 <__swsetup_r+0x16>
 801f720:	4628      	mov	r0, r5
 801f722:	f7ff f9c3 	bl	801eaac <__sinit>
 801f726:	4b2e      	ldr	r3, [pc, #184]	; (801f7e0 <__swsetup_r+0xd0>)
 801f728:	429c      	cmp	r4, r3
 801f72a:	d10f      	bne.n	801f74c <__swsetup_r+0x3c>
 801f72c:	686c      	ldr	r4, [r5, #4]
 801f72e:	89a3      	ldrh	r3, [r4, #12]
 801f730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f734:	0719      	lsls	r1, r3, #28
 801f736:	d42c      	bmi.n	801f792 <__swsetup_r+0x82>
 801f738:	06dd      	lsls	r5, r3, #27
 801f73a:	d411      	bmi.n	801f760 <__swsetup_r+0x50>
 801f73c:	2309      	movs	r3, #9
 801f73e:	6033      	str	r3, [r6, #0]
 801f740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f744:	81a3      	strh	r3, [r4, #12]
 801f746:	f04f 30ff 	mov.w	r0, #4294967295
 801f74a:	e03e      	b.n	801f7ca <__swsetup_r+0xba>
 801f74c:	4b25      	ldr	r3, [pc, #148]	; (801f7e4 <__swsetup_r+0xd4>)
 801f74e:	429c      	cmp	r4, r3
 801f750:	d101      	bne.n	801f756 <__swsetup_r+0x46>
 801f752:	68ac      	ldr	r4, [r5, #8]
 801f754:	e7eb      	b.n	801f72e <__swsetup_r+0x1e>
 801f756:	4b24      	ldr	r3, [pc, #144]	; (801f7e8 <__swsetup_r+0xd8>)
 801f758:	429c      	cmp	r4, r3
 801f75a:	bf08      	it	eq
 801f75c:	68ec      	ldreq	r4, [r5, #12]
 801f75e:	e7e6      	b.n	801f72e <__swsetup_r+0x1e>
 801f760:	0758      	lsls	r0, r3, #29
 801f762:	d512      	bpl.n	801f78a <__swsetup_r+0x7a>
 801f764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f766:	b141      	cbz	r1, 801f77a <__swsetup_r+0x6a>
 801f768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f76c:	4299      	cmp	r1, r3
 801f76e:	d002      	beq.n	801f776 <__swsetup_r+0x66>
 801f770:	4630      	mov	r0, r6
 801f772:	f7ff fa99 	bl	801eca8 <_free_r>
 801f776:	2300      	movs	r3, #0
 801f778:	6363      	str	r3, [r4, #52]	; 0x34
 801f77a:	89a3      	ldrh	r3, [r4, #12]
 801f77c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f780:	81a3      	strh	r3, [r4, #12]
 801f782:	2300      	movs	r3, #0
 801f784:	6063      	str	r3, [r4, #4]
 801f786:	6923      	ldr	r3, [r4, #16]
 801f788:	6023      	str	r3, [r4, #0]
 801f78a:	89a3      	ldrh	r3, [r4, #12]
 801f78c:	f043 0308 	orr.w	r3, r3, #8
 801f790:	81a3      	strh	r3, [r4, #12]
 801f792:	6923      	ldr	r3, [r4, #16]
 801f794:	b94b      	cbnz	r3, 801f7aa <__swsetup_r+0x9a>
 801f796:	89a3      	ldrh	r3, [r4, #12]
 801f798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f7a0:	d003      	beq.n	801f7aa <__swsetup_r+0x9a>
 801f7a2:	4621      	mov	r1, r4
 801f7a4:	4630      	mov	r0, r6
 801f7a6:	f000 f98d 	bl	801fac4 <__smakebuf_r>
 801f7aa:	89a0      	ldrh	r0, [r4, #12]
 801f7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f7b0:	f010 0301 	ands.w	r3, r0, #1
 801f7b4:	d00a      	beq.n	801f7cc <__swsetup_r+0xbc>
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	60a3      	str	r3, [r4, #8]
 801f7ba:	6963      	ldr	r3, [r4, #20]
 801f7bc:	425b      	negs	r3, r3
 801f7be:	61a3      	str	r3, [r4, #24]
 801f7c0:	6923      	ldr	r3, [r4, #16]
 801f7c2:	b943      	cbnz	r3, 801f7d6 <__swsetup_r+0xc6>
 801f7c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f7c8:	d1ba      	bne.n	801f740 <__swsetup_r+0x30>
 801f7ca:	bd70      	pop	{r4, r5, r6, pc}
 801f7cc:	0781      	lsls	r1, r0, #30
 801f7ce:	bf58      	it	pl
 801f7d0:	6963      	ldrpl	r3, [r4, #20]
 801f7d2:	60a3      	str	r3, [r4, #8]
 801f7d4:	e7f4      	b.n	801f7c0 <__swsetup_r+0xb0>
 801f7d6:	2000      	movs	r0, #0
 801f7d8:	e7f7      	b.n	801f7ca <__swsetup_r+0xba>
 801f7da:	bf00      	nop
 801f7dc:	20000098 	.word	0x20000098
 801f7e0:	08021c2c 	.word	0x08021c2c
 801f7e4:	08021c4c 	.word	0x08021c4c
 801f7e8:	08021c0c 	.word	0x08021c0c

0801f7ec <__register_exitproc>:
 801f7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f7f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801f8ac <__register_exitproc+0xc0>
 801f7f4:	4606      	mov	r6, r0
 801f7f6:	f8d8 0000 	ldr.w	r0, [r8]
 801f7fa:	461f      	mov	r7, r3
 801f7fc:	460d      	mov	r5, r1
 801f7fe:	4691      	mov	r9, r2
 801f800:	f7ff fa29 	bl	801ec56 <__retarget_lock_acquire_recursive>
 801f804:	4b25      	ldr	r3, [pc, #148]	; (801f89c <__register_exitproc+0xb0>)
 801f806:	681c      	ldr	r4, [r3, #0]
 801f808:	b934      	cbnz	r4, 801f818 <__register_exitproc+0x2c>
 801f80a:	4c25      	ldr	r4, [pc, #148]	; (801f8a0 <__register_exitproc+0xb4>)
 801f80c:	601c      	str	r4, [r3, #0]
 801f80e:	4b25      	ldr	r3, [pc, #148]	; (801f8a4 <__register_exitproc+0xb8>)
 801f810:	b113      	cbz	r3, 801f818 <__register_exitproc+0x2c>
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f818:	6863      	ldr	r3, [r4, #4]
 801f81a:	2b1f      	cmp	r3, #31
 801f81c:	dd07      	ble.n	801f82e <__register_exitproc+0x42>
 801f81e:	f8d8 0000 	ldr.w	r0, [r8]
 801f822:	f7ff fa1a 	bl	801ec5a <__retarget_lock_release_recursive>
 801f826:	f04f 30ff 	mov.w	r0, #4294967295
 801f82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f82e:	b34e      	cbz	r6, 801f884 <__register_exitproc+0x98>
 801f830:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f834:	b988      	cbnz	r0, 801f85a <__register_exitproc+0x6e>
 801f836:	4b1c      	ldr	r3, [pc, #112]	; (801f8a8 <__register_exitproc+0xbc>)
 801f838:	b923      	cbnz	r3, 801f844 <__register_exitproc+0x58>
 801f83a:	f8d8 0000 	ldr.w	r0, [r8]
 801f83e:	f7ff fa0b 	bl	801ec58 <__retarget_lock_release>
 801f842:	e7f0      	b.n	801f826 <__register_exitproc+0x3a>
 801f844:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f848:	f7ff fa08 	bl	801ec5c <malloc>
 801f84c:	2800      	cmp	r0, #0
 801f84e:	d0f4      	beq.n	801f83a <__register_exitproc+0x4e>
 801f850:	2300      	movs	r3, #0
 801f852:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f856:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f85a:	6863      	ldr	r3, [r4, #4]
 801f85c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f860:	2201      	movs	r2, #1
 801f862:	409a      	lsls	r2, r3
 801f864:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f868:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f86c:	4313      	orrs	r3, r2
 801f86e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f872:	2e02      	cmp	r6, #2
 801f874:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f878:	bf02      	ittt	eq
 801f87a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f87e:	4313      	orreq	r3, r2
 801f880:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801f884:	6863      	ldr	r3, [r4, #4]
 801f886:	f8d8 0000 	ldr.w	r0, [r8]
 801f88a:	1c5a      	adds	r2, r3, #1
 801f88c:	3302      	adds	r3, #2
 801f88e:	6062      	str	r2, [r4, #4]
 801f890:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f894:	f7ff f9e1 	bl	801ec5a <__retarget_lock_release_recursive>
 801f898:	2000      	movs	r0, #0
 801f89a:	e7c6      	b.n	801f82a <__register_exitproc+0x3e>
 801f89c:	20011b98 	.word	0x20011b98
 801f8a0:	20011b0c 	.word	0x20011b0c
 801f8a4:	08021ca4 	.word	0x08021ca4
 801f8a8:	0801ec5d 	.word	0x0801ec5d
 801f8ac:	200000fc 	.word	0x200000fc

0801f8b0 <_close_r>:
 801f8b0:	b538      	push	{r3, r4, r5, lr}
 801f8b2:	4d06      	ldr	r5, [pc, #24]	; (801f8cc <_close_r+0x1c>)
 801f8b4:	2300      	movs	r3, #0
 801f8b6:	4604      	mov	r4, r0
 801f8b8:	4608      	mov	r0, r1
 801f8ba:	602b      	str	r3, [r5, #0]
 801f8bc:	f7e2 fae3 	bl	8001e86 <_close>
 801f8c0:	1c43      	adds	r3, r0, #1
 801f8c2:	d102      	bne.n	801f8ca <_close_r+0x1a>
 801f8c4:	682b      	ldr	r3, [r5, #0]
 801f8c6:	b103      	cbz	r3, 801f8ca <_close_r+0x1a>
 801f8c8:	6023      	str	r3, [r4, #0]
 801f8ca:	bd38      	pop	{r3, r4, r5, pc}
 801f8cc:	20011b08 	.word	0x20011b08

0801f8d0 <__sflush_r>:
 801f8d0:	898a      	ldrh	r2, [r1, #12]
 801f8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8d6:	4605      	mov	r5, r0
 801f8d8:	0710      	lsls	r0, r2, #28
 801f8da:	460c      	mov	r4, r1
 801f8dc:	d458      	bmi.n	801f990 <__sflush_r+0xc0>
 801f8de:	684b      	ldr	r3, [r1, #4]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	dc05      	bgt.n	801f8f0 <__sflush_r+0x20>
 801f8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	dc02      	bgt.n	801f8f0 <__sflush_r+0x20>
 801f8ea:	2000      	movs	r0, #0
 801f8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f8f2:	2e00      	cmp	r6, #0
 801f8f4:	d0f9      	beq.n	801f8ea <__sflush_r+0x1a>
 801f8f6:	2300      	movs	r3, #0
 801f8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f8fc:	682f      	ldr	r7, [r5, #0]
 801f8fe:	602b      	str	r3, [r5, #0]
 801f900:	d032      	beq.n	801f968 <__sflush_r+0x98>
 801f902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f904:	89a3      	ldrh	r3, [r4, #12]
 801f906:	075a      	lsls	r2, r3, #29
 801f908:	d505      	bpl.n	801f916 <__sflush_r+0x46>
 801f90a:	6863      	ldr	r3, [r4, #4]
 801f90c:	1ac0      	subs	r0, r0, r3
 801f90e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f910:	b10b      	cbz	r3, 801f916 <__sflush_r+0x46>
 801f912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f914:	1ac0      	subs	r0, r0, r3
 801f916:	2300      	movs	r3, #0
 801f918:	4602      	mov	r2, r0
 801f91a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f91c:	6a21      	ldr	r1, [r4, #32]
 801f91e:	4628      	mov	r0, r5
 801f920:	47b0      	blx	r6
 801f922:	1c43      	adds	r3, r0, #1
 801f924:	89a3      	ldrh	r3, [r4, #12]
 801f926:	d106      	bne.n	801f936 <__sflush_r+0x66>
 801f928:	6829      	ldr	r1, [r5, #0]
 801f92a:	291d      	cmp	r1, #29
 801f92c:	d82c      	bhi.n	801f988 <__sflush_r+0xb8>
 801f92e:	4a2a      	ldr	r2, [pc, #168]	; (801f9d8 <__sflush_r+0x108>)
 801f930:	40ca      	lsrs	r2, r1
 801f932:	07d6      	lsls	r6, r2, #31
 801f934:	d528      	bpl.n	801f988 <__sflush_r+0xb8>
 801f936:	2200      	movs	r2, #0
 801f938:	6062      	str	r2, [r4, #4]
 801f93a:	04d9      	lsls	r1, r3, #19
 801f93c:	6922      	ldr	r2, [r4, #16]
 801f93e:	6022      	str	r2, [r4, #0]
 801f940:	d504      	bpl.n	801f94c <__sflush_r+0x7c>
 801f942:	1c42      	adds	r2, r0, #1
 801f944:	d101      	bne.n	801f94a <__sflush_r+0x7a>
 801f946:	682b      	ldr	r3, [r5, #0]
 801f948:	b903      	cbnz	r3, 801f94c <__sflush_r+0x7c>
 801f94a:	6560      	str	r0, [r4, #84]	; 0x54
 801f94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f94e:	602f      	str	r7, [r5, #0]
 801f950:	2900      	cmp	r1, #0
 801f952:	d0ca      	beq.n	801f8ea <__sflush_r+0x1a>
 801f954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f958:	4299      	cmp	r1, r3
 801f95a:	d002      	beq.n	801f962 <__sflush_r+0x92>
 801f95c:	4628      	mov	r0, r5
 801f95e:	f7ff f9a3 	bl	801eca8 <_free_r>
 801f962:	2000      	movs	r0, #0
 801f964:	6360      	str	r0, [r4, #52]	; 0x34
 801f966:	e7c1      	b.n	801f8ec <__sflush_r+0x1c>
 801f968:	6a21      	ldr	r1, [r4, #32]
 801f96a:	2301      	movs	r3, #1
 801f96c:	4628      	mov	r0, r5
 801f96e:	47b0      	blx	r6
 801f970:	1c41      	adds	r1, r0, #1
 801f972:	d1c7      	bne.n	801f904 <__sflush_r+0x34>
 801f974:	682b      	ldr	r3, [r5, #0]
 801f976:	2b00      	cmp	r3, #0
 801f978:	d0c4      	beq.n	801f904 <__sflush_r+0x34>
 801f97a:	2b1d      	cmp	r3, #29
 801f97c:	d001      	beq.n	801f982 <__sflush_r+0xb2>
 801f97e:	2b16      	cmp	r3, #22
 801f980:	d101      	bne.n	801f986 <__sflush_r+0xb6>
 801f982:	602f      	str	r7, [r5, #0]
 801f984:	e7b1      	b.n	801f8ea <__sflush_r+0x1a>
 801f986:	89a3      	ldrh	r3, [r4, #12]
 801f988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f98c:	81a3      	strh	r3, [r4, #12]
 801f98e:	e7ad      	b.n	801f8ec <__sflush_r+0x1c>
 801f990:	690f      	ldr	r7, [r1, #16]
 801f992:	2f00      	cmp	r7, #0
 801f994:	d0a9      	beq.n	801f8ea <__sflush_r+0x1a>
 801f996:	0793      	lsls	r3, r2, #30
 801f998:	680e      	ldr	r6, [r1, #0]
 801f99a:	bf08      	it	eq
 801f99c:	694b      	ldreq	r3, [r1, #20]
 801f99e:	600f      	str	r7, [r1, #0]
 801f9a0:	bf18      	it	ne
 801f9a2:	2300      	movne	r3, #0
 801f9a4:	eba6 0807 	sub.w	r8, r6, r7
 801f9a8:	608b      	str	r3, [r1, #8]
 801f9aa:	f1b8 0f00 	cmp.w	r8, #0
 801f9ae:	dd9c      	ble.n	801f8ea <__sflush_r+0x1a>
 801f9b0:	6a21      	ldr	r1, [r4, #32]
 801f9b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f9b4:	4643      	mov	r3, r8
 801f9b6:	463a      	mov	r2, r7
 801f9b8:	4628      	mov	r0, r5
 801f9ba:	47b0      	blx	r6
 801f9bc:	2800      	cmp	r0, #0
 801f9be:	dc06      	bgt.n	801f9ce <__sflush_r+0xfe>
 801f9c0:	89a3      	ldrh	r3, [r4, #12]
 801f9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f9c6:	81a3      	strh	r3, [r4, #12]
 801f9c8:	f04f 30ff 	mov.w	r0, #4294967295
 801f9cc:	e78e      	b.n	801f8ec <__sflush_r+0x1c>
 801f9ce:	4407      	add	r7, r0
 801f9d0:	eba8 0800 	sub.w	r8, r8, r0
 801f9d4:	e7e9      	b.n	801f9aa <__sflush_r+0xda>
 801f9d6:	bf00      	nop
 801f9d8:	20400001 	.word	0x20400001

0801f9dc <_fflush_r>:
 801f9dc:	b538      	push	{r3, r4, r5, lr}
 801f9de:	690b      	ldr	r3, [r1, #16]
 801f9e0:	4605      	mov	r5, r0
 801f9e2:	460c      	mov	r4, r1
 801f9e4:	b913      	cbnz	r3, 801f9ec <_fflush_r+0x10>
 801f9e6:	2500      	movs	r5, #0
 801f9e8:	4628      	mov	r0, r5
 801f9ea:	bd38      	pop	{r3, r4, r5, pc}
 801f9ec:	b118      	cbz	r0, 801f9f6 <_fflush_r+0x1a>
 801f9ee:	6983      	ldr	r3, [r0, #24]
 801f9f0:	b90b      	cbnz	r3, 801f9f6 <_fflush_r+0x1a>
 801f9f2:	f7ff f85b 	bl	801eaac <__sinit>
 801f9f6:	4b14      	ldr	r3, [pc, #80]	; (801fa48 <_fflush_r+0x6c>)
 801f9f8:	429c      	cmp	r4, r3
 801f9fa:	d11b      	bne.n	801fa34 <_fflush_r+0x58>
 801f9fc:	686c      	ldr	r4, [r5, #4]
 801f9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d0ef      	beq.n	801f9e6 <_fflush_r+0xa>
 801fa06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fa08:	07d0      	lsls	r0, r2, #31
 801fa0a:	d404      	bmi.n	801fa16 <_fflush_r+0x3a>
 801fa0c:	0599      	lsls	r1, r3, #22
 801fa0e:	d402      	bmi.n	801fa16 <_fflush_r+0x3a>
 801fa10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa12:	f7ff f920 	bl	801ec56 <__retarget_lock_acquire_recursive>
 801fa16:	4628      	mov	r0, r5
 801fa18:	4621      	mov	r1, r4
 801fa1a:	f7ff ff59 	bl	801f8d0 <__sflush_r>
 801fa1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa20:	07da      	lsls	r2, r3, #31
 801fa22:	4605      	mov	r5, r0
 801fa24:	d4e0      	bmi.n	801f9e8 <_fflush_r+0xc>
 801fa26:	89a3      	ldrh	r3, [r4, #12]
 801fa28:	059b      	lsls	r3, r3, #22
 801fa2a:	d4dd      	bmi.n	801f9e8 <_fflush_r+0xc>
 801fa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa2e:	f7ff f914 	bl	801ec5a <__retarget_lock_release_recursive>
 801fa32:	e7d9      	b.n	801f9e8 <_fflush_r+0xc>
 801fa34:	4b05      	ldr	r3, [pc, #20]	; (801fa4c <_fflush_r+0x70>)
 801fa36:	429c      	cmp	r4, r3
 801fa38:	d101      	bne.n	801fa3e <_fflush_r+0x62>
 801fa3a:	68ac      	ldr	r4, [r5, #8]
 801fa3c:	e7df      	b.n	801f9fe <_fflush_r+0x22>
 801fa3e:	4b04      	ldr	r3, [pc, #16]	; (801fa50 <_fflush_r+0x74>)
 801fa40:	429c      	cmp	r4, r3
 801fa42:	bf08      	it	eq
 801fa44:	68ec      	ldreq	r4, [r5, #12]
 801fa46:	e7da      	b.n	801f9fe <_fflush_r+0x22>
 801fa48:	08021c2c 	.word	0x08021c2c
 801fa4c:	08021c4c 	.word	0x08021c4c
 801fa50:	08021c0c 	.word	0x08021c0c

0801fa54 <_lseek_r>:
 801fa54:	b538      	push	{r3, r4, r5, lr}
 801fa56:	4d07      	ldr	r5, [pc, #28]	; (801fa74 <_lseek_r+0x20>)
 801fa58:	4604      	mov	r4, r0
 801fa5a:	4608      	mov	r0, r1
 801fa5c:	4611      	mov	r1, r2
 801fa5e:	2200      	movs	r2, #0
 801fa60:	602a      	str	r2, [r5, #0]
 801fa62:	461a      	mov	r2, r3
 801fa64:	f7e2 fa36 	bl	8001ed4 <_lseek>
 801fa68:	1c43      	adds	r3, r0, #1
 801fa6a:	d102      	bne.n	801fa72 <_lseek_r+0x1e>
 801fa6c:	682b      	ldr	r3, [r5, #0]
 801fa6e:	b103      	cbz	r3, 801fa72 <_lseek_r+0x1e>
 801fa70:	6023      	str	r3, [r4, #0]
 801fa72:	bd38      	pop	{r3, r4, r5, pc}
 801fa74:	20011b08 	.word	0x20011b08

0801fa78 <__swhatbuf_r>:
 801fa78:	b570      	push	{r4, r5, r6, lr}
 801fa7a:	460e      	mov	r6, r1
 801fa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa80:	2900      	cmp	r1, #0
 801fa82:	b096      	sub	sp, #88	; 0x58
 801fa84:	4614      	mov	r4, r2
 801fa86:	461d      	mov	r5, r3
 801fa88:	da08      	bge.n	801fa9c <__swhatbuf_r+0x24>
 801fa8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801fa8e:	2200      	movs	r2, #0
 801fa90:	602a      	str	r2, [r5, #0]
 801fa92:	061a      	lsls	r2, r3, #24
 801fa94:	d410      	bmi.n	801fab8 <__swhatbuf_r+0x40>
 801fa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fa9a:	e00e      	b.n	801faba <__swhatbuf_r+0x42>
 801fa9c:	466a      	mov	r2, sp
 801fa9e:	f000 f86f 	bl	801fb80 <_fstat_r>
 801faa2:	2800      	cmp	r0, #0
 801faa4:	dbf1      	blt.n	801fa8a <__swhatbuf_r+0x12>
 801faa6:	9a01      	ldr	r2, [sp, #4]
 801faa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801faac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fab0:	425a      	negs	r2, r3
 801fab2:	415a      	adcs	r2, r3
 801fab4:	602a      	str	r2, [r5, #0]
 801fab6:	e7ee      	b.n	801fa96 <__swhatbuf_r+0x1e>
 801fab8:	2340      	movs	r3, #64	; 0x40
 801faba:	2000      	movs	r0, #0
 801fabc:	6023      	str	r3, [r4, #0]
 801fabe:	b016      	add	sp, #88	; 0x58
 801fac0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fac4 <__smakebuf_r>:
 801fac4:	898b      	ldrh	r3, [r1, #12]
 801fac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fac8:	079d      	lsls	r5, r3, #30
 801faca:	4606      	mov	r6, r0
 801facc:	460c      	mov	r4, r1
 801face:	d507      	bpl.n	801fae0 <__smakebuf_r+0x1c>
 801fad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fad4:	6023      	str	r3, [r4, #0]
 801fad6:	6123      	str	r3, [r4, #16]
 801fad8:	2301      	movs	r3, #1
 801fada:	6163      	str	r3, [r4, #20]
 801fadc:	b002      	add	sp, #8
 801fade:	bd70      	pop	{r4, r5, r6, pc}
 801fae0:	ab01      	add	r3, sp, #4
 801fae2:	466a      	mov	r2, sp
 801fae4:	f7ff ffc8 	bl	801fa78 <__swhatbuf_r>
 801fae8:	9900      	ldr	r1, [sp, #0]
 801faea:	4605      	mov	r5, r0
 801faec:	4630      	mov	r0, r6
 801faee:	f7ff f947 	bl	801ed80 <_malloc_r>
 801faf2:	b948      	cbnz	r0, 801fb08 <__smakebuf_r+0x44>
 801faf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801faf8:	059a      	lsls	r2, r3, #22
 801fafa:	d4ef      	bmi.n	801fadc <__smakebuf_r+0x18>
 801fafc:	f023 0303 	bic.w	r3, r3, #3
 801fb00:	f043 0302 	orr.w	r3, r3, #2
 801fb04:	81a3      	strh	r3, [r4, #12]
 801fb06:	e7e3      	b.n	801fad0 <__smakebuf_r+0xc>
 801fb08:	4b0d      	ldr	r3, [pc, #52]	; (801fb40 <__smakebuf_r+0x7c>)
 801fb0a:	62b3      	str	r3, [r6, #40]	; 0x28
 801fb0c:	89a3      	ldrh	r3, [r4, #12]
 801fb0e:	6020      	str	r0, [r4, #0]
 801fb10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb14:	81a3      	strh	r3, [r4, #12]
 801fb16:	9b00      	ldr	r3, [sp, #0]
 801fb18:	6163      	str	r3, [r4, #20]
 801fb1a:	9b01      	ldr	r3, [sp, #4]
 801fb1c:	6120      	str	r0, [r4, #16]
 801fb1e:	b15b      	cbz	r3, 801fb38 <__smakebuf_r+0x74>
 801fb20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb24:	4630      	mov	r0, r6
 801fb26:	f000 f83d 	bl	801fba4 <_isatty_r>
 801fb2a:	b128      	cbz	r0, 801fb38 <__smakebuf_r+0x74>
 801fb2c:	89a3      	ldrh	r3, [r4, #12]
 801fb2e:	f023 0303 	bic.w	r3, r3, #3
 801fb32:	f043 0301 	orr.w	r3, r3, #1
 801fb36:	81a3      	strh	r3, [r4, #12]
 801fb38:	89a0      	ldrh	r0, [r4, #12]
 801fb3a:	4305      	orrs	r5, r0
 801fb3c:	81a5      	strh	r5, [r4, #12]
 801fb3e:	e7cd      	b.n	801fadc <__smakebuf_r+0x18>
 801fb40:	0801ea45 	.word	0x0801ea45

0801fb44 <__malloc_lock>:
 801fb44:	4801      	ldr	r0, [pc, #4]	; (801fb4c <__malloc_lock+0x8>)
 801fb46:	f7ff b886 	b.w	801ec56 <__retarget_lock_acquire_recursive>
 801fb4a:	bf00      	nop
 801fb4c:	200119f5 	.word	0x200119f5

0801fb50 <__malloc_unlock>:
 801fb50:	4801      	ldr	r0, [pc, #4]	; (801fb58 <__malloc_unlock+0x8>)
 801fb52:	f7ff b882 	b.w	801ec5a <__retarget_lock_release_recursive>
 801fb56:	bf00      	nop
 801fb58:	200119f5 	.word	0x200119f5

0801fb5c <_read_r>:
 801fb5c:	b538      	push	{r3, r4, r5, lr}
 801fb5e:	4d07      	ldr	r5, [pc, #28]	; (801fb7c <_read_r+0x20>)
 801fb60:	4604      	mov	r4, r0
 801fb62:	4608      	mov	r0, r1
 801fb64:	4611      	mov	r1, r2
 801fb66:	2200      	movs	r2, #0
 801fb68:	602a      	str	r2, [r5, #0]
 801fb6a:	461a      	mov	r2, r3
 801fb6c:	f7e2 f952 	bl	8001e14 <_read>
 801fb70:	1c43      	adds	r3, r0, #1
 801fb72:	d102      	bne.n	801fb7a <_read_r+0x1e>
 801fb74:	682b      	ldr	r3, [r5, #0]
 801fb76:	b103      	cbz	r3, 801fb7a <_read_r+0x1e>
 801fb78:	6023      	str	r3, [r4, #0]
 801fb7a:	bd38      	pop	{r3, r4, r5, pc}
 801fb7c:	20011b08 	.word	0x20011b08

0801fb80 <_fstat_r>:
 801fb80:	b538      	push	{r3, r4, r5, lr}
 801fb82:	4d07      	ldr	r5, [pc, #28]	; (801fba0 <_fstat_r+0x20>)
 801fb84:	2300      	movs	r3, #0
 801fb86:	4604      	mov	r4, r0
 801fb88:	4608      	mov	r0, r1
 801fb8a:	4611      	mov	r1, r2
 801fb8c:	602b      	str	r3, [r5, #0]
 801fb8e:	f7e2 f986 	bl	8001e9e <_fstat>
 801fb92:	1c43      	adds	r3, r0, #1
 801fb94:	d102      	bne.n	801fb9c <_fstat_r+0x1c>
 801fb96:	682b      	ldr	r3, [r5, #0]
 801fb98:	b103      	cbz	r3, 801fb9c <_fstat_r+0x1c>
 801fb9a:	6023      	str	r3, [r4, #0]
 801fb9c:	bd38      	pop	{r3, r4, r5, pc}
 801fb9e:	bf00      	nop
 801fba0:	20011b08 	.word	0x20011b08

0801fba4 <_isatty_r>:
 801fba4:	b538      	push	{r3, r4, r5, lr}
 801fba6:	4d06      	ldr	r5, [pc, #24]	; (801fbc0 <_isatty_r+0x1c>)
 801fba8:	2300      	movs	r3, #0
 801fbaa:	4604      	mov	r4, r0
 801fbac:	4608      	mov	r0, r1
 801fbae:	602b      	str	r3, [r5, #0]
 801fbb0:	f7e2 f985 	bl	8001ebe <_isatty>
 801fbb4:	1c43      	adds	r3, r0, #1
 801fbb6:	d102      	bne.n	801fbbe <_isatty_r+0x1a>
 801fbb8:	682b      	ldr	r3, [r5, #0]
 801fbba:	b103      	cbz	r3, 801fbbe <_isatty_r+0x1a>
 801fbbc:	6023      	str	r3, [r4, #0]
 801fbbe:	bd38      	pop	{r3, r4, r5, pc}
 801fbc0:	20011b08 	.word	0x20011b08

0801fbc4 <_init>:
 801fbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbc6:	bf00      	nop
 801fbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbca:	bc08      	pop	{r3}
 801fbcc:	469e      	mov	lr, r3
 801fbce:	4770      	bx	lr

0801fbd0 <_fini>:
 801fbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbd2:	bf00      	nop
 801fbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbd6:	bc08      	pop	{r3}
 801fbd8:	469e      	mov	lr, r3
 801fbda:	4770      	bx	lr
